/*BEGIN_HEADER
*
* Copyright (C) 2020 Mahdi Safsafi.
*
* https://github.com/MahdiSafsafi/AMED
*
* See licence file 'LICENCE' for use and distribution rights.
*
*END_HEADER*/


/*===----------------------------------------------------------------------===*\
|*                                                                            *|
|*                Automatically generated file, do not edit!                  *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

static uint32_t x86_lookup(unsigned int index, unsigned int opcode)
{
  unsigned char a = (opcode >> 0 ) & 0xff;
  unsigned char b = (opcode >> 8 ) & 0xff;
  unsigned char c = (opcode >> 16) & 0xff;
  unsigned char d = (opcode >> 24) & 0xff;
  
  switch(index)
  {
  /* 0x00 */
  case 0:
    if (a & 0x01)
    {
      // TEMPLATE.ADD_mbrb::ADD
      // ADD REG:rw=$GPR8m   REG:r=$GPR8r;
      return 16 << 16 | 27;
    }
    else
    {
      // TEMPLATE.ADD_mbrb::ADDmb
      // ADD MEM:rw:u8=$mem8 REG:r=$GPR8r;
      return 16 << 16 | 28;
    }
  break;
  /* 0x01 */
  case 1:
    if (a & 0x01)
    {
      // TEMPLATE.ADD_mvrv::ADD
      // ADD REG:rw=$GPRvm   REG:r=$GPRvr;
      return 19 << 16 | 33;
    }
    else
    {
      // TEMPLATE.ADD_mvrv::ADDm
      // ADD MEM:rw:sx=$memv REG:r=$GPRvr;
      return 19 << 16 | 34;
    }
  break;
  /* 0x02 */
  case 2:
    if (a & 0x01)
    {
      // TEMPLATE.ADD_rbmb::ADD
      // ADD REG:rw=$GPR8r   REG:r=$GPR8m;
      return 22 << 16 | 39;
    }
    else
    {
      // TEMPLATE.ADD_rbmb::ADDmb
      // ADD REG:rw=$GPR8r   MEM:r:u8=$mem8;
      return 22 << 16 | 40;
    }
  break;
  /* 0x03 */
  case 3:
    if (a & 0x01)
    {
      // TEMPLATE.ADD_rvmv::ADD
      // ADD REG:rw=$GPRvr   REG:r=$GPRvm;
      return 23 << 16 | 41;
    }
    else
    {
      // TEMPLATE.ADD_rvmv::ADDm
      // ADD REG:rw=$GPRvr   MEM:r:sx=$memv;
      return 23 << 16 | 42;
    }
  break;
  /* 0x04 */
  case 4:
    // TEMPLATE.ADD_bsb::ADDib
    // ADD REG:rw=AL       IMM:s8=$simm8;
    return 15 << 16 | 26;
  break;
  /* 0x05 */
  case 5:
    // TEMPLATE.ADD_vsz::ADDi
    // ADD REG:rw=$AXv     IMM:sx=$simmz;
    return 24 << 16 | 43;
  break;
  /* 0x06 */
  case 6:
    // TEMPLATE.PUSH_w_1::PUSHm
    // PUSH REG:r=ES       REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 383 << 16 | 681;
  break;
  /* 0x07 */
  case 7:
    // TEMPLATE.POP_w_1::POPm
    // POP REG:w=ES       REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 362 << 16 | 657;
  break;
  /* 0x08 */
  case 8:
    if (a & 0x01)
    {
      // TEMPLATE.OR_mbrb::OR
      // OR REG:rw=$GPR8m   REG:r=$GPR8r;
      return 331 << 16 | 592;
    }
    else
    {
      // TEMPLATE.OR_mbrb::ORmb
      // OR MEM:rw:u8=$mem8 REG:r=$GPR8r;
      return 331 << 16 | 593;
    }
  break;
  /* 0x09 */
  case 9:
    if (a & 0x01)
    {
      // TEMPLATE.OR_mvrv::OR
      // OR REG:rw=$GPRvm   REG:r=$GPRvr;
      return 334 << 16 | 598;
    }
    else
    {
      // TEMPLATE.OR_mvrv::ORm
      // OR MEM:rw:sx=$memv REG:r=$GPRvr;
      return 334 << 16 | 599;
    }
  break;
  /* 0x0a */
  case 10:
    if (a & 0x01)
    {
      // TEMPLATE.OR_rbmb::OR
      // OR REG:rw=$GPR8r   REG:r=$GPR8m;
      return 337 << 16 | 604;
    }
    else
    {
      // TEMPLATE.OR_rbmb::ORmb
      // OR REG:rw=$GPR8r   MEM:r:u8=$mem8;
      return 337 << 16 | 605;
    }
  break;
  /* 0x0b */
  case 11:
    if (a & 0x01)
    {
      // TEMPLATE.OR_rvmv::OR
      // OR REG:rw=$GPRvr   REG:r=$GPRvm;
      return 338 << 16 | 606;
    }
    else
    {
      // TEMPLATE.OR_rvmv::ORm
      // OR REG:rw=$GPRvr   MEM:r:sx=$memv;
      return 338 << 16 | 607;
    }
  break;
  /* 0x0c */
  case 12:
    // TEMPLATE.OR_bub::ORib
    // OR REG:rw=AL       IMM:u8=$uimm8;
    return 330 << 16 | 591;
  break;
  /* 0x0d */
  case 13:
    // TEMPLATE.OR_vsz::ORi
    // OR REG:rw=$AXv     IMM:sx=$simmz;
    return 339 << 16 | 608;
  break;
  /* 0x0e */
  case 14:
    // TEMPLATE.PUSH_w_2::PUSHm
    // PUSH REG:r=CS       REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 384 << 16 | 682;
  break;
  /* invalid */
  case 15:
    return 0;
  /* 0x10 */
  case 16:
    if (a & 0x01)
    {
      // TEMPLATE.ADC_mbrb::ADC
      // ADC REG:rw=$GPR8m   REG:r=$GPR8r;
      return 5 << 16 | 5;
    }
    else
    {
      // TEMPLATE.ADC_mbrb::ADCmb
      // ADC MEM:rw:u8=$mem8 REG:r=$GPR8r;
      return 5 << 16 | 6;
    }
  break;
  /* 0x11 */
  case 17:
    if (a & 0x01)
    {
      // TEMPLATE.ADC_mvrv::ADC
      // ADC REG:rw=$GPRvm   REG:r=$GPRvr;
      return 8 << 16 | 11;
    }
    else
    {
      // TEMPLATE.ADC_mvrv::ADCm
      // ADC MEM:rw:sx=$memv REG:r=$GPRvr;
      return 8 << 16 | 12;
    }
  break;
  /* 0x12 */
  case 18:
    if (a & 0x01)
    {
      // TEMPLATE.ADC_rbmb::ADC
      // ADC REG:rw=$GPR8r   REG:r=$GPR8m;
      return 11 << 16 | 17;
    }
    else
    {
      // TEMPLATE.ADC_rbmb::ADCmb
      // ADC REG:rw=$GPR8r   MEM:r:u8=$mem8;
      return 11 << 16 | 18;
    }
  break;
  /* 0x13 */
  case 19:
    if (a & 0x01)
    {
      // TEMPLATE.ADC_rvmv::ADC
      // ADC REG:rw=$GPRvr   REG:r=$GPRvm;
      return 12 << 16 | 19;
    }
    else
    {
      // TEMPLATE.ADC_rvmv::ADCm
      // ADC REG:rw=$GPRvr   MEM:r:sx=$memv;
      return 12 << 16 | 20;
    }
  break;
  /* 0x14 */
  case 20:
    // TEMPLATE.ADC_bsb::ADCib
    // ADC REG:rw=AL       IMM:s8=$simm8;
    return 4 << 16 | 4;
  break;
  /* 0x15 */
  case 21:
    // TEMPLATE.ADC_vsz::ADCi
    // ADC REG:rw=$AXv     IMM:sx=$simmz;
    return 13 << 16 | 21;
  break;
  /* 0x16 */
  case 22:
    // TEMPLATE.PUSH_w_3::PUSHm
    // PUSH REG:r=SS       REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 385 << 16 | 683;
  break;
  /* 0x17 */
  case 23:
    // TEMPLATE.POP_w_2::POPm
    // POP REG:w=SS       REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 363 << 16 | 658;
  break;
  /* 0x18 */
  case 24:
    if (a & 0x01)
    {
      // TEMPLATE.SBB_mbrb::SBB
      // SBB REG:rw=$GPR8m   REG:r=$GPR8r;
      return 430 << 16 | 759;
    }
    else
    {
      // TEMPLATE.SBB_mbrb::SBBmb
      // SBB MEM:rw:u8=$mem8 REG:r=$GPR8r;
      return 430 << 16 | 760;
    }
  break;
  /* 0x19 */
  case 25:
    if (a & 0x01)
    {
      // TEMPLATE.SBB_mvrv::SBB
      // SBB REG:rw=$GPRvm   REG:r=$GPRvr;
      return 433 << 16 | 765;
    }
    else
    {
      // TEMPLATE.SBB_mvrv::SBBm
      // SBB MEM:rw:sx=$memv REG:r=$GPRvr;
      return 433 << 16 | 766;
    }
  break;
  /* 0x1a */
  case 26:
    if (a & 0x01)
    {
      // TEMPLATE.SBB_rbmb::SBB
      // SBB REG:rw=$GPR8r   REG:r=$GPR8m;
      return 436 << 16 | 771;
    }
    else
    {
      // TEMPLATE.SBB_rbmb::SBBmb
      // SBB REG:rw=$GPR8r   MEM:r:u8=$mem8;
      return 436 << 16 | 772;
    }
  break;
  /* 0x1b */
  case 27:
    if (a & 0x01)
    {
      // TEMPLATE.SBB_rvmv::SBB
      // SBB REG:rw=$GPRvr   REG:r=$GPRvm;
      return 437 << 16 | 773;
    }
    else
    {
      // TEMPLATE.SBB_rvmv::SBBm
      // SBB REG:rw=$GPRvr   MEM:r:sx=$memv;
      return 437 << 16 | 774;
    }
  break;
  /* 0x1c */
  case 28:
    // TEMPLATE.SBB_bsb::SBBib
    // SBB REG:rw=AL       IMM:s8=$simm8;
    return 429 << 16 | 758;
  break;
  /* 0x1d */
  case 29:
    // TEMPLATE.SBB_vsz::SBBi
    // SBB REG:rw=$AXv     IMM:sx=$simmz;
    return 438 << 16 | 775;
  break;
  /* 0x1e */
  case 30:
    // TEMPLATE.PUSH_w_4::PUSHm
    // PUSH REG:r=DS       REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 386 << 16 | 684;
  break;
  /* 0x1f */
  case 31:
    // TEMPLATE.POP_w_3::POPm
    // POP REG:w=DS       REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 364 << 16 | 659;
  break;
  /* 0x20 */
  case 32:
    if (a & 0x01)
    {
      // TEMPLATE.AND_mbrb::AND
      // AND REG:rw=$GPR8m   REG:r=$GPR8r;
      return 33 << 16 | 61;
    }
    else
    {
      // TEMPLATE.AND_mbrb::ANDmb
      // AND MEM:rw:u8=$mem8 REG:r=$GPR8r;
      return 33 << 16 | 62;
    }
  break;
  /* 0x21 */
  case 33:
    if (a & 0x01)
    {
      // TEMPLATE.AND_mvrv::AND
      // AND REG:rw=$GPRvm   REG:r=$GPRvr;
      return 36 << 16 | 67;
    }
    else
    {
      // TEMPLATE.AND_mvrv::ANDm
      // AND MEM:rw:sx=$memv REG:r=$GPRvr;
      return 36 << 16 | 68;
    }
  break;
  /* 0x22 */
  case 34:
    if (a & 0x01)
    {
      // TEMPLATE.AND_rbmb::AND
      // AND REG:rw=$GPR8r   REG:r=$GPR8m;
      return 39 << 16 | 73;
    }
    else
    {
      // TEMPLATE.AND_rbmb::ANDmb
      // AND REG:rw=$GPR8r   MEM:r:u8=$mem8;
      return 39 << 16 | 74;
    }
  break;
  /* 0x23 */
  case 35:
    if (a & 0x01)
    {
      // TEMPLATE.AND_rvmv::AND
      // AND REG:rw=$GPRvr   REG:r=$GPRvm;
      return 40 << 16 | 75;
    }
    else
    {
      // TEMPLATE.AND_rvmv::ANDm
      // AND REG:rw=$GPRvr   MEM:r:sx=$memv;
      return 40 << 16 | 76;
    }
  break;
  /* 0x24 */
  case 36:
    // TEMPLATE.AND_bsb::ANDib
    // AND REG:rw=AL       IMM:s8=$simm8;
    return 32 << 16 | 60;
  break;
  /* 0x25 */
  case 37:
    // TEMPLATE.AND_vsz::ANDi
    // AND REG:rw=$AXv     IMM:sx=$simmz;
    return 41 << 16 | 77;
  break;
  /* invalid */
  case 38:
    return 0;
  /* 0x27 */
  case 39:
    // TEMPLATE.DAA::DAA
    // DAA REG:SUPP:rw=AL;
    return 122 << 16 | 238;
  break;
  /* 0x28 */
  case 40:
    if (a & 0x01)
    {
      // TEMPLATE.SUB_mbrb::SUB
      // SUB REG:rw=$GPR8m   REG:r=$GPR8r;
      return 520 << 16 | 934;
    }
    else
    {
      // TEMPLATE.SUB_mbrb::SUBmb
      // SUB MEM:rw:u8=$mem8 REG:r=$GPR8r;
      return 520 << 16 | 935;
    }
  break;
  /* 0x29 */
  case 41:
    if (a & 0x01)
    {
      // TEMPLATE.SUB_mvrv::SUB
      // SUB REG:rw=$GPRvm   REG:r=$GPRvr;
      return 523 << 16 | 940;
    }
    else
    {
      // TEMPLATE.SUB_mvrv::SUBm
      // SUB MEM:rw:sx=$memv REG:r=$GPRvr;
      return 523 << 16 | 941;
    }
  break;
  /* 0x2a */
  case 42:
    if (a & 0x01)
    {
      // TEMPLATE.SUB_rbmb::SUB
      // SUB REG:rw=$GPR8r   REG:r=$GPR8m;
      return 526 << 16 | 946;
    }
    else
    {
      // TEMPLATE.SUB_rbmb::SUBmb
      // SUB REG:rw=$GPR8r   MEM:r:u8=$mem8;
      return 526 << 16 | 947;
    }
  break;
  /* 0x2b */
  case 43:
    if (a & 0x01)
    {
      // TEMPLATE.SUB_rvmv::SUB
      // SUB REG:rw=$GPRvr   REG:r=$GPRvm;
      return 527 << 16 | 948;
    }
    else
    {
      // TEMPLATE.SUB_rvmv::SUBm
      // SUB REG:rw=$GPRvr   MEM:r:sx=$memv;
      return 527 << 16 | 949;
    }
  break;
  /* 0x2c */
  case 44:
    // TEMPLATE.SUB_bsb::SUBib
    // SUB REG:rw=AL       IMM:s8=$simm8;
    return 519 << 16 | 933;
  break;
  /* 0x2d */
  case 45:
    // TEMPLATE.SUB_vsz::SUBi
    // SUB REG:rw=$AXv     IMM:sx=$simmz;
    return 528 << 16 | 950;
  break;
  /* invalid */
  case 46:
    return 0;
  /* 0x2f */
  case 47:
    // TEMPLATE.DAS::DAS
    // DAS REG:SUPP:rw=AL;
    return 123 << 16 | 239;
  break;
  /* 0x30 */
  case 48:
    if (a & 0x01)
    {
      // TEMPLATE.XOR_mbrb::XOR
      // XOR REG:rw=$GPR8m   REG:r=$GPR8r;
      return 566 << 16 | 1012;
    }
    else
    {
      // TEMPLATE.XOR_mbrb::XORmb
      // XOR MEM:rw:u8=$mem8 REG:r=$GPR8r;
      return 566 << 16 | 1013;
    }
  break;
  /* 0x31 */
  case 49:
    if (a & 0x01)
    {
      // TEMPLATE.XOR_mvrv::XOR
      // XOR REG:rw=$GPRvm   REG:r=$GPRvr;
      return 569 << 16 | 1018;
    }
    else
    {
      // TEMPLATE.XOR_mvrv::XORm
      // XOR MEM:rw:sx=$memv REG:r=$GPRvr;
      return 569 << 16 | 1019;
    }
  break;
  /* 0x32 */
  case 50:
    if (a & 0x01)
    {
      // TEMPLATE.XOR_rbmb::XOR
      // XOR REG:rw=$GPR8r   REG:r=$GPR8m;
      return 572 << 16 | 1024;
    }
    else
    {
      // TEMPLATE.XOR_rbmb::XORmb
      // XOR REG:rw=$GPR8r   MEM:r:u8=$mem8;
      return 572 << 16 | 1025;
    }
  break;
  /* 0x33 */
  case 51:
    if (a & 0x01)
    {
      // TEMPLATE.XOR_rvmv::XOR
      // XOR REG:rw=$GPRvr   REG:r=$GPRvm;
      return 573 << 16 | 1026;
    }
    else
    {
      // TEMPLATE.XOR_rvmv::XORm
      // XOR REG:rw=$GPRvr   MEM:r:sx=$memv;
      return 573 << 16 | 1027;
    }
  break;
  /* 0x34 */
  case 52:
    // TEMPLATE.XOR_bub::XORib
    // XOR REG:rw=AL       IMM:u8=$uimm8;
    return 565 << 16 | 1011;
  break;
  /* 0x35 */
  case 53:
    // TEMPLATE.XOR_vsz::XORi
    // XOR REG:rw=$AXv     IMM:sx=$simmz;
    return 574 << 16 | 1028;
  break;
  /* invalid */
  case 54:
    return 0;
  /* 0x37 */
  case 55:
    // TEMPLATE.AAA::AAA
    // AAA REG:SUPP:rw=AL REG:SUPP:rw=AH;
    return 0 << 16 | 0;
  break;
  /* 0x38 */
  case 56:
    if (a & 0x01)
    {
      // TEMPLATE.CMP_mbrb::CMP
      // CMP REG:r=$GPR8m   REG:r=$GPR8r;
      return 97 << 16 | 198;
    }
    else
    {
      // TEMPLATE.CMP_mbrb::CMPmb
      // CMP MEM:r:u8=$mem8 REG:r=$GPR8r;
      return 97 << 16 | 199;
    }
  break;
  /* 0x39 */
  case 57:
    if (a & 0x01)
    {
      // TEMPLATE.CMP_mvrv::CMP
      // CMP REG:r=$GPRvm   REG:r=$GPRvr;
      return 100 << 16 | 204;
    }
    else
    {
      // TEMPLATE.CMP_mvrv::CMPm
      // CMP MEM:r:sx=$memv REG:r=$GPRvr;
      return 100 << 16 | 205;
    }
  break;
  /* 0x3a */
  case 58:
    if (a & 0x01)
    {
      // TEMPLATE.CMP_rbmb::CMP
      // CMP REG:r=$GPR8r   REG:r=$GPR8m;
      return 103 << 16 | 210;
    }
    else
    {
      // TEMPLATE.CMP_rbmb::CMPmb
      // CMP REG:r=$GPR8r   MEM:r:u8=$mem8;
      return 103 << 16 | 211;
    }
  break;
  /* 0x3b */
  case 59:
    if (a & 0x01)
    {
      // TEMPLATE.CMP_rvmv::CMP
      // CMP REG:r=$GPRvr   REG:r=$GPRvm;
      return 104 << 16 | 212;
    }
    else
    {
      // TEMPLATE.CMP_rvmv::CMPm
      // CMP REG:r=$GPRvr   MEM:r:sx=$memv;
      return 104 << 16 | 213;
    }
  break;
  /* 0x3c */
  case 60:
    // TEMPLATE.CMP_bsb::CMPib
    // CMP REG:r=AL       IMM:s8=$simm8;
    return 96 << 16 | 197;
  break;
  /* 0x3d */
  case 61:
    // TEMPLATE.CMP_vsz::CMPi
    // CMP REG:r=$AXv     IMM:sx=$simmz;
    return 105 << 16 | 214;
  break;
  /* invalid */
  case 62:
    return 0;
  /* 0x3f */
  case 63:
    // TEMPLATE.AAS::AAS
    // AAS REG:SUPP:rw=AL REG:SUPP:rw=AH;
    return 3 << 16 | 3;
  break;
  /* 0x40 */
  case 64:
    // TEMPLATE.INC_ov_1::INC
    // INC REG:rw=$GPRvo;
    return 151 << 16 | 284;
  break;
  /* 0x41 */
  case 65:
    // TEMPLATE.INC_ov_2::INC
    // INC REG:rw=$GPRvo;
    return 152 << 16 | 285;
  break;
  /* 0x42 */
  case 66:
    // TEMPLATE.INC_ov_3::INC
    // INC REG:rw=$GPRvo;
    return 153 << 16 | 286;
  break;
  /* 0x43 */
  case 67:
    // TEMPLATE.INC_ov_4::INC
    // INC REG:rw=$GPRvo;
    return 154 << 16 | 287;
  break;
  /* 0x44 */
  case 68:
    // TEMPLATE.INC_ov_5::INC
    // INC REG:rw=$GPRvo;
    return 155 << 16 | 288;
  break;
  /* 0x45 */
  case 69:
    // TEMPLATE.INC_ov_6::INC
    // INC REG:rw=$GPRvo;
    return 156 << 16 | 289;
  break;
  /* 0x46 */
  case 70:
    // TEMPLATE.INC_ov_7::INC
    // INC REG:rw=$GPRvo;
    return 157 << 16 | 290;
  break;
  /* 0x47 */
  case 71:
    // TEMPLATE.INC_ov_8::INC
    // INC REG:rw=$GPRvo;
    return 158 << 16 | 291;
  break;
  /* 0x48 */
  case 72:
    // TEMPLATE.DEC_ov_1::DEC
    // DEC REG:rw=$GPRvo;
    return 126 << 16 | 244;
  break;
  /* 0x49 */
  case 73:
    // TEMPLATE.DEC_ov_2::DEC
    // DEC REG:rw=$GPRvo;
    return 127 << 16 | 245;
  break;
  /* 0x4a */
  case 74:
    // TEMPLATE.DEC_ov_3::DEC
    // DEC REG:rw=$GPRvo;
    return 128 << 16 | 246;
  break;
  /* 0x4b */
  case 75:
    // TEMPLATE.DEC_ov_4::DEC
    // DEC REG:rw=$GPRvo;
    return 129 << 16 | 247;
  break;
  /* 0x4c */
  case 76:
    // TEMPLATE.DEC_ov_5::DEC
    // DEC REG:rw=$GPRvo;
    return 130 << 16 | 248;
  break;
  /* 0x4d */
  case 77:
    // TEMPLATE.DEC_ov_6::DEC
    // DEC REG:rw=$GPRvo;
    return 131 << 16 | 249;
  break;
  /* 0x4e */
  case 78:
    // TEMPLATE.DEC_ov_7::DEC
    // DEC REG:rw=$GPRvo;
    return 132 << 16 | 250;
  break;
  /* 0x4f */
  case 79:
    // TEMPLATE.DEC_ov_8::DEC
    // DEC REG:rw=$GPRvo;
    return 133 << 16 | 251;
  break;
  /* 0x50 */
  case 80:
    // TEMPLATE.PUSH_ov_1::PUSHm
    // PUSH REG:r=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 373 << 16 | 671;
  break;
  /* 0x51 */
  case 81:
    // TEMPLATE.PUSH_ov_2::PUSHm
    // PUSH REG:r=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 374 << 16 | 672;
  break;
  /* 0x52 */
  case 82:
    // TEMPLATE.PUSH_ov_3::PUSHm
    // PUSH REG:r=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 375 << 16 | 673;
  break;
  /* 0x53 */
  case 83:
    // TEMPLATE.PUSH_ov_4::PUSHm
    // PUSH REG:r=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 376 << 16 | 674;
  break;
  /* 0x54 */
  case 84:
    // TEMPLATE.PUSH_ov_5::PUSHm
    // PUSH REG:r=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 377 << 16 | 675;
  break;
  /* 0x55 */
  case 85:
    // TEMPLATE.PUSH_ov_6::PUSHm
    // PUSH REG:r=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 378 << 16 | 676;
  break;
  /* 0x56 */
  case 86:
    // TEMPLATE.PUSH_ov_7::PUSHm
    // PUSH REG:r=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 379 << 16 | 677;
  break;
  /* 0x57 */
  case 87:
    // TEMPLATE.PUSH_ov_8::PUSHm
    // PUSH REG:r=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 380 << 16 | 678;
  break;
  /* 0x58 */
  case 88:
    // TEMPLATE.POP_ov_1::POPm
    // POP REG:w=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 354 << 16 | 649;
  break;
  /* 0x59 */
  case 89:
    // TEMPLATE.POP_ov_2::POPm
    // POP REG:w=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 355 << 16 | 650;
  break;
  /* 0x5a */
  case 90:
    // TEMPLATE.POP_ov_3::POPm
    // POP REG:w=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 356 << 16 | 651;
  break;
  /* 0x5b */
  case 91:
    // TEMPLATE.POP_ov_4::POPm
    // POP REG:w=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 357 << 16 | 652;
  break;
  /* 0x5c */
  case 92:
    // TEMPLATE.POP_ov_5::POPm
    // POP REG:w=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 358 << 16 | 653;
  break;
  /* 0x5d */
  case 93:
    // TEMPLATE.POP_ov_6::POPm
    // POP REG:w=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 359 << 16 | 654;
  break;
  /* 0x5e */
  case 94:
    // TEMPLATE.POP_ov_7::POPm
    // POP REG:w=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 360 << 16 | 655;
  break;
  /* 0x5f */
  case 95:
    // TEMPLATE.POP_ov_8::POPm
    // POP REG:w=$GPRvo   REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 361 << 16 | 656;
  break;
  /* 0x60 */
  case 96:
    if (b & 0x04)
    {
      // TEMPLATE.PUSHAD::PUSHADm
      // PUSHAD REG:SUPP:r=EAX REG:SUPP:r=ECX REG:SUPP:r=EDX REG:SUPP:r=EBX REG:SUPP:r=ESP REG:SUPP:r=EBP REG:SUPP:r=ESI REG:SUPP:r=EDI REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_X};
      return 390 << 16 | 688;
    }
    else
    {
      // TEMPLATE.PUSHA::PUSHAm
      // PUSHA  REG:SUPP:r=AX  REG:SUPP:r=CX  REG:SUPP:r=DX  REG:SUPP:r=BX  REG:SUPP:r=SP  REG:SUPP:r=BP  REG:SUPP:r=SI  REG:SUPP:r=DI  REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_X};
      return 389 << 16 | 687;
    }
  break;
  /* 0x61 */
  case 97:
    if (b & 0x04)
    {
      // TEMPLATE.POPAD::POPADm
      // POPAD REG:SUPP:w=EAX REG:SUPP:w=ECX REG:SUPP:w=EDX REG:SUPP:w=EBX REG:SUPP:w=EBP REG:SUPP:w=ESI REG:SUPP:w=EDI REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_X};
      return 368 << 16 | 663;
    }
    else
    {
      // TEMPLATE.POPA::POPAm
      // POPA  REG:SUPP:w=AX  REG:SUPP:w=CX  REG:SUPP:w=DX  REG:SUPP:w=BX  REG:SUPP:w=BP  REG:SUPP:w=SI  REG:SUPP:w=DI  REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_X};
      return 367 << 16 | 662;
    }
  break;
  /* 0x62 */
  case 98:
    if (b & 0x04)
    {
      // TEMPLATE.BOUND::BOUNDmq
      // BOUND REG:r=$GPRvr MEM:r:s32=$mem64;
      return 48 << 16 | 111;
    }
    else
    {
      // TEMPLATE.BOUND::BOUNDmd
      // BOUND REG:r=$GPRvr MEM:r:s16=$mem32;
      return 48 << 16 | 110;
    }
  break;
  /* 0x63 */
  case 99:
    if (a & 0x01)
    {
      if (c & 0x80)
      {
        // TEMPLATE.MOVSXD::MOVSXD
        // MOVSXD REG:w=$GPRvr REG:r=$GPRzm;
        return 286 << 16 | 501;
      }
      else
      {
        // TEMPLATE.ARPL::ARPL
        // ARPL REG:rw=$GPR16m    REG:r=$GPR16r;
        return 43 << 16 | 84;
      }
    }
    else
    {
      if (c & 0x80)
      {
        // TEMPLATE.MOVSXD::MOVSXDmd
        // MOVSXD REG:w=$GPRvr MEM:r:s32=$mem32;
        return 286 << 16 | 502;
      }
      else
      {
        // TEMPLATE.ARPL::ARPLmw
        // ARPL MEM:rw:s16=$mem16 REG:r=$GPR16r;
        return 43 << 16 | 85;
      }
    }
  break;
  /* invalid */
  case 100:
    return 0;
  /* invalid */
  case 101:
    return 0;
  /* invalid */
  case 102:
    return 0;
  /* invalid */
  case 103:
    return 0;
  /* 0x68 */
  case 104:
    // TEMPLATE.PUSH_sz::PUSHim
    // PUSH IMM:sx=$simmz  REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 382 << 16 | 680;
  break;
  /* 0x69 */
  case 105:
    if (a & 0x01)
    {
      // TEMPLATE.IMUL_rvmvsz::IMULi
      // IMUL REG:w=$GPRvr   REG:r=$GPRvm     IMM:sx=$simmz;
      return 144 << 16 | 270;
    }
    else
    {
      // TEMPLATE.IMUL_rvmvsz::IMULmi
      // IMUL REG:w=$GPRvr   MEM:r:sx=$memv   IMM:sx=$simmz;
      return 144 << 16 | 271;
    }
  break;
  /* 0x6a */
  case 106:
    // TEMPLATE.PUSH_sb::PUSHibm
    // PUSH IMM:s8=$simm8  REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 381 << 16 | 679;
  break;
  /* 0x6b */
  case 107:
    if (a & 0x01)
    {
      // TEMPLATE.IMUL_rvmvsb::IMULib
      // IMUL REG:w=$GPRvr   REG:r=$GPRvm     IMM:s8=$simm8;
      return 143 << 16 | 268;
    }
    else
    {
      // TEMPLATE.IMUL_rvmvsb::IMULmib
      // IMUL REG:w=$GPRvr   MEM:r:sx=$memv   IMM:s8=$simm8;
      return 143 << 16 | 269;
    }
  break;
  /* 0x6c */
  case 108:
    // the following switch contains 3 case.
    switch (b & 0x30)
    {
      case 0x00:
      {
        // TEMPLATE.INSB::INSBmb
        // INSB MEM:SUPP:w:u8={SEG:r=ES BASE:r=$DIa SZ=8}    REG:SUPP:r=DX;
        return 159 << 16 | 292;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.INSB::INSBmb
        // INSB MEM:SUPP:cw:u8={SEG:r=ES BASE:r=$DIa SZ=8}   REG:SUPP:r=DX REG:SUPP:rcw=$CXa;
        return 159 << 16 | 294;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.INSB::INSBmb
        // INSB MEM:SUPP:cw:u8={SEG:r=ES BASE:r=$DIa SZ=8}   REG:SUPP:r=DX REG:SUPP:rcw=$CXa;
        return 159 << 16 | 293;
        break;
      }
      default: break;
    }
  break;
  /* 0x6d */
  case 109:
    // the following switch contains 9 case.
    switch ((b & 0x3c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.INSD::INSDmd
        // INSD MEM:SUPP:w:s32={SEG:r=ES BASE:r=$DIa SZ=32}  REG:SUPP:r=DX;
        return 160 << 16 | 296;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.INSW::INSWmw
        // INSW MEM:SUPP:w:s16={SEG:r=ES BASE:r=$DIa SZ=16}  REG:SUPP:r=DX;
        return 161 << 16 | 301;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.INSD::INSDmd
        // INSD MEM:SUPP:w:s32={SEG:r=ES BASE:r=$DIa SZ=32}  REG:SUPP:r=DX;
        return 160 << 16 | 295;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.INSD::INSDmd
        // INSD MEM:SUPP:cw:s32={SEG:r=ES BASE:r=$DIa SZ=32} REG:SUPP:r=DX REG:SUPP:rcw=$CXa;
        return 160 << 16 | 300;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.INSW::INSWmw
        // INSW MEM:SUPP:cw:s16={SEG:r=ES BASE:r=$DIa SZ=16} REG:SUPP:r=DX REG:SUPP:rcw=$CXa;
        return 161 << 16 | 303;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.INSD::INSDmd
        // INSD MEM:SUPP:cw:s32={SEG:r=ES BASE:r=$DIa SZ=32} REG:SUPP:r=DX REG:SUPP:rcw=$CXa;
        return 160 << 16 | 299;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.INSD::INSDmd
        // INSD MEM:SUPP:cw:s32={SEG:r=ES BASE:r=$DIa SZ=32} REG:SUPP:r=DX REG:SUPP:rcw=$CXa;
        return 160 << 16 | 298;
        break;
      }
      case 0x24:
      {
        // TEMPLATE.INSW::INSWmw
        // INSW MEM:SUPP:cw:s16={SEG:r=ES BASE:r=$DIa SZ=16} REG:SUPP:r=DX REG:SUPP:rcw=$CXa;
        return 161 << 16 | 302;
        break;
      }
      case 0x28:
      {
        // TEMPLATE.INSD::INSDmd
        // INSD MEM:SUPP:cw:s32={SEG:r=ES BASE:r=$DIa SZ=32} REG:SUPP:r=DX REG:SUPP:rcw=$CXa;
        return 160 << 16 | 297;
        break;
      }
      default: break;
    }
  break;
  /* 0x6e */
  case 110:
    // the following switch contains 3 case.
    switch (b & 0x30)
    {
      case 0x00:
      {
        // TEMPLATE.OUTSB::OUTSBmb
        // OUTSB REG:SUPP:r=DX MEM:SUPP:r:u8={SEG:r=DS BASE:r=$SIa SZ=8};
        return 344 << 16 | 617;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.OUTSB::OUTSBmb
        // OUTSB REG:SUPP:r=DX MEM:SUPP:cr:u8={SEG:r=DS BASE:r=$SIa SZ=8}   REG:SUPP:rcw=$CXa;
        return 344 << 16 | 619;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.OUTSB::OUTSBmb
        // OUTSB REG:SUPP:r=DX MEM:SUPP:cr:u8={SEG:r=DS BASE:r=$SIa SZ=8}   REG:SUPP:rcw=$CXa;
        return 344 << 16 | 618;
        break;
      }
      default: break;
    }
  break;
  /* 0x6f */
  case 111:
    // the following switch contains 9 case.
    switch ((b & 0x3c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.OUTSD::OUTSDmd
        // OUTSD REG:SUPP:r=DX MEM:SUPP:r:s32={SEG:r=DS BASE:r=$SIa SZ=32};
        return 345 << 16 | 621;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.OUTSW::OUTSWmw
        // OUTSW REG:SUPP:r=DX MEM:SUPP:r:s16={SEG:r=DS BASE:r=$SIa SZ=16};
        return 346 << 16 | 626;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.OUTSD::OUTSDmd
        // OUTSD REG:SUPP:r=DX MEM:SUPP:r:s32={SEG:r=DS BASE:r=$SIa SZ=32};
        return 345 << 16 | 620;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.OUTSD::OUTSDmd
        // OUTSD REG:SUPP:r=DX MEM:SUPP:cr:s32={SEG:r=DS BASE:r=$SIa SZ=32} REG:SUPP:rcw=$CXa;
        return 345 << 16 | 625;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.OUTSW::OUTSWmw
        // OUTSW REG:SUPP:r=DX MEM:SUPP:cr:s16={SEG:r=DS BASE:r=$SIa SZ=16} REG:SUPP:rcw=$CXa;
        return 346 << 16 | 628;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.OUTSD::OUTSDmd
        // OUTSD REG:SUPP:r=DX MEM:SUPP:cr:s32={SEG:r=DS BASE:r=$SIa SZ=32} REG:SUPP:rcw=$CXa;
        return 345 << 16 | 624;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.OUTSD::OUTSDmd
        // OUTSD REG:SUPP:r=DX MEM:SUPP:cr:s32={SEG:r=DS BASE:r=$SIa SZ=32} REG:SUPP:rcw=$CXa;
        return 345 << 16 | 623;
        break;
      }
      case 0x24:
      {
        // TEMPLATE.OUTSW::OUTSWmw
        // OUTSW REG:SUPP:r=DX MEM:SUPP:cr:s16={SEG:r=DS BASE:r=$SIa SZ=16} REG:SUPP:rcw=$CXa;
        return 346 << 16 | 627;
        break;
      }
      case 0x28:
      {
        // TEMPLATE.OUTSD::OUTSDmd
        // OUTSD REG:SUPP:r=DX MEM:SUPP:cr:s32={SEG:r=DS BASE:r=$SIa SZ=32} REG:SUPP:rcw=$CXa;
        return 345 << 16 | 622;
        break;
      }
      default: break;
    }
  break;
  /* 0x70 */
  case 112:
    if (c & 0x80)
    {
      // TEMPLATE.JO_s8::JO
      // JO    REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 214 << 16 | 386;
    }
    else
    {
      // TEMPLATE.JO_s8::JO
      // JO    REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 214 << 16 | 387;
    }
  break;
  /* 0x71 */
  case 113:
    if (c & 0x80)
    {
      // TEMPLATE.JNO_s8::JNO
      // JNO   REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 202 << 16 | 366;
    }
    else
    {
      // TEMPLATE.JNO_s8::JNO
      // JNO   REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 202 << 16 | 367;
    }
  break;
  /* 0x72 */
  case 114:
    if (c & 0x80)
    {
      // TEMPLATE.JB_s8::JB
      // JB    REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 179 << 16 | 327;
    }
    else
    {
      // TEMPLATE.JB_s8::JB
      // JB    REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 179 << 16 | 328;
    }
  break;
  /* 0x73 */
  case 115:
    if (c & 0x80)
    {
      // TEMPLATE.JNB_s8::JNB
      // JNB   REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 193 << 16 | 351;
    }
    else
    {
      // TEMPLATE.JNB_s8::JNB
      // JNB   REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 193 << 16 | 352;
    }
  break;
  /* 0x74 */
  case 116:
    // the following switch contains 3 case.
    switch (c & 0x81)
    {
      case 0x00:
      {
        // TEMPLATE.JZ_s8::JZ
        // JZ    REL:s8=$rel8   REG:SUPP:rw=EIP;
        return 224 << 16 | 404;
        break;
      }
      case 0x80:
      {
        // TEMPLATE.JZ_s8::JZ
        // JZ    REL:s8=$rel8   REG:SUPP:rw=RIP;
        return 224 << 16 | 403;
        break;
      }
      case 0x81:
      {
        // TEMPLATE.JKZD_s8::JKZD
        // JKZD REG:w=$Kn REL:s8=$rel8;
        return 3271 << 16 | 6795;
        break;
      }
      default: break;
    }
  break;
  /* 0x75 */
  case 117:
    // the following switch contains 3 case.
    switch (c & 0x81)
    {
      case 0x00:
      {
        // TEMPLATE.JNZ_s8::JNZ
        // JNZ   REL:s8=$rel8   REG:SUPP:rw=EIP;
        return 211 << 16 | 382;
        break;
      }
      case 0x80:
      {
        // TEMPLATE.JNZ_s8::JNZ
        // JNZ   REL:s8=$rel8   REG:SUPP:rw=RIP;
        return 211 << 16 | 381;
        break;
      }
      case 0x81:
      {
        // TEMPLATE.JKNZD_s8::JKNZD
        // JKNZD REG:w=$Kn REL:s8=$rel8;
        return 3269 << 16 | 6793;
        break;
      }
      default: break;
    }
  break;
  /* 0x76 */
  case 118:
    if (c & 0x80)
    {
      // TEMPLATE.JBE_s8::JBE
      // JBE   REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 176 << 16 | 322;
    }
    else
    {
      // TEMPLATE.JBE_s8::JBE
      // JBE   REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 176 << 16 | 323;
    }
  break;
  /* 0x77 */
  case 119:
    if (c & 0x80)
    {
      // TEMPLATE.JNBE_s8::JNBE
      // JNBE  REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 190 << 16 | 346;
    }
    else
    {
      // TEMPLATE.JNBE_s8::JNBE
      // JNBE  REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 190 << 16 | 347;
    }
  break;
  /* 0x78 */
  case 120:
    if (c & 0x80)
    {
      // TEMPLATE.JS_s8::JS
      // JS    REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 221 << 16 | 398;
    }
    else
    {
      // TEMPLATE.JS_s8::JS
      // JS    REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 221 << 16 | 399;
    }
  break;
  /* 0x79 */
  case 121:
    if (c & 0x80)
    {
      // TEMPLATE.JNS_s8::JNS
      // JNS   REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 208 << 16 | 376;
    }
    else
    {
      // TEMPLATE.JNS_s8::JNS
      // JNS   REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 208 << 16 | 377;
    }
  break;
  /* 0x7a */
  case 122:
    if (c & 0x80)
    {
      // TEMPLATE.JP_s8::JP
      // JP    REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 217 << 16 | 391;
    }
    else
    {
      // TEMPLATE.JP_s8::JP
      // JP    REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 217 << 16 | 392;
    }
  break;
  /* 0x7b */
  case 123:
    if (c & 0x80)
    {
      // TEMPLATE.JNP_s8::JNP
      // JNP   REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 205 << 16 | 371;
    }
    else
    {
      // TEMPLATE.JNP_s8::JNP
      // JNP   REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 205 << 16 | 372;
    }
  break;
  /* 0x7c */
  case 124:
    if (c & 0x80)
    {
      // TEMPLATE.JL_s8::JL
      // JL    REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 187 << 16 | 341;
    }
    else
    {
      // TEMPLATE.JL_s8::JL
      // JL    REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 187 << 16 | 342;
    }
  break;
  /* 0x7d */
  case 125:
    if (c & 0x80)
    {
      // TEMPLATE.JNL_s8::JNL
      // JNL   REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 199 << 16 | 361;
    }
    else
    {
      // TEMPLATE.JNL_s8::JNL
      // JNL   REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 199 << 16 | 362;
    }
  break;
  /* 0x7e */
  case 126:
    if (c & 0x80)
    {
      // TEMPLATE.JLE_s8::JLE
      // JLE   REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 184 << 16 | 336;
    }
    else
    {
      // TEMPLATE.JLE_s8::JLE
      // JLE   REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 184 << 16 | 337;
    }
  break;
  /* 0x7f */
  case 127:
    if (c & 0x80)
    {
      // TEMPLATE.JNLE_s8::JNLE
      // JNLE  REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 196 << 16 | 356;
    }
    else
    {
      // TEMPLATE.JNLE_s8::JNLE
      // JNLE  REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 196 << 16 | 357;
    }
  break;
  /* 0x80 */
  case 128:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.ADD_mbsb_1::ADDmbib
        // ADD MEM:rw:u8=$mem8 IMM:s8=$simm8;
        return 17 << 16 | 30;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.ADD_mbsb_1::ADDib
        // ADD REG:rw=$GPR8m   IMM:u8=$uimm8;
        return 17 << 16 | 29;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.OR_mbsb_1::ORmbib
        // OR MEM:rw:u8=$mem8 IMM:s8=$simm8;
        return 332 << 16 | 595;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.OR_mbsb_1::ORib
        // OR REG:rw=$GPR8m   IMM:s8=$simm8;
        return 332 << 16 | 594;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.ADC_mbsb_1::ADCmbib
        // ADC MEM:rw:u8=$mem8 IMM:s8=$simm8;
        return 6 << 16 | 8;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.ADC_mbsb_1::ADCib
        // ADC REG:rw=$GPR8m   IMM:s8=$simm8;
        return 6 << 16 | 7;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.SBB_mbsb_1::SBBmbib
        // SBB MEM:rw:u8=$mem8 IMM:s8=$simm8;
        return 431 << 16 | 762;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.SBB_mbsb_1::SBBib
        // SBB REG:rw=$GPR8m   IMM:s8=$simm8;
        return 431 << 16 | 761;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.AND_mbub_1::ANDmbib
        // AND MEM:rw:u8=$mem8 IMM:u8=$uimm8;
        return 34 << 16 | 64;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.AND_mbub_1::ANDib
        // AND REG:rw=$GPR8m   IMM:u8=$uimm8;
        return 34 << 16 | 63;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.SUB_mbsb_1::SUBmbib
        // SUB MEM:rw:u8=$mem8 IMM:s8=$simm8;
        return 521 << 16 | 937;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.SUB_mbsb_1::SUBib
        // SUB REG:rw=$GPR8m   IMM:s8=$simm8;
        return 521 << 16 | 936;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.XOR_mbub_1::XORmbib
        // XOR MEM:rw:u8=$mem8 IMM:u8=$uimm8;
        return 567 << 16 | 1015;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.XOR_mbub_1::XORib
        // XOR REG:rw=$GPR8m   IMM:u8=$uimm8;
        return 567 << 16 | 1014;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.CMP_mbsb_1::CMPmbib
        // CMP MEM:r:u8=$mem8 IMM:s8=$simm8;
        return 98 << 16 | 201;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.CMP_mbsb_1::CMPib
        // CMP REG:r=$GPR8m   IMM:s8=$simm8;
        return 98 << 16 | 200;
        break;
      }
      default: break;
    }
  break;
  /* 0x81 */
  case 129:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.ADD_mvsz::ADDmi
        // ADD MEM:rw:sx=$memv IMM:sx=$simmz;
        return 21 << 16 | 38;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.ADD_mvsz::ADDi
        // ADD REG:rw=$GPRvm   IMM:sx=$simmz;
        return 21 << 16 | 37;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.OR_mvsz::ORmi
        // OR MEM:rw:sx=$memv IMM:sx=$simmz;
        return 336 << 16 | 603;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.OR_mvsz::ORi
        // OR REG:rw=$GPRvm   IMM:sx=$simmz;
        return 336 << 16 | 602;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.ADC_mvsz::ADCmi
        // ADC MEM:rw:sx=$memv IMM:sx=$simmz;
        return 10 << 16 | 16;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.ADC_mvsz::ADCi
        // ADC REG:rw=$GPRvm   IMM:sx=$simmz;
        return 10 << 16 | 15;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.SBB_mvsz::SBBmi
        // SBB MEM:rw:sx=$memv IMM:sx=$simmz;
        return 435 << 16 | 770;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.SBB_mvsz::SBBi
        // SBB REG:rw=$GPRvm   IMM:sx=$simmz;
        return 435 << 16 | 769;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.AND_mvsz::ANDmi
        // AND MEM:rw:sx=$memv IMM:sx=$simmz;
        return 38 << 16 | 72;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.AND_mvsz::ANDi
        // AND REG:rw=$GPRvm   IMM:sx=$simmz;
        return 38 << 16 | 71;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.SUB_mvsz::SUBmi
        // SUB MEM:rw:sx=$memv IMM:sx=$simmz;
        return 525 << 16 | 945;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.SUB_mvsz::SUBi
        // SUB REG:rw=$GPRvm   IMM:sx=$simmz;
        return 525 << 16 | 944;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.XOR_mvsz::XORmi
        // XOR MEM:rw:sx=$memv IMM:sx=$simmz;
        return 571 << 16 | 1023;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.XOR_mvsz::XORi
        // XOR REG:rw=$GPRvm   IMM:sx=$simmz;
        return 571 << 16 | 1022;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.CMP_mvsz::CMPmi
        // CMP MEM:r:sx=$memv IMM:sx=$simmz;
        return 102 << 16 | 209;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.CMP_mvsz::CMPi
        // CMP REG:r=$GPRvm   IMM:sx=$simmz;
        return 102 << 16 | 208;
        break;
      }
      default: break;
    }
  break;
  /* 0x82 */
  case 130:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.ADD_mbsb_2::ADDmbib
        // ADD MEM:rw:u8=$mem8 IMM:s8=$simm8;
        return 18 << 16 | 32;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.ADD_mbsb_2::ADDib
        // ADD REG:rw=$GPR8m   IMM:s8=$simm8;
        return 18 << 16 | 31;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.OR_mbsb_2::ORmbib
        // OR MEM:rw:u8=$mem8 IMM:s8=$simm8;
        return 333 << 16 | 597;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.OR_mbsb_2::ORib
        // OR REG:rw=$GPR8m   IMM:s8=$simm8;
        return 333 << 16 | 596;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.ADC_mbsb_2::ADCmbib
        // ADC MEM:rw:u8=$mem8 IMM:s8=$simm8;
        return 7 << 16 | 10;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.ADC_mbsb_2::ADCib
        // ADC REG:rw=$GPR8m   IMM:s8=$simm8;
        return 7 << 16 | 9;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.SBB_mbsb_2::SBBmbib
        // SBB MEM:rw:u8=$mem8 IMM:s8=$simm8;
        return 432 << 16 | 764;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.SBB_mbsb_2::SBBib
        // SBB REG:rw=$GPR8m   IMM:s8=$simm8;
        return 432 << 16 | 763;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.AND_mbub_2::ANDmbib
        // AND MEM:rw:u8=$mem8 IMM:u8=$uimm8;
        return 35 << 16 | 66;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.AND_mbub_2::ANDib
        // AND REG:rw=$GPR8m   IMM:u8=$uimm8;
        return 35 << 16 | 65;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.SUB_mbsb_2::SUBmbib
        // SUB MEM:rw:u8=$mem8 IMM:s8=$simm8;
        return 522 << 16 | 939;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.SUB_mbsb_2::SUBib
        // SUB REG:rw=$GPR8m   IMM:s8=$simm8;
        return 522 << 16 | 938;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.XOR_mbub_2::XORmbib
        // XOR MEM:rw:u8=$mem8 IMM:u8=$uimm8;
        return 568 << 16 | 1017;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.XOR_mbub_2::XORib
        // XOR REG:rw=$GPR8m   IMM:u8=$uimm8;
        return 568 << 16 | 1016;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.CMP_mbsb_2::CMPmbib
        // CMP MEM:r:u8=$mem8 IMM:s8=$simm8;
        return 99 << 16 | 203;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.CMP_mbsb_2::CMPib
        // CMP REG:r=$GPR8m   IMM:s8=$simm8;
        return 99 << 16 | 202;
        break;
      }
      default: break;
    }
  break;
  /* 0x83 */
  case 131:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.ADD_mvsb::ADDmib
        // ADD MEM:rw:sx=$memv IMM:s8=$simm8;
        return 20 << 16 | 36;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.ADD_mvsb::ADDib
        // ADD REG:rw=$GPRvm   IMM:s8=$simm8;
        return 20 << 16 | 35;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.OR_mvsb::ORmib
        // OR MEM:rw:sx=$memv IMM:s8=$simm8;
        return 335 << 16 | 601;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.OR_mvsb::ORib
        // OR REG:rw=$GPRvm   IMM:s8=$simm8;
        return 335 << 16 | 600;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.ADC_mvsb::ADCmib
        // ADC MEM:rw:sx=$memv IMM:s8=$simm8;
        return 9 << 16 | 14;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.ADC_mvsb::ADCib
        // ADC REG:rw=$GPRvm   IMM:s8=$simm8;
        return 9 << 16 | 13;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.SBB_mvsb::SBBmib
        // SBB MEM:rw:sx=$memv IMM:s8=$simm8;
        return 434 << 16 | 768;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.SBB_mvsb::SBBib
        // SBB REG:rw=$GPRvm   IMM:s8=$simm8;
        return 434 << 16 | 767;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.AND_mvsb::ANDmib
        // AND MEM:rw:sx=$memv IMM:s8=$simm8;
        return 37 << 16 | 70;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.AND_mvsb::ANDib
        // AND REG:rw=$GPRvm   IMM:s8=$simm8;
        return 37 << 16 | 69;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.SUB_mvsb::SUBmib
        // SUB MEM:rw:sx=$memv IMM:s8=$simm8;
        return 524 << 16 | 943;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.SUB_mvsb::SUBib
        // SUB REG:rw=$GPRvm   IMM:s8=$simm8;
        return 524 << 16 | 942;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.XOR_mvsb::XORmib
        // XOR MEM:rw:sx=$memv IMM:s8=$simm8;
        return 570 << 16 | 1021;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.XOR_mvsb::XORib
        // XOR REG:rw=$GPRvm   IMM:s8=$simm8;
        return 570 << 16 | 1020;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.CMP_mvsb::CMPmib
        // CMP MEM:r:sx=$memv IMM:s8=$simm8;
        return 101 << 16 | 207;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.CMP_mvsb::CMPib
        // CMP REG:r=$GPRvm   IMM:s8=$simm8;
        return 101 << 16 | 206;
        break;
      }
      default: break;
    }
  break;
  /* 0x84 */
  case 132:
    if (a & 0x01)
    {
      // TEMPLATE.TEST_mbrb::TEST
      // TEST REG:r=$GPR8m   REG:r=$GPR8r;
      return 535 << 16 | 960;
    }
    else
    {
      // TEMPLATE.TEST_mbrb::TESTmb
      // TEST MEM:r:u8=$mem8 REG:r=$GPR8r;
      return 535 << 16 | 961;
    }
  break;
  /* 0x85 */
  case 133:
    if (a & 0x01)
    {
      // TEMPLATE.TEST_mvrv::TEST
      // TEST REG:r=$GPRvm   REG:r=$GPRvr;
      return 538 << 16 | 966;
    }
    else
    {
      // TEMPLATE.TEST_mvrv::TESTm
      // TEST MEM:r:sx=$memv REG:r=$GPRvr;
      return 538 << 16 | 967;
    }
  break;
  /* 0x86 */
  case 134:
    if (a & 0x01)
    {
      // TEMPLATE.XCHG_mbrb::XCHG
      // XCHG REG:rw=$GPR8m   REG:rw=$GPR8r;
      return 554 << 16 | 998;
    }
    else
    {
      // TEMPLATE.XCHG_mbrb::XCHGmb
      // XCHG MEM:rw:u8=$mem8 REG:rw=$GPR8r;
      return 554 << 16 | 999;
    }
  break;
  /* 0x87 */
  case 135:
    if (a & 0x01)
    {
      // TEMPLATE.XCHG_mvrv::XCHG
      // XCHG REG:rw=$GPRvm   REG:rw=$GPRvr;
      return 555 << 16 | 1000;
    }
    else
    {
      // TEMPLATE.XCHG_mvrv::XCHGm
      // XCHG MEM:rw:sx=$memv REG:rw=$GPRvr;
      return 555 << 16 | 1001;
    }
  break;
  /* 0x88 */
  case 136:
    if (a & 0x01)
    {
      // TEMPLATE.MOV_mbrb::MOV
      // MOV REG:w=$GPR8m       REG:r=$GPR8r;
      return 251 << 16 | 448;
    }
    else
    {
      // TEMPLATE.MOV_mbrb::MOVmb
      // MOV MEM:w:u8=$mem8     REG:r=$GPR8r;
      return 251 << 16 | 449;
    }
  break;
  /* 0x89 */
  case 137:
    if (a & 0x01)
    {
      // TEMPLATE.MOV_mvrv::MOV
      // MOV REG:w=$GPRvm       REG:r=$GPRvr;
      return 253 << 16 | 452;
    }
    else
    {
      // TEMPLATE.MOV_mvrv::MOVm
      // MOV MEM:w:sx=$memv     REG:r=$GPRvr;
      return 253 << 16 | 453;
    }
  break;
  /* 0x8a */
  case 138:
    if (a & 0x01)
    {
      // TEMPLATE.MOV_rbmb::MOV
      // MOV REG:w=$GPR8r       REG:r=$GPR8m;
      return 272 << 16 | 474;
    }
    else
    {
      // TEMPLATE.MOV_rbmb::MOVmb
      // MOV REG:w=$GPR8r       MEM:r:u8=$mem8;
      return 272 << 16 | 475;
    }
  break;
  /* 0x8b */
  case 139:
    if (a & 0x01)
    {
      // TEMPLATE.MOV_rvmv::MOV
      // MOV REG:w=$GPRvr       REG:r=$GPRvm;
      return 273 << 16 | 476;
    }
    else
    {
      // TEMPLATE.MOV_rvmv::MOVm
      // MOV REG:w=$GPRvr       MEM:r:sx=$memv;
      return 273 << 16 | 477;
    }
  break;
  /* 0x8c */
  case 140:
    if (a & 0x01)
    {
      // TEMPLATE.MOV_mxrw::MOV
      // MOV REG:w=$GPRvm       REG:r=$SRr;
      return 255 << 16 | 456;
    }
    else
    {
      // TEMPLATE.MOV_mxrw::MOVmw
      // MOV MEM:w:s16=$mem16   REG:r=$SRr;
      return 255 << 16 | 457;
    }
  break;
  /* 0x8d */
  case 141:
    // TEMPLATE.LEA::LEA
    // LEA REG:w=$GPRvr AGEN:r=$agen;
    return 229 << 16 | 411;
  break;
  /* 0x8e */
  case 142:
    if (a & 0x01)
    {
      // TEMPLATE.MOV_rwmw::MOV
      // MOV REG:w=$SRr         REG:r=$GPR16m;
      return 274 << 16 | 478;
    }
    else
    {
      // TEMPLATE.MOV_rwmw::MOVmw
      // MOV REG:w=$SRr         MEM:r:s16=$mem16;
      return 274 << 16 | 479;
    }
  break;
  /* 0x8f */
  case 143:
    if (a & 0x01)
    {
      // TEMPLATE.POP_mv::POPm
      // POP REG:w=$GPRvm   REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
      return 353 << 16 | 647;
    }
    else
    {
      // TEMPLATE.POP_mv::POPm
      // POP MEM:w:sx=$memv REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
      return 353 << 16 | 648;
    }
  break;
  /* 0x90 */
  case 144:
    if (b & 0x20)
    {
      // TEMPLATE.PAUSE::PAUSE
      // PAUSE;
      return 347 << 16 | 629;
    }
    else
    {
      if (b & 0x80)
      {
        // TEMPLATE.XCHG_ovv_1::XCHG
        // XCHG REG:rw=$GPRvo   REG:rw=$AXv;
        return 556 << 16 | 1002;
      }
      else
      {
        // TEMPLATE.NOP::NOP
        // NOP;
        return 300 << 16 | 533;
      }
    }
  break;
  /* 0x91 */
  case 145:
    // TEMPLATE.XCHG_ovv_2::XCHG
    // XCHG REG:rw=$GPRvo   REG:rw=$AXv;
    return 557 << 16 | 1003;
  break;
  /* 0x92 */
  case 146:
    // TEMPLATE.XCHG_ovv_3::XCHG
    // XCHG REG:rw=$GPRvo   REG:rw=$AXv;
    return 558 << 16 | 1004;
  break;
  /* 0x93 */
  case 147:
    // TEMPLATE.XCHG_ovv_4::XCHG
    // XCHG REG:rw=$GPRvo   REG:rw=$AXv;
    return 559 << 16 | 1005;
  break;
  /* 0x94 */
  case 148:
    // TEMPLATE.XCHG_ovv_5::XCHG
    // XCHG REG:rw=$GPRvo   REG:rw=$AXv;
    return 560 << 16 | 1006;
  break;
  /* 0x95 */
  case 149:
    // TEMPLATE.XCHG_ovv_6::XCHG
    // XCHG REG:rw=$GPRvo   REG:rw=$AXv;
    return 561 << 16 | 1007;
  break;
  /* 0x96 */
  case 150:
    // TEMPLATE.XCHG_ovv_7::XCHG
    // XCHG REG:rw=$GPRvo   REG:rw=$AXv;
    return 562 << 16 | 1008;
  break;
  /* 0x97 */
  case 151:
    // TEMPLATE.XCHG_ovv_8::XCHG
    // XCHG REG:rw=$GPRvo   REG:rw=$AXv;
    return 563 << 16 | 1009;
  break;
  /* 0x98 */
  case 152:
    // the following switch contains 3 case.
    switch ((b & 0x0c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.CDQE::CDQE
        // CDQE REG:SUPP:w=RAX REG:SUPP:r=EAX;
        return 73 << 16 | 158;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.CBW::CBW
        // CBW  REG:SUPP:w=AX  REG:SUPP:r=AL;
        return 72 << 16 | 157;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.CWDE::CWDE
        // CWDE REG:SUPP:w=EAX REG:SUPP:r=AX;
        return 74 << 16 | 159;
        break;
      }
      default: break;
    }
  break;
  /* 0x99 */
  case 153:
    // the following switch contains 3 case.
    switch ((b & 0x0c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.CQO::CQO
        // CQO REG:SUPP:w=RDX REG:SUPP:r=RAX;
        return 120 << 16 | 236;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.CWD::CWD
        // CWD REG:SUPP:w=DX  REG:SUPP:r=AX;
        return 121 << 16 | 237;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.CDQ::CDQ
        // CDQ REG:SUPP:w=EDX REG:SUPP:r=EAX;
        return 119 << 16 | 235;
        break;
      }
      default: break;
    }
  break;
  /* 0x9a */
  case 154:
    // TEMPLATE.CALL::CALLm
    // CALL PTR:r=$ptrdpp  REG:SUPP:w=EIP   REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_F};
    return 68 << 16 | 150;
  break;
  /* 0x9b */
  case 155:
    // TEMPLATE.FWAIT::FWAIT
    // FWAIT;
    return 695 << 16 | 1174;
  break;
  /* 0x9c */
  case 156:
    if (b & 0x04)
    {
      if (b & 0x08)
      {
        if (c & 0x80)
        {
          // TEMPLATE.PUSHFQ::PUSHFQmq
          // PUSHFQ REG:SUPP:rw=$SPa MEM:SUPP:w:s64={BASE:r=$SPa SZ=64};
          return 393 << 16 | 692;
        }
        else
        {
          // TEMPLATE.PUSHFD::PUSHFDmd
          // PUSHFD REG:SUPP:rw=$SPa MEM:SUPP:w:s32={BASE:r=$SPa SZ=32};
          return 392 << 16 | 691;
        }
      }
      else
      {
        // TEMPLATE.PUSHFQ::PUSHFQmq
        // PUSHFQ REG:SUPP:rw=$SPa MEM:SUPP:w:s64={BASE:r=$SPa SZ=64};
        return 393 << 16 | 693;
      }
    }
    else
    {
      if (c & 0x80)
      {
        // TEMPLATE.PUSHF::PUSHFmw
        // PUSHF  REG:SUPP:rw=$SPa MEM:SUPP:w:s16={BASE:r=$SPa SZ=16};
        return 391 << 16 | 689;
      }
      else
      {
        // TEMPLATE.PUSHF::PUSHFmw
        // PUSHF  REG:SUPP:rw=$SPa MEM:SUPP:w:s16={BASE:r=$SPa SZ=16};
        return 391 << 16 | 690;
      }
    }
  break;
  /* 0x9d */
  case 157:
    if (b & 0x04)
    {
      if (b & 0x08)
      {
        if (c & 0x80)
        {
          // TEMPLATE.POPFQ::POPFQmq
          // POPFQ REG:SUPP:rw=$SPa MEM:SUPP:r:s64={BASE:r=$SPa SZ=64};
          return 371 << 16 | 667;
        }
        else
        {
          // TEMPLATE.POPFD::POPFDmd
          // POPFD REG:SUPP:rw=$SPa MEM:SUPP:r:s32={BASE:r=$SPa SZ=32};
          return 370 << 16 | 666;
        }
      }
      else
      {
        // TEMPLATE.POPFQ::POPFQmq
        // POPFQ REG:SUPP:rw=$SPa MEM:SUPP:r:s64={BASE:r=$SPa SZ=64};
        return 371 << 16 | 668;
      }
    }
    else
    {
      if (c & 0x80)
      {
        // TEMPLATE.POPF::POPFmw
        // POPF  REG:SUPP:rw=$SPa MEM:SUPP:r:s16={BASE:r=$SPa SZ=16};
        return 369 << 16 | 664;
      }
      else
      {
        // TEMPLATE.POPF::POPFmw
        // POPF  REG:SUPP:rw=$SPa MEM:SUPP:r:s16={BASE:r=$SPa SZ=16};
        return 369 << 16 | 665;
      }
    }
  break;
  /* 0x9e */
  case 158:
    // TEMPLATE.SAHF::SAHF
    // SAHF REG:SUPP:r=AH;
    return 427 << 16 | 756;
  break;
  /* 0x9f */
  case 159:
    // TEMPLATE.LAHF::LAHF
    // LAHF REG:SUPP:w=AH;
    return 227 << 16 | 408;
  break;
  /* 0xa0 */
  case 160:
    // TEMPLATE.MOV_bs8::MOV
    // MOV REG:w=AL           MOFFS:r:s8=$moffs8;
    return 250 << 16 | 447;
  break;
  /* 0xa1 */
  case 161:
    // TEMPLATE.MOV_vsv::MOV
    // MOV REG:w=$AXv         MOFFS:r:sx=$moffsv;
    return 277 << 16 | 482;
  break;
  /* 0xa2 */
  case 162:
    // TEMPLATE.MOV_s8b::MOV
    // MOV MOFFS:w:s8=$moffs8 REG:r=AL;
    return 275 << 16 | 480;
  break;
  /* 0xa3 */
  case 163:
    // TEMPLATE.MOV_svv::MOV
    // MOV MOFFS:w:sx=$moffsv REG:r=$AXv;
    return 276 << 16 | 481;
  break;
  /* 0xa4 */
  case 164:
    // the following switch contains 3 case.
    switch (b & 0x30)
    {
      case 0x00:
      {
        // TEMPLATE.MOVSB::MOVSBmb
        // MOVSB MEM:SUPP:w:u8={SEG:r=ES BASE:r=$DIa SZ=8}    MEM:SUPP:r:u8={SEG:r=DS BASE:r=$SIa SZ=8};
        return 282 << 16 | 489;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.MOVSB::MOVSBmb
        // MOVSB MEM:SUPP:cw:u8={SEG:r=ES BASE:r=$DIa SZ=8}   MEM:SUPP:cr:u8={SEG:r=DS BASE:r=$SIa SZ=8}   REG:SUPP:rcw=$CXa;
        return 282 << 16 | 491;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.MOVSB::MOVSBmb
        // MOVSB MEM:SUPP:cw:u8={SEG:r=ES BASE:r=$DIa SZ=8}   MEM:SUPP:cr:u8={SEG:r=DS BASE:r=$SIa SZ=8}   REG:SUPP:rcw=$CXa;
        return 282 << 16 | 490;
        break;
      }
      default: break;
    }
  break;
  /* 0xa5 */
  case 165:
    // the following switch contains 9 case.
    switch ((b & 0x3c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.MOVSQ::MOVSQmq
        // MOVSQ MEM:SUPP:w:s64={SEG:r=ES BASE:r=$DIa SZ=64}  MEM:SUPP:r:s64={SEG:r=DS BASE:r=$SIa SZ=64};
        return 284 << 16 | 495;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.MOVSW::MOVSWmw
        // MOVSW MEM:SUPP:w:s16={SEG:r=ES BASE:r=$DIa SZ=16}  MEM:SUPP:r:s16={SEG:r=DS BASE:r=$SIa SZ=16};
        return 285 << 16 | 498;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.MOVSD::MOVSDmd
        // MOVSD MEM:SUPP:w:s32={SEG:r=ES BASE:r=$DIa SZ=32}  MEM:SUPP:r:s32={SEG:r=DS BASE:r=$SIa SZ=32};
        return 283 << 16 | 492;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.MOVSQ::MOVSQmq
        // MOVSQ MEM:SUPP:cw:s64={SEG:r=ES BASE:r=$DIa SZ=64} MEM:SUPP:cr:s64={SEG:r=DS BASE:r=$SIa SZ=64} REG:SUPP:rcw=$CXa;
        return 284 << 16 | 497;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.MOVSW::MOVSWmw
        // MOVSW MEM:SUPP:cw:s16={SEG:r=ES BASE:r=$DIa SZ=16} MEM:SUPP:cr:s16={SEG:r=DS BASE:r=$SIa SZ=16} REG:SUPP:rcw=$CXa;
        return 285 << 16 | 500;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.MOVSD::MOVSDmd
        // MOVSD MEM:SUPP:cw:s32={SEG:r=ES BASE:r=$DIa SZ=32} MEM:SUPP:cr:s32={SEG:r=DS BASE:r=$SIa SZ=32} REG:SUPP:rcw=$CXa;
        return 283 << 16 | 494;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.MOVSQ::MOVSQmq
        // MOVSQ MEM:SUPP:cw:s64={SEG:r=ES BASE:r=$DIa SZ=64} MEM:SUPP:cr:s64={SEG:r=DS BASE:r=$SIa SZ=64} REG:SUPP:rcw=$CXa;
        return 284 << 16 | 496;
        break;
      }
      case 0x24:
      {
        // TEMPLATE.MOVSW::MOVSWmw
        // MOVSW MEM:SUPP:cw:s16={SEG:r=ES BASE:r=$DIa SZ=16} MEM:SUPP:cr:s16={SEG:r=DS BASE:r=$SIa SZ=16} REG:SUPP:rcw=$CXa;
        return 285 << 16 | 499;
        break;
      }
      case 0x28:
      {
        // TEMPLATE.MOVSD::MOVSDmd
        // MOVSD MEM:SUPP:cw:s32={SEG:r=ES BASE:r=$DIa SZ=32} MEM:SUPP:cr:s32={SEG:r=DS BASE:r=$SIa SZ=32} REG:SUPP:rcw=$CXa;
        return 283 << 16 | 493;
        break;
      }
      default: break;
    }
  break;
  /* 0xa6 */
  case 166:
    // the following switch contains 3 case.
    switch (b & 0x30)
    {
      case 0x00:
      {
        // TEMPLATE.CMPSB_1::CMPSBmb
        // CMPSB MEM:SUPP:r:u8={SEG:r=DS BASE:r=$SIa SZ=8}    MEM:SUPP:r:u8={SEG:r=ES BASE:r=$DIa SZ=8};
        return 106 << 16 | 215;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.CMPSB_2::CMPSBmb
        // CMPSB MEM:SUPP:cr:u8={SEG:r=DS BASE:r=$SIa SZ=8}   MEM:SUPP:cr:u8={SEG:r=ES BASE:r=$DIa SZ=8}   REG:SUPP:rcw=$CXa;
        return 107 << 16 | 217;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.CMPSB_2::CMPSBmb
        // CMPSB MEM:SUPP:cr:u8={SEG:r=DS BASE:r=$SIa SZ=8}   MEM:SUPP:cr:u8={SEG:r=ES BASE:r=$DIa SZ=8}   REG:SUPP:rcw=$CXa;
        return 107 << 16 | 216;
        break;
      }
      default: break;
    }
  break;
  /* 0xa7 */
  case 167:
    // the following switch contains 9 case.
    switch ((b & 0x3c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.CMPSQ_1::CMPSQmq
        // CMPSQ MEM:SUPP:r:s64={SEG:r=DS BASE:r=$SIa SZ=64}  MEM:SUPP:r:s64={SEG:r=ES BASE:r=$DIa SZ=64};
        return 110 << 16 | 221;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.CMPSW_1::CMPSWmw
        // CMPSW MEM:SUPP:r:s16={SEG:r=DS BASE:r=$SIa SZ=16}  MEM:SUPP:r:s16={SEG:r=ES BASE:r=$DIa SZ=16};
        return 112 << 16 | 224;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.CMPSD_1::CMPSDmd
        // CMPSD MEM:SUPP:r:s32={SEG:r=DS BASE:r=$SIa SZ=32}  MEM:SUPP:r:s32={SEG:r=ES BASE:r=$DIa SZ=32};
        return 108 << 16 | 218;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.CMPSQ_2::CMPSQmq
        // CMPSQ MEM:SUPP:cr:s64={SEG:r=DS BASE:r=$SIa SZ=64} MEM:SUPP:cr:s64={SEG:r=ES BASE:r=$DIa SZ=64} REG:SUPP:rcw=$CXa;
        return 111 << 16 | 223;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.CMPSW_2::CMPSWmw
        // CMPSW MEM:SUPP:cr:s16={SEG:r=DS BASE:r=$SIa SZ=16} MEM:SUPP:cr:s16={SEG:r=ES BASE:r=$DIa SZ=16} REG:SUPP:rcw=$CXa;
        return 113 << 16 | 226;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.CMPSD_2::CMPSDmd
        // CMPSD MEM:SUPP:cr:s32={SEG:r=DS BASE:r=$SIa SZ=32} MEM:SUPP:cr:s32={SEG:r=ES BASE:r=$DIa SZ=32} REG:SUPP:rcw=$CXa;
        return 109 << 16 | 220;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.CMPSQ_2::CMPSQmq
        // CMPSQ MEM:SUPP:cr:s64={SEG:r=DS BASE:r=$SIa SZ=64} MEM:SUPP:cr:s64={SEG:r=ES BASE:r=$DIa SZ=64} REG:SUPP:rcw=$CXa;
        return 111 << 16 | 222;
        break;
      }
      case 0x24:
      {
        // TEMPLATE.CMPSW_2::CMPSWmw
        // CMPSW MEM:SUPP:cr:s16={SEG:r=DS BASE:r=$SIa SZ=16} MEM:SUPP:cr:s16={SEG:r=ES BASE:r=$DIa SZ=16} REG:SUPP:rcw=$CXa;
        return 113 << 16 | 225;
        break;
      }
      case 0x28:
      {
        // TEMPLATE.CMPSD_2::CMPSDmd
        // CMPSD MEM:SUPP:cr:s32={SEG:r=DS BASE:r=$SIa SZ=32} MEM:SUPP:cr:s32={SEG:r=ES BASE:r=$DIa SZ=32} REG:SUPP:rcw=$CXa;
        return 109 << 16 | 219;
        break;
      }
      default: break;
    }
  break;
  /* 0xa8 */
  case 168:
    // TEMPLATE.TEST_bsb::TESTib
    // TEST REG:r=AL       IMM:s8=$simm8;
    return 534 << 16 | 959;
  break;
  /* 0xa9 */
  case 169:
    // TEMPLATE.TEST_vsz::TESTi
    // TEST REG:r=$AXv     IMM:sx=$simmz;
    return 541 << 16 | 972;
  break;
  /* 0xaa */
  case 170:
    // the following switch contains 3 case.
    switch (b & 0x30)
    {
      case 0x00:
      {
        // TEMPLATE.STOSB::STOSBmb
        // STOSB MEM:SUPP:w:u8={SEG:r=ES BASE:r=$DIa SZ=8}    REG:SUPP:r=AL;
        return 514 << 16 | 919;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.STOSB::STOSBmb
        // STOSB MEM:SUPP:cw:u8={SEG:r=ES BASE:r=$DIa SZ=8}   REG:SUPP:r=AL  REG:SUPP:rcw=$CXa;
        return 514 << 16 | 921;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.STOSB::STOSBmb
        // STOSB MEM:SUPP:cw:u8={SEG:r=ES BASE:r=$DIa SZ=8}   REG:SUPP:r=AL  REG:SUPP:rcw=$CXa;
        return 514 << 16 | 920;
        break;
      }
      default: break;
    }
  break;
  /* 0xab */
  case 171:
    // the following switch contains 9 case.
    switch ((b & 0x3c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.STOSQ::STOSQmq
        // STOSQ MEM:SUPP:w:s64={SEG:r=ES BASE:r=$DIa SZ=64}  REG:SUPP:r=RAX;
        return 516 << 16 | 925;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.STOSW::STOSWmw
        // STOSW MEM:SUPP:w:s16={SEG:r=ES BASE:r=$DIa SZ=16}  REG:SUPP:r=AX;
        return 517 << 16 | 928;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.STOSD::STOSDmd
        // STOSD MEM:SUPP:w:s32={SEG:r=ES BASE:r=$DIa SZ=32}  REG:SUPP:r=EAX;
        return 515 << 16 | 922;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.STOSQ::STOSQmq
        // STOSQ MEM:SUPP:cw:s64={SEG:r=ES BASE:r=$DIa SZ=64} REG:SUPP:r=RAX REG:SUPP:rcw=$CXa;
        return 516 << 16 | 927;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.STOSW::STOSWmw
        // STOSW MEM:SUPP:cw:s16={SEG:r=ES BASE:r=$DIa SZ=16} REG:SUPP:r=AX  REG:SUPP:rcw=$CXa;
        return 517 << 16 | 930;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.STOSD::STOSDmd
        // STOSD MEM:SUPP:cw:s32={SEG:r=ES BASE:r=$DIa SZ=32} REG:SUPP:r=EAX REG:SUPP:rcw=$CXa;
        return 515 << 16 | 924;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.STOSQ::STOSQmq
        // STOSQ MEM:SUPP:cw:s64={SEG:r=ES BASE:r=$DIa SZ=64} REG:SUPP:r=RAX REG:SUPP:rcw=$CXa;
        return 516 << 16 | 926;
        break;
      }
      case 0x24:
      {
        // TEMPLATE.STOSW::STOSWmw
        // STOSW MEM:SUPP:cw:s16={SEG:r=ES BASE:r=$DIa SZ=16} REG:SUPP:r=AX  REG:SUPP:rcw=$CXa;
        return 517 << 16 | 929;
        break;
      }
      case 0x28:
      {
        // TEMPLATE.STOSD::STOSDmd
        // STOSD MEM:SUPP:cw:s32={SEG:r=ES BASE:r=$DIa SZ=32} REG:SUPP:r=EAX REG:SUPP:rcw=$CXa;
        return 515 << 16 | 923;
        break;
      }
      default: break;
    }
  break;
  /* 0xac */
  case 172:
    // the following switch contains 3 case.
    switch (b & 0x30)
    {
      case 0x00:
      {
        // TEMPLATE.LODSB::LODSBmb
        // LODSB REG:SUPP:w=AL   MEM:SUPP:r:u8={SEG:r=DS BASE:r=$SIa SZ=8};
        return 233 << 16 | 417;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.LODSB::LODSBmb
        // LODSB REG:SUPP:cw=AL  MEM:SUPP:cr:u8={SEG:r=DS BASE:r=$SIa SZ=8}   REG:SUPP:rcw=$CXa;
        return 233 << 16 | 419;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.LODSB::LODSBmb
        // LODSB REG:SUPP:cw=AL  MEM:SUPP:cr:u8={SEG:r=DS BASE:r=$SIa SZ=8}   REG:SUPP:rcw=$CXa;
        return 233 << 16 | 418;
        break;
      }
      default: break;
    }
  break;
  /* 0xad */
  case 173:
    // the following switch contains 9 case.
    switch ((b & 0x3c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.LODSQ::LODSQmq
        // LODSQ REG:SUPP:w=RAX  MEM:SUPP:r:s64={SEG:r=DS BASE:r=$SIa SZ=64};
        return 235 << 16 | 423;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.LODSW::LODSWmw
        // LODSW REG:SUPP:w=AX   MEM:SUPP:r:s16={SEG:r=DS BASE:r=$SIa SZ=16};
        return 236 << 16 | 426;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.LODSD::LODSDmd
        // LODSD REG:SUPP:w=EAX  MEM:SUPP:r:s32={SEG:r=DS BASE:r=$SIa SZ=32};
        return 234 << 16 | 420;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.LODSQ::LODSQmq
        // LODSQ REG:SUPP:cw=RAX MEM:SUPP:cr:s64={SEG:r=DS BASE:r=$SIa SZ=64} REG:SUPP:rcw=$CXa;
        return 235 << 16 | 425;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.LODSW::LODSWmw
        // LODSW REG:SUPP:cw=AX  MEM:SUPP:cr:s16={SEG:r=DS BASE:r=$SIa SZ=16} REG:SUPP:rcw=$CXa;
        return 236 << 16 | 428;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.LODSD::LODSDmd
        // LODSD REG:SUPP:cw=EAX MEM:SUPP:cr:s32={SEG:r=DS BASE:r=$SIa SZ=32} REG:SUPP:rcw=$CXa;
        return 234 << 16 | 422;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.LODSQ::LODSQmq
        // LODSQ REG:SUPP:cw=RAX MEM:SUPP:cr:s64={SEG:r=DS BASE:r=$SIa SZ=64} REG:SUPP:rcw=$CXa;
        return 235 << 16 | 424;
        break;
      }
      case 0x24:
      {
        // TEMPLATE.LODSW::LODSWmw
        // LODSW REG:SUPP:cw=AX  MEM:SUPP:cr:s16={SEG:r=DS BASE:r=$SIa SZ=16} REG:SUPP:rcw=$CXa;
        return 236 << 16 | 427;
        break;
      }
      case 0x28:
      {
        // TEMPLATE.LODSD::LODSDmd
        // LODSD REG:SUPP:cw=EAX MEM:SUPP:cr:s32={SEG:r=DS BASE:r=$SIa SZ=32} REG:SUPP:rcw=$CXa;
        return 234 << 16 | 421;
        break;
      }
      default: break;
    }
  break;
  /* 0xae */
  case 174:
    // the following switch contains 3 case.
    switch (b & 0x30)
    {
      case 0x00:
      {
        // TEMPLATE.SCASB_1::SCASBmb
        // SCASB REG:SUPP:r=AL  MEM:SUPP:r:u8={SEG:r=ES BASE:r=$DIa SZ=8};
        return 439 << 16 | 776;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.SCASB_2::SCASBmb
        // SCASB REG:SUPP:r=AL  MEM:SUPP:cr:u8={SEG:r=ES BASE:r=$DIa SZ=8}   REG:SUPP:rcw=$CXa;
        return 440 << 16 | 778;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.SCASB_2::SCASBmb
        // SCASB REG:SUPP:r=AL  MEM:SUPP:cr:u8={SEG:r=ES BASE:r=$DIa SZ=8}   REG:SUPP:rcw=$CXa;
        return 440 << 16 | 777;
        break;
      }
      default: break;
    }
  break;
  /* 0xaf */
  case 175:
    // the following switch contains 9 case.
    switch ((b & 0x3c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.SCASQ_1::SCASQmq
        // SCASQ REG:SUPP:r=RAX MEM:SUPP:r:s64={SEG:r=ES BASE:r=$DIa SZ=64};
        return 443 << 16 | 782;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.SCASW_1::SCASWmw
        // SCASW REG:SUPP:r=AX  MEM:SUPP:r:s16={SEG:r=ES BASE:r=$DIa SZ=16};
        return 445 << 16 | 785;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.SCASD_1::SCASDmd
        // SCASD REG:SUPP:r=EAX MEM:SUPP:r:s32={SEG:r=ES BASE:r=$DIa SZ=32};
        return 441 << 16 | 779;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.SCASQ_2::SCASQmq
        // SCASQ REG:SUPP:r=RAX MEM:SUPP:cr:s64={SEG:r=ES BASE:r=$DIa SZ=64} REG:SUPP:rcw=$CXa;
        return 444 << 16 | 784;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.SCASW_2::SCASWmw
        // SCASW REG:SUPP:r=AX  MEM:SUPP:cr:s16={SEG:r=ES BASE:r=$DIa SZ=16} REG:SUPP:rcw=$CXa;
        return 446 << 16 | 787;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.SCASD_2::SCASDmd
        // SCASD REG:SUPP:r=EAX MEM:SUPP:cr:s32={SEG:r=ES BASE:r=$DIa SZ=32} REG:SUPP:rcw=$CXa;
        return 442 << 16 | 781;
        break;
      }
      case 0x20:
      {
        // TEMPLATE.SCASQ_2::SCASQmq
        // SCASQ REG:SUPP:r=RAX MEM:SUPP:cr:s64={SEG:r=ES BASE:r=$DIa SZ=64} REG:SUPP:rcw=$CXa;
        return 444 << 16 | 783;
        break;
      }
      case 0x24:
      {
        // TEMPLATE.SCASW_2::SCASWmw
        // SCASW REG:SUPP:r=AX  MEM:SUPP:cr:s16={SEG:r=ES BASE:r=$DIa SZ=16} REG:SUPP:rcw=$CXa;
        return 446 << 16 | 786;
        break;
      }
      case 0x28:
      {
        // TEMPLATE.SCASD_2::SCASDmd
        // SCASD REG:SUPP:r=EAX MEM:SUPP:cr:s32={SEG:r=ES BASE:r=$DIa SZ=32} REG:SUPP:rcw=$CXa;
        return 442 << 16 | 780;
        break;
      }
      default: break;
    }
  break;
  /* 0xb0 */
  case 176:
    // TEMPLATE.MOV_obub_1::MOVib
    // MOV REG:w=$GPR8o       IMM:u8=$uimm8;
    return 256 << 16 | 458;
  break;
  /* 0xb1 */
  case 177:
    // TEMPLATE.MOV_obub_2::MOVib
    // MOV REG:w=$GPR8o       IMM:u8=$uimm8;
    return 257 << 16 | 459;
  break;
  /* 0xb2 */
  case 178:
    // TEMPLATE.MOV_obub_3::MOVib
    // MOV REG:w=$GPR8o       IMM:u8=$uimm8;
    return 258 << 16 | 460;
  break;
  /* 0xb3 */
  case 179:
    // TEMPLATE.MOV_obub_4::MOVib
    // MOV REG:w=$GPR8o       IMM:u8=$uimm8;
    return 259 << 16 | 461;
  break;
  /* 0xb4 */
  case 180:
    // TEMPLATE.MOV_obub_5::MOVib
    // MOV REG:w=$GPR8o       IMM:u8=$uimm8;
    return 260 << 16 | 462;
  break;
  /* 0xb5 */
  case 181:
    // TEMPLATE.MOV_obub_6::MOVib
    // MOV REG:w=$GPR8o       IMM:u8=$uimm8;
    return 261 << 16 | 463;
  break;
  /* 0xb6 */
  case 182:
    // TEMPLATE.MOV_obub_7::MOVib
    // MOV REG:w=$GPR8o       IMM:u8=$uimm8;
    return 262 << 16 | 464;
  break;
  /* 0xb7 */
  case 183:
    // TEMPLATE.MOV_obub_8::MOVib
    // MOV REG:w=$GPR8o       IMM:u8=$uimm8;
    return 263 << 16 | 465;
  break;
  /* 0xb8 */
  case 184:
    // TEMPLATE.MOV_ovuv_1::MOVi
    // MOV REG:w=$GPRvo       IMM:sx=$simmv;
    return 264 << 16 | 466;
  break;
  /* 0xb9 */
  case 185:
    // TEMPLATE.MOV_ovuv_2::MOVi
    // MOV REG:w=$GPRvo       IMM:sx=$simmv;
    return 265 << 16 | 467;
  break;
  /* 0xba */
  case 186:
    // TEMPLATE.MOV_ovuv_3::MOVi
    // MOV REG:w=$GPRvo       IMM:sx=$simmv;
    return 266 << 16 | 468;
  break;
  /* 0xbb */
  case 187:
    // TEMPLATE.MOV_ovuv_4::MOVi
    // MOV REG:w=$GPRvo       IMM:sx=$simmv;
    return 267 << 16 | 469;
  break;
  /* 0xbc */
  case 188:
    // TEMPLATE.MOV_ovuv_5::MOVi
    // MOV REG:w=$GPRvo       IMM:sx=$simmv;
    return 268 << 16 | 470;
  break;
  /* 0xbd */
  case 189:
    // TEMPLATE.MOV_ovuv_6::MOVi
    // MOV REG:w=$GPRvo       IMM:sx=$simmv;
    return 269 << 16 | 471;
  break;
  /* 0xbe */
  case 190:
    // TEMPLATE.MOV_ovuv_7::MOVi
    // MOV REG:w=$GPRvo       IMM:sx=$simmv;
    return 270 << 16 | 472;
  break;
  /* 0xbf */
  case 191:
    // TEMPLATE.MOV_ovuv_8::MOVi
    // MOV REG:w=$GPRvo       IMM:sx=$simmv;
    return 271 << 16 | 473;
  break;
  /* 0xc0 */
  case 192:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.ROL_mbub::ROLmb
        // ROL MEM:rw:u8=$mem8 ROTATE:r:u8=$rol;
        return 416 << 16 | 736;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.ROL_mbub::ROL
        // ROL REG:rw=$GPR8m   ROTATE:r:u8=$rol;
        return 416 << 16 | 735;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.ROR_mbub::RORmb
        // ROR MEM:rw:u8=$mem8 ROTATE:r:u8=$ror;
        return 422 << 16 | 748;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.ROR_mbub::ROR
        // ROR REG:rw=$GPR8m   ROTATE:r:u8=$ror;
        return 422 << 16 | 747;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.RCL_mbub::RCLmb
        // RCL MEM:rw:u8=$mem8 ROTATE:r:u8=$rol;
        return 404 << 16 | 712;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.RCL_mbub::RCL
        // RCL REG:rw=$GPR8m   ROTATE:r:u8=$rol;
        return 404 << 16 | 711;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.RCR_mbub::RCRmb
        // RCR MEM:rw:u8=$mem8 ROTATE:r:u8=$ror;
        return 410 << 16 | 724;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.RCR_mbub::RCR
        // RCR REG:rw=$GPR8m   ROTATE:r:u8=$ror;
        return 410 << 16 | 723;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.SHL_mbub_1::SHLmb
        // SHL MEM:rw:u8=$mem8 SHIFT:r:u8=$shl;
        return 488 << 16 | 857;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.SHL_mbub_1::SHL
        // SHL REG:rw=$GPR8m   SHIFT:r:u8=$shl;
        return 488 << 16 | 856;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.SHR_mbub::SHRmb
        // SHR MEM:rw:u8=$mem8 SHIFT:r:u8=$shr;
        return 498 << 16 | 877;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.SHR_mbub::SHR
        // SHR REG:rw=$GPR8m   SHIFT:r:u8=$shr;
        return 498 << 16 | 876;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.SHL_mbub_2::SHLmb
        // SHL MEM:rw:u8=$mem8 SHIFT:r:u8=$shl;
        return 489 << 16 | 859;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.SHL_mbub_2::SHL
        // SHL REG:rw=$GPR8m   SHIFT:r:u8=$shl;
        return 489 << 16 | 858;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.SAR_mbub::SARmb
        // SAR MEM:rw:u8=$mem8 SHIFT:r:u8=$shr;
        return 480 << 16 | 841;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.SAR_mbub::SAR
        // SAR REG:rw=$GPR8m   SHIFT:r:u8=$shr;
        return 480 << 16 | 840;
        break;
      }
      default: break;
    }
  break;
  /* 0xc1 */
  case 193:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.ROL_mvub::ROLm
        // ROL MEM:rw:sx=$memv ROTATE:r:u8=$rol;
        return 419 << 16 | 742;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.ROL_mvub::ROL
        // ROL REG:rw=$GPRvm   ROTATE:r:u8=$rol;
        return 419 << 16 | 741;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.ROR_mvub::RORm
        // ROR MEM:rw:sx=$memv ROTATE:r:u8=$ror;
        return 425 << 16 | 754;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.ROR_mvub::ROR
        // ROR REG:rw=$GPRvm   ROTATE:r:u8=$ror;
        return 425 << 16 | 753;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.RCL_mvub::RCLm
        // RCL MEM:rw:sx=$memv ROTATE:r:u8=$rol;
        return 407 << 16 | 718;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.RCL_mvub::RCL
        // RCL REG:rw=$GPRvm   ROTATE:r:u8=$rol;
        return 407 << 16 | 717;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.RCR_mvub::RCRm
        // RCR MEM:rw:sx=$memv ROTATE:r:u8=$ror;
        return 413 << 16 | 730;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.RCR_mvub::RCR
        // RCR REG:rw=$GPRvm   ROTATE:r:u8=$ror;
        return 413 << 16 | 729;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.SHL_mvub_1::SHLm
        // SHL MEM:rw:sx=$memv SHIFT:r:u8=$shl;
        return 494 << 16 | 869;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.SHL_mvub_1::SHL
        // SHL REG:rw=$GPRvm   SHIFT:r:u8=$shl;
        return 494 << 16 | 868;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.SHR_mvub::SHRm
        // SHR MEM:rw:sx=$memv SHIFT:r:u8=$shr;
        return 501 << 16 | 883;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.SHR_mvub::SHR
        // SHR REG:rw=$GPRvm   SHIFT:r:u8=$shr;
        return 501 << 16 | 882;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.SHL_mvub_2::SHLm
        // SHL MEM:rw:sx=$memv SHIFT:r:u8=$shl;
        return 495 << 16 | 871;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.SHL_mvub_2::SHL
        // SHL REG:rw=$GPRvm   SHIFT:r:u8=$shl;
        return 495 << 16 | 870;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.SAR_mvub::SARm
        // SAR MEM:rw:sx=$memv SHIFT:r:u8=$shr;
        return 483 << 16 | 847;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.SAR_mvub::SAR
        // SAR REG:rw=$GPRvm   SHIFT:r:u8=$shr;
        return 483 << 16 | 846;
        break;
      }
      default: break;
    }
  break;
  /* 0xc2 */
  case 194:
    // TEMPLATE.RET_uw_1::RETiwm
    // RET IMM:s16=$simm16 REG:SUPP:w=$IPa  REG:SUPP:rw=$SPa                    MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 399 << 16 | 699;
  break;
  /* 0xc3 */
  case 195:
    // TEMPLATE.RET_1::RETm
    // RET REG:SUPP:w=$IPa REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 397 << 16 | 697;
  break;
  /* 0xc4 */
  case 196:
    // TEMPLATE.LES::LESm
    // LES REG:w=$GPRzr MEM:r=$memdpp REG:SUPP:w=ES;
    return 246 << 16 | 443;
  break;
  /* 0xc5 */
  case 197:
    // TEMPLATE.LDS::LDSm
    // LDS REG:w=$GPRzr MEM:r=$memdpp REG:SUPP:w=DS;
    return 245 << 16 | 442;
  break;
  /* 0xc6 */
  case 198:
    // the following switch contains 3 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.MOV_mbub::MOVmbib
        // MOV MEM:w:u8=$mem8     IMM:u8=$uimm8;
        return 252 << 16 | 451;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.MOV_mbub::MOVib
        // MOV REG:w=$GPR8m       IMM:u8=$uimm8;
        return 252 << 16 | 450;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.XABORT::XABORTib
        // XABORT IMM:u8=$uimm8 REG:SUPP:rcw=EAX;
        return 759 << 16 | 1273;
        break;
      }
      default: break;
    }
  break;
  /* 0xc7 */
  case 199:
    // the following switch contains 3 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.MOV_mvsz::MOVmi
        // MOV MEM:w:sx=$memv     IMM:sx=$simmz;
        return 254 << 16 | 455;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.MOV_mvsz::MOVi
        // MOV REG:w=$GPRvm       IMM:sx=$simmz;
        return 254 << 16 | 454;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.XBEGIN::XBEGIN
        // XBEGIN REL:sx=$relz REG:SUPP:rw=$IPa REG:SUPP:cw=EAX;
        return 760 << 16 | 1274;
        break;
      }
      default: break;
    }
  break;
  /* 0xc8 */
  case 200:
    // TEMPLATE.ENTER::ENTERiwibm
    // ENTER IMM:s16=$simm16 IMM:u8=$uimm8 REG:SUPP:rw=$BPv REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 136 << 16 | 256;
  break;
  /* 0xc9 */
  case 201:
    // TEMPLATE.LEAVE::LEAVEm
    // LEAVE MEM:SUPP:r:sx={SEG:r=SS BASE:r=$BPa SZ=SZ_V} REG:SUPP:rw=$BPv REG:SUPP:rw=$SPv;
    return 230 << 16 | 412;
  break;
  /* 0xca */
  case 202:
    // TEMPLATE.RET_uw_2::RETiwm
    // RET IMM:s16=$simm16 REG:SUPP:w=$IPa  REG:SUPP:rw=$SPa                    MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_F};
    return 400 << 16 | 700;
  break;
  /* 0xcb */
  case 203:
    // TEMPLATE.RET_2::RETm
    // RET REG:SUPP:w=$IPa REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_F};
    return 398 << 16 | 698;
  break;
  /* 0xcc */
  case 204:
    // TEMPLATE.INT3::INT3
    // INT3 REG:SUPP:w=$IPa;
    return 164 << 16 | 306;
  break;
  /* 0xcd */
  case 205:
    // TEMPLATE.INT::INTib
    // INT  IMM:u8=$uimm8   REG:SUPP:w=$IPa;
    return 162 << 16 | 304;
  break;
  /* 0xce */
  case 206:
    // TEMPLATE.INTO::INTO
    // INTO REG:SUPP:w=EIP;
    return 165 << 16 | 307;
  break;
  /* 0xcf */
  case 207:
    // the following switch contains 3 case.
    switch ((b & 0x0c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.IRETQ::IRETQm
        // IRETQ REG:SUPP:w=RIP  REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_RST};
        return 170 << 16 | 312;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.IRET::IRETm
        // IRET  REG:SUPP:w=$IPa REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_RST};
        return 168 << 16 | 310;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.IRETD::IRETDm
        // IRETD REG:SUPP:w=$IPa REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_RST};
        return 169 << 16 | 311;
        break;
      }
      default: break;
    }
  break;
  /* 0xd0 */
  case 208:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.ROL_mb::ROLmbi
        // ROL MEM:rw:u8=$mem8 IMM:u8=1;
        return 414 << 16 | 732;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.ROL_mb::ROLi
        // ROL REG:rw=$GPR8m   IMM:u8=1;
        return 414 << 16 | 731;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.ROR_mb::RORmbi
        // ROR MEM:rw:u8=$mem8 IMM:u8=1;
        return 420 << 16 | 744;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.ROR_mb::RORi
        // ROR REG:rw=$GPR8m   IMM:u8=1;
        return 420 << 16 | 743;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.RCL_mb::RCLmbi
        // RCL MEM:rw:u8=$mem8 IMM:u8=1;
        return 402 << 16 | 708;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.RCL_mb::RCLi
        // RCL REG:rw=$GPR8m   IMM:u8=1;
        return 402 << 16 | 707;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.RCR_mb::RCRmbi
        // RCR MEM:rw:u8=$mem8 IMM:u8=1;
        return 408 << 16 | 720;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.RCR_mb::RCRi
        // RCR REG:rw=$GPR8m   IMM:u8=1;
        return 408 << 16 | 719;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.SHL_mb_1::SHLmbi
        // SHL MEM:rw:u8=$mem8 IMM:u8=1;
        return 484 << 16 | 849;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.SHL_mb_1::SHLi
        // SHL REG:rw=$GPR8m   IMM:u8=1;
        return 484 << 16 | 848;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.SHR_mb::SHRmbi
        // SHR MEM:rw:u8=$mem8 IMM:u8=1;
        return 496 << 16 | 873;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.SHR_mb::SHRi
        // SHR REG:rw=$GPR8m   IMM:u8=1;
        return 496 << 16 | 872;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.SHL_mb_2::SHLmbi
        // SHL MEM:rw:u8=$mem8 IMM:u8=1;
        return 485 << 16 | 851;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.SHL_mb_2::SHLi
        // SHL REG:rw=$GPR8m   IMM:u8=1;
        return 485 << 16 | 850;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.SAR_mb::SARmbi
        // SAR MEM:rw:u8=$mem8 IMM:u8=1;
        return 478 << 16 | 837;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.SAR_mb::SARi
        // SAR REG:rw=$GPR8m   IMM:u8=1;
        return 478 << 16 | 836;
        break;
      }
      default: break;
    }
  break;
  /* 0xd1 */
  case 209:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.ROL_mv::ROLmi
        // ROL MEM:rw:sx=$memv IMM:u8=1;
        return 417 << 16 | 738;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.ROL_mv::ROLi
        // ROL REG:rw=$GPRvm   IMM:u8=1;
        return 417 << 16 | 737;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.ROR_mv::RORmi
        // ROR MEM:rw:sx=$memv IMM:u8=1;
        return 423 << 16 | 750;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.ROR_mv::RORi
        // ROR REG:rw=$GPRvm   IMM:u8=1;
        return 423 << 16 | 749;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.RCL_mv::RCLmi
        // RCL MEM:rw:sx=$memv IMM:u8=1;
        return 405 << 16 | 714;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.RCL_mv::RCLi
        // RCL REG:rw=$GPRvm   IMM:u8=1;
        return 405 << 16 | 713;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.RCR_mv::RCRmi
        // RCR MEM:rw:sx=$memv IMM:u8=1;
        return 411 << 16 | 726;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.RCR_mv::RCRi
        // RCR REG:rw=$GPRvm   IMM:u8=1;
        return 411 << 16 | 725;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.SHL_mv_1::SHLmi
        // SHL MEM:rw:sx=$memv IMM:u8=1;
        return 490 << 16 | 861;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.SHL_mv_1::SHLi
        // SHL REG:rw=$GPRvm   IMM:u8=1;
        return 490 << 16 | 860;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.SHR_mv::SHRmi
        // SHR MEM:rw:sx=$memv IMM:u8=1;
        return 499 << 16 | 879;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.SHR_mv::SHRi
        // SHR REG:rw=$GPRvm   IMM:u8=1;
        return 499 << 16 | 878;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.SHL_mv_2::SHLmi
        // SHL MEM:rw:sx=$memv IMM:u8=1;
        return 491 << 16 | 863;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.SHL_mv_2::SHLi
        // SHL REG:rw=$GPRvm   IMM:u8=1;
        return 491 << 16 | 862;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.SAR_mv::SARmi
        // SAR MEM:rw:sx=$memv IMM:u8=1;
        return 481 << 16 | 843;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.SAR_mv::SARi
        // SAR REG:rw=$GPRvm   IMM:u8=1;
        return 481 << 16 | 842;
        break;
      }
      default: break;
    }
  break;
  /* 0xd2 */
  case 210:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.ROL_mbb::ROLmb
        // ROL MEM:rw:u8=$mem8 REG:r=CL;
        return 415 << 16 | 734;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.ROL_mbb::ROL
        // ROL REG:rw=$GPR8m   REG:r=CL;
        return 415 << 16 | 733;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.ROR_mbb::RORmb
        // ROR MEM:rw:u8=$mem8 REG:r=CL;
        return 421 << 16 | 746;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.ROR_mbb::ROR
        // ROR REG:rw=$GPR8m   REG:r=CL;
        return 421 << 16 | 745;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.RCL_mbb::RCLmb
        // RCL MEM:rw:u8=$mem8 REG:r=CL;
        return 403 << 16 | 710;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.RCL_mbb::RCL
        // RCL REG:rw=$GPR8m   REG:r=CL;
        return 403 << 16 | 709;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.RCR_mbb::RCRmb
        // RCR MEM:rw:u8=$mem8 REG:r=CL;
        return 409 << 16 | 722;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.RCR_mbb::RCR
        // RCR REG:rw=$GPR8m   REG:r=CL;
        return 409 << 16 | 721;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.SHL_mbb_1::SHLmb
        // SHL MEM:rw:u8=$mem8 REG:r=CL;
        return 486 << 16 | 853;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.SHL_mbb_1::SHL
        // SHL REG:rw=$GPR8m   REG:r=CL;
        return 486 << 16 | 852;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.SHR_mbb::SHRmb
        // SHR MEM:rw:u8=$mem8 REG:r=CL;
        return 497 << 16 | 875;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.SHR_mbb::SHR
        // SHR REG:rw=$GPR8m   REG:r=CL;
        return 497 << 16 | 874;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.SHL_mbb_2::SHLmb
        // SHL MEM:rw:u8=$mem8 REG:r=CL;
        return 487 << 16 | 855;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.SHL_mbb_2::SHL
        // SHL REG:rw=$GPR8m   REG:r=CL;
        return 487 << 16 | 854;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.SAR_mbb::SARmb
        // SAR MEM:rw:u8=$mem8 REG:r=CL;
        return 479 << 16 | 839;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.SAR_mbb::SAR
        // SAR REG:rw=$GPR8m   REG:r=CL;
        return 479 << 16 | 838;
        break;
      }
      default: break;
    }
  break;
  /* 0xd3 */
  case 211:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.ROL_mvb::ROLm
        // ROL MEM:rw:sx=$memv REG:r=CL;
        return 418 << 16 | 740;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.ROL_mvb::ROL
        // ROL REG:rw=$GPRvm   REG:r=CL;
        return 418 << 16 | 739;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.ROR_mvb::RORm
        // ROR MEM:rw:sx=$memv REG:r=CL;
        return 424 << 16 | 752;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.ROR_mvb::ROR
        // ROR REG:rw=$GPRvm   REG:r=CL;
        return 424 << 16 | 751;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.RCL_mvb::RCLm
        // RCL MEM:rw:sx=$memv REG:r=CL;
        return 406 << 16 | 716;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.RCL_mvb::RCL
        // RCL REG:rw=$GPRvm   REG:r=CL;
        return 406 << 16 | 715;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.RCR_mvb::RCRm
        // RCR MEM:rw:sx=$memv REG:r=CL;
        return 412 << 16 | 728;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.RCR_mvb::RCR
        // RCR REG:rw=$GPRvm   REG:r=CL;
        return 412 << 16 | 727;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.SHL_mvb_1::SHLm
        // SHL MEM:rw:sx=$memv REG:r=CL;
        return 492 << 16 | 865;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.SHL_mvb_1::SHL
        // SHL REG:rw=$GPRvm   REG:r=CL;
        return 492 << 16 | 864;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.SHR_mvb::SHRm
        // SHR MEM:rw:sx=$memv REG:r=CL;
        return 500 << 16 | 881;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.SHR_mvb::SHR
        // SHR REG:rw=$GPRvm   REG:r=CL;
        return 500 << 16 | 880;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.SHL_mvb_2::SHLm
        // SHL MEM:rw:sx=$memv REG:r=CL;
        return 493 << 16 | 867;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.SHL_mvb_2::SHL
        // SHL REG:rw=$GPRvm   REG:r=CL;
        return 493 << 16 | 866;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.SAR_mvb::SARm
        // SAR MEM:rw:sx=$memv REG:r=CL;
        return 482 << 16 | 845;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.SAR_mvb::SAR
        // SAR REG:rw=$GPRvm   REG:r=CL;
        return 482 << 16 | 844;
        break;
      }
      default: break;
    }
  break;
  /* 0xd4 */
  case 212:
    // TEMPLATE.AAM::AAMib
    // AAM IMM:u8=$uimm8 REG:SUPP:rw=AL REG:SUPP:w=AH;
    return 2 << 16 | 2;
  break;
  /* 0xd5 */
  case 213:
    // TEMPLATE.AAD::AADib
    // AAD IMM:u8=$uimm8 REG:SUPP:rw=AL REG:SUPP:rw=AH;
    return 1 << 16 | 1;
  break;
  /* 0xd6 */
  case 214:
    // TEMPLATE.SALC::SALC
    // SALC REG:SUPP:w=AL;
    return 428 << 16 | 757;
  break;
  /* 0xd7 */
  case 215:
    // TEMPLATE.XLAT::XLATmb
    // XLAT MEM:SUPP:r:u8={SEG:r=DS BASE:r=$BXa SZ=8} REG:SUPP:w=AL;
    return 564 << 16 | 1010;
  break;
  /* 0xd8 */
  case 216:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.FADD_80mx::FADDmd
        // FADD  REG:rw:f80=ST0  MEM:r:f32=$mem32;
        return 652 << 16 | 1123;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.FADD_80mx::FADD
        // FADD  REG:rw:f80=ST0  REG:r:f80=$FPm;
        return 652 << 16 | 1122;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.FMUL_80mx::FMULmd
        // FMUL  REG:rw:f80=ST0  MEM:r:f32=$mem32;
        return 677 << 16 | 1152;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.FMUL_80mx::FMUL
        // FMUL  REG:rw:f80=ST0  REG:r:f80=$FPm;
        return 677 << 16 | 1151;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.FCOM_80mx_1::FCOMmd
        // FCOM   REG:r:f80=ST0      MEM:r:f32=$mem32;
        return 592 << 16 | 1049;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.FCOM_80mx_1::FCOM
        // FCOM   REG:r:f80=ST0      REG:r:f80=$FPm;
        return 592 << 16 | 1048;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.FCOMP_80mx_1::FCOMPmd
        // FCOMP  REG:r:f80=ST0      MEM:r:f32=$mem32;
        return 590 << 16 | 1045;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.FCOMP_80mx_1::FCOMP
        // FCOMP  REG:r:f80=ST0      REG:r:f80=$FPm;
        return 590 << 16 | 1044;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.FSUB_80mx::FSUBmd
        // FSUB  REG:rw:f80=ST0  MEM:r:f32=$mem32;
        return 687 << 16 | 1165;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.FSUB_80mx::FSUB
        // FSUB  REG:rw:f80=ST0  REG:r:f80=$FPm;
        return 687 << 16 | 1164;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.FSUBR_80mx::FSUBRmd
        // FSUBR  REG:rw:f80=ST0  MEM:r:f32=$mem32;
        return 693 << 16 | 1172;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.FSUBR_80mx::FSUBR
        // FSUBR  REG:rw:f80=ST0  REG:r:f80=$FPm;
        return 693 << 16 | 1171;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.FDIV_80mx::FDIVmd
        // FDIV  REG:rw:f80=ST0  MEM:r:f32=$mem32;
        return 663 << 16 | 1136;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.FDIV_80mx::FDIV
        // FDIV  REG:rw:f80=ST0  REG:r:f80=$FPm;
        return 663 << 16 | 1135;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.FDIVR_80mx::FDIVRmd
        // FDIVR  REG:rw:f80=ST0  MEM:r:f32=$mem32;
        return 669 << 16 | 1143;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.FDIVR_80mx::FDIVR
        // FDIVR  REG:rw:f80=ST0  REG:r:f80=$FPm;
        return 669 << 16 | 1142;
        break;
      }
      default: break;
    }
  break;
  /* 0xd9 */
  case 217:
    // the following switch contains 15 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.FLD_80mx::FLDmd
        // FLD REG:w:f80=ST0 MEM:r:f32=$mem32;
        return 615 << 16 | 1074;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.FLD_80mx::FLD
        // FLD REG:w:f80=ST0 REG:r:f80=$FPm;
        return 615 << 16 | 1073;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.FXCH_80m80_1::FXCH
        // FXCH REG:rw:f80=ST0 REG:rw:f80=$FPm;
        return 645 << 16 | 1115;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.FST_md80::FSTmd
        // FST  MEM:w:f32=$mem32 REG:r:f80=ST0;
        return 637 << 16 | 1106;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.FNOP::FNOP
        // FNOP;
        return 619 << 16 | 1085;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.FSTP_md80::FSTPmd
        // FSTP MEM:w:f32=$mem32 REG:r:f80=ST0;
        return 635 << 16 | 1103;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.FSTPNCE::FSTPNCE
        // FSTPNCE REG:w:f80=$FPm REG:r:f80=ST0;
        return 639 << 16 | 1109;
        break;
      }
      case 0x18:
      {
        if (b & 0x04)
        {
          // TEMPLATE.FLDENV::FLDENVm
          // FLDENV MEM:r=$mem224;
          return 617 << 16 | 1077;
        }
        else
        {
          // TEMPLATE.FLDENV::FLDENVm
          // FLDENV MEM:r=$mem112;
          return 617 << 16 | 1076;
        }
        break;
      }
      case 0x19:
      {
        // the following switch contains 4 case.
        switch (a & 0xa0)
        {
          case 0x00:
          {
            // TEMPLATE.FCHS::FCHS
            // FCHS REG:SUPP:rw:f80=ST0;
            return 579 << 16 | 1033;
            break;
          }
          case 0x20:
          {
            // TEMPLATE.FABS::FABS
            // FABS REG:SUPP:rw:f80=ST0;
            return 576 << 16 | 1030;
            break;
          }
          case 0x80:
          {
            // TEMPLATE.FTST::FTST
            // FTST REG:SUPP:rw:f80=ST0;
            return 640 << 16 | 1110;
            break;
          }
          case 0xa0:
          {
            // TEMPLATE.FXAM::FXAM
            // FXAM REG:SUPP:rw:f80=ST0;
            return 644 << 16 | 1114;
            break;
          }
          default: break;
        }
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.FLDCW::FLDCWmw
        // FLDCW MEM:r=$mem16;
        return 616 << 16 | 1075;
        break;
      }
      case 0x1b:
      {
        // the following switch contains 7 case.
        switch (a & 0xe0)
        {
          case 0x00:
          {
            // TEMPLATE.FLDx::FLD1
            // FLD1   REG:SUPP:w:f80=ST0;
            return 618 << 16 | 1078;
            break;
          }
          case 0x20:
          {
            // TEMPLATE.FLDx::FLDL2T
            // FLDL2T REG:SUPP:w:f80=ST0;
            return 618 << 16 | 1080;
            break;
          }
          case 0x40:
          {
            // TEMPLATE.FLDx::FLDL2E
            // FLDL2E REG:SUPP:w:f80=ST0;
            return 618 << 16 | 1079;
            break;
          }
          case 0x60:
          {
            // TEMPLATE.FLDx::FLDPI
            // FLDPI  REG:SUPP:w:f80=ST0;
            return 618 << 16 | 1083;
            break;
          }
          case 0x80:
          {
            // TEMPLATE.FLDx::FLDLG2
            // FLDLG2 REG:SUPP:w:f80=ST0;
            return 618 << 16 | 1081;
            break;
          }
          case 0xa0:
          {
            // TEMPLATE.FLDx::FLDLN2
            // FLDLN2 REG:SUPP:w:f80=ST0;
            return 618 << 16 | 1082;
            break;
          }
          case 0xc0:
          {
            // TEMPLATE.FLDx::FLDZ
            // FLDZ   REG:SUPP:w:f80=ST0;
            return 618 << 16 | 1084;
            break;
          }
          default: break;
        }
        break;
      }
      case 0x1c:
      {
        if (b & 0x04)
        {
          // TEMPLATE.FNSTENV::FNSTENVm
          // FNSTENV MEM:w=$mem224;
          return 680 << 16 | 1157;
        }
        else
        {
          // TEMPLATE.FNSTENV::FNSTENVm
          // FNSTENV MEM:w=$mem112;
          return 680 << 16 | 1156;
        }
        break;
      }
      case 0x1d:
      {
        // the following switch contains 8 case.
        switch (a & 0xe0)
        {
          case 0x00:
          {
            // TEMPLATE.F2XM1::F2XM1
            // F2XM1 REG:SUPP:rw:f80=ST0;
            return 575 << 16 | 1029;
            break;
          }
          case 0x20:
          {
            // TEMPLATE.FYL2X::FYL2X
            // FYL2X REG:SUPP:r:f80=ST0 REG:SUPP:rw:f80=ST1;
            return 649 << 16 | 1119;
            break;
          }
          case 0x40:
          {
            // TEMPLATE.FPTAN::FPTAN
            // FPTAN REG:SUPP:rw:f80=ST0 REG:SUPP:w:f80=ST1;
            return 623 << 16 | 1089;
            break;
          }
          case 0x60:
          {
            // TEMPLATE.FPATAN::FPATAN
            // FPATAN REG:SUPP:r:f80=ST0 REG:SUPP:rw:f80=ST1;
            return 620 << 16 | 1086;
            break;
          }
          case 0x80:
          {
            // TEMPLATE.FXTRACT::FXTRACT
            // FXTRACT REG:SUPP:rw:f80=ST0 REG:SUPP:w:f80=ST1;
            return 648 << 16 | 1118;
            break;
          }
          case 0xa0:
          {
            // TEMPLATE.FPREM1::FPREM1
            // FPREM1 REG:SUPP:rw:f80=ST0 REG:SUPP:r:f80=ST1;
            return 622 << 16 | 1088;
            break;
          }
          case 0xc0:
          {
            // TEMPLATE.FDECSTP::FDECSTP
            // FDECSTP;
            return 595 << 16 | 1053;
            break;
          }
          case 0xe0:
          {
            // TEMPLATE.FINCSTP::FINCSTP
            // FINCSTP;
            return 607 << 16 | 1065;
            break;
          }
          default: break;
        }
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.FNSTCW::FNSTCWmw
        // FNSTCW MEM:w=$mem16;
        return 679 << 16 | 1155;
        break;
      }
      case 0x1f:
      {
        // the following switch contains 8 case.
        switch (a & 0xe0)
        {
          case 0x00:
          {
            // TEMPLATE.FPREM::FPREM
            // FPREM REG:SUPP:rw:f80=ST0 REG:SUPP:r:f80=ST1;
            return 621 << 16 | 1087;
            break;
          }
          case 0x20:
          {
            // TEMPLATE.FYL2XP1::FYL2XP1
            // FYL2XP1 REG:SUPP:r:f80=ST0 REG:SUPP:rw:f80=ST1;
            return 650 << 16 | 1120;
            break;
          }
          case 0x40:
          {
            // TEMPLATE.FSQRT::FSQRT
            // FSQRT REG:SUPP:rw:f80=ST0;
            return 631 << 16 | 1099;
            break;
          }
          case 0x60:
          {
            // TEMPLATE.FSINCOS::FSINCOS
            // FSINCOS REG:SUPP:rw:f80=ST0 REG:SUPP:w:f80=ST1;
            return 630 << 16 | 1098;
            break;
          }
          case 0x80:
          {
            // TEMPLATE.FRNDINT::FRNDINT
            // FRNDINT REG:SUPP:rw:f80=ST0;
            return 624 << 16 | 1090;
            break;
          }
          case 0xa0:
          {
            // TEMPLATE.FSCALE::FSCALE
            // FSCALE REG:SUPP:rw:f80=ST0 REG:SUPP:r:f80=ST1;
            return 627 << 16 | 1095;
            break;
          }
          case 0xc0:
          {
            // TEMPLATE.FSIN::FSIN
            // FSIN REG:SUPP:rw:f80=ST0;
            return 629 << 16 | 1097;
            break;
          }
          case 0xe0:
          {
            // TEMPLATE.FCOS::FCOS
            // FCOS REG:SUPP:rw:f80=ST0;
            return 594 << 16 | 1052;
            break;
          }
          default: break;
        }
        break;
      }
      default: break;
    }
  break;
  /* 0xda */
  case 218:
    // the following switch contains 13 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.FIADD_80md::FIADDmd
        // FIADD REG:rw:f80=ST0  MEM:r:s32=$mem32;
        return 654 << 16 | 1126;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.FCMOVB::FCMOVB
        // FCMOVB   REG:cw:f80=ST0 REG:r:f80=$FPm;
        return 580 << 16 | 1034;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.FIMUL_80md::FIMULmd
        // FIMUL REG:rw:f80=ST0  MEM:r:s32=$mem32;
        return 674 << 16 | 1148;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.FCMOVE::FCMOVE
        // FCMOVE   REG:cw:f80=ST0 REG:r:f80=$FPm;
        return 582 << 16 | 1036;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.FICOM_80md::FICOMmd
        // FICOM  REG:r:f80=ST0 MEM:r:s32=$mem32;
        return 602 << 16 | 1060;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.FCMOVBE::FCMOVBE
        // FCMOVBE  REG:cw:f80=ST0 REG:r:f80=$FPm;
        return 581 << 16 | 1035;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.FICOMP_80md::FICOMPmd
        // FICOMP REG:r:f80=ST0 MEM:r:s32=$mem32;
        return 600 << 16 | 1058;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.FCMOVU::FCMOVU
        // FCMOVU   REG:cw:f80=ST0 REG:r:f80=$FPm;
        return 587 << 16 | 1041;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.FISUB_80md::FISUBmd
        // FISUB REG:rw:f80=ST0  MEM:r:s32=$mem32;
        return 683 << 16 | 1160;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.FISUBR_80md::FISUBRmd
        // FISUBR REG:rw:f80=ST0  MEM:r:s32=$mem32;
        return 689 << 16 | 1167;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.FUCOMPP::FUCOMPP
        // FUCOMPP REG:SUPP:r:f80=ST0 REG:SUPP:r:f80=ST1;
        return 643 << 16 | 1113;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.FIDIV_80md::FIDIVmd
        // FIDIV REG:rw:f80=ST0  MEM:r:s32=$mem32;
        return 665 << 16 | 1138;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.FIDIVR_80md::FIDIVRmd
        // FIDIVR REG:rw:f80=ST0  MEM:r:s32=$mem32;
        return 671 << 16 | 1145;
        break;
      }
      default: break;
    }
  break;
  /* 0xdb */
  case 219:
    // the following switch contains 13 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.FILD_80md::FILDmd
        // FILD REG:w:f80=ST0 MEM:r:s32=$mem32;
        return 604 << 16 | 1062;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.FCMOVNB::FCMOVNB
        // FCMOVNB  REG:cw:f80=ST0 REG:r:f80=$FPm;
        return 583 << 16 | 1037;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.FISTTP_md80::FISTTPmd
        // FISTTP MEM:w:s32=$mem32 REG:r:f80=ST0;
        return 944 << 16 | 1598;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.FCMOVNE::FCMOVNE
        // FCMOVNE  REG:cw:f80=ST0 REG:r:f80=$FPm;
        return 585 << 16 | 1039;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.FIST_md80::FISTmd
        // FIST  MEM:w:s32=$mem32 REG:r:f80=ST0;
        return 611 << 16 | 1069;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.FCMOVNBE::FCMOVNBE
        // FCMOVNBE REG:cw:f80=ST0 REG:r:f80=$FPm;
        return 584 << 16 | 1038;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.FISTP_md80::FISTPmd
        // FISTP MEM:w:s32=$mem32 REG:r:f80=ST0;
        return 608 << 16 | 1066;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.FCMOVNU::FCMOVNU
        // FCMOVNU  REG:cw:f80=ST0 REG:r:f80=$FPm;
        return 586 << 16 | 1040;
        break;
      }
      case 0x19:
      {
        // the following switch contains 5 case.
        switch (a & 0xe0)
        {
          case 0x00:
          {
            // TEMPLATE.FENI8087_NOP::FENI8087_NOP
            // FENI8087_NOP;
            return 597 << 16 | 1055;
            break;
          }
          case 0x20:
          {
            // TEMPLATE.FDISI8087_NOP::FDISI8087_NOP
            // FDISI8087_NOP;
            return 596 << 16 | 1054;
            break;
          }
          case 0x40:
          {
            // TEMPLATE.FNCLEX::FNCLEX
            // FNCLEX;
            return 656 << 16 | 1128;
            break;
          }
          case 0x60:
          {
            // TEMPLATE.FNINIT::FNINIT
            // FNINIT;
            return 673 << 16 | 1147;
            break;
          }
          case 0x80:
          {
            // TEMPLATE.FSETPM287_NOP::FSETPM287_NOP
            // FSETPM287_NOP;
            return 628 << 16 | 1096;
            break;
          }
          default: break;
        }
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.FLD_80m80::FLDm
        // FLD REG:w:f80=ST0 MEM:r:f80=$mem80;
        return 613 << 16 | 1071;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.FUCOMI::FUCOMI
        // FUCOMI  REG:r:f80=ST0 REG:r:f80=$FPm;
        return 659 << 16 | 1131;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.FCOMI::FCOMI
        // FCOMI   REG:r:f80=ST0 REG:r:f80=$FPm;
        return 657 << 16 | 1129;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.FSTP_m8080_1::FSTPm
        // FSTP MEM:w:f80=$mem80 REG:r:f80=ST0;
        return 632 << 16 | 1100;
        break;
      }
      default: break;
    }
  break;
  /* 0xdc */
  case 220:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.FADD_xxxx::FADDmq
        // FADD  REG:rw:f80=ST0  MEM:r:f64=$mem64;
        return 653 << 16 | 1125;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.FADD_xxxx::FADD
        // FADD  REG:rw:f80=$FPm REG:r:f80=ST0;
        return 653 << 16 | 1124;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.FMUL_xxxx::FMULmq
        // FMUL  REG:rw:f80=ST0  MEM:r:f64=$mem64;
        return 678 << 16 | 1154;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.FMUL_xxxx::FMUL
        // FMUL  REG:rw:f80=$FPm REG:r:f80=ST0;
        return 678 << 16 | 1153;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.FCOM_80mx_2::FCOMmq
        // FCOM   REG:r:f80=ST0      MEM:r:f64=$mem64;
        return 593 << 16 | 1051;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.FCOM_80mx_2::FCOM
        // FCOM   REG:r:f80=ST0      REG:r:f80=$FPm;
        return 593 << 16 | 1050;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.FCOMP_80mx_2::FCOMPmq
        // FCOMP  REG:r:f80=ST0      MEM:r:f64=$mem64;
        return 591 << 16 | 1047;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.FCOMP_80mx_2::FCOMP
        // FCOMP  REG:r:f80=ST0      REG:r:f80=$FPm;
        return 591 << 16 | 1046;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.FSUB_80mq::FSUBmq
        // FSUB  REG:rw:f80=ST0  MEM:r:f64=$mem64;
        return 686 << 16 | 1163;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.FSUBR_m8080::FSUBR
        // FSUBR  REG:rw:f80=$FPm REG:r:f80=ST0;
        return 694 << 16 | 1173;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.FSUBR_80mq::FSUBRmq
        // FSUBR  REG:rw:f80=ST0  MEM:r:f64=$mem64;
        return 692 << 16 | 1170;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.FSUB_m8080::FSUB
        // FSUB  REG:rw:f80=$FPm REG:r:f80=ST0;
        return 688 << 16 | 1166;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.FDIV_80mq::FDIVmq
        // FDIV  REG:rw:f80=ST0  MEM:r:f64=$mem64;
        return 662 << 16 | 1134;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.FDIVR_m8080::FDIVR
        // FDIVR  REG:rw:f80=$FPm REG:r:f80=ST0;
        return 670 << 16 | 1144;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.FDIVR_80mq::FDIVRmq
        // FDIVR  REG:rw:f80=ST0  MEM:r:f64=$mem64;
        return 668 << 16 | 1141;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.FDIV_m8080::FDIV
        // FDIV  REG:rw:f80=$FPm REG:r:f80=ST0;
        return 664 << 16 | 1137;
        break;
      }
      default: break;
    }
  break;
  /* 0xdd */
  case 221:
    // the following switch contains 13 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.FLD_80mq::FLDmq
        // FLD REG:w:f80=ST0 MEM:r:f64=$mem64;
        return 614 << 16 | 1072;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.FFREE::FFREE
        // FFREE REG:r:f80=$FPm;
        return 598 << 16 | 1056;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.FISTTP_mq80::FISTTPmq
        // FISTTP MEM:w:s64=$mem64 REG:r:f80=ST0;
        return 945 << 16 | 1599;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.FXCH_80m80_2::FXCH
        // FXCH REG:rw:f80=ST0 REG:rw:f80=$FPm;
        return 646 << 16 | 1116;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.FST_mxxx::FSTmq
        // FST  MEM:w:f64=$mem64 REG:r:f80=ST0;
        return 638 << 16 | 1108;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.FST_mxxx::FST
        // FST  REG:w:f80=$FPm   REG:r:f80=ST0;
        return 638 << 16 | 1107;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.FSTP_mxxx::FSTPmq
        // FSTP MEM:w:f64=$mem64 REG:r:f80=ST0;
        return 636 << 16 | 1105;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.FSTP_mxxx::FSTP
        // FSTP REG:w:f80=$FPm   REG:r:f80=ST0;
        return 636 << 16 | 1104;
        break;
      }
      case 0x18:
      {
        if (b & 0x04)
        {
          // TEMPLATE.FRSTOR::FRSTORm
          // FRSTOR MEM:r=$mem864;
          return 625 << 16 | 1092;
        }
        else
        {
          // TEMPLATE.FRSTOR::FRSTORm
          // FRSTOR MEM:r=$mem752;
          return 625 << 16 | 1091;
        }
        break;
      }
      case 0x19:
      {
        // TEMPLATE.FUCOM::FUCOM
        // FUCOM   REG:r:f80=ST0      REG:r:f80=$FPm;
        return 641 << 16 | 1111;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.FUCOMP::FUCOMP
        // FUCOMP  REG:r:f80=ST0      REG:r:f80=$FPm;
        return 642 << 16 | 1112;
        break;
      }
      case 0x1c:
      {
        if (b & 0x04)
        {
          // TEMPLATE.FNSAVE::FNSAVEm
          // FNSAVE MEM:w=$mem864;
          return 626 << 16 | 1094;
        }
        else
        {
          // TEMPLATE.FNSAVE::FNSAVEm
          // FNSAVE MEM:w=$mem752;
          return 626 << 16 | 1093;
        }
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.FNSTSW_mw::FNSTSWmw
        // FNSTSW MEM:w=$mem16;
        return 681 << 16 | 1158;
        break;
      }
      default: break;
    }
  break;
  /* 0xde */
  case 222:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.FIADD_80mw::FIADDmw
        // FIADD REG:rw:f80=ST0  MEM:r:s16=$mem16;
        return 655 << 16 | 1127;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.FADDP::FADDP
        // FADDP REG:rw:f80=$FPm REG:r:f80=ST0;
        return 651 << 16 | 1121;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.FIMUL_80mw::FIMULmw
        // FIMUL REG:rw:f80=ST0  MEM:r:s16=$mem16;
        return 675 << 16 | 1149;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.FMULP::FMULP
        // FMULP REG:rw:f80=$FPm REG:r:f80=ST0;
        return 676 << 16 | 1150;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.FICOM_80mw::FICOMmw
        // FICOM  REG:r:f80=ST0 MEM:r:s16=$mem16;
        return 603 << 16 | 1061;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.FCOMP_80m80::FCOMP
        // FCOMP  REG:r:f80=ST0      REG:r:f80=$FPm;
        return 589 << 16 | 1043;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.FICOMP_80mw::FICOMPmw
        // FICOMP REG:r:f80=ST0 MEM:r:s16=$mem16;
        return 601 << 16 | 1059;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.FCOMPP::FCOMPP
        // FCOMPP REG:SUPP:r:f80=ST0 REG:SUPP:r:f80=ST1;
        return 588 << 16 | 1042;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.FISUB_80mw::FISUBmw
        // FISUB REG:rw:f80=ST0  MEM:r:s16=$mem16;
        return 684 << 16 | 1161;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.FSUBRP::FSUBRP
        // FSUBRP REG:rw:f80=$FPm REG:r:f80=ST0;
        return 691 << 16 | 1169;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.FISUBR_80mw::FISUBRmw
        // FISUBR REG:rw:f80=ST0  MEM:r:s16=$mem16;
        return 690 << 16 | 1168;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.FSUBP::FSUBP
        // FSUBP REG:rw:f80=$FPm REG:r:f80=ST0;
        return 685 << 16 | 1162;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.FIDIV_80mw::FIDIVmw
        // FIDIV REG:rw:f80=ST0  MEM:r:s16=$mem16;
        return 666 << 16 | 1139;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.FDIVRP::FDIVRP
        // FDIVRP REG:rw:f80=$FPm REG:r:f80=ST0;
        return 667 << 16 | 1140;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.FIDIVR_80mw::FIDIVRmw
        // FIDIVR REG:rw:f80=ST0  MEM:r:s16=$mem16;
        return 672 << 16 | 1146;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.FDIVP::FDIVP
        // FDIVP REG:rw:f80=$FPm REG:r:f80=ST0;
        return 661 << 16 | 1133;
        break;
      }
      default: break;
    }
  break;
  /* 0xdf */
  case 223:
    // the following switch contains 15 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.FILD_80mw::FILDmw
        // FILD REG:w:f80=ST0 MEM:r:s16=$mem16;
        return 606 << 16 | 1064;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.FFREEP::FFREEP
        // FFREEP REG:r:f80=$FPm;
        return 599 << 16 | 1057;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.FISTTP_mw80::FISTTPmw
        // FISTTP MEM:w:s16=$mem16 REG:r:f80=ST0;
        return 946 << 16 | 1600;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.FXCH_80m80_3::FXCH
        // FXCH REG:rw:f80=ST0 REG:rw:f80=$FPm;
        return 647 << 16 | 1117;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.FIST_mw80::FISTmw
        // FIST  MEM:w:s16=$mem16 REG:r:f80=ST0;
        return 612 << 16 | 1070;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.FSTP_m8080_2::FSTP
        // FSTP REG:w:f80=$FPm   REG:r:f80=ST0;
        return 633 << 16 | 1101;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.FISTP_mw80::FISTPmw
        // FISTP MEM:w:s16=$mem16 REG:r:f80=ST0;
        return 610 << 16 | 1068;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.FSTP_m8080_3::FSTP
        // FSTP REG:w:f80=$FPm   REG:r:f80=ST0;
        return 634 << 16 | 1102;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.FBLD::FBLDm
        // FBLD REG:w:f80=ST0 MEM:r:bcd80=$mem80;
        return 577 << 16 | 1031;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.FNSTSW_w::FNSTSW
        // FNSTSW REG:w=AX;
        return 682 << 16 | 1159;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.FILD_80mq::FILDmq
        // FILD REG:w:f80=ST0 MEM:r:s64=$mem64;
        return 605 << 16 | 1063;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.FUCOMIP::FUCOMIP
        // FUCOMIP REG:r:f80=ST0 REG:r:f80=$FPm;
        return 660 << 16 | 1132;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.FBSTP::FBSTPm
        // FBSTP MEM:w:bcd80=$mem80 REG:r:f80=ST0;
        return 578 << 16 | 1032;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.FCOMIP::FCOMIP
        // FCOMIP  REG:r:f80=ST0 REG:r:f80=$FPm;
        return 658 << 16 | 1130;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.FISTP_mq80::FISTPmq
        // FISTP MEM:w:s64=$mem64 REG:r:f80=ST0;
        return 609 << 16 | 1067;
        break;
      }
      default: break;
    }
  break;
  /* 0xe0 */
  case 224:
    // TEMPLATE.LOOPNE::LOOPNE
    // LOOPNE REL:s8=$rel8 REG:SUPP:rw=$CXa REG:SUPP:rw=$IPa;
    return 239 << 16 | 431;
  break;
  /* 0xe1 */
  case 225:
    // TEMPLATE.LOOPE::LOOPE
    // LOOPE  REL:s8=$rel8 REG:SUPP:rw=$CXa REG:SUPP:rw=$IPa;
    return 238 << 16 | 430;
  break;
  /* 0xe2 */
  case 226:
    // TEMPLATE.LOOP::LOOP
    // LOOP   REL:s8=$rel8 REG:SUPP:rw=$CXa REG:SUPP:rw=$IPa;
    return 237 << 16 | 429;
  break;
  /* 0xe3 */
  case 227:
    // the following switch contains 6 case.
    switch (c & 0xf0)
    {
      case 0x00:
      {
        // TEMPLATE.JCXZ::JCXZ
        // JCXZ  REL:s8=$rel8   REG:SUPP:r=CX   REG:SUPP:rw=IP;
        return 182 << 16 | 333;
        break;
      }
      case 0x50:
      {
        // TEMPLATE.JECXZ::JECXZ
        // JECXZ REL:s8=$rel8   REG:SUPP:r=ECX  REG:SUPP:rw=EIP;
        return 183 << 16 | 335;
        break;
      }
      case 0x60:
      {
        // TEMPLATE.JRCXZ::JRCXZ
        // JRCXZ REL:s8=$rel8   REG:SUPP:r=RCX  REG:SUPP:rw=RIP;
        return 220 << 16 | 397;
        break;
      }
      case 0x80:
      {
        // TEMPLATE.JCXZ::JCXZ
        // JCXZ  REL:s8=$rel8   REG:SUPP:r=CX   REG:SUPP:rw=IP;
        return 182 << 16 | 332;
        break;
      }
      case 0xd0:
      {
        // TEMPLATE.JECXZ::JECXZ
        // JECXZ REL:s8=$rel8   REG:SUPP:r=ECX  REG:SUPP:rw=RIP;
        return 183 << 16 | 334;
        break;
      }
      case 0xe0:
      {
        // TEMPLATE.JRCXZ::JRCXZ
        // JRCXZ REL:s8=$rel8   REG:SUPP:r=RCX  REG:SUPP:rw=RIP;
        return 220 << 16 | 396;
        break;
      }
      default: break;
    }
  break;
  /* 0xe4 */
  case 228:
    // TEMPLATE.IN_bub::INib
    // IN REG:w=AL  IMM:u8=$uimm8;
    return 145 << 16 | 272;
  break;
  /* 0xe5 */
  case 229:
    // the following switch contains 3 case.
    switch ((b & 0x0c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.IN_xub::INib
        // IN REG:w=EAX IMM:u8=$uimm8;
        return 148 << 16 | 279;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.IN_xub::INib
        // IN REG:w=AX  IMM:u8=$uimm8;
        return 148 << 16 | 277;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.IN_xub::INib
        // IN REG:w=EAX IMM:u8=$uimm8;
        return 148 << 16 | 278;
        break;
      }
      default: break;
    }
  break;
  /* 0xe6 */
  case 230:
    // TEMPLATE.OUT_ubb::OUTib
    // OUT IMM:u8=$uimm8 REG:r=AL;
    return 340 << 16 | 609;
  break;
  /* 0xe7 */
  case 231:
    // the following switch contains 3 case.
    switch ((b & 0x0c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.OUT_ubx::OUTib
        // OUT IMM:u8=$uimm8 REG:r=EAX;
        return 341 << 16 | 612;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.OUT_ubx::OUTib
        // OUT IMM:u8=$uimm8 REG:r=AX;
        return 341 << 16 | 610;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.OUT_ubx::OUTib
        // OUT IMM:u8=$uimm8 REG:r=EAX;
        return 341 << 16 | 611;
        break;
      }
      default: break;
    }
  break;
  /* 0xe8 */
  case 232:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.CALL_sx::CALLm
        // CALL REL:sx=$relz   REG:SUPP:rw=RIP  REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
        return 71 << 16 | 155;
      }
      else
      {
        // TEMPLATE.CALL_sx::CALLm
        // CALL REL:s32=$rel32 REG:SUPP:rw=RIP  REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
        return 71 << 16 | 154;
      }
    }
    else
    {
      // TEMPLATE.CALL_sx::CALLm
      // CALL REL:sx=$relz   REG:SUPP:rw=EIP  REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
      return 71 << 16 | 156;
    }
  break;
  /* 0xe9 */
  case 233:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JMP_sx::JMP
        // JMP REL:sx=$relz   REG:SUPP:rw=RIP;
        return 175 << 16 | 320;
      }
      else
      {
        // TEMPLATE.JMP_sx::JMP
        // JMP REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 175 << 16 | 319;
      }
    }
    else
    {
      // TEMPLATE.JMP_sx::JMP
      // JMP REL:sx=$relz   REG:SUPP:rw=EIP;
      return 175 << 16 | 321;
    }
  break;
  /* 0xea */
  case 234:
    // TEMPLATE.JMP::JMP
    // JMP PTR:r=$ptrdpp  REG:SUPP:w=EIP;
    return 171 << 16 | 313;
  break;
  /* 0xeb */
  case 235:
    if (c & 0x80)
    {
      // TEMPLATE.JMP_s8::JMP
      // JMP REL:s8=$rel8   REG:SUPP:rw=RIP;
      return 174 << 16 | 317;
    }
    else
    {
      // TEMPLATE.JMP_s8::JMP
      // JMP REL:s8=$rel8   REG:SUPP:rw=EIP;
      return 174 << 16 | 318;
    }
  break;
  /* 0xec */
  case 236:
    // TEMPLATE.IN_bw::IN
    // IN REG:w=AL  REG:r=DX;
    return 146 << 16 | 273;
  break;
  /* 0xed */
  case 237:
    // the following switch contains 3 case.
    switch ((b & 0x0c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.IN_x::IN
        // IN REG:w=EAX REG:r=DX;
        return 147 << 16 | 276;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.IN_x::IN
        // IN REG:w=AX  REG:r=DX;
        return 147 << 16 | 274;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.IN_x::IN
        // IN REG:w=EAX REG:r=DX;
        return 147 << 16 | 275;
        break;
      }
      default: break;
    }
  break;
  /* 0xee */
  case 238:
    // TEMPLATE.OUT_wb::OUT
    // OUT REG:r=DX      REG:r=AL;
    return 343 << 16 | 616;
  break;
  /* 0xef */
  case 239:
    // the following switch contains 3 case.
    switch ((b & 0x0c) - 4)
    {
      case 0x00:
      {
        // TEMPLATE.OUT_w::OUT
        // OUT REG:r=DX      REG:r=EAX;
        return 342 << 16 | 615;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.OUT_w::OUT
        // OUT REG:r=DX      REG:r=AX;
        return 342 << 16 | 613;
        break;
      }
      case 0x08:
      {
        // TEMPLATE.OUT_w::OUT
        // OUT REG:r=DX      REG:r=EAX;
        return 342 << 16 | 614;
        break;
      }
      default: break;
    }
  break;
  /* invalid */
  case 240:
    return 0;
  /* 0xf1 */
  case 241:
    // TEMPLATE.INT1::INT1
    // INT1 REG:SUPP:w=$IPa;
    return 163 << 16 | 305;
  break;
  /* invalid */
  case 242:
    return 0;
  /* invalid */
  case 243:
    return 0;
  /* 0xf4 */
  case 244:
    // TEMPLATE.HLT::HLT
    // HLT;
    return 137 << 16 | 257;
  break;
  /* 0xf5 */
  case 245:
    // TEMPLATE.CMC::CMC
    // CMC;
    return 79 << 16 | 164;
  break;
  /* 0xf6 */
  case 246:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.TEST_mbsb_1::TESTmbib
        // TEST MEM:r:u8=$mem8 IMM:s8=$simm8;
        return 536 << 16 | 963;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.TEST_mbsb_1::TESTib
        // TEST REG:r=$GPR8m   IMM:s8=$simm8;
        return 536 << 16 | 962;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.TEST_mbsb_2::TESTmbib
        // TEST MEM:r:u8=$mem8 IMM:s8=$simm8;
        return 537 << 16 | 965;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.TEST_mbsb_2::TESTib
        // TEST REG:r=$GPR8m   IMM:s8=$simm8;
        return 537 << 16 | 964;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.NOT_mb::NOTmb
        // NOT MEM:rw:u8=$mem8;
        return 328 << 16 | 588;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.NOT_mb::NOT
        // NOT REG:rw=$GPR8m;
        return 328 << 16 | 587;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.NEG_mb::NEGmb
        // NEG MEM:rw:u8=$mem8;
        return 298 << 16 | 530;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.NEG_mb::NEG
        // NEG REG:rw=$GPR8m;
        return 298 << 16 | 529;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.MUL_mb::MULmb
        // MUL MEM:r:u8=$mem8 REG:SUPP:r=AL    REG:SUPP:w=AX;
        return 295 << 16 | 520;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.MUL_mb::MUL
        // MUL REG:r=$GPR8m   REG:SUPP:r=AL    REG:SUPP:w=AX;
        return 295 << 16 | 519;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.IMUL_mb::IMULmb
        // IMUL MEM:r:u8=$mem8 REG:SUPP:r=AL    REG:SUPP:w=AX;
        return 140 << 16 | 263;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.IMUL_mb::IMUL
        // IMUL REG:r=$GPR8m   REG:SUPP:r=AL    REG:SUPP:w=AX;
        return 140 << 16 | 262;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.DIV_mb::DIVmb
        // DIV MEM:r:u8=$mem8 REG:SUPP:rw=AX;
        return 134 << 16 | 253;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.DIV_mb::DIV
        // DIV REG:r=$GPR8m   REG:SUPP:rw=AX;
        return 134 << 16 | 252;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.IDIV_mb::IDIVmb
        // IDIV MEM:r:u8=$mem8 REG:SUPP:rw=AX;
        return 138 << 16 | 259;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.IDIV_mb::IDIV
        // IDIV REG:r=$GPR8m   REG:SUPP:rw=AX;
        return 138 << 16 | 258;
        break;
      }
      default: break;
    }
  break;
  /* 0xf7 */
  case 247:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.TEST_mvsz_1::TESTmi
        // TEST MEM:r:sx=$memv IMM:sx=$simmz;
        return 539 << 16 | 969;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.TEST_mvsz_1::TESTi
        // TEST REG:r=$GPRvm   IMM:sx=$simmz;
        return 539 << 16 | 968;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.TEST_mvsz_2::TESTmi
        // TEST MEM:r:sx=$memv IMM:sx=$simmz;
        return 540 << 16 | 971;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.TEST_mvsz_2::TESTi
        // TEST REG:r=$GPRvm   IMM:sx=$simmz;
        return 540 << 16 | 970;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.NOT_mv::NOTm
        // NOT MEM:rw:sx=$memv;
        return 329 << 16 | 590;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.NOT_mv::NOT
        // NOT REG:rw=$GPRvm;
        return 329 << 16 | 589;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.NEG_mv::NEGm
        // NEG MEM:rw:sx=$memv;
        return 299 << 16 | 532;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.NEG_mv::NEG
        // NEG REG:rw=$GPRvm;
        return 299 << 16 | 531;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.MUL_mv::MULm
        // MUL MEM:r:sx=$memv REG:SUPP:rw=$AXv REG:SUPP:w=$DXv;
        return 296 << 16 | 522;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.MUL_mv::MUL
        // MUL REG:r=$GPRvm   REG:SUPP:rw=$AXv REG:SUPP:w=$DXv;
        return 296 << 16 | 521;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.IMUL_mv::IMULm
        // IMUL MEM:r:sx=$memv REG:SUPP:rw=$AXv REG:SUPP:w=$DXv;
        return 141 << 16 | 265;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.IMUL_mv::IMUL
        // IMUL REG:r=$GPRvm   REG:SUPP:rw=$AXv REG:SUPP:w=$DXv;
        return 141 << 16 | 264;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.DIV_mv::DIVm
        // DIV MEM:r:sx=$memv REG:SUPP:rw=$AXv REG:SUPP:rw=$DXv;
        return 135 << 16 | 255;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.DIV_mv::DIV
        // DIV REG:r=$GPRvm   REG:SUPP:rw=$AXv REG:SUPP:rw=$DXv;
        return 135 << 16 | 254;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.IDIV_mv::IDIVm
        // IDIV MEM:r:sx=$memv REG:SUPP:rw=$AXv REG:SUPP:rw=$DXv;
        return 139 << 16 | 261;
        break;
      }
      case 0x1f:
      {
        // TEMPLATE.IDIV_mv::IDIV
        // IDIV REG:r=$GPRvm   REG:SUPP:rw=$AXv REG:SUPP:rw=$DXv;
        return 139 << 16 | 260;
        break;
      }
      default: break;
    }
  break;
  /* 0xf8 */
  case 248:
    // TEMPLATE.CLC::CLC
    // CLC;
    return 75 << 16 | 160;
  break;
  /* 0xf9 */
  case 249:
    // TEMPLATE.STC::STC
    // STC;
    return 511 << 16 | 916;
  break;
  /* 0xfa */
  case 250:
    // TEMPLATE.CLI::CLI
    // CLI;
    return 77 << 16 | 162;
  break;
  /* 0xfb */
  case 251:
    // TEMPLATE.STI::STI
    // STI;
    return 513 << 16 | 918;
  break;
  /* 0xfc */
  case 252:
    // TEMPLATE.CLD::CLD
    // CLD;
    return 76 << 16 | 161;
  break;
  /* 0xfd */
  case 253:
    // TEMPLATE.STD::STD
    // STD;
    return 512 << 16 | 917;
  break;
  /* 0xfe */
  case 254:
    // the following switch contains 4 case.
    switch (a & 0x13)
    {
      case 0x00:
      {
        // TEMPLATE.INC_mb::INCmb
        // INC MEM:rw:u8=$mem8;
        return 149 << 16 | 281;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.INC_mb::INC
        // INC REG:rw=$GPR8m;
        return 149 << 16 | 280;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.DEC_mb::DECmb
        // DEC MEM:rw:u8=$mem8;
        return 124 << 16 | 241;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.DEC_mb::DEC
        // DEC REG:rw=$GPR8m;
        return 124 << 16 | 240;
        break;
      }
      default: break;
    }
  break;
  /* 0xff */
  case 255:
    // the following switch contains 12 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.INC_mv::INCm
        // INC MEM:rw:sx=$memv;
        return 150 << 16 | 283;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.INC_mv::INC
        // INC REG:rw=$GPRvm;
        return 150 << 16 | 282;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.DEC_mv::DECm
        // DEC MEM:rw:sx=$memv;
        return 125 << 16 | 243;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.DEC_mv::DEC
        // DEC REG:rw=$GPRvm;
        return 125 << 16 | 242;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.CALL_mv::CALLm
        // CALL MEM:r:sx=$memv REG:SUPP:rw=$IPa REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
        return 70 << 16 | 153;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.CALL_mv::CALLm
        // CALL REG:r=$GPRvm   REG:SUPP:rw=$IPa REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
        return 70 << 16 | 152;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.CALL_mdpr::CALLm
        // CALL MEM:r=$memdpr  REG:SUPP:w=$IPa  REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_F};
        return 69 << 16 | 151;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.JMP_mv::JMPm
        // JMP MEM:r:sx=$memv REG:SUPP:w=$IPa;
        return 173 << 16 | 316;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.JMP_mv::JMP
        // JMP REG:r=$GPRvm   REG:SUPP:w=$IPa;
        return 173 << 16 | 315;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.JMP_mdpr::JMPm
        // JMP MEM:r=$memdpr  REG:SUPP:w=$IPa;
        return 172 << 16 | 314;
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.PUSH_mv::PUSHm
        // PUSH MEM:r:sx=$memv REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
        return 372 << 16 | 670;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.PUSH_mv::PUSHm
        // PUSH REG:r=$GPRvm   REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
        return 372 << 16 | 669;
        break;
      }
      default: break;
    }
  break;
  /* 0f.0x00 */
  case 256:
    // the following switch contains 12 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        // TEMPLATE.SLDT::SLDTmw
        // SLDT MEM:w:s16=$mem16 REG:SUPP:r=LDTR;
        return 509 << 16 | 913;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.SLDT::SLDT
        // SLDT REG:w=$GPRvm     REG:SUPP:r=LDTR;
        return 509 << 16 | 912;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.STR::STRmw
        // STR MEM:w:s16=$mem16 REG:SUPP:r=TR;
        return 518 << 16 | 932;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.STR::STR
        // STR REG:w=$GPRvm     REG:SUPP:r=TR;
        return 518 << 16 | 931;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.LLDT::LLDTmw
        // LLDT MEM:r:s16=$mem16 REG:SUPP:w=LDTR;
        return 231 << 16 | 414;
        break;
      }
      case 0x15:
      {
        // TEMPLATE.LLDT::LLDT
        // LLDT REG:r=$GPR16m    REG:SUPP:w=LDTR;
        return 231 << 16 | 413;
        break;
      }
      case 0x16:
      {
        // TEMPLATE.LTR::LTRmw
        // LTR MEM:r:s16=$mem16 REG:SUPP:w=TR;
        return 241 << 16 | 435;
        break;
      }
      case 0x17:
      {
        // TEMPLATE.LTR::LTR
        // LTR REG:r=$GPR16m    REG:SUPP:w=TR;
        return 241 << 16 | 434;
        break;
      }
      case 0x18:
      {
        // TEMPLATE.VERR::VERRmw
        // VERR MEM:r:s16=$mem16;
        return 548 << 16 | 989;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.VERR::VERR
        // VERR REG:r=$GPR16m;
        return 548 << 16 | 988;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.VERW::VERWmw
        // VERW MEM:r:s16=$mem16;
        return 549 << 16 | 991;
        break;
      }
      case 0x1b:
      {
        // TEMPLATE.VERW::VERW
        // VERW REG:r=$GPR16m;
        return 549 << 16 | 990;
        break;
      }
      default: break;
    }
  break;
  /* 0f.0x01 */
  case 257:
    // the following switch contains 16 case.
    switch (a & 0x1f)
    {
      case 0x00:
      {
        if (c & 0x80)
        {
          // TEMPLATE.SGDT::SGDTm
          // SGDT MEM:w=$mem80  REG:SUPP:r=GDTR;
          return 463 << 16 | 820;
        }
        else
        {
          // TEMPLATE.SGDT::SGDTm
          // SGDT MEM:w=$memppr REG:SUPP:r=GDTR;
          return 463 << 16 | 821;
        }
        break;
      }
      case 0x01:
      {
        // the following switch contains 6 case.
        switch (a & 0xe0)
        {
          case 0x00:
          {
            if (c & 0x80)
            {
              // TEMPLATE.ENCLV::ENCLV
              // ENCLV REG:SUPP:r:u32=EAX REG:SUPP:crw:u64=RBX REG:SUPP:crw:u64=RCX REG:SUPP:crw:u64=RDX;
              return 715 << 16 | 1209;
            }
            else
            {
              // TEMPLATE.ENCLV::ENCLV
              // ENCLV REG:SUPP:r:u32=EAX REG:SUPP:crw:u64=EBX REG:SUPP:crw:u64=ECX REG:SUPP:crw:u64=EDX;
              return 715 << 16 | 1210;
            }
            break;
          }
          case 0x20:
          {
            // TEMPLATE.VMCALL::VMCALL
            // VMCALL;
            return 743 << 16 | 1249;
            break;
          }
          case 0x40:
          {
            // TEMPLATE.VMLAUNCH::VMLAUNCH
            // VMLAUNCH;
            return 746 << 16 | 1252;
            break;
          }
          case 0x60:
          {
            // TEMPLATE.VMRESUME::VMRESUME
            // VMRESUME;
            return 747 << 16 | 1253;
            break;
          }
          case 0x80:
          {
            // TEMPLATE.VMXOFF::VMXOFF
            // VMXOFF;
            return 752 << 16 | 1264;
            break;
          }
          case 0xa0:
          {
            // TEMPLATE.PCONFIG::PCONFIG
            // PCONFIG REG:SUPP:rw:u32=EAX REG:SUPP:crw:u32=EBX REG:SUPP:crw:u32=ECX REG:SUPP:crw:u32=EDX;
            return 350 << 16 | 634;
            break;
          }
          default: break;
        }
        break;
      }
      case 0x12:
      {
        if (c & 0x80)
        {
          // TEMPLATE.SIDT::SIDTm
          // SIDT MEM:w=$mem80  REG:SUPP:r=IDTR;
          return 508 << 16 | 910;
        }
        else
        {
          // TEMPLATE.SIDT::SIDTm
          // SIDT MEM:w=$memppr REG:SUPP:r=IDTR;
          return 508 << 16 | 911;
        }
        break;
      }
      case 0x13:
      {
        // the following switch contains 5 case.
        switch (a & 0xe0)
        {
          case 0x00:
          {
            if (c & 0x80)
            {
              // TEMPLATE.MONITOR::MONITOR
              // MONITOR REG:SUPP:r=$AXa REG:SUPP:r=RCX REG:SUPP:r=RDX;
              return 725 << 16 | 1224;
            }
            else
            {
              // TEMPLATE.MONITOR::MONITOR
              // MONITOR REG:SUPP:r=$AXa REG:SUPP:r=ECX REG:SUPP:r=EDX;
              return 725 << 16 | 1225;
            }
            break;
          }
          case 0x20:
          {
            if (c & 0x80)
            {
              // TEMPLATE.MWAIT::MWAIT
              // MWAIT REG:SUPP:r=RAX REG:SUPP:r=RCX;
              return 726 << 16 | 1226;
            }
            else
            {
              // TEMPLATE.MWAIT::MWAIT
              // MWAIT REG:SUPP:r=EAX REG:SUPP:r=ECX;
              return 726 << 16 | 1227;
            }
            break;
          }
          case 0x40:
          {
            // TEMPLATE.CLAC::CLAC
            // CLAC;
            return 707 << 16 | 1199;
            break;
          }
          case 0x60:
          {
            // TEMPLATE.STAC::STAC
            // STAC;
            return 739 << 16 | 1243;
            break;
          }
          case 0xe0:
          {
            if (c & 0x80)
            {
              // TEMPLATE.ENCLS::ENCLS
              // ENCLS REG:SUPP:r=EAX REG:SUPP:crw=RBX REG:SUPP:crw=RCX REG:SUPP:crw=RDX;
              return 713 << 16 | 1205;
            }
            else
            {
              // TEMPLATE.ENCLS::ENCLS
              // ENCLS REG:SUPP:r=EAX REG:SUPP:crw=EBX REG:SUPP:crw=ECX REG:SUPP:crw=EDX;
              return 713 << 16 | 1206;
            }
            break;
          }
          default: break;
        }
        break;
      }
      case 0x14:
      {
        if (c & 0x80)
        {
          // TEMPLATE.LGDT::LGDTm
          // LGDT MEM:r=$mem80  REG:SUPP:w=GDTR;
          return 243 << 16 | 438;
        }
        else
        {
          // TEMPLATE.LGDT::LGDTm
          // LGDT MEM:r=$memppr REG:SUPP:w=GDTR;
          return 243 << 16 | 439;
        }
        break;
      }
      case 0x15:
      {
        // the following switch contains 6 case.
        switch (a & 0xe0)
        {
          case 0x00:
          {
            // TEMPLATE.XGETBV::XGETBV
            // XGETBV REG:SUPP:r=ECX REG:SUPP:w=EDX REG:SUPP:w=EAX REG:SUPP:r=XCR0;
            return 762 << 16 | 1276;
            break;
          }
          case 0x20:
          {
            // TEMPLATE.XSETBV::XSETBV
            // XSETBV REG:SUPP:r=ECX REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:w=XCR0;
            return 770 << 16 | 1289;
            break;
          }
          case 0x80:
          {
            // TEMPLATE.VMFUNC::VMFUNC
            // VMFUNC REG:SUPP:r=EAX;
            return 745 << 16 | 1251;
            break;
          }
          case 0xa0:
          {
            // TEMPLATE.XEND::XEND
            // XEND;
            return 761 << 16 | 1275;
            break;
          }
          case 0xc0:
          {
            // TEMPLATE.XTEST::XTEST
            // XTEST;
            return 771 << 16 | 1290;
            break;
          }
          case 0xe0:
          {
            if (c & 0x80)
            {
              // TEMPLATE.ENCLU::ENCLU
              // ENCLU REG:SUPP:r=EAX REG:SUPP:crw=RBX REG:SUPP:crw=RCX REG:SUPP:crw=RDX;
              return 714 << 16 | 1207;
            }
            else
            {
              // TEMPLATE.ENCLU::ENCLU
              // ENCLU REG:SUPP:r=EAX REG:SUPP:crw=EBX REG:SUPP:crw=ECX REG:SUPP:crw=EDX;
              return 714 << 16 | 1208;
            }
            break;
          }
          default: break;
        }
        break;
      }
      case 0x16:
      {
        if (c & 0x80)
        {
          // TEMPLATE.LIDT::LIDTm
          // LIDT MEM:r=$mem80  REG:SUPP:w=IDTR;
          return 244 << 16 | 440;
        }
        else
        {
          // TEMPLATE.LIDT::LIDTm
          // LIDT MEM:r=$memppr REG:SUPP:w=IDTR;
          return 244 << 16 | 441;
        }
        break;
      }
      case 0x17:
      {
        // the following switch contains 8 case.
        switch (a & 0xe0)
        {
          case 0x00:
          {
            // TEMPLATE.VMRUN::VMRUN
            // VMRUN REG:r=$AXv;
            return 3133 << 16 | 6469;
            break;
          }
          case 0x20:
          {
            // TEMPLATE.VMMCALL::VMMCALL
            // VMMCALL;
            return 3132 << 16 | 6468;
            break;
          }
          case 0x40:
          {
            // TEMPLATE.VMLOAD::VMLOAD
            // VMLOAD REG:r=$AXv;
            return 3131 << 16 | 6467;
            break;
          }
          case 0x60:
          {
            // TEMPLATE.VMSAVE::VMSAVE
            // VMSAVE;
            return 3134 << 16 | 6470;
            break;
          }
          case 0x80:
          {
            // TEMPLATE.STGI::STGI
            // STGI;
            return 3130 << 16 | 6466;
            break;
          }
          case 0xa0:
          {
            // TEMPLATE.CLGI::CLGI
            // CLGI;
            return 3127 << 16 | 6463;
            break;
          }
          case 0xc0:
          {
            // TEMPLATE.SKINIT::SKINIT
            // SKINIT REG:r=EAX;
            return 3129 << 16 | 6465;
            break;
          }
          case 0xe0:
          {
            // TEMPLATE.INVLPGA::INVLPGA
            // INVLPGA REG:r=$AXv REG:r=ECX;
            return 3128 << 16 | 6464;
            break;
          }
          default: break;
        }
        break;
      }
      case 0x18:
      {
        // TEMPLATE.SMSW::SMSWmw
        // SMSW MEM:w:s16=$mem16 REG:SUPP:r=CR0;
        return 510 << 16 | 915;
        break;
      }
      case 0x19:
      {
        // TEMPLATE.SMSW::SMSW
        // SMSW REG:w=$GPRvm     REG:SUPP:r=CR0;
        return 510 << 16 | 914;
        break;
      }
      case 0x1a:
      {
        // TEMPLATE.RSTORSSP::RSTORSSPmq
        // RSTORSSP MEM:rw:u64=$mem64;
        return 736 << 16 | 1240;
        break;
      }
      case 0x1b:
      {
        if (a & 0x20)
        {
          // TEMPLATE.WRPKRU::WRPKRU
          // WRPKRU REG:SUPP:w=PKRU REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=ECX;
          return 754 << 16 | 1266;
        }
        else
        {
          if (a & 0x40)
          {
            if (a & 0x80)
            {
              // TEMPLATE.RDPKRU::RDPKRU
              // RDPKRU REG:SUPP:r=PKRU REG:SUPP:w=EDX REG:SUPP:w=EAX REG:SUPP:r=ECX;
              return 729 << 16 | 1232;
            }
            else
            {
              // TEMPLATE.SAVEPREVSSP::SAVEPREVSSP
              // SAVEPREVSSP;
              return 737 << 16 | 1241;
            }
          }
          else
          {
            // TEMPLATE.SETSSBSY::SETSSBSY
            // SETSSBSY;
            return 738 << 16 | 1242;
          }
        }
        break;
      }
      case 0x1c:
      {
        // TEMPLATE.LMSW::LMSWmw
        // LMSW MEM:r:s16=$mem16 REG:SUPP:w=CR0;
        return 232 << 16 | 416;
        break;
      }
      case 0x1d:
      {
        // TEMPLATE.LMSW::LMSW
        // LMSW REG:r=$GPR16m    REG:SUPP:w=CR0;
        return 232 << 16 | 415;
        break;
      }
      case 0x1e:
      {
        // TEMPLATE.INVLPG::INVLPGmb
        // INVLPG MEM:r:u8=$mem8;
        return 167 << 16 | 309;
        break;
      }
      case 0x1f:
      {
        // the following switch contains 6 case.
        switch (a & 0xe0)
        {
          case 0x00:
          {
            // TEMPLATE.SWAPGS::SWAPGS
            // SWAPGS;
            return 529 << 16 | 951;
            break;
          }
          case 0x20:
          {
            // TEMPLATE.RDTSCP::RDTSCP
            // RDTSCP REG:SUPP:w=EAX REG:SUPP:w=EDX REG:SUPP:w=ECX;
            return 733 << 16 | 1237;
            break;
          }
          case 0x40:
          {
            if (c & 0x80)
            {
              // TEMPLATE.MONITORX::MONITORX
              // MONITORX REG:SUPP:r=$AXa REG:SUPP:r=RCX REG:SUPP:r=RDX;
              return 3122 << 16 | 6456;
            }
            else
            {
              // TEMPLATE.MONITORX::MONITORX
              // MONITORX REG:SUPP:r=$AXa REG:SUPP:r=ECX REG:SUPP:r=EDX;
              return 3122 << 16 | 6457;
            }
            break;
          }
          case 0x60:
          {
            if (c & 0x80)
            {
              // TEMPLATE.MWAITX::MWAITX
              // MWAITX REG:SUPP:r=RAX REG:SUPP:r=RCX;
              return 3125 << 16 | 6460;
            }
            else
            {
              // TEMPLATE.MWAITX::MWAITX
              // MWAITX REG:SUPP:r=EAX REG:SUPP:r=ECX;
              return 3125 << 16 | 6461;
            }
            break;
          }
          case 0x80:
          {
            // TEMPLATE.CLZERO::CLZERO
            // CLZERO REG:r=$AXv;
            return 3113 << 16 | 6445;
            break;
          }
          case 0xa0:
          {
            // TEMPLATE.RDPRU::RDPRU
            // RDPRU REG:SUPP:w:s32=EDX REG:SUPP:w:s32=EAX REG:SUPP:r:s32=ECX;
            return 3126 << 16 | 6462;
            break;
          }
          default: break;
        }
        break;
      }
      default: break;
    }
  break;
  /* 0f.0x02 */
  case 258:
    if (a & 0x01)
    {
      // TEMPLATE.LAR::LAR
      // LAR REG:cw=$GPRvr REG:r=$GPRvm;
      return 228 << 16 | 409;
    }
    else
    {
      // TEMPLATE.LAR::LARmw
      // LAR REG:cw=$GPRvr MEM:r:s16=$mem16;
      return 228 << 16 | 410;
    }
  break;
  /* 0f.0x03 */
  case 259:
    if (a & 0x01)
    {
      // TEMPLATE.LSL::LSL
      // LSL REG:rw=$GPRvr REG:r=$GPRzm;
      return 240 << 16 | 432;
    }
    else
    {
      // TEMPLATE.LSL::LSLmw
      // LSL REG:rw=$GPRvr MEM:r:s16=$mem16;
      return 240 << 16 | 433;
    }
  break;
  /* invalid */
  case 260:
    return 0;
  /* 0f.0x05 */
  case 261:
    if (c & 0x80)
    {
      // TEMPLATE.SYSCALL_1::SYSCALL
      // SYSCALL REG:SUPP:w=RIP REG:SUPP:w=RCX REG:SUPP:w=R11 REG:SUPP:w=CS REG:SUPP:w=SS;
      return 530 << 16 | 952;
    }
    else
    {
      // TEMPLATE.SYSCALL_2::SYSCALL
      // SYSCALL REG:SUPP:w=$IPa REG:SUPP:w=RCX REG:SUPP:w=R11 REG:SUPP:w=CS REG:SUPP:w=SS;
      return 3135 << 16 | 6471;
    }
  break;
  /* 0f.0x06 */
  case 262:
    // TEMPLATE.CLTS::CLTS
    // CLTS;
    return 78 << 16 | 163;
  break;
  /* 0f.0x07 */
  case 263:
    if (c & 0x80)
    {
      if (b & 0x04)
      {
        // TEMPLATE.SYSRET_1::SYSRET
        // SYSRET REG:SUPP:w=RIP REG:SUPP:r=RCX REG:SUPP:r=R11 REG:SUPP:w=CS REG:SUPP:w=SS;
        return 533 << 16 | 957;
      }
      else
      {
        // TEMPLATE.SYSRET_1::SYSRET
        // SYSRET REG:SUPP:w=EIP REG:SUPP:r=ECX REG:SUPP:r=R11 REG:SUPP:w=CS REG:SUPP:w=SS;
        return 533 << 16 | 958;
      }
    }
    else
    {
      // TEMPLATE.SYSRET_2::SYSRET
      // SYSRET REG:SUPP:w=EIP REG:SUPP:r=RCX REG:SUPP:r=R11 REG:SUPP:w=CS REG:SUPP:w=SS;
      return 3136 << 16 | 6472;
    }
  break;
  /* 0f.0x08 */
  case 264:
    // TEMPLATE.INVD::INVD
    // INVD;
    return 166 << 16 | 308;
  break;
  /* 0f.0x09 */
  case 265:
    // TEMPLATE.WBINVD::WBINVD
    // WBINVD;
    return 550 << 16 | 992;
  break;
  /* invalid */
  case 266:
    return 0;
  /* 0f.0x0b */
  case 267:
    // TEMPLATE.UD2::UD2
    // UD2;
    return 545 << 16 | 979;
  break;
  /* invalid */
  case 268:
    return 0;
  /* 0f.0x0d */
  case 269:
    if (a & 0x01)
    {
      // TEMPLATE.NOP_mvrv_1::NOP
      // NOP REG:r=$GPRvm   REG:r=$GPRvr;
      return 311 << 16 | 548;
    }
    else
    {
      // the following switch contains 8 case.
      switch (a & 0x1e)
      {
        case 0x00:
        {
          // TEMPLATE.PREFETCH_mb_1::PREFETCHmb
          // PREFETCH MEM:r:s64=$mem8;
          return 795 << 16 | 1336;
          break;
        }
        case 0x12:
        {
          // TEMPLATE.PREFETCHW::PREFETCHWmb
          // PREFETCHW MEM:r:s64=$mem8;
          return 860 << 16 | 1427;
          break;
        }
        case 0x14:
        {
          // TEMPLATE.PREFETCHWT1::PREFETCHWT1mb
          // PREFETCHWT1 MEM:r:u8=$mem8;
          return 3291 << 16 | 6817;
          break;
        }
        case 0x16:
        {
          // TEMPLATE.PREFETCH_mb_2::PREFETCHmb
          // PREFETCH MEM:r:s64=$mem8;
          return 796 << 16 | 1337;
          break;
        }
        case 0x18:
        {
          // TEMPLATE.PREFETCH_mb_3::PREFETCHmb
          // PREFETCH MEM:r:s64=$mem8;
          return 797 << 16 | 1338;
          break;
        }
        case 0x1a:
        {
          // TEMPLATE.PREFETCH_mb_4::PREFETCHmb
          // PREFETCH MEM:r:s64=$mem8;
          return 798 << 16 | 1339;
          break;
        }
        case 0x1c:
        {
          // TEMPLATE.PREFETCH_mb_5::PREFETCHmb
          // PREFETCH MEM:r:s64=$mem8;
          return 799 << 16 | 1340;
          break;
        }
        case 0x1e:
        {
          // TEMPLATE.PREFETCH_mb_6::PREFETCHmb
          // PREFETCH MEM:r:s64=$mem8;
          return 800 << 16 | 1341;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f.0x0e */
  case 270:
    // TEMPLATE.FEMMS::FEMMS
    // FEMMS;
    return 777 << 16 | 1301;
  break;
  /* invalid */
  case 271:
    return 0;
  /* 0f.0x10 */
  case 272:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVSD_rxmq::MOVSD
            // MOVSD REG:w:f64=$XMMr  REG:r:f64=$XMMm;
            return 1002 << 16 | 1684;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMOVSD_ronomq::VMOVSD
            // VMOVSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm;
            return 1553 << 16 | 2891;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VMOVSD_ronomo::VMOVSD
            // VMOVSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 1552 << 16 | 2890;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVSS_rxmd::MOVSS
              // MOVSS REG:w:f32=$XMMr  REG:r:f32=$XMMm;
              return 1006 << 16 | 1692;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMOVSS_ronomd::VMOVSS
              // VMOVSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm;
              return 1568 << 16 | 2918;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMOVSS_ronomo::VMOVSS
              // VMOVSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 1569 << 16 | 2919;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVUPD_romo::MOVUPD
                // MOVUPD VREG:w:f64=$XMMr  VREG:r:f64=$XMMm;
                return 1008 << 16 | 1696;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVUPD_rxmx::VMOVUPD
                  // VMOVUPD VREG:w:f64=$YMMr  VREG:r:f64=$YMMm;
                  return 1575 << 16 | 2933;
                }
                else
                {
                  // TEMPLATE.VMOVUPD_rxmx::VMOVUPD
                  // VMOVUPD VREG:w:f64=$XMMr  VREG:r:f64=$XMMm;
                  return 1575 << 16 | 2932;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMOVUPD_romo::VMOVUPD
                    // VMOVUPD VREG:w:f64=$XMMr  PREG:r:Z=$Kk      VREG:r:f64=$XMMm;
                    return 1574 << 16 | 2930;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMOVUPD_rymy::VMOVUPD
                    // VMOVUPD VREG:w:f64=$YMMr  PREG:r:Z=$Kk      VREG:r:f64=$YMMm;
                    return 1576 << 16 | 2936;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMOVUPD_rzmz::VMOVUPD
                    // VMOVUPD VREG:w:f64=$ZMMr  PREG:r:Z=$Kk      VREG:r:f64=$ZMMm;
                    return 1577 << 16 | 2938;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVUPS_romo::MOVUPS
                // MOVUPS VREG:w:f32=$XMMr  VREG:r:f32=$XMMm;
                return 1010 << 16 | 1700;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVUPS_rxmx::VMOVUPS
                  // VMOVUPS VREG:w:f32=$YMMr  VREG:r:f32=$YMMm;
                  return 1583 << 16 | 2953;
                }
                else
                {
                  // TEMPLATE.VMOVUPS_rxmx::VMOVUPS
                  // VMOVUPS VREG:w:f32=$XMMr  VREG:r:f32=$XMMm;
                  return 1583 << 16 | 2952;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMOVUPS_romo::VMOVUPS
                    // VMOVUPS VREG:w:f32=$XMMr  PREG:r:Z=$Kk      VREG:r:f32=$XMMm;
                    return 1582 << 16 | 2950;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMOVUPS_rymy::VMOVUPS
                    // VMOVUPS VREG:w:f32=$YMMr  PREG:r:Z=$Kk      VREG:r:f32=$YMMm;
                    return 1584 << 16 | 2956;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMOVUPS_rzmz::VMOVUPS
                    // VMOVUPS VREG:w:f32=$ZMMr  PREG:r:Z=$Kk      VREG:r:f32=$ZMMm;
                    return 1585 << 16 | 2958;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVSD_rxmq::MOVSDmq
            // MOVSD VREG:w:f64=$XMMr MEM:r:f64=$mem64;
            return 1002 << 16 | 1685;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMOVSD_romq_1::VMOVSDmq
            // VMOVSD VREG:w:f64=$XMMr MEM:r:f64=$mem64;
            return 1550 << 16 | 2888;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VMOVSD_romq_2::VMOVSDmq
            // VMOVSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     MEM:r:f64=$mem64;
            return 1551 << 16 | 2889;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVSS_rxmd::MOVSSmd
              // MOVSS VREG:w:f32=$XMMr MEM:r:f32=$mem32;
              return 1006 << 16 | 1693;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMOVSS_romd_1::VMOVSSmd
              // VMOVSS VREG:w:f32=$XMMr MEM:r:f32=$mem32;
              return 1566 << 16 | 2916;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMOVSS_romd_2::VMOVSSmd
              // VMOVSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     MEM:r:f32=$mem32;
              return 1567 << 16 | 2917;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVUPD_romo::MOVUPDmx
                // MOVUPD VREG:w:f64=$XMMr  MEM:r:f64=$mem128;
                return 1008 << 16 | 1697;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVUPD_rxmx::VMOVUPDmy
                  // VMOVUPD VREG:w:f64=$YMMr  MEM:r:f64=$mem256;
                  return 1575 << 16 | 2935;
                }
                else
                {
                  // TEMPLATE.VMOVUPD_rxmx::VMOVUPDmx
                  // VMOVUPD VREG:w:f64=$XMMr  MEM:r:f64=$mem128;
                  return 1575 << 16 | 2934;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMOVUPD_romo::VMOVUPDmx
                    // VMOVUPD VREG:w:f64=$XMMr  PREG:r:Z=$Kk      MEM:r:f64=$mem128;
                    return 1574 << 16 | 2931;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMOVUPD_rymy::VMOVUPDmy
                    // VMOVUPD VREG:w:f64=$YMMr  PREG:r:Z=$Kk      MEM:r:f64=$mem256;
                    return 1576 << 16 | 2937;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMOVUPD_rzmz::VMOVUPDmz
                    // VMOVUPD VREG:w:f64=$ZMMr  PREG:r:Z=$Kk      MEM:r:f64=$mem512;
                    return 1577 << 16 | 2939;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVUPS_romo::MOVUPSmx
                // MOVUPS VREG:w:f32=$XMMr  MEM:r:f32=$mem128;
                return 1010 << 16 | 1701;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVUPS_rxmx::VMOVUPSmy
                  // VMOVUPS VREG:w:f32=$YMMr  MEM:r:f32=$mem256;
                  return 1583 << 16 | 2955;
                }
                else
                {
                  // TEMPLATE.VMOVUPS_rxmx::VMOVUPSmx
                  // VMOVUPS VREG:w:f32=$XMMr  MEM:r:f32=$mem128;
                  return 1583 << 16 | 2954;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMOVUPS_romo::VMOVUPSmx
                    // VMOVUPS VREG:w:f32=$XMMr  PREG:r:Z=$Kk      MEM:r:f32=$mem128;
                    return 1582 << 16 | 2951;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMOVUPS_rymy::VMOVUPSmy
                    // VMOVUPS VREG:w:f32=$YMMr  PREG:r:Z=$Kk      MEM:r:f32=$mem256;
                    return 1584 << 16 | 2957;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMOVUPS_rzmz::VMOVUPSmz
                    // VMOVUPS VREG:w:f32=$ZMMr  PREG:r:Z=$Kk      MEM:r:f32=$mem512;
                    return 1585 << 16 | 2959;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x11 */
  case 273:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVSD_mqrq::MOVSD
            // MOVSD REG:w:f64=$XMMm  REG:r:f64=$XMMr;
            return 1001 << 16 | 1682;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMOVSD_monorq::VMOVSD
            // VMOVSD VREG:w:f64=$XMMm VREG:r:f64=$XMMn REG:r:f64=$XMMr;
            return 1547 << 16 | 2885;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VMOVSD_monoro::VMOVSD
            // VMOVSD VREG:w:f64=$XMMm PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMr;
            return 1546 << 16 | 2884;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVSS_mdrd::MOVSS
              // MOVSS REG:w:f32=$XMMm  REG:r:f32=$XMMr;
              return 1005 << 16 | 1690;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMOVSS_monord::VMOVSS
              // VMOVSS VREG:w:f32=$XMMm VREG:r:f32=$XMMn REG:r:f32=$XMMr;
              return 1564 << 16 | 2914;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMOVSS_monoro::VMOVSS
              // VMOVSS VREG:w:f32=$XMMm PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMr;
              return 1565 << 16 | 2915;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVUPD_moro::MOVUPD
                // MOVUPD VREG:w:f64=$XMMm  VREG:r:f64=$XMMr;
                return 1007 << 16 | 1694;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVUPD_mxrx::VMOVUPD
                  // VMOVUPD VREG:w:f64=$YMMm  VREG:r:f64=$YMMr;
                  return 1571 << 16 | 2923;
                }
                else
                {
                  // TEMPLATE.VMOVUPD_mxrx::VMOVUPD
                  // VMOVUPD VREG:w:f64=$XMMm  VREG:r:f64=$XMMr;
                  return 1571 << 16 | 2922;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMOVUPD_moro::VMOVUPD
                    // VMOVUPD VREG:w:f64=$XMMm  PREG:r:Z=$Kk      VREG:r:f64=$XMMr;
                    return 1570 << 16 | 2920;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMOVUPD_myry::VMOVUPD
                    // VMOVUPD VREG:w:f64=$YMMm  PREG:r:Z=$Kk      VREG:r:f64=$YMMr;
                    return 1572 << 16 | 2926;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMOVUPD_mzrz::VMOVUPD
                    // VMOVUPD VREG:w:f64=$ZMMm  PREG:r:Z=$Kk      VREG:r:f64=$ZMMr;
                    return 1573 << 16 | 2928;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVUPS_moro::MOVUPS
                // MOVUPS VREG:w:f32=$XMMm  VREG:r:f32=$XMMr;
                return 1009 << 16 | 1698;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVUPS_mxrx::VMOVUPS
                  // VMOVUPS VREG:w:f32=$YMMm  VREG:r:f32=$YMMr;
                  return 1579 << 16 | 2943;
                }
                else
                {
                  // TEMPLATE.VMOVUPS_mxrx::VMOVUPS
                  // VMOVUPS VREG:w:f32=$XMMm  VREG:r:f32=$XMMr;
                  return 1579 << 16 | 2942;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMOVUPS_moro::VMOVUPS
                    // VMOVUPS VREG:w:f32=$XMMm  PREG:r:Z=$Kk      VREG:r:f32=$XMMr;
                    return 1578 << 16 | 2940;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMOVUPS_myry::VMOVUPS
                    // VMOVUPS VREG:w:f32=$YMMm  PREG:r:Z=$Kk      VREG:r:f32=$YMMr;
                    return 1580 << 16 | 2946;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMOVUPS_mzrz::VMOVUPS
                    // VMOVUPS VREG:w:f32=$ZMMm  PREG:r:Z=$Kk      VREG:r:f32=$ZMMr;
                    return 1581 << 16 | 2948;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVSD_mqrq::MOVSDmq
            // MOVSD MEM:w:f64=$mem64 REG:r:f64=$XMMr;
            return 1001 << 16 | 1683;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMOVSD_mqrq::VMOVSDmq
            // VMOVSD MEM:w:f64=$mem64 REG:r:f64=$XMMr;
            return 1549 << 16 | 2887;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VMOVSD_mqro::VMOVSDmq
            // VMOVSD MEM:w:f64=$mem64 PREG:r:Z=$Kk     VREG:r:f64=$XMMr;
            return 1548 << 16 | 2886;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVSS_mdrd::MOVSSmd
              // MOVSS MEM:w:f32=$mem32 REG:r:f32=$XMMr;
              return 1005 << 16 | 1691;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMOVSS_mdrd::VMOVSSmd
              // VMOVSS MEM:w:f32=$mem32 REG:r:f32=$XMMr;
              return 1562 << 16 | 2912;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMOVSS_mdro::VMOVSSmd
              // VMOVSS MEM:w:f32=$mem32 PREG:r:Z=$Kk     VREG:r:f32=$XMMr;
              return 1563 << 16 | 2913;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVUPD_moro::MOVUPDmx
                // MOVUPD MEM:w:f64=$mem128 VREG:r:f64=$XMMr;
                return 1007 << 16 | 1695;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVUPD_mxrx::VMOVUPDmy
                  // VMOVUPD MEM:w:f64=$mem256 VREG:r:f64=$YMMr;
                  return 1571 << 16 | 2925;
                }
                else
                {
                  // TEMPLATE.VMOVUPD_mxrx::VMOVUPDmx
                  // VMOVUPD MEM:w:f64=$mem128 VREG:r:f64=$XMMr;
                  return 1571 << 16 | 2924;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMOVUPD_moro::VMOVUPDmx
                    // VMOVUPD MEM:w:f64=$mem128 PREG:r:Z=$Kk      VREG:r:f64=$XMMr;
                    return 1570 << 16 | 2921;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMOVUPD_myry::VMOVUPDmy
                    // VMOVUPD MEM:w:f64=$mem256 PREG:r:Z=$Kk      VREG:r:f64=$YMMr;
                    return 1572 << 16 | 2927;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMOVUPD_mzrz::VMOVUPDmz
                    // VMOVUPD MEM:w:f64=$mem512 PREG:r:Z=$Kk      VREG:r:f64=$ZMMr;
                    return 1573 << 16 | 2929;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVUPS_moro::MOVUPSmx
                // MOVUPS MEM:w:f32=$mem128 VREG:r:f32=$XMMr;
                return 1009 << 16 | 1699;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVUPS_mxrx::VMOVUPSmy
                  // VMOVUPS MEM:w:f32=$mem256 VREG:r:f32=$YMMr;
                  return 1579 << 16 | 2945;
                }
                else
                {
                  // TEMPLATE.VMOVUPS_mxrx::VMOVUPSmx
                  // VMOVUPS MEM:w:f32=$mem128 VREG:r:f32=$XMMr;
                  return 1579 << 16 | 2944;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMOVUPS_moro::VMOVUPSmx
                    // VMOVUPS MEM:w:f32=$mem128 PREG:r:Z=$Kk      VREG:r:f32=$XMMr;
                    return 1578 << 16 | 2941;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMOVUPS_myry::VMOVUPSmy
                    // VMOVUPS MEM:w:f32=$mem256 PREG:r:Z=$Kk      VREG:r:f32=$YMMr;
                    return 1580 << 16 | 2947;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMOVUPS_mzrz::VMOVUPSmz
                    // VMOVUPS MEM:w:f32=$mem512 PREG:r:Z=$Kk      VREG:r:f32=$ZMMr;
                    return 1581 << 16 | 2949;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x12 */
  case 274:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVDDUP::MOVDDUP
            // MOVDDUP VREG:w:s32=$XMMr REG:r:s64=$XMMm;
            return 973 << 16 | 1644;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VMOVDDUP_rxmx::VMOVDDUP
              // VMOVDDUP VREG:w:f64=$YMMr VREG:r:f64=$YMMm;
              return 1468 << 16 | 2729;
            }
            else
            {
              // TEMPLATE.VMOVDDUP_rxmx::VMOVDDUP
              // VMOVDDUP VREG:w:f64=$XMMr VREG:r:f64=$XMMm;
              return 1468 << 16 | 2728;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VMOVDDUP_romx::VMOVDDUP
                // VMOVDDUP VREG:w:f64=$XMMr PREG:r:Z=$Kk      VREG:r:f64=$XMMm;
                return 1467 << 16 | 2726;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVDDUP_rymy::VMOVDDUP
                // VMOVDDUP VREG:w:f64=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$YMMm;
                return 1469 << 16 | 2732;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVDDUP_rzmz::VMOVDDUP
                // VMOVDDUP VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMm;
                return 1470 << 16 | 2734;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVSLDUP::MOVSLDUP
              // MOVSLDUP VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
              return 1004 << 16 | 1688;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VMOVSLDUP_rxmx::VMOVSLDUP
                // VMOVSLDUP VREG:w:f32=$YMMr VREG:r:f32=$YMMm;
                return 1559 << 16 | 2905;
              }
              else
              {
                // TEMPLATE.VMOVSLDUP_rxmx::VMOVSLDUP
                // VMOVSLDUP VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
                return 1559 << 16 | 2904;
              }
              break;
            }
            case 0x02:
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VMOVSLDUP_romo::VMOVSLDUP
                  // VMOVSLDUP VREG:w:f32=$XMMr PREG:r:Z=$Kk      VREG:r:f32=$XMMm;
                  return 1558 << 16 | 2902;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VMOVSLDUP_rymy::VMOVSLDUP
                  // VMOVSLDUP VREG:w:f32=$YMMr PREG:r:Z=$Kk      VREG:r:f32=$YMMm;
                  return 1560 << 16 | 2908;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VMOVSLDUP_rzmz::VMOVSLDUP
                  // VMOVSLDUP VREG:w:f32=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$ZMMm;
                  return 1561 << 16 | 2910;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVHLPS::MOVHLPS
              // MOVHLPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
              return 979 << 16 | 1655;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMOVHLPS_ronomo_1::VMOVHLPS
              // VMOVHLPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 1499 << 16 | 2824;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMOVHLPS_ronomo_2::VMOVHLPS
              // VMOVHLPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 1500 << 16 | 2825;
              break;
            }
            default: break;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVDDUP::MOVDDUPmq
            // MOVDDUP VREG:w:s32=$XMMr MEM:r:s64=$mem64;
            return 973 << 16 | 1645;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VMOVDDUP_rxmx::VMOVDDUPmy
              // VMOVDDUP VREG:w:f64=$YMMr MEM:r:f64=$mem256;
              return 1468 << 16 | 2731;
            }
            else
            {
              // TEMPLATE.VMOVDDUP_rxmx::VMOVDDUPmq
              // VMOVDDUP VREG:w:f64=$XMMr MEM:r:f64=$mem64;
              return 1468 << 16 | 2730;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VMOVDDUP_romx::VMOVDDUPmq
                // VMOVDDUP VREG:w:f64=$XMMr PREG:r:Z=$Kk      MEM:r:f64=$mem64;
                return 1467 << 16 | 2727;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVDDUP_rymy::VMOVDDUPmy
                // VMOVDDUP VREG:w:f64=$YMMr PREG:r:Z=$Kk      MEM:r:f64=$mem256;
                return 1469 << 16 | 2733;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVDDUP_rzmz::VMOVDDUPmz
                // VMOVDDUP VREG:w:f64=$ZMMr PREG:r:Z=$Kk      MEM:r:f64=$mem512;
                return 1470 << 16 | 2735;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVSLDUP::MOVSLDUPmx
              // MOVSLDUP VREG:w:f32=$XMMr MEM:r:f32=$mem128;
              return 1004 << 16 | 1689;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VMOVSLDUP_rxmx::VMOVSLDUPmy
                // VMOVSLDUP VREG:w:f32=$YMMr MEM:r:f32=$mem256;
                return 1559 << 16 | 2907;
              }
              else
              {
                // TEMPLATE.VMOVSLDUP_rxmx::VMOVSLDUPmx
                // VMOVSLDUP VREG:w:f32=$XMMr MEM:r:f32=$mem128;
                return 1559 << 16 | 2906;
              }
              break;
            }
            case 0x02:
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VMOVSLDUP_romo::VMOVSLDUPmx
                  // VMOVSLDUP VREG:w:f32=$XMMr PREG:r:Z=$Kk      MEM:r:f32=$mem128;
                  return 1558 << 16 | 2903;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VMOVSLDUP_rymy::VMOVSLDUPmy
                  // VMOVSLDUP VREG:w:f32=$YMMr PREG:r:Z=$Kk      MEM:r:f32=$mem256;
                  return 1560 << 16 | 2909;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VMOVSLDUP_rzmz::VMOVSLDUPmz
                  // VMOVSLDUP VREG:w:f32=$ZMMr PREG:r:Z=$Kk      MEM:r:f32=$mem512;
                  return 1561 << 16 | 2911;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVLPD_rqmq::MOVLPDmq
                // MOVLPD REG:w:f64=$XMMr  MEM:r:s64=$mem64;
                return 986 << 16 | 1662;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVLPD_ronomq_1::VMOVLPDmq
                // VMOVLPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64;
                return 1513 << 16 | 2838;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVLPD_ronomq_2::VMOVLPDmq
                // VMOVLPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64;
                return 1514 << 16 | 2839;
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVLPS_rqmq::MOVLPSmq
                // MOVLPS VREG:w:f32=$XMMr MEM:r:f32=$mem64;
                return 988 << 16 | 1664;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVLPS_ronomq_1::VMOVLPSmq
                // VMOVLPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem64;
                return 1517 << 16 | 2842;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVLPS_ronomq_2::VMOVLPSmq
                // VMOVLPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem64;
                return 1518 << 16 | 2843;
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x13 */
  case 275:
    if (b & 0x40)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.MOVLPD_mqrq::MOVLPDmq
          // MOVLPD MEM:w:s64=$mem64 REG:r:f64=$XMMr;
          return 985 << 16 | 1661;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VMOVLPD_mqrq_1::VMOVLPDmq
          // VMOVLPD MEM:w:f64=$mem64 REG:r:f64=$XMMr;
          return 1511 << 16 | 2836;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VMOVLPD_mqrq_2::VMOVLPDmq
          // VMOVLPD MEM:w:f64=$mem64 REG:r:f64=$XMMr;
          return 1512 << 16 | 2837;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.MOVLPS_mqro::MOVLPSmq
          // MOVLPS MEM:w:f32=$mem64 VREG:r:f32=$XMMr;
          return 987 << 16 | 1663;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VMOVLPS_mqrq_1::VMOVLPSmq
          // VMOVLPS MEM:w:f32=$mem64 VREG:r:f32=$XMMr;
          return 1515 << 16 | 2840;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VMOVLPS_mqrq_2::VMOVLPSmq
          // VMOVLPS MEM:w:f32=$mem64 VREG:r:f32=$XMMr;
          return 1516 << 16 | 2841;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f.0x14 */
  case 276:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UNPCKLPD::UNPCKLPD
            // UNPCKLPD VREG:rw:f64=$XMMr REG:r:s64=$XMMm;
            return 1205 << 16 | 2066;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VUNPCKLPD_rxnxmx::VUNPCKLPD
              // VUNPCKLPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2218 << 16 | 4320;
            }
            else
            {
              // TEMPLATE.VUNPCKLPD_rxnxmx::VUNPCKLPD
              // VUNPCKLPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2218 << 16 | 4319;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VUNPCKLPD_ronomo::VUNPCKLPD
                // VUNPCKLPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2217 << 16 | 4317;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VUNPCKLPD_rynymy::VUNPCKLPD
                // VUNPCKLPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                return 2219 << 16 | 4323;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VUNPCKLPD_rznzmz::VUNPCKLPD
                // VUNPCKLPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2220 << 16 | 4325;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UNPCKLPS::UNPCKLPS
            // UNPCKLPS VREG:rw:f32=$XMMr REG:r:s64=$XMMm;
            return 1206 << 16 | 2068;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VUNPCKLPS_rxnxmx::VUNPCKLPS
              // VUNPCKLPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2222 << 16 | 4330;
            }
            else
            {
              // TEMPLATE.VUNPCKLPS_rxnxmx::VUNPCKLPS
              // VUNPCKLPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2222 << 16 | 4329;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VUNPCKLPS_ronomo::VUNPCKLPS
                // VUNPCKLPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2221 << 16 | 4327;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VUNPCKLPS_rynymy::VUNPCKLPS
                // VUNPCKLPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                return 2223 << 16 | 4333;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VUNPCKLPS_rznzmz::VUNPCKLPS
                // VUNPCKLPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2224 << 16 | 4335;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UNPCKLPD::UNPCKLPDmx
            // UNPCKLPD VREG:rw:f64=$XMMr MEM:r:s32=$mem128;
            return 1205 << 16 | 2067;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VUNPCKLPD_rxnxmx::VUNPCKLPDmy
              // VUNPCKLPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2218 << 16 | 4322;
            }
            else
            {
              // TEMPLATE.VUNPCKLPD_rxnxmx::VUNPCKLPDmx
              // VUNPCKLPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2218 << 16 | 4321;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VUNPCKLPD_ronomo::VUNPCKLPDmx
                // VUNPCKLPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                return 2217 << 16 | 4318;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VUNPCKLPD_rynymy::VUNPCKLPDmy
                // VUNPCKLPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                return 2219 << 16 | 4324;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VUNPCKLPD_rznzmz::VUNPCKLPDmz
                // VUNPCKLPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                return 2220 << 16 | 4326;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UNPCKLPS::UNPCKLPSmx
            // UNPCKLPS VREG:rw:f32=$XMMr MEM:r:s32=$mem128;
            return 1206 << 16 | 2069;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VUNPCKLPS_rxnxmx::VUNPCKLPSmy
              // VUNPCKLPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2222 << 16 | 4332;
            }
            else
            {
              // TEMPLATE.VUNPCKLPS_rxnxmx::VUNPCKLPSmx
              // VUNPCKLPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2222 << 16 | 4331;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VUNPCKLPS_ronomo::VUNPCKLPSmx
                // VUNPCKLPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                return 2221 << 16 | 4328;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VUNPCKLPS_rynymy::VUNPCKLPSmy
                // VUNPCKLPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                return 2223 << 16 | 4334;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VUNPCKLPS_rznzmz::VUNPCKLPSmz
                // VUNPCKLPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                return 2224 << 16 | 4336;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f.0x15 */
  case 277:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UNPCKHPD::UNPCKHPD
            // UNPCKHPD VREG:rw:f64=$XMMr REG:r:s64=$XMMm;
            return 1203 << 16 | 2062;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VUNPCKHPD_rxnxmx::VUNPCKHPD
              // VUNPCKHPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2210 << 16 | 4300;
            }
            else
            {
              // TEMPLATE.VUNPCKHPD_rxnxmx::VUNPCKHPD
              // VUNPCKHPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2210 << 16 | 4299;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VUNPCKHPD_ronomo::VUNPCKHPD
                // VUNPCKHPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2209 << 16 | 4297;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VUNPCKHPD_rynymy::VUNPCKHPD
                // VUNPCKHPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                return 2211 << 16 | 4303;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VUNPCKHPD_rznzmz::VUNPCKHPD
                // VUNPCKHPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2212 << 16 | 4305;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UNPCKHPS::UNPCKHPS
            // UNPCKHPS VREG:rw:f32=$XMMr VREG:r:s32=$XMMm;
            return 1204 << 16 | 2064;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VUNPCKHPS_rxnxmx::VUNPCKHPS
              // VUNPCKHPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2214 << 16 | 4310;
            }
            else
            {
              // TEMPLATE.VUNPCKHPS_rxnxmx::VUNPCKHPS
              // VUNPCKHPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2214 << 16 | 4309;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VUNPCKHPS_ronomo::VUNPCKHPS
                // VUNPCKHPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2213 << 16 | 4307;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VUNPCKHPS_rynymy::VUNPCKHPS
                // VUNPCKHPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                return 2215 << 16 | 4313;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VUNPCKHPS_rznzmz::VUNPCKHPS
                // VUNPCKHPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2216 << 16 | 4315;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UNPCKHPD::UNPCKHPDmx
            // UNPCKHPD VREG:rw:f64=$XMMr MEM:r:s32=$mem128;
            return 1203 << 16 | 2063;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VUNPCKHPD_rxnxmx::VUNPCKHPDmy
              // VUNPCKHPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2210 << 16 | 4302;
            }
            else
            {
              // TEMPLATE.VUNPCKHPD_rxnxmx::VUNPCKHPDmx
              // VUNPCKHPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2210 << 16 | 4301;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VUNPCKHPD_ronomo::VUNPCKHPDmx
                // VUNPCKHPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                return 2209 << 16 | 4298;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VUNPCKHPD_rynymy::VUNPCKHPDmy
                // VUNPCKHPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                return 2211 << 16 | 4304;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VUNPCKHPD_rznzmz::VUNPCKHPDmz
                // VUNPCKHPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                return 2212 << 16 | 4306;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UNPCKHPS::UNPCKHPSmx
            // UNPCKHPS VREG:rw:f32=$XMMr MEM:r:s32=$mem128;
            return 1204 << 16 | 2065;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VUNPCKHPS_rxnxmx::VUNPCKHPSmy
              // VUNPCKHPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2214 << 16 | 4312;
            }
            else
            {
              // TEMPLATE.VUNPCKHPS_rxnxmx::VUNPCKHPSmx
              // VUNPCKHPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2214 << 16 | 4311;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VUNPCKHPS_ronomo::VUNPCKHPSmx
                // VUNPCKHPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                return 2213 << 16 | 4308;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VUNPCKHPS_rynymy::VUNPCKHPSmy
                // VUNPCKHPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                return 2215 << 16 | 4314;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VUNPCKHPS_rznzmz::VUNPCKHPSmz
                // VUNPCKHPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                return 2216 << 16 | 4316;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f.0x16 */
  case 278:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVSHDUP::MOVSHDUP
            // MOVSHDUP VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
            return 1003 << 16 | 1686;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VMOVSHDUP_rxmx::VMOVSHDUP
              // VMOVSHDUP VREG:w:f32=$YMMr VREG:r:f32=$YMMm;
              return 1555 << 16 | 2895;
            }
            else
            {
              // TEMPLATE.VMOVSHDUP_rxmx::VMOVSHDUP
              // VMOVSHDUP VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
              return 1555 << 16 | 2894;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VMOVSHDUP_romo::VMOVSHDUP
                // VMOVSHDUP VREG:w:f32=$XMMr PREG:r:Z=$Kk      VREG:r:f32=$XMMm;
                return 1554 << 16 | 2892;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVSHDUP_rymy::VMOVSHDUP
                // VMOVSHDUP VREG:w:f32=$YMMr PREG:r:Z=$Kk      VREG:r:f32=$YMMm;
                return 1556 << 16 | 2898;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVSHDUP_rzmz::VMOVSHDUP
                // VMOVSHDUP VREG:w:f32=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$ZMMm;
                return 1557 << 16 | 2900;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVLHPS::MOVLHPS
            // MOVLHPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
            return 984 << 16 | 1660;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMOVLHPS_ronqmq_1::VMOVLHPS
            // VMOVLHPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 1509 << 16 | 2834;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VMOVLHPS_ronqmq_2::VMOVLHPS
            // VMOVLHPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 1510 << 16 | 2835;
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVSHDUP::MOVSHDUPmx
            // MOVSHDUP VREG:w:f32=$XMMr MEM:r:f32=$mem128;
            return 1003 << 16 | 1687;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VMOVSHDUP_rxmx::VMOVSHDUPmy
              // VMOVSHDUP VREG:w:f32=$YMMr MEM:r:f32=$mem256;
              return 1555 << 16 | 2897;
            }
            else
            {
              // TEMPLATE.VMOVSHDUP_rxmx::VMOVSHDUPmx
              // VMOVSHDUP VREG:w:f32=$XMMr MEM:r:f32=$mem128;
              return 1555 << 16 | 2896;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VMOVSHDUP_romo::VMOVSHDUPmx
                // VMOVSHDUP VREG:w:f32=$XMMr PREG:r:Z=$Kk      MEM:r:f32=$mem128;
                return 1554 << 16 | 2893;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVSHDUP_rymy::VMOVSHDUPmy
                // VMOVSHDUP VREG:w:f32=$YMMr PREG:r:Z=$Kk      MEM:r:f32=$mem256;
                return 1556 << 16 | 2899;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVSHDUP_rzmz::VMOVSHDUPmz
                // VMOVSHDUP VREG:w:f32=$ZMMr PREG:r:Z=$Kk      MEM:r:f32=$mem512;
                return 1557 << 16 | 2901;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x40)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVHPD_rqmq::MOVHPDmq
              // MOVHPD REG:w:f64=$XMMr  MEM:r:s64=$mem64;
              return 981 << 16 | 1657;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMOVHPD_ronqmq_1::VMOVHPDmq
              // VMOVHPD VREG:w:f64=$XMMr REG:r:f64=$XMMn  MEM:r:f64=$mem64;
              return 1503 << 16 | 2828;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMOVHPD_ronqmq_2::VMOVHPDmq
              // VMOVHPD VREG:w:f64=$XMMr REG:r:f64=$XMMn  MEM:r:f64=$mem64;
              return 1504 << 16 | 2829;
              break;
            }
            default: break;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVHPS_rqmq::MOVHPSmq
              // MOVHPS VREG:w:f32=$XMMr MEM:r:f32=$mem64;
              return 983 << 16 | 1659;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMOVHPS_ronqmq_1::VMOVHPSmq
              // VMOVHPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem64;
              return 1507 << 16 | 2832;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMOVHPS_ronqmq_2::VMOVHPSmq
              // VMOVHPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem64;
              return 1508 << 16 | 2833;
              break;
            }
            default: break;
          }
        }
      }
    }
  break;
  /* 0f.0x17 */
  case 279:
    if (b & 0x40)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.MOVHPD_mqrq::MOVHPDmq
          // MOVHPD MEM:w:s64=$mem64 REG:r:f64=$XMMr;
          return 980 << 16 | 1656;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VMOVHPD_mqro_1::VMOVHPDmq
          // VMOVHPD MEM:w:f64=$mem64 VREG:r:f64=$XMMr;
          return 1501 << 16 | 2826;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VMOVHPD_mqro_2::VMOVHPDmq
          // VMOVHPD MEM:w:f64=$mem64 VREG:r:f64=$XMMr;
          return 1502 << 16 | 2827;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.MOVHPS_mqro::MOVHPSmq
          // MOVHPS MEM:w:f32=$mem64 VREG:r:f32=$XMMr;
          return 982 << 16 | 1658;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VMOVHPS_mqro_1::VMOVHPSmq
          // VMOVHPS MEM:w:f32=$mem64 VREG:r:f32=$XMMr;
          return 1505 << 16 | 2830;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VMOVHPS_mqro_2::VMOVHPSmq
          // VMOVHPS MEM:w:f32=$mem64 VREG:r:f32=$XMMr;
          return 1506 << 16 | 2831;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f.0x18 */
  case 280:
    if (a & 0x01)
    {
      // the following switch contains 8 case.
      switch (a & 0x1e)
      {
        case 0x00:
        {
          // TEMPLATE.NOP_mv_1::NOP
          // NOP REG:r=$GPRvm;
          return 301 << 16 | 534;
          break;
        }
        case 0x12:
        {
          // TEMPLATE.NOP_mv_2::NOP
          // NOP REG:r=$GPRvm;
          return 303 << 16 | 536;
          break;
        }
        case 0x14:
        {
          // TEMPLATE.NOP_mv_3::NOP
          // NOP REG:r=$GPRvm;
          return 304 << 16 | 537;
          break;
        }
        case 0x16:
        {
          // TEMPLATE.NOP_mv_4::NOP
          // NOP REG:r=$GPRvm;
          return 305 << 16 | 538;
          break;
        }
        case 0x18:
        {
          // TEMPLATE.NOP_mv_5::NOP
          // NOP REG:r=$GPRvm;
          return 306 << 16 | 539;
          break;
        }
        case 0x1a:
        {
          // TEMPLATE.NOP_mv_6::NOP
          // NOP REG:r=$GPRvm;
          return 307 << 16 | 541;
          break;
        }
        case 0x1c:
        {
          // TEMPLATE.NOP_mv_7::NOP
          // NOP REG:r=$GPRvm;
          return 308 << 16 | 543;
          break;
        }
        case 0x1e:
        {
          // TEMPLATE.NOP_mv_8::NOP
          // NOP REG:r=$GPRvm;
          return 309 << 16 | 545;
          break;
        }
        default: break;
      }
    }
    else
    {
      if (a & 0x02)
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.NOP_mv_8::NOPm
                // NOP MEM:r:sx=$memv;
                return 309 << 16 | 546;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPREFETCHE2_mb_1::VPREFETCHE2mb
                // VPREFETCHE2 MEM:r:s64=$mem8;
                return 3454 << 16 | 7168;
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VPREFETCHE2_mb_2::VPREFETCHE2mb
                // VPREFETCHE2 MEM:r:s64=$mem8 SWZ=$n_i32 EVH=$EVH;
                return 3455 << 16 | 7169;
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.PREFETCHT2::PREFETCHT2mb
                // PREFETCHT2  MEM:r:s64=$mem8;
                return 1123 << 16 | 1931;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPREFETCH2_mb_1::VPREFETCH2mb
                // VPREFETCH2 MEM:r:s64=$mem8;
                return 3448 << 16 | 7162;
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VPREFETCH2_mb_2::VPREFETCH2mb
                // VPREFETCH2 MEM:r:s64=$mem8 SWZ=$n_i32 EVH=$EVH;
                return 3449 << 16 | 7163;
                break;
              }
              default: break;
            }
          }
        }
        else
        {
          if (a & 0x08)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.NOP_mv_6::NOPm
                // NOP MEM:r:sx=$memv;
                return 307 << 16 | 542;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPREFETCHE0_mb_1::VPREFETCHE0mb
                // VPREFETCHE0 MEM:r:s64=$mem8;
                return 3450 << 16 | 7164;
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VPREFETCHE0_mb_2::VPREFETCHE0mb
                // VPREFETCHE0 MEM:r:s64=$mem8 SWZ=$n_i32 EVH=$EVH;
                return 3451 << 16 | 7165;
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.PREFETCHT0::PREFETCHT0mb
                // PREFETCHT0  MEM:r:s64=$mem8;
                return 1121 << 16 | 1929;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPREFETCH0_mb_1::VPREFETCH0mb
                // VPREFETCH0 MEM:r:s64=$mem8;
                return 3444 << 16 | 7158;
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VPREFETCH0_mb_2::VPREFETCH0mb
                // VPREFETCH0 MEM:r:s64=$mem8 SWZ=$n_i32 EVH=$EVH;
                return 3445 << 16 | 7159;
                break;
              }
              default: break;
            }
          }
        }
      }
      else
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.NOP_mv_7::NOPm
                // NOP MEM:r:sx=$memv;
                return 308 << 16 | 544;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPREFETCHE1_mb_1::VPREFETCHE1mb
                // VPREFETCHE1 MEM:r:s64=$mem8;
                return 3452 << 16 | 7166;
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VPREFETCHE1_mb_2::VPREFETCHE1mb
                // VPREFETCHE1 MEM:r:s64=$mem8 SWZ=$n_i32 EVH=$EVH;
                return 3453 << 16 | 7167;
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.PREFETCHT1::PREFETCHT1mb
                // PREFETCHT1  MEM:r:s64=$mem8;
                return 1122 << 16 | 1930;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPREFETCH1_mb_1::VPREFETCH1mb
                // VPREFETCH1 MEM:r:s64=$mem8;
                return 3446 << 16 | 7160;
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VPREFETCH1_mb_2::VPREFETCH1mb
                // VPREFETCH1 MEM:r:s64=$mem8 SWZ=$n_i32 EVH=$EVH;
                return 3447 << 16 | 7161;
                break;
              }
              default: break;
            }
          }
        }
        else
        {
          if (a & 0x08)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.NOP_mv_5::NOPm
                // NOP MEM:r:sx=$memv;
                return 306 << 16 | 540;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPREFETCHENTA_mb_1::VPREFETCHENTAmb
                // VPREFETCHENTA MEM:r:s64=$mem8;
                return 3456 << 16 | 7170;
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VPREFETCHENTA_mb_2::VPREFETCHENTAmb
                // VPREFETCHENTA MEM:r:s64=$mem8 SWZ=$n_i32 EVH=$EVH;
                return 3457 << 16 | 7171;
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.PREFETCHNTA::PREFETCHNTAmb
                // PREFETCHNTA MEM:r:s64=$mem8;
                return 1120 << 16 | 1928;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPREFETCHNTA_mb_1::VPREFETCHNTAmb
                // VPREFETCHNTA MEM:r:s64=$mem8;
                return 3458 << 16 | 7172;
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VPREFETCHNTA_mb_2::VPREFETCHNTAmb
                // VPREFETCHNTA MEM:r:s64=$mem8 SWZ=$n_i32 EVH=$EVH;
                return 3459 << 16 | 7173;
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x19 */
  case 281:
    if (a & 0x01)
    {
      // TEMPLATE.NOP_mvrv_2::NOP
      // NOP REG:r=$GPRvm   REG:r=$GPRvr;
      return 320 << 16 | 567;
    }
    else
    {
      // TEMPLATE.NOP_mvrv_2::NOPm
      // NOP MEM:r:sx=$memv REG:r=$GPRvr;
      return 320 << 16 | 568;
    }
  break;
  /* 0f.0x1a */
  case 282:
    if (a & 0x01)
    {
      if (d & 0x08)
      {
        // the following switch contains 4 case.
        switch (b & 0x70)
        {
          case 0x00:
          {
            // TEMPLATE.NOP_mvrv_3::NOP
            // NOP REG:r=$GPRvm   REG:r=$GPRvr;
            return 321 << 16 | 570;
            break;
          }
          case 0x10:
          {
            if (c & 0x80)
            {
              // TEMPLATE.BNDCU_romx::BNDCU
              // BNDCU REG:r=$BNDr REG:r=$GPR64m;
              return 701 << 16 | 1185;
            }
            else
            {
              // TEMPLATE.BNDCU_romx::BNDCU
              // BNDCU REG:r=$BNDr REG:r=$GPR32m;
              return 701 << 16 | 1186;
            }
            break;
          }
          case 0x20:
          {
            if (c & 0x80)
            {
              // TEMPLATE.BNDCL_romx::BNDCL
              // BNDCL REG:r=$BNDr REG:r=$GPR64m;
              return 697 << 16 | 1177;
            }
            else
            {
              // TEMPLATE.BNDCL_romx::BNDCL
              // BNDCL REG:r=$BNDr REG:r=$GPR32m;
              return 697 << 16 | 1178;
            }
            break;
          }
          case 0x40:
          {
            // TEMPLATE.BNDMOV_romx::BNDMOV
            // BNDMOV REG:w=$BNDr       REG:r=$BNDm;
            return 705 << 16 | 1194;
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.NOP_mvrv_3::NOP
        // NOP REG:r=$GPRvm   REG:r=$GPRvr;
        return 321 << 16 | 569;
      }
    }
    else
    {
      if (d & 0x08)
      {
        if (b & 0x10)
        {
          if (c & 0x80)
          {
            // TEMPLATE.BNDCU_ro::BNDCU
            // BNDCU REG:r=$BNDr AGEN:r=$agen;
            return 700 << 16 | 1183;
          }
          else
          {
            // TEMPLATE.BNDCU_ro::BNDCU
            // BNDCU REG:r=$BNDr AGEN:r=$agen;
            return 700 << 16 | 1184;
          }
        }
        else
        {
          if (b & 0x20)
          {
            if (c & 0x80)
            {
              // TEMPLATE.BNDCL_ro::BNDCL
              // BNDCL REG:r=$BNDr AGEN:r=$agen;
              return 696 << 16 | 1175;
            }
            else
            {
              // TEMPLATE.BNDCL_ro::BNDCL
              // BNDCL REG:r=$BNDr AGEN:r=$agen;
              return 696 << 16 | 1176;
            }
          }
          else
          {
            if (b & 0x40)
            {
              if (c & 0x80)
              {
                // TEMPLATE.BNDMOV_romx::BNDMOVmx
                // BNDMOV REG:w=$BNDr       MEM:r:u64=$mem128;
                return 705 << 16 | 1195;
              }
              else
              {
                // TEMPLATE.BNDMOV_romx::BNDMOVmq
                // BNDMOV REG:w=$BNDr       MEM:r:u32=$mem64;
                return 705 << 16 | 1196;
              }
            }
            else
            {
              if (c & 0x80)
              {
                // TEMPLATE.BNDLDX::BNDLDX
                // BNDLDX REG:w=$BNDr MIB:r:u64=$mib192;
                return 702 << 16 | 1187;
              }
              else
              {
                // TEMPLATE.BNDLDX::BNDLDX
                // BNDLDX REG:w=$BNDr MIB:r:u32=$mib96;
                return 702 << 16 | 1188;
              }
            }
          }
        }
      }
      else
      {
        // TEMPLATE.NOP_mv_9::NOPm
        // NOP REG:r=$GPRvm   MEM:r:sx=$memv;
        return 310 << 16 | 547;
      }
    }
  break;
  /* 0f.0x1b */
  case 283:
    if (a & 0x01)
    {
      if (d & 0x08)
      {
        // the following switch contains 4 case.
        switch (b & 0x70)
        {
          case 0x00:
          {
            // TEMPLATE.NOP_mvrv_4::NOP
            // NOP REG:r=$GPRvm   REG:r=$GPRvr;
            return 322 << 16 | 572;
            break;
          }
          case 0x10:
          {
            if (c & 0x80)
            {
              // TEMPLATE.BNDCN_romx::BNDCN
              // BNDCN REG:r=$BNDr REG:r=$GPR64m;
              return 699 << 16 | 1181;
            }
            else
            {
              // TEMPLATE.BNDCN_romx::BNDCN
              // BNDCN REG:r=$BNDr REG:r=$GPR32m;
              return 699 << 16 | 1182;
            }
            break;
          }
          case 0x20:
          {
            // TEMPLATE.NOP_mvrv_4::NOP
            // NOP REG:r=$GPRvm   REG:r=$GPRvr;
            return 322 << 16 | 573;
            break;
          }
          case 0x40:
          {
            // TEMPLATE.BNDMOV_mxro::BNDMOV
            // BNDMOV REG:w=$BNDm       REG:r=$BNDr;
            return 704 << 16 | 1191;
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.NOP_mvrv_4::NOP
        // NOP REG:r=$GPRvm   REG:r=$GPRvr;
        return 322 << 16 | 571;
      }
    }
    else
    {
      if (d & 0x08)
      {
        if (b & 0x10)
        {
          if (c & 0x80)
          {
            // TEMPLATE.BNDCN_ro::BNDCN
            // BNDCN REG:r=$BNDr AGEN:r=$agen;
            return 698 << 16 | 1179;
          }
          else
          {
            // TEMPLATE.BNDCN_ro::BNDCN
            // BNDCN REG:r=$BNDr AGEN:r=$agen;
            return 698 << 16 | 1180;
          }
        }
        else
        {
          if (b & 0x20)
          {
            if (c & 0x80)
            {
              // TEMPLATE.BNDMK::BNDMK
              // BNDMK REG:w=$BNDr AGEN:r=$agen;
              return 703 << 16 | 1189;
            }
            else
            {
              // TEMPLATE.BNDMK::BNDMK
              // BNDMK REG:w=$BNDr AGEN:r=$agen;
              return 703 << 16 | 1190;
            }
          }
          else
          {
            if (b & 0x40)
            {
              if (c & 0x80)
              {
                // TEMPLATE.BNDMOV_mxro::BNDMOVmx
                // BNDMOV MEM:w:u64=$mem128 REG:r=$BNDr;
                return 704 << 16 | 1192;
              }
              else
              {
                // TEMPLATE.BNDMOV_mxro::BNDMOVmq
                // BNDMOV MEM:w:u32=$mem64  REG:r=$BNDr;
                return 704 << 16 | 1193;
              }
            }
            else
            {
              if (c & 0x80)
              {
                // TEMPLATE.BNDSTX::BNDSTX
                // BNDSTX MIB:w:u64=$mib192 REG:r=$BNDr;
                return 706 << 16 | 1197;
              }
              else
              {
                // TEMPLATE.BNDSTX::BNDSTX
                // BNDSTX MIB:w:u32=$mib96  REG:r=$BNDr;
                return 706 << 16 | 1198;
              }
            }
          }
        }
      }
      else
      {
        // TEMPLATE.NOP_mv_10::NOPm
        // NOP REG:r=$GPRvm   MEM:r:sx=$memv;
        return 302 << 16 | 535;
      }
    }
  break;
  /* 0f.0x1c */
  case 284:
    if (a & 0x01)
    {
      // TEMPLATE.NOP_mvrv_5::NOP
      // NOP REG:r=$GPRvm   REG:r=$GPRvr;
      return 323 << 16 | 574;
    }
    else
    {
      if (d & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x60)
        {
          case 0x00:
          {
            if (b & 0x10)
            {
              // TEMPLATE.NOP_mvrv_5::NOPm
              // NOP MEM:r:sx=$memv REG:r=$GPRvr;
              return 323 << 16 | 577;
            }
            else
            {
              // TEMPLATE.CLDEMOTE::CLDEMOTEmb
              // CLDEMOTE MEM:r:u8=$mem8;
              return 708 << 16 | 1200;
            }
            break;
          }
          case 0x20:
          {
            // TEMPLATE.NOP_mvrv_5::NOPm
            // NOP MEM:r:sx=$memv REG:r=$GPRvr;
            return 323 << 16 | 578;
            break;
          }
          case 0x40:
          {
            // TEMPLATE.NOP_mvrv_5::NOPm
            // NOP MEM:r:sx=$memv REG:r=$GPRvr;
            return 323 << 16 | 576;
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.NOP_mvrv_5::NOPm
        // NOP MEM:r:sx=$memv REG:r=$GPRvr;
        return 323 << 16 | 575;
      }
    }
  break;
  /* 0f.0x1d */
  case 285:
    if (a & 0x01)
    {
      // TEMPLATE.NOP_mvrv_6::NOP
      // NOP REG:r=$GPRvm   REG:r=$GPRvr;
      return 324 << 16 | 579;
    }
    else
    {
      // TEMPLATE.NOP_mvrv_6::NOPm
      // NOP MEM:r:sx=$memv REG:r=$GPRvr;
      return 324 << 16 | 580;
    }
  break;
  /* 0f.0x1e */
  case 286:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (b & 0x30)
      {
        case 0x00:
        {
          if (b & 0x40)
          {
            // TEMPLATE.NOP_mvrv_7::NOP
            // NOP REG:r=$GPRvm   REG:r=$GPRvr;
            return 325 << 16 | 583;
          }
          else
          {
            // TEMPLATE.NOP_mvrv_7::NOP
            // NOP REG:r=$GPRvm   REG:r=$GPRvr;
            return 325 << 16 | 582;
          }
          break;
        }
        case 0x10:
        {
          // TEMPLATE.NOP_mvrv_7::NOP
          // NOP REG:r=$GPRvm   REG:r=$GPRvr;
          return 325 << 16 | 584;
          break;
        }
        case 0x20:
        {
          // the following switch contains 8 case.
          switch (a & 0x1e)
          {
            case 0x00:
            {
              // TEMPLATE.NOP_mvrv_8::NOP
              // NOP REG:r=$GPRvm   REG:r=$GPRvr;
              return 326 << 16 | 585;
              break;
            }
            case 0x12:
            {
              if (c & 0x80)
              {
                if (d & 0x40)
                {
                  // TEMPLATE.RDSSPx::RDSSPQ
                  // RDSSPQ REG:w:u64=$GPR64m;
                  return 732 << 16 | 1236;
                }
                else
                {
                  // TEMPLATE.NOP_mvrv_15::NOP
                  // NOP REG:r=$GPRvm   REG:r=$GPRvr;
                  return 317 << 16 | 561;
                }
              }
              else
              {
                if (d & 0x40)
                {
                  // TEMPLATE.RDSSPx::RDSSPD
                  // RDSSPD REG:w:u32=$GPR32m;
                  return 732 << 16 | 1235;
                }
                else
                {
                  // TEMPLATE.NOP_mvrv_15::NOP
                  // NOP REG:r=$GPRvm   REG:r=$GPRvr;
                  return 317 << 16 | 562;
                }
              }
              break;
            }
            case 0x14:
            {
              // TEMPLATE.NOP_mvrv_9::NOP
              // NOP REG:r=$GPRvm   REG:r=$GPRvr;
              return 327 << 16 | 586;
              break;
            }
            case 0x16:
            {
              // TEMPLATE.NOP_mvrv_10::NOP
              // NOP REG:r=$GPRvm   REG:r=$GPRvr;
              return 312 << 16 | 549;
              break;
            }
            case 0x18:
            {
              // TEMPLATE.NOP_mvrv_11::NOP
              // NOP REG:r=$GPRvm   REG:r=$GPRvr;
              return 313 << 16 | 550;
              break;
            }
            case 0x1a:
            {
              // TEMPLATE.NOP_mvrv_12::NOP
              // NOP REG:r=$GPRvm   REG:r=$GPRvr;
              return 314 << 16 | 551;
              break;
            }
            case 0x1c:
            {
              // TEMPLATE.NOP_mvrv_13::NOP
              // NOP REG:r=$GPRvm   REG:r=$GPRvr;
              return 315 << 16 | 552;
              break;
            }
            case 0x1e:
            {
              // the following switch contains 8 case.
              switch (a & 0xe0)
              {
                case 0x00:
                {
                  // TEMPLATE.NOP_mvrv_14::NOP
                  // NOP REG:r=$GPRvm   REG:r=$GPRvr;
                  return 316 << 16 | 553;
                  break;
                }
                case 0x20:
                {
                  // TEMPLATE.NOP_mvrv_14::NOP
                  // NOP REG:r=$GPRvm   REG:r=$GPRvr;
                  return 316 << 16 | 554;
                  break;
                }
                case 0x40:
                {
                  if (d & 0x40)
                  {
                    // TEMPLATE.ENDBR64::ENDBR64
                    // ENDBR64;
                    return 717 << 16 | 1212;
                  }
                  else
                  {
                    // TEMPLATE.NOP_mvrv_14::NOP
                    // NOP REG:r=$GPRvm   REG:r=$GPRvr;
                    return 316 << 16 | 555;
                  }
                  break;
                }
                case 0x60:
                {
                  if (d & 0x40)
                  {
                    // TEMPLATE.ENDBR32::ENDBR32
                    // ENDBR32;
                    return 716 << 16 | 1211;
                  }
                  else
                  {
                    // TEMPLATE.NOP_mvrv_14::NOP
                    // NOP REG:r=$GPRvm   REG:r=$GPRvr;
                    return 316 << 16 | 556;
                  }
                  break;
                }
                case 0x80:
                {
                  // TEMPLATE.NOP_mvrv_14::NOP
                  // NOP REG:r=$GPRvm   REG:r=$GPRvr;
                  return 316 << 16 | 557;
                  break;
                }
                case 0xa0:
                {
                  // TEMPLATE.NOP_mvrv_14::NOP
                  // NOP REG:r=$GPRvm   REG:r=$GPRvr;
                  return 316 << 16 | 558;
                  break;
                }
                case 0xc0:
                {
                  // TEMPLATE.NOP_mvrv_14::NOP
                  // NOP REG:r=$GPRvm   REG:r=$GPRvr;
                  return 316 << 16 | 559;
                  break;
                }
                case 0xe0:
                {
                  // TEMPLATE.NOP_mvrv_14::NOP
                  // NOP REG:r=$GPRvm   REG:r=$GPRvr;
                  return 316 << 16 | 560;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // TEMPLATE.NOP_mvrv_7::NOPm
      // NOP MEM:r:sx=$memv REG:r=$GPRvr;
      return 325 << 16 | 581;
    }
  break;
  /* 0f.0x1f */
  case 287:
    // the following switch contains 4 case.
    switch (a & 0x11)
    {
      case 0x00:
      {
        if (d & 0x04)
        {
          // TEMPLATE.NOP_mv_11::NOPm
          // NOP MEM:r:sx=$memv;
          return 3263 << 16 | 6786;
        }
        else
        {
          // TEMPLATE.NOP_mvrv_16::NOPm
          // NOP MEM:r:sx=$memv REG:r=$GPRvr;
          return 318 << 16 | 564;
        }
        break;
      }
      case 0x01:
      {
        if (d & 0x04)
        {
          // TEMPLATE.NOP_mv_11::NOP
          // NOP REG:r=$GPRvm;
          return 3263 << 16 | 6785;
        }
        else
        {
          // TEMPLATE.NOP_mvrv_16::NOP
          // NOP REG:r=$GPRvm   REG:r=$GPRvr;
          return 318 << 16 | 563;
        }
        break;
      }
      case 0x10:
      {
        // TEMPLATE.NOP_mvrv_17::NOPm
        // NOP MEM:r:sx=$memv REG:r=$GPRvr;
        return 319 << 16 | 566;
        break;
      }
      case 0x11:
      {
        // TEMPLATE.NOP_mvrv_17::NOP
        // NOP REG:r=$GPRvm   REG:r=$GPRvr;
        return 319 << 16 | 565;
        break;
      }
      default: break;
    }
  break;
  /* 0f.0x20 */
  case 288:
    if (c & 0x80)
    {
      // TEMPLATE.MOV_mxrq_1::MOV
      // MOV REG:w=$GPR64m REG:r=$CRr;
      return 291 << 16 | 511;
    }
    else
    {
      // TEMPLATE.MOV_mxrq_1::MOV
      // MOV REG:w=$GPR32m REG:r=$CRr;
      return 291 << 16 | 512;
    }
  break;
  /* 0f.0x21 */
  case 289:
    if (c & 0x80)
    {
      // TEMPLATE.MOV_mxrq_2::MOV
      // MOV REG:w=$GPR64m REG:r=$DRr;
      return 293 << 16 | 515;
    }
    else
    {
      // TEMPLATE.MOV_mxrq_2::MOV
      // MOV REG:w=$GPR32m REG:r=$DRr;
      return 293 << 16 | 516;
    }
  break;
  /* 0f.0x22 */
  case 290:
    if (c & 0x80)
    {
      // TEMPLATE.MOV_rqmx_1::MOV
      // MOV REG:w=$CRr    REG:r=$GPR64m;
      return 292 << 16 | 513;
    }
    else
    {
      // TEMPLATE.MOV_rqmx_1::MOV
      // MOV REG:w=$CRr    REG:r=$GPR32m;
      return 292 << 16 | 514;
    }
  break;
  /* 0f.0x23 */
  case 291:
    if (c & 0x80)
    {
      // TEMPLATE.MOV_rqmx_2::MOV
      // MOV REG:w=$DRr    REG:r=$GPR64m;
      return 294 << 16 | 517;
    }
    else
    {
      // TEMPLATE.MOV_rqmx_2::MOV
      // MOV REG:w=$DRr    REG:r=$GPR32m;
      return 294 << 16 | 518;
    }
  break;
  /* invalid */
  case 292:
    return 0;
  /* invalid */
  case 293:
    return 0;
  /* invalid */
  case 294:
    return 0;
  /* invalid */
  case 295:
    return 0;
  /* 0f.0x28 */
  case 296:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVAPD_romo::MOVAPD
            // MOVAPD VREG:w:f64=$XMMr  VREG:r:f64=$XMMm;
            return 970 << 16 | 1638;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VMOVAPD_rxmx::VMOVAPD
              // VMOVAPD VREG:w:f64=$YMMr  VREG:r:f64=$YMMm;
              return 1448 << 16 | 2699;
            }
            else
            {
              // TEMPLATE.VMOVAPD_rxmx::VMOVAPD
              // VMOVAPD VREG:w:f64=$XMMr  VREG:r:f64=$XMMm;
              return 1448 << 16 | 2698;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VMOVAPD_romo_1::VMOVAPD
                // VMOVAPD VREG:w:f64=$XMMr  PREG:r:Z=$Kk      VREG:r:f64=$XMMm;
                return 1446 << 16 | 2696;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVAPD_rymy_1::VMOVAPD
                // VMOVAPD VREG:w:f64=$YMMr  PREG:r:Z=$Kk      VREG:r:f64=$YMMm;
                return 1449 << 16 | 2702;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVAPD_rzmz_1::VMOVAPD
                // VMOVAPD VREG:w:f64=$ZMMr  PREG:r:Z=$Kk      VREG:r:f64=$ZMMm;
                return 1451 << 16 | 2704;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            if (c & 0x08)
            {
              // TEMPLATE.VMOVAPD_rzmx::VMOVAPD
              // VMOVAPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
              return 3389 << 16 | 7037;
            }
            else
            {
              // TEMPLATE.VMOVAPD_rzmx::VMOVAPD
              // VMOVAPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3389 << 16 | 7036;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVAPS_romo::MOVAPS
            // MOVAPS VREG:w:f32=$XMMr  VREG:r:f32=$XMMm;
            return 972 << 16 | 1642;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VMOVAPS_rxmx::VMOVAPS
              // VMOVAPS VREG:w:f32=$YMMr  VREG:r:f32=$YMMm;
              return 1462 << 16 | 2719;
            }
            else
            {
              // TEMPLATE.VMOVAPS_rxmx::VMOVAPS
              // VMOVAPS VREG:w:f32=$XMMr  VREG:r:f32=$XMMm;
              return 1462 << 16 | 2718;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VMOVAPS_romo_1::VMOVAPS
                // VMOVAPS VREG:w:f32=$XMMr  PREG:r:Z=$Kk      VREG:r:f32=$XMMm;
                return 1460 << 16 | 2716;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVAPS_rymy_1::VMOVAPS
                // VMOVAPS VREG:w:f32=$YMMr  PREG:r:Z=$Kk      VREG:r:f32=$YMMm;
                return 1463 << 16 | 2722;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVAPS_rzmz_1::VMOVAPS
                // VMOVAPS VREG:w:f32=$ZMMr  PREG:r:Z=$Kk      VREG:r:f32=$ZMMm;
                return 1465 << 16 | 2724;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            if (c & 0x08)
            {
              // TEMPLATE.VMOVAPS_rzmx::VMOVAPS
              // VMOVAPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm;
              return 3391 << 16 | 7041;
            }
            else
            {
              // TEMPLATE.VMOVAPS_rzmx::VMOVAPS
              // VMOVAPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3391 << 16 | 7040;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVAPD_romo::MOVAPDmx
            // MOVAPD VREG:w:f64=$XMMr  MEM:r:f64=$mem128;
            return 970 << 16 | 1639;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VMOVAPD_rxmx::VMOVAPDmy
              // VMOVAPD VREG:w:f64=$YMMr  MEM:r:f64=$mem256;
              return 1448 << 16 | 2701;
            }
            else
            {
              // TEMPLATE.VMOVAPD_rxmx::VMOVAPDmx
              // VMOVAPD VREG:w:f64=$XMMr  MEM:r:f64=$mem128;
              return 1448 << 16 | 2700;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VMOVAPD_romo_2::VMOVAPDmx
                // VMOVAPD VREG:w:f64=$XMMr  PREG:r:Z=$Kk      MEM:r:f64=$mem128;
                return 1447 << 16 | 2697;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVAPD_rymy_2::VMOVAPDmy
                // VMOVAPD VREG:w:f64=$YMMr  PREG:r:Z=$Kk      MEM:r:f64=$mem256;
                return 1450 << 16 | 2703;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVAPD_rzmz_2::VMOVAPDmz
                // VMOVAPD VREG:w:f64=$ZMMr  PREG:r:Z=$Kk      MEM:r:f64=$mem512;
                return 1452 << 16 | 2705;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            // TEMPLATE.VMOVAPD_rzmx::VMOVAPDm
            // VMOVAPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_f64 EVH=$EVH;
            return 3389 << 16 | 7038;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVAPS_romo::MOVAPSmx
            // MOVAPS VREG:w:f32=$XMMr  MEM:r:f32=$mem128;
            return 972 << 16 | 1643;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VMOVAPS_rxmx::VMOVAPSmy
              // VMOVAPS VREG:w:f32=$YMMr  MEM:r:f32=$mem256;
              return 1462 << 16 | 2721;
            }
            else
            {
              // TEMPLATE.VMOVAPS_rxmx::VMOVAPSmx
              // VMOVAPS VREG:w:f32=$XMMr  MEM:r:f32=$mem128;
              return 1462 << 16 | 2720;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VMOVAPS_romo_2::VMOVAPSmx
                // VMOVAPS VREG:w:f32=$XMMr  PREG:r:Z=$Kk      MEM:r:f32=$mem128;
                return 1461 << 16 | 2717;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVAPS_rymy_2::VMOVAPSmy
                // VMOVAPS VREG:w:f32=$YMMr  PREG:r:Z=$Kk      MEM:r:f32=$mem256;
                return 1464 << 16 | 2723;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVAPS_rzmz_2::VMOVAPSmz
                // VMOVAPS VREG:w:f32=$ZMMr  PREG:r:Z=$Kk      MEM:r:f32=$mem512;
                return 1466 << 16 | 2725;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            // TEMPLATE.VMOVAPS_rzmx::VMOVAPSm
            // VMOVAPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_f32 EVH=$EVH;
            return 3391 << 16 | 7042;
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f.0x29 */
  case 297:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVAPD_moro::MOVAPD
            // MOVAPD VREG:w:f64=$XMMm  VREG:r:f64=$XMMr;
            return 969 << 16 | 1636;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VMOVAPD_mxrx::VMOVAPD
              // VMOVAPD VREG:w:f64=$YMMm  VREG:r:f64=$YMMr;
              return 1441 << 16 | 2689;
            }
            else
            {
              // TEMPLATE.VMOVAPD_mxrx::VMOVAPD
              // VMOVAPD VREG:w:f64=$XMMm  VREG:r:f64=$XMMr;
              return 1441 << 16 | 2688;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VMOVAPD_moro_1::VMOVAPD
                // VMOVAPD VREG:w:f64=$XMMm  PREG:r:Z=$Kk      VREG:r:f64=$XMMr;
                return 1439 << 16 | 2686;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVAPD_myry_1::VMOVAPD
                // VMOVAPD VREG:w:f64=$YMMm  PREG:r:Z=$Kk      VREG:r:f64=$YMMr;
                return 1442 << 16 | 2692;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVAPD_mzrz_1::VMOVAPD
                // VMOVAPD VREG:w:f64=$ZMMm  PREG:r:Z=$Kk      VREG:r:f64=$ZMMr;
                return 1444 << 16 | 2694;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVAPS_moro::MOVAPS
            // MOVAPS VREG:w:f32=$XMMm  VREG:r:f32=$XMMr;
            return 971 << 16 | 1640;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VMOVAPS_mxrx::VMOVAPS
              // VMOVAPS VREG:w:f32=$YMMm  VREG:r:f32=$YMMr;
              return 1455 << 16 | 2709;
            }
            else
            {
              // TEMPLATE.VMOVAPS_mxrx::VMOVAPS
              // VMOVAPS VREG:w:f32=$XMMm  VREG:r:f32=$XMMr;
              return 1455 << 16 | 2708;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VMOVAPS_moro_1::VMOVAPS
                // VMOVAPS VREG:w:f32=$XMMm  PREG:r:Z=$Kk      VREG:r:f32=$XMMr;
                return 1453 << 16 | 2706;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VMOVAPS_myry_1::VMOVAPS
                // VMOVAPS VREG:w:f32=$YMMm  PREG:r:Z=$Kk      VREG:r:f32=$YMMr;
                return 1456 << 16 | 2712;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VMOVAPS_mzrz_1::VMOVAPS
                // VMOVAPS VREG:w:f32=$ZMMm  PREG:r:Z=$Kk      VREG:r:f32=$ZMMr;
                return 1458 << 16 | 2714;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (c & 0x08)
        {
          // TEMPLATE.VMOVNRNGOAPS::VMOVNRNGOAPSm
          // VMOVNRNGOAPS MEM:rw=$mem PREG:r:Z=$Kk VREG:r:f32=$ZMMr SWZ=$d_f32 EVH=$EVH;
          return 3399 << 16 | 7054;
        }
        else
        {
          // TEMPLATE.VMOVNRAPS::VMOVNRAPSm
          // VMOVNRAPS MEM:rw=$mem PREG:r:Z=$Kk VREG:r:f32=$ZMMr SWZ=$d_f32 EVH=$EVH;
          return 3397 << 16 | 7052;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (c & 0x08)
          {
            // TEMPLATE.VMOVNRNGOAPD::VMOVNRNGOAPDmz
            // VMOVNRNGOAPD MEM:rw:f64=$mem512 PREG:r:Z=$Kk VREG:r:f64=$ZMMr SWZ=$d_f64 EVH=$EVH;
            return 3398 << 16 | 7053;
          }
          else
          {
            // TEMPLATE.VMOVNRAPD::VMOVNRAPDmz
            // VMOVNRAPD MEM:rw:f64=$mem512 PREG:r:Z=$Kk VREG:r:f64=$ZMMr SWZ=$d_f64 EVH=$EVH;
            return 3396 << 16 | 7051;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVAPD_moro::MOVAPDmx
                // MOVAPD MEM:w:f64=$mem128 VREG:r:f64=$XMMr;
                return 969 << 16 | 1637;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVAPD_mxrx::VMOVAPDmy
                  // VMOVAPD MEM:w:f64=$mem256 VREG:r:f64=$YMMr;
                  return 1441 << 16 | 2691;
                }
                else
                {
                  // TEMPLATE.VMOVAPD_mxrx::VMOVAPDmx
                  // VMOVAPD MEM:w:f64=$mem128 VREG:r:f64=$XMMr;
                  return 1441 << 16 | 2690;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMOVAPD_moro_2::VMOVAPDmx
                    // VMOVAPD MEM:w:f64=$mem128 PREG:r:Z=$Kk      VREG:r:f64=$XMMr;
                    return 1440 << 16 | 2687;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMOVAPD_myry_2::VMOVAPDmy
                    // VMOVAPD MEM:w:f64=$mem256 PREG:r:Z=$Kk      VREG:r:f64=$YMMr;
                    return 1443 << 16 | 2693;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMOVAPD_mzrz_2::VMOVAPDmz
                    // VMOVAPD MEM:w:f64=$mem512 PREG:r:Z=$Kk      VREG:r:f64=$ZMMr;
                    return 1445 << 16 | 2695;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VMOVAPD_mzrz_3::VMOVAPDmz
                // VMOVAPD MEM:w:f64=$mem512 PREG:r:Z=$Kk VREG:r:f64=$ZMMr SWZ=$d_f64 EVH=$EVH;
                return 3388 << 16 | 7035;
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVAPS_moro::MOVAPSmx
                // MOVAPS MEM:w:f32=$mem128 VREG:r:f32=$XMMr;
                return 971 << 16 | 1641;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVAPS_mxrx::VMOVAPSmy
                  // VMOVAPS MEM:w:f32=$mem256 VREG:r:f32=$YMMr;
                  return 1455 << 16 | 2711;
                }
                else
                {
                  // TEMPLATE.VMOVAPS_mxrx::VMOVAPSmx
                  // VMOVAPS MEM:w:f32=$mem128 VREG:r:f32=$XMMr;
                  return 1455 << 16 | 2710;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMOVAPS_moro_2::VMOVAPSmx
                    // VMOVAPS MEM:w:f32=$mem128 PREG:r:Z=$Kk      VREG:r:f32=$XMMr;
                    return 1454 << 16 | 2707;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMOVAPS_myry_2::VMOVAPSmy
                    // VMOVAPS MEM:w:f32=$mem256 PREG:r:Z=$Kk      VREG:r:f32=$YMMr;
                    return 1457 << 16 | 2713;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMOVAPS_mzrz_2::VMOVAPSmz
                    // VMOVAPS MEM:w:f32=$mem512 PREG:r:Z=$Kk      VREG:r:f32=$ZMMr;
                    return 1459 << 16 | 2715;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VMOVAPS_m0rz::VMOVAPSm
                // VMOVAPS MEM:w=$mem        PREG:r:Z=$Kk VREG:r:f32=$ZMMr SWZ=$d_f32 EVH=$EVH;
                return 3390 << 16 | 7039;
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x2a */
  case 298:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            if (d & 0x01)
            {
              // TEMPLATE.CVTSI2SD::CVTSI2SD
              // CVTSI2SD REG:w:f64=$XMMr REG:r:s64=$GPR64m;
              return 927 << 16 | 1555;
            }
            else
            {
              // TEMPLATE.CVTSI2SD::CVTSI2SD
              // CVTSI2SD REG:w:f64=$XMMr REG:r:s32=$GPR32m;
              return 927 << 16 | 1554;
            }
            break;
          }
          case 0x01:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTSI2SD_ronomx::VCVTSI2SD
                // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        REG:r:s64=$GPR64m;
                return 1311 << 16 | 2349;
              }
              else
              {
                // TEMPLATE.VCVTSI2SD_ronomx::VCVTSI2SD
                // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        REG:r:s32=$GPR32m;
                return 1311 << 16 | 2348;
              }
            }
            else
            {
              // TEMPLATE.VCVTSI2SD_ronomx::VCVTSI2SD
              // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        REG:r:s32=$GPR32m;
              return 1311 << 16 | 2352;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VCVTSI2SD_ronomq::VCVTSI2SD
              // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn RC=$RC REG:r:s64=$GPR64m;
              return 1310 << 16 | 2346;
            }
            else
            {
              if (d & 0x01)
              {
                if (c & 0x80)
                {
                  // TEMPLATE.VCVTSI2SD_ronomq::VCVTSI2SD
                  // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        REG:r:s64=$GPR64m;
                  return 1310 << 16 | 2345;
                }
                else
                {
                  // TEMPLATE.VCVTSI2SD_ronomd::VCVTSI2SD
                  // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        REG:r:s32=$GPR32m;
                  return 1309 << 16 | 2343;
                }
              }
              else
              {
                // TEMPLATE.VCVTSI2SD_ronomd::VCVTSI2SD
                // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        REG:r:s32=$GPR32m;
                return 1309 << 16 | 2341;
              }
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              if (d & 0x01)
              {
                // TEMPLATE.CVTSI2SS::CVTSI2SS
                // CVTSI2SS REG:w:f32=$XMMr REG:r:s32=$GPR64m;
                return 928 << 16 | 1559;
              }
              else
              {
                // TEMPLATE.CVTSI2SS::CVTSI2SS
                // CVTSI2SS REG:w:f32=$XMMr REG:r:s32=$GPR32m;
                return 928 << 16 | 1558;
              }
              break;
            }
            case 0x01:
            {
              if (c & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTSI2SS_ronomx_1::VCVTSI2SS
                  // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        REG:r:s64=$GPR64m;
                  return 1312 << 16 | 2355;
                }
                else
                {
                  // TEMPLATE.VCVTSI2SS_ronomx_1::VCVTSI2SS
                  // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        REG:r:s32=$GPR32m;
                  return 1312 << 16 | 2354;
                }
              }
              else
              {
                // TEMPLATE.VCVTSI2SS_ronomx_1::VCVTSI2SS
                // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        REG:r:s32=$GPR32m;
                return 1312 << 16 | 2358;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                if (d & 0x01)
                {
                  if (c & 0x80)
                  {
                    // TEMPLATE.VCVTSI2SS_ronomx_2::VCVTSI2SS
                    // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn RC=$RC REG:r:s64=$GPR64m;
                    return 1313 << 16 | 2364;
                  }
                  else
                  {
                    // TEMPLATE.VCVTSI2SS_ronomx_2::VCVTSI2SS
                    // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn RC=$RC REG:r:s32=$GPR32m;
                    return 1313 << 16 | 2367;
                  }
                }
                else
                {
                  // TEMPLATE.VCVTSI2SS_ronomx_2::VCVTSI2SS
                  // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn RC=$RC REG:r:s32=$GPR32m;
                  return 1313 << 16 | 2361;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  if (c & 0x80)
                  {
                    // TEMPLATE.VCVTSI2SS_ronomx_2::VCVTSI2SS
                    // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        REG:r:s64=$GPR64m;
                    return 1313 << 16 | 2363;
                  }
                  else
                  {
                    // TEMPLATE.VCVTSI2SS_ronomx_2::VCVTSI2SS
                    // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        REG:r:s32=$GPR32m;
                    return 1313 << 16 | 2366;
                  }
                }
                else
                {
                  // TEMPLATE.VCVTSI2SS_ronomx_2::VCVTSI2SS
                  // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        REG:r:s32=$GPR32m;
                  return 1313 << 16 | 2360;
                }
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // TEMPLATE.CVTPI2PD::CVTPI2PD
            // CVTPI2PD VREG:w:f64=$XMMr VREG:r:s32=$MMXm;
            return 920 << 16 | 1538;
          }
          else
          {
            // TEMPLATE.CVTPI2PS::CVTPI2PS
            // CVTPI2PS VREG:w:f32=$XMMr VREG:r:s32=$MMXm;
            return 921 << 16 | 1540;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            if (d & 0x01)
            {
              // TEMPLATE.CVTSI2SD::CVTSI2SDmq
              // CVTSI2SD REG:w:f64=$XMMr MEM:r:s64=$mem64;
              return 927 << 16 | 1557;
            }
            else
            {
              // TEMPLATE.CVTSI2SD::CVTSI2SDmd
              // CVTSI2SD REG:w:f64=$XMMr MEM:r:s32=$mem32;
              return 927 << 16 | 1556;
            }
            break;
          }
          case 0x01:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTSI2SD_ronomx::VCVTSI2SDmq
                // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        MEM:r:s64=$mem64;
                return 1311 << 16 | 2351;
              }
              else
              {
                // TEMPLATE.VCVTSI2SD_ronomx::VCVTSI2SDmd
                // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        MEM:r:s32=$mem32;
                return 1311 << 16 | 2350;
              }
            }
            else
            {
              // TEMPLATE.VCVTSI2SD_ronomx::VCVTSI2SDmd
              // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        MEM:r:s32=$mem32;
              return 1311 << 16 | 2353;
            }
            break;
          }
          case 0x02:
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTSI2SD_ronomq::VCVTSI2SDmq
                // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        MEM:r:s64=$mem64;
                return 1310 << 16 | 2347;
              }
              else
              {
                // TEMPLATE.VCVTSI2SD_ronomd::VCVTSI2SDmd
                // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        MEM:r:s32=$mem32;
                return 1309 << 16 | 2344;
              }
            }
            else
            {
              // TEMPLATE.VCVTSI2SD_ronomd::VCVTSI2SDmd
              // VCVTSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        MEM:r:s32=$mem32;
              return 1309 << 16 | 2342;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              if (d & 0x01)
              {
                // TEMPLATE.CVTSI2SS::CVTSI2SSmq
                // CVTSI2SS REG:w:f32=$XMMr MEM:r:s32=$mem64;
                return 928 << 16 | 1561;
              }
              else
              {
                // TEMPLATE.CVTSI2SS::CVTSI2SSmd
                // CVTSI2SS REG:w:f32=$XMMr MEM:r:s32=$mem32;
                return 928 << 16 | 1560;
              }
              break;
            }
            case 0x01:
            {
              if (c & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTSI2SS_ronomx_1::VCVTSI2SSmq
                  // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        MEM:r:s64=$mem64;
                  return 1312 << 16 | 2357;
                }
                else
                {
                  // TEMPLATE.VCVTSI2SS_ronomx_1::VCVTSI2SSmd
                  // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        MEM:r:s32=$mem32;
                  return 1312 << 16 | 2356;
                }
              }
              else
              {
                // TEMPLATE.VCVTSI2SS_ronomx_1::VCVTSI2SSmd
                // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        MEM:r:s32=$mem32;
                return 1312 << 16 | 2359;
              }
              break;
            }
            case 0x02:
            {
              if (d & 0x01)
              {
                if (c & 0x80)
                {
                  // TEMPLATE.VCVTSI2SS_ronomx_2::VCVTSI2SSmq
                  // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        MEM:r:s64=$mem64;
                  return 1313 << 16 | 2365;
                }
                else
                {
                  // TEMPLATE.VCVTSI2SS_ronomx_2::VCVTSI2SSmd
                  // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        MEM:r:s32=$mem32;
                  return 1313 << 16 | 2368;
                }
              }
              else
              {
                // TEMPLATE.VCVTSI2SS_ronomx_2::VCVTSI2SSmd
                // VCVTSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        MEM:r:s32=$mem32;
                return 1313 << 16 | 2362;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // TEMPLATE.CVTPI2PD::CVTPI2PDmq
            // CVTPI2PD VREG:w:f64=$XMMr MEM:r:s32=$mem64;
            return 920 << 16 | 1539;
          }
          else
          {
            // TEMPLATE.CVTPI2PS::CVTPI2PSmq
            // CVTPI2PS VREG:w:f32=$XMMr MEM:r:s32=$mem64;
            return 921 << 16 | 1541;
          }
        }
      }
    }
  break;
  /* 0f.0x2b */
  case 299:
    if (b & 0x10)
    {
      // TEMPLATE.MOVNTSD::MOVNTSDmq
      // MOVNTSD MEM:w:s64=$mem64 REG:r:s64=$XMMr;
      return 3123 << 16 | 6458;
    }
    else
    {
      if (b & 0x20)
      {
        // TEMPLATE.MOVNTSS::MOVNTSSmd
        // MOVNTSS MEM:w:s32=$mem32 REG:r:s32=$XMMr;
        return 3124 << 16 | 6459;
      }
      else
      {
        if (b & 0x40)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVNTPD::MOVNTPDmx
              // MOVNTPD MEM:w:s32=$mem128 VREG:r:f64=$XMMr;
              return 994 << 16 | 1671;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VMOVNTPD_mxrx::VMOVNTPDmy
                // VMOVNTPD MEM:w:f64=$mem256 VREG:r:f64=$YMMr;
                return 1531 << 16 | 2860;
              }
              else
              {
                // TEMPLATE.VMOVNTPD_mxrx::VMOVNTPDmx
                // VMOVNTPD MEM:w:f64=$mem128 VREG:r:f64=$XMMr;
                return 1531 << 16 | 2859;
              }
              break;
            }
            case 0x02:
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VMOVNTPD_moro::VMOVNTPDmx
                  // VMOVNTPD MEM:w:f64=$mem128 VREG:r:f64=$XMMr;
                  return 1530 << 16 | 2858;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VMOVNTPD_myry::VMOVNTPDmy
                  // VMOVNTPD MEM:w:f64=$mem256 VREG:r:f64=$YMMr;
                  return 1532 << 16 | 2861;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VMOVNTPD_mzrz::VMOVNTPDmz
                  // VMOVNTPD MEM:w:f64=$mem512 VREG:r:f64=$ZMMr;
                  return 1533 << 16 | 2862;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVNTPS::MOVNTPSmx
              // MOVNTPS MEM:w:s32=$mem128 VREG:r:f32=$XMMr;
              return 995 << 16 | 1672;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VMOVNTPS_mxrx::VMOVNTPSmy
                // VMOVNTPS MEM:w:f32=$mem256 VREG:r:f32=$YMMr;
                return 1535 << 16 | 2865;
              }
              else
              {
                // TEMPLATE.VMOVNTPS_mxrx::VMOVNTPSmx
                // VMOVNTPS MEM:w:f32=$mem128 VREG:r:f32=$XMMr;
                return 1535 << 16 | 2864;
              }
              break;
            }
            case 0x02:
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VMOVNTPS_moro::VMOVNTPSmx
                  // VMOVNTPS MEM:w:f32=$mem128 VREG:r:f32=$XMMr;
                  return 1534 << 16 | 2863;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VMOVNTPS_myry::VMOVNTPSmy
                  // VMOVNTPS MEM:w:f32=$mem256 VREG:r:f32=$YMMr;
                  return 1536 << 16 | 2866;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VMOVNTPS_mzrz::VMOVNTPSmz
                  // VMOVNTPS MEM:w:f32=$mem512 VREG:r:f32=$ZMMr;
                  return 1537 << 16 | 2867;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
        }
      }
    }
  break;
  /* 0f.0x2c */
  case 300:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            if (d & 0x01)
            {
              // TEMPLATE.CVTTSD2SI::CVTTSD2SI
              // CVTTSD2SI REG:w:s64=$GPR64r REG:r:f64=$XMMm;
              return 935 << 16 | 1577;
            }
            else
            {
              // TEMPLATE.CVTTSD2SI::CVTTSD2SI
              // CVTTSD2SI REG:w:s32=$GPR32r REG:r:f64=$XMMm;
              return 935 << 16 | 1576;
            }
            break;
          }
          case 0x01:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTTSD2SI_rxmq::VCVTTSD2SI
                // VCVTTSD2SI REG:w:s64=$GPR64r REG:r:f64=$XMMm;
                return 1326 << 16 | 2412;
              }
              else
              {
                // TEMPLATE.VCVTTSD2SI_rxmq::VCVTTSD2SI
                // VCVTTSD2SI REG:w:s32=$GPR32r REG:r:f64=$XMMm;
                return 1326 << 16 | 2411;
              }
            }
            else
            {
              // TEMPLATE.VCVTTSD2SI_rxmq::VCVTTSD2SI
              // VCVTTSD2SI REG:w:s32=$GPR32r REG:r:f64=$XMMm;
              return 1326 << 16 | 2415;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              if (d & 0x01)
              {
                if (c & 0x80)
                {
                  // TEMPLATE.VCVTTSD2SI_rxmx::VCVTTSD2SI
                  // VCVTTSD2SI REG:w:s64=$GPR64r VREG:r:f64=$XMMm SAE=$SAE;
                  return 1327 << 16 | 2421;
                }
                else
                {
                  // TEMPLATE.VCVTTSD2SI_rxmx::VCVTTSD2SI
                  // VCVTTSD2SI REG:w:s32=$GPR32r VREG:r:f64=$XMMm SAE=$SAE;
                  return 1327 << 16 | 2424;
                }
              }
              else
              {
                // TEMPLATE.VCVTTSD2SI_rxmx::VCVTTSD2SI
                // VCVTTSD2SI REG:w:s32=$GPR32r VREG:r:f64=$XMMm SAE=$SAE;
                return 1327 << 16 | 2418;
              }
            }
            else
            {
              if (d & 0x01)
              {
                if (c & 0x80)
                {
                  // TEMPLATE.VCVTTSD2SI_rxmx::VCVTTSD2SI
                  // VCVTTSD2SI REG:w:s64=$GPR64r VREG:r:f64=$XMMm;
                  return 1327 << 16 | 2420;
                }
                else
                {
                  // TEMPLATE.VCVTTSD2SI_rxmx::VCVTTSD2SI
                  // VCVTTSD2SI REG:w:s32=$GPR32r VREG:r:f64=$XMMm;
                  return 1327 << 16 | 2423;
                }
              }
              else
              {
                // TEMPLATE.VCVTTSD2SI_rxmx::VCVTTSD2SI
                // VCVTTSD2SI REG:w:s32=$GPR32r VREG:r:f64=$XMMm;
                return 1327 << 16 | 2417;
              }
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              if (d & 0x01)
              {
                // TEMPLATE.CVTTSS2SI::CVTTSS2SI
                // CVTTSS2SI REG:w:s64=$GPR64r REG:r:f32=$XMMm;
                return 936 << 16 | 1581;
              }
              else
              {
                // TEMPLATE.CVTTSS2SI::CVTTSS2SI
                // CVTTSS2SI REG:w:s32=$GPR32r REG:r:f32=$XMMm;
                return 936 << 16 | 1580;
              }
              break;
            }
            case 0x01:
            {
              if (c & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTTSS2SI_rxmd::VCVTTSS2SI
                  // VCVTTSS2SI REG:w:s64=$GPR64r REG:r:f32=$XMMm;
                  return 1328 << 16 | 2427;
                }
                else
                {
                  // TEMPLATE.VCVTTSS2SI_rxmd::VCVTTSS2SI
                  // VCVTTSS2SI REG:w:s32=$GPR32r REG:r:f32=$XMMm;
                  return 1328 << 16 | 2426;
                }
              }
              else
              {
                // TEMPLATE.VCVTTSS2SI_rxmd::VCVTTSS2SI
                // VCVTTSS2SI REG:w:s32=$GPR32r REG:r:f32=$XMMm;
                return 1328 << 16 | 2430;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                if (d & 0x01)
                {
                  if (c & 0x80)
                  {
                    // TEMPLATE.VCVTTSS2SI_rxmx::VCVTTSS2SI
                    // VCVTTSS2SI REG:w:s64=$GPR64r VREG:r:f32=$XMMm SAE=$SAE;
                    return 1329 << 16 | 2436;
                  }
                  else
                  {
                    // TEMPLATE.VCVTTSS2SI_rxmx::VCVTTSS2SI
                    // VCVTTSS2SI REG:w:s32=$GPR32r VREG:r:f32=$XMMm SAE=$SAE;
                    return 1329 << 16 | 2439;
                  }
                }
                else
                {
                  // TEMPLATE.VCVTTSS2SI_rxmx::VCVTTSS2SI
                  // VCVTTSS2SI REG:w:s32=$GPR32r VREG:r:f32=$XMMm SAE=$SAE;
                  return 1329 << 16 | 2433;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  if (c & 0x80)
                  {
                    // TEMPLATE.VCVTTSS2SI_rxmx::VCVTTSS2SI
                    // VCVTTSS2SI REG:w:s64=$GPR64r VREG:r:f32=$XMMm;
                    return 1329 << 16 | 2435;
                  }
                  else
                  {
                    // TEMPLATE.VCVTTSS2SI_rxmx::VCVTTSS2SI
                    // VCVTTSS2SI REG:w:s32=$GPR32r VREG:r:f32=$XMMm;
                    return 1329 << 16 | 2438;
                  }
                }
                else
                {
                  // TEMPLATE.VCVTTSS2SI_rxmx::VCVTTSS2SI
                  // VCVTTSS2SI REG:w:s32=$GPR32r VREG:r:f32=$XMMm;
                  return 1329 << 16 | 2432;
                }
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // TEMPLATE.CVTTPD2PI::CVTTPD2PI
            // CVTTPD2PI REG:w:s32=$MMXr VREG:r:f64=$XMMm;
            return 932 << 16 | 1570;
          }
          else
          {
            // TEMPLATE.CVTTPS2PI::CVTTPS2PI
            // CVTTPS2PI REG:w:s32=$MMXr VREG:r:f32=$XMMm;
            return 934 << 16 | 1574;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            if (d & 0x01)
            {
              // TEMPLATE.CVTTSD2SI::CVTTSD2SImq
              // CVTTSD2SI REG:w:s64=$GPR64r MEM:r:f64=$mem64;
              return 935 << 16 | 1579;
            }
            else
            {
              // TEMPLATE.CVTTSD2SI::CVTTSD2SImq
              // CVTTSD2SI REG:w:s32=$GPR32r MEM:r:f64=$mem64;
              return 935 << 16 | 1578;
            }
            break;
          }
          case 0x01:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTTSD2SI_rxmq::VCVTTSD2SImq
                // VCVTTSD2SI REG:w:s64=$GPR64r MEM:r:f64=$mem64;
                return 1326 << 16 | 2414;
              }
              else
              {
                // TEMPLATE.VCVTTSD2SI_rxmq::VCVTTSD2SImq
                // VCVTTSD2SI REG:w:s32=$GPR32r MEM:r:f64=$mem64;
                return 1326 << 16 | 2413;
              }
            }
            else
            {
              // TEMPLATE.VCVTTSD2SI_rxmq::VCVTTSD2SImq
              // VCVTTSD2SI REG:w:s32=$GPR32r MEM:r:f64=$mem64;
              return 1326 << 16 | 2416;
            }
            break;
          }
          case 0x02:
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTTSD2SI_rxmx::VCVTTSD2SImq
                // VCVTTSD2SI REG:w:s64=$GPR64r MEM:r:f64=$mem64;
                return 1327 << 16 | 2422;
              }
              else
              {
                // TEMPLATE.VCVTTSD2SI_rxmx::VCVTTSD2SImq
                // VCVTTSD2SI REG:w:s32=$GPR32r MEM:r:f64=$mem64;
                return 1327 << 16 | 2425;
              }
            }
            else
            {
              // TEMPLATE.VCVTTSD2SI_rxmx::VCVTTSD2SImq
              // VCVTTSD2SI REG:w:s32=$GPR32r MEM:r:f64=$mem64;
              return 1327 << 16 | 2419;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              if (d & 0x01)
              {
                // TEMPLATE.CVTTSS2SI::CVTTSS2SImd
                // CVTTSS2SI REG:w:s64=$GPR64r MEM:r:f32=$mem32;
                return 936 << 16 | 1583;
              }
              else
              {
                // TEMPLATE.CVTTSS2SI::CVTTSS2SImd
                // CVTTSS2SI REG:w:s32=$GPR32r MEM:r:f32=$mem32;
                return 936 << 16 | 1582;
              }
              break;
            }
            case 0x01:
            {
              if (c & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTTSS2SI_rxmd::VCVTTSS2SImd
                  // VCVTTSS2SI REG:w:s64=$GPR64r MEM:r:f32=$mem32;
                  return 1328 << 16 | 2429;
                }
                else
                {
                  // TEMPLATE.VCVTTSS2SI_rxmd::VCVTTSS2SImd
                  // VCVTTSS2SI REG:w:s32=$GPR32r MEM:r:f32=$mem32;
                  return 1328 << 16 | 2428;
                }
              }
              else
              {
                // TEMPLATE.VCVTTSS2SI_rxmd::VCVTTSS2SImd
                // VCVTTSS2SI REG:w:s32=$GPR32r MEM:r:f32=$mem32;
                return 1328 << 16 | 2431;
              }
              break;
            }
            case 0x02:
            {
              if (d & 0x01)
              {
                if (c & 0x80)
                {
                  // TEMPLATE.VCVTTSS2SI_rxmx::VCVTTSS2SImd
                  // VCVTTSS2SI REG:w:s64=$GPR64r MEM:r:f32=$mem32;
                  return 1329 << 16 | 2437;
                }
                else
                {
                  // TEMPLATE.VCVTTSS2SI_rxmx::VCVTTSS2SImd
                  // VCVTTSS2SI REG:w:s32=$GPR32r MEM:r:f32=$mem32;
                  return 1329 << 16 | 2440;
                }
              }
              else
              {
                // TEMPLATE.VCVTTSS2SI_rxmx::VCVTTSS2SImd
                // VCVTTSS2SI REG:w:s32=$GPR32r MEM:r:f32=$mem32;
                return 1329 << 16 | 2434;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // TEMPLATE.CVTTPD2PI::CVTTPD2PImx
            // CVTTPD2PI REG:w:s32=$MMXr MEM:r:f64=$mem128;
            return 932 << 16 | 1571;
          }
          else
          {
            // TEMPLATE.CVTTPS2PI::CVTTPS2PImq
            // CVTTPS2PI REG:w:s32=$MMXr MEM:r:f32=$mem64;
            return 934 << 16 | 1575;
          }
        }
      }
    }
  break;
  /* 0f.0x2d */
  case 301:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            if (d & 0x01)
            {
              // TEMPLATE.CVTSD2SI::CVTSD2SI
              // CVTSD2SI REG:w:s64=$GPR64r REG:r:f64=$XMMm;
              return 925 << 16 | 1549;
            }
            else
            {
              // TEMPLATE.CVTSD2SI::CVTSD2SI
              // CVTSD2SI REG:w:s32=$GPR32r REG:r:f64=$XMMm;
              return 925 << 16 | 1548;
            }
            break;
          }
          case 0x01:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTSD2SI_rxmq::VCVTSD2SI
                // VCVTSD2SI REG:w:s64=$GPR64r REG:r:f64=$XMMm;
                return 1305 << 16 | 2322;
              }
              else
              {
                // TEMPLATE.VCVTSD2SI_rxmq::VCVTSD2SI
                // VCVTSD2SI REG:w:s32=$GPR32r REG:r:f64=$XMMm;
                return 1305 << 16 | 2321;
              }
            }
            else
            {
              // TEMPLATE.VCVTSD2SI_rxmq::VCVTSD2SI
              // VCVTSD2SI REG:w:s32=$GPR32r REG:r:f64=$XMMm;
              return 1305 << 16 | 2325;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              if (d & 0x01)
              {
                if (c & 0x80)
                {
                  // TEMPLATE.VCVTSD2SI_rxmx::VCVTSD2SI
                  // VCVTSD2SI REG:w:s64=$GPR64r VREG:r:f64=$XMMm RC=$RC;
                  return 1306 << 16 | 2331;
                }
                else
                {
                  // TEMPLATE.VCVTSD2SI_rxmx::VCVTSD2SI
                  // VCVTSD2SI REG:w:s32=$GPR32r VREG:r:f64=$XMMm RC=$RC;
                  return 1306 << 16 | 2334;
                }
              }
              else
              {
                // TEMPLATE.VCVTSD2SI_rxmx::VCVTSD2SI
                // VCVTSD2SI REG:w:s32=$GPR32r VREG:r:f64=$XMMm RC=$RC;
                return 1306 << 16 | 2328;
              }
            }
            else
            {
              if (d & 0x01)
              {
                if (c & 0x80)
                {
                  // TEMPLATE.VCVTSD2SI_rxmx::VCVTSD2SI
                  // VCVTSD2SI REG:w:s64=$GPR64r VREG:r:f64=$XMMm;
                  return 1306 << 16 | 2330;
                }
                else
                {
                  // TEMPLATE.VCVTSD2SI_rxmx::VCVTSD2SI
                  // VCVTSD2SI REG:w:s32=$GPR32r VREG:r:f64=$XMMm;
                  return 1306 << 16 | 2333;
                }
              }
              else
              {
                // TEMPLATE.VCVTSD2SI_rxmx::VCVTSD2SI
                // VCVTSD2SI REG:w:s32=$GPR32r VREG:r:f64=$XMMm;
                return 1306 << 16 | 2327;
              }
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              if (d & 0x01)
              {
                // TEMPLATE.CVTSS2SI::CVTSS2SI
                // CVTSS2SI REG:w:s64=$GPR64r REG:r:f32=$XMMm;
                return 930 << 16 | 1565;
              }
              else
              {
                // TEMPLATE.CVTSS2SI::CVTSS2SI
                // CVTSS2SI REG:w:s32=$GPR32r REG:r:f32=$XMMm;
                return 930 << 16 | 1564;
              }
              break;
            }
            case 0x01:
            {
              if (c & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTSS2SI_rxmd::VCVTSS2SI
                  // VCVTSS2SI REG:w:s64=$GPR64r REG:r:f32=$XMMm;
                  return 1316 << 16 | 2375;
                }
                else
                {
                  // TEMPLATE.VCVTSS2SI_rxmd::VCVTSS2SI
                  // VCVTSS2SI REG:w:s32=$GPR32r REG:r:f32=$XMMm;
                  return 1316 << 16 | 2374;
                }
              }
              else
              {
                // TEMPLATE.VCVTSS2SI_rxmd::VCVTSS2SI
                // VCVTSS2SI REG:w:s32=$GPR32r REG:r:f32=$XMMm;
                return 1316 << 16 | 2378;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                if (d & 0x01)
                {
                  if (c & 0x80)
                  {
                    // TEMPLATE.VCVTSS2SI_rxmx::VCVTSS2SI
                    // VCVTSS2SI REG:w:s64=$GPR64r VREG:r:f32=$XMMm RC=$RC;
                    return 1317 << 16 | 2384;
                  }
                  else
                  {
                    // TEMPLATE.VCVTSS2SI_rxmx::VCVTSS2SI
                    // VCVTSS2SI REG:w:s32=$GPR32r VREG:r:f32=$XMMm RC=$RC;
                    return 1317 << 16 | 2387;
                  }
                }
                else
                {
                  // TEMPLATE.VCVTSS2SI_rxmx::VCVTSS2SI
                  // VCVTSS2SI REG:w:s32=$GPR32r VREG:r:f32=$XMMm RC=$RC;
                  return 1317 << 16 | 2381;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  if (c & 0x80)
                  {
                    // TEMPLATE.VCVTSS2SI_rxmx::VCVTSS2SI
                    // VCVTSS2SI REG:w:s64=$GPR64r VREG:r:f32=$XMMm;
                    return 1317 << 16 | 2383;
                  }
                  else
                  {
                    // TEMPLATE.VCVTSS2SI_rxmx::VCVTSS2SI
                    // VCVTSS2SI REG:w:s32=$GPR32r VREG:r:f32=$XMMm;
                    return 1317 << 16 | 2386;
                  }
                }
                else
                {
                  // TEMPLATE.VCVTSS2SI_rxmx::VCVTSS2SI
                  // VCVTSS2SI REG:w:s32=$GPR32r VREG:r:f32=$XMMm;
                  return 1317 << 16 | 2380;
                }
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // TEMPLATE.CVTPD2PI::CVTPD2PI
            // CVTPD2PI REG:w:s32=$MMXr VREG:r:f64=$XMMm;
            return 918 << 16 | 1534;
          }
          else
          {
            // TEMPLATE.CVTPS2PI::CVTPS2PI
            // CVTPS2PI REG:w:f32=$MMXr VREG:r:s32=$XMMm;
            return 924 << 16 | 1546;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            if (d & 0x01)
            {
              // TEMPLATE.CVTSD2SI::CVTSD2SImq
              // CVTSD2SI REG:w:s64=$GPR64r MEM:r:f64=$mem64;
              return 925 << 16 | 1551;
            }
            else
            {
              // TEMPLATE.CVTSD2SI::CVTSD2SImq
              // CVTSD2SI REG:w:s32=$GPR32r MEM:r:f64=$mem64;
              return 925 << 16 | 1550;
            }
            break;
          }
          case 0x01:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTSD2SI_rxmq::VCVTSD2SImq
                // VCVTSD2SI REG:w:s64=$GPR64r MEM:r:f64=$mem64;
                return 1305 << 16 | 2324;
              }
              else
              {
                // TEMPLATE.VCVTSD2SI_rxmq::VCVTSD2SImq
                // VCVTSD2SI REG:w:s32=$GPR32r MEM:r:f64=$mem64;
                return 1305 << 16 | 2323;
              }
            }
            else
            {
              // TEMPLATE.VCVTSD2SI_rxmq::VCVTSD2SImq
              // VCVTSD2SI REG:w:s32=$GPR32r MEM:r:f64=$mem64;
              return 1305 << 16 | 2326;
            }
            break;
          }
          case 0x02:
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTSD2SI_rxmx::VCVTSD2SImq
                // VCVTSD2SI REG:w:s64=$GPR64r MEM:r:f64=$mem64;
                return 1306 << 16 | 2332;
              }
              else
              {
                // TEMPLATE.VCVTSD2SI_rxmx::VCVTSD2SImq
                // VCVTSD2SI REG:w:s32=$GPR32r MEM:r:f64=$mem64;
                return 1306 << 16 | 2335;
              }
            }
            else
            {
              // TEMPLATE.VCVTSD2SI_rxmx::VCVTSD2SImq
              // VCVTSD2SI REG:w:s32=$GPR32r MEM:r:f64=$mem64;
              return 1306 << 16 | 2329;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              if (d & 0x01)
              {
                // TEMPLATE.CVTSS2SI::CVTSS2SImd
                // CVTSS2SI REG:w:s64=$GPR64r MEM:r:f32=$mem32;
                return 930 << 16 | 1567;
              }
              else
              {
                // TEMPLATE.CVTSS2SI::CVTSS2SImd
                // CVTSS2SI REG:w:s32=$GPR32r MEM:r:f32=$mem32;
                return 930 << 16 | 1566;
              }
              break;
            }
            case 0x01:
            {
              if (c & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTSS2SI_rxmd::VCVTSS2SImd
                  // VCVTSS2SI REG:w:s64=$GPR64r MEM:r:f32=$mem32;
                  return 1316 << 16 | 2377;
                }
                else
                {
                  // TEMPLATE.VCVTSS2SI_rxmd::VCVTSS2SImd
                  // VCVTSS2SI REG:w:s32=$GPR32r MEM:r:f32=$mem32;
                  return 1316 << 16 | 2376;
                }
              }
              else
              {
                // TEMPLATE.VCVTSS2SI_rxmd::VCVTSS2SImd
                // VCVTSS2SI REG:w:s32=$GPR32r MEM:r:f32=$mem32;
                return 1316 << 16 | 2379;
              }
              break;
            }
            case 0x02:
            {
              if (d & 0x01)
              {
                if (c & 0x80)
                {
                  // TEMPLATE.VCVTSS2SI_rxmx::VCVTSS2SImd
                  // VCVTSS2SI REG:w:s64=$GPR64r MEM:r:f32=$mem32;
                  return 1317 << 16 | 2385;
                }
                else
                {
                  // TEMPLATE.VCVTSS2SI_rxmx::VCVTSS2SImd
                  // VCVTSS2SI REG:w:s32=$GPR32r MEM:r:f32=$mem32;
                  return 1317 << 16 | 2388;
                }
              }
              else
              {
                // TEMPLATE.VCVTSS2SI_rxmx::VCVTSS2SImd
                // VCVTSS2SI REG:w:s32=$GPR32r MEM:r:f32=$mem32;
                return 1317 << 16 | 2382;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // TEMPLATE.CVTPD2PI::CVTPD2PImx
            // CVTPD2PI REG:w:s32=$MMXr MEM:r:f64=$mem128;
            return 918 << 16 | 1535;
          }
          else
          {
            // TEMPLATE.CVTPS2PI::CVTPS2PImq
            // CVTPS2PI REG:w:f32=$MMXr MEM:r:s32=$mem64;
            return 924 << 16 | 1547;
          }
        }
      }
    }
  break;
  /* 0f.0x2e */
  case 302:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UCOMISD::UCOMISD
            // UCOMISD REG:r:f64=$XMMr REG:r:f64=$XMMm;
            return 1201 << 16 | 2058;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VUCOMISD_romq::VUCOMISD
            // VUCOMISD VREG:r:f64=$XMMr REG:r:f64=$XMMm;
            return 2205 << 16 | 4287;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VUCOMISD_romx::VUCOMISD
              // VUCOMISD VREG:r:f64=$XMMr VREG:r:f64=$XMMm SAE=$SAE;
              return 2206 << 16 | 4290;
            }
            else
            {
              // TEMPLATE.VUCOMISD_romx::VUCOMISD
              // VUCOMISD VREG:r:f64=$XMMr VREG:r:f64=$XMMm;
              return 2206 << 16 | 4289;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UCOMISS::UCOMISS
            // UCOMISS REG:r:f32=$XMMr REG:r:f32=$XMMm;
            return 1202 << 16 | 2060;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VUCOMISS_romd::VUCOMISS
            // VUCOMISS VREG:r:f32=$XMMr REG:r:f32=$XMMm;
            return 2207 << 16 | 4292;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VUCOMISS_romx::VUCOMISS
              // VUCOMISS VREG:r:f32=$XMMr VREG:r:f32=$XMMm SAE=$SAE;
              return 2208 << 16 | 4295;
            }
            else
            {
              // TEMPLATE.VUCOMISS_romx::VUCOMISS
              // VUCOMISS VREG:r:f32=$XMMr VREG:r:f32=$XMMm;
              return 2208 << 16 | 4294;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UCOMISD::UCOMISDmq
            // UCOMISD REG:r:f64=$XMMr MEM:r:f64=$mem64;
            return 1201 << 16 | 2059;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VUCOMISD_romq::VUCOMISDmq
            // VUCOMISD VREG:r:f64=$XMMr MEM:r:f64=$mem64;
            return 2205 << 16 | 4288;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VUCOMISD_romx::VUCOMISDmq
            // VUCOMISD VREG:r:f64=$XMMr MEM:r:f64=$mem64;
            return 2206 << 16 | 4291;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.UCOMISS::UCOMISSmd
            // UCOMISS REG:r:f32=$XMMr MEM:r:f32=$mem32;
            return 1202 << 16 | 2061;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VUCOMISS_romd::VUCOMISSmd
            // VUCOMISS VREG:r:f32=$XMMr MEM:r:f32=$mem32;
            return 2207 << 16 | 4293;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VUCOMISS_romx::VUCOMISSmd
            // VUCOMISS VREG:r:f32=$XMMr MEM:r:f32=$mem32;
            return 2208 << 16 | 4296;
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f.0x2f */
  case 303:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.COMISD::COMISD
            // COMISD REG:r:f64=$XMMr REG:r:f64=$XMMm;
            return 911 << 16 | 1520;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VCOMISD_rqmq::VCOMISD
            // VCOMISD REG:r:f64=$XMMr  REG:r:f64=$XMMm;
            return 1278 << 16 | 2249;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VCOMISD_romx::VCOMISD
              // VCOMISD VREG:r:f64=$XMMr VREG:r:f64=$XMMm SAE=$SAE;
              return 1277 << 16 | 2247;
            }
            else
            {
              // TEMPLATE.VCOMISD_romx::VCOMISD
              // VCOMISD VREG:r:f64=$XMMr VREG:r:f64=$XMMm;
              return 1277 << 16 | 2246;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.COMISS::COMISS
            // COMISS REG:r:f32=$XMMr REG:r:f32=$XMMm;
            return 912 << 16 | 1522;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VCOMISS_rdmd::VCOMISS
            // VCOMISS REG:r:f32=$XMMr  REG:r:f32=$XMMm;
            return 1279 << 16 | 2251;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VCOMISS_romx::VCOMISS
              // VCOMISS VREG:r:f32=$XMMr VREG:r:f32=$XMMm SAE=$SAE;
              return 1280 << 16 | 2254;
            }
            else
            {
              // TEMPLATE.VCOMISS_romx::VCOMISS
              // VCOMISS VREG:r:f32=$XMMr VREG:r:f32=$XMMm;
              return 1280 << 16 | 2253;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.COMISD::COMISDmq
            // COMISD REG:r:f64=$XMMr MEM:r:f64=$mem64;
            return 911 << 16 | 1521;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VCOMISD_rqmq::VCOMISDmq
            // VCOMISD REG:r:f64=$XMMr  MEM:r:f64=$mem64;
            return 1278 << 16 | 2250;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VCOMISD_romx::VCOMISDmq
            // VCOMISD VREG:r:f64=$XMMr MEM:r:f64=$mem64;
            return 1277 << 16 | 2248;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.COMISS::COMISSmd
            // COMISS REG:r:f32=$XMMr MEM:r:f32=$mem32;
            return 912 << 16 | 1523;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VCOMISS_rdmd::VCOMISSmd
            // VCOMISS REG:r:f32=$XMMr  MEM:r:f32=$mem32;
            return 1279 << 16 | 2252;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VCOMISS_romx::VCOMISSmd
            // VCOMISS VREG:r:f32=$XMMr MEM:r:f32=$mem32;
            return 1280 << 16 | 2255;
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f.0x30 */
  case 304:
    // TEMPLATE.WRMSR::WRMSR
    // WRMSR REG:SUPP:r=EAX REG:SUPP:r=EDX REG:SUPP:r=ECX;
    return 551 << 16 | 993;
  break;
  /* 0f.0x31 */
  case 305:
    // TEMPLATE.RDTSC::RDTSC
    // RDTSC REG:SUPP:w=EAX REG:SUPP:w=EDX;
    return 396 << 16 | 696;
  break;
  /* 0f.0x32 */
  case 306:
    // TEMPLATE.RDMSR::RDMSR
    // RDMSR REG:SUPP:w=EAX REG:SUPP:w=EDX REG:SUPP:r=ECX;
    return 394 << 16 | 694;
  break;
  /* 0f.0x33 */
  case 307:
    // TEMPLATE.RDPMC::RDPMC
    // RDPMC REG:SUPP:w=EAX REG:SUPP:w=EDX REG:SUPP:r=ECX;
    return 395 << 16 | 695;
  break;
  /* 0f.0x34 */
  case 308:
    if (c & 0x80)
    {
      // TEMPLATE.SYSENTER::SYSENTER
      // SYSENTER REG:SUPP:w=RIP REG:SUPP:w=RSP;
      return 531 << 16 | 953;
    }
    else
    {
      // TEMPLATE.SYSENTER::SYSENTER
      // SYSENTER REG:SUPP:w=EIP REG:SUPP:w=ESP;
      return 531 << 16 | 954;
    }
  break;
  /* 0f.0x35 */
  case 309:
    if (c & 0x80)
    {
      // TEMPLATE.SYSEXIT::SYSEXIT
      // SYSEXIT REG:SUPP:w=RIP REG:SUPP:w=RSP REG:SUPP:r=RCX REG:SUPP:r=RDX;
      return 532 << 16 | 955;
    }
    else
    {
      // TEMPLATE.SYSEXIT::SYSEXIT
      // SYSEXIT REG:SUPP:w=EIP REG:SUPP:w=ESP REG:SUPP:r=ECX REG:SUPP:r=EDX;
      return 532 << 16 | 956;
    }
  break;
  /* invalid */
  case 310:
    return 0;
  /* 0f.0x37 */
  case 311:
    // TEMPLATE.GETSEC::GETSEC
    // GETSEC REG:SUPP:rcw=EAX REG:SUPP:r=EBX;
    return 720 << 16 | 1215;
  break;
  /* invalid */
  case 312:
    return 0;
  /* invalid */
  case 313:
    return 0;
  /* invalid */
  case 314:
    return 0;
  /* invalid */
  case 315:
    return 0;
  /* invalid */
  case 316:
    return 0;
  /* invalid */
  case 317:
    return 0;
  /* invalid */
  case 318:
    return 0;
  /* invalid */
  case 319:
    return 0;
  /* 0f.0x40 */
  case 320:
    if (a & 0x01)
    {
      // TEMPLATE.CMOVO::CMOVO
      // CMOVO   REG:cw=$GPRvr REG:r=$GPRvm;
      return 92 << 16 | 189;
    }
    else
    {
      // TEMPLATE.CMOVO::CMOVOm
      // CMOVO   REG:cw=$GPRvr MEM:r:sx=$memv;
      return 92 << 16 | 190;
    }
  break;
  /* 0f.0x41 */
  case 321:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          if (b & 0x40)
          {
            if (d & 0x01)
            {
              // TEMPLATE.KANDx::KANDD
              // KANDD REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1374 << 16 | 2549;
            }
            else
            {
              // TEMPLATE.KANDB::KANDB
              // KANDB REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1372 << 16 | 2547;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.KANDx::KANDQ
              // KANDQ REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1374 << 16 | 2550;
            }
            else
            {
              // TEMPLATE.KANDW::KANDW
              // KANDW REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1373 << 16 | 2548;
            }
          }
        }
        else
        {
          // TEMPLATE.KAND::KAND
          // KAND REG:w=$Kr REG:r=$Km;
          return 3273 << 16 | 6797;
        }
      }
      else
      {
        // TEMPLATE.CMOVNO::CMOVNO
        // CMOVNO  REG:cw=$GPRvr REG:r=$GPRvm;
        return 88 << 16 | 181;
      }
    }
    else
    {
      // TEMPLATE.CMOVNO::CMOVNOm
      // CMOVNO  REG:cw=$GPRvr MEM:r:sx=$memv;
      return 88 << 16 | 182;
    }
  break;
  /* 0f.0x42 */
  case 322:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          if (b & 0x40)
          {
            if (d & 0x01)
            {
              // TEMPLATE.KANDNx::KANDND
              // KANDND REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1371 << 16 | 2545;
            }
            else
            {
              // TEMPLATE.KANDNB::KANDNB
              // KANDNB REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1369 << 16 | 2543;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.KANDNx::KANDNQ
              // KANDNQ REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1371 << 16 | 2546;
            }
            else
            {
              // TEMPLATE.KANDNW::KANDNW
              // KANDNW REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1370 << 16 | 2544;
            }
          }
        }
        else
        {
          // TEMPLATE.KANDN::KANDN
          // KANDN REG:w=$Kr REG:r=$Km;
          return 3274 << 16 | 6798;
        }
      }
      else
      {
        // TEMPLATE.CMOVB::CMOVB
        // CMOVB   REG:cw=$GPRvr REG:r=$GPRvm;
        return 80 << 16 | 165;
      }
    }
    else
    {
      // TEMPLATE.CMOVB::CMOVBm
      // CMOVB   REG:cw=$GPRvr MEM:r:sx=$memv;
      return 80 << 16 | 166;
    }
  break;
  /* 0f.0x43 */
  case 323:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // TEMPLATE.KANDNR::KANDNR
        // KANDNR REG:w=$Kr REG:r=$Km;
        return 3275 << 16 | 6799;
      }
      else
      {
        // TEMPLATE.CMOVNB::CMOVNB
        // CMOVNB  REG:cw=$GPRvr REG:r=$GPRvm;
        return 84 << 16 | 173;
      }
    }
    else
    {
      // TEMPLATE.CMOVNB::CMOVNBm
      // CMOVNB  REG:cw=$GPRvr MEM:r:sx=$memv;
      return 84 << 16 | 174;
    }
  break;
  /* 0f.0x44 */
  case 324:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x40)
        {
          if (d & 0x01)
          {
            // TEMPLATE.KNOTx::KNOTD
            // KNOTD REG:w=$Kr REG:r=$Km;
            return 1389 << 16 | 2582;
          }
          else
          {
            // TEMPLATE.KNOTB::KNOTB
            // KNOTB REG:w=$Kr REG:r=$Km;
            return 1387 << 16 | 2579;
          }
        }
        else
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.KNOTx::KNOTQ
              // KNOTQ REG:w=$Kr REG:r=$Km;
              return 1389 << 16 | 2583;
            }
            else
            {
              if (d & 0x04)
              {
                // TEMPLATE.KNOT::KNOT
                // KNOT REG:w=$Kr REG:r=$Km;
                return 3284 << 16 | 6808;
              }
              else
              {
                // TEMPLATE.KNOTW::KNOTW
                // KNOTW REG:w=$Kr REG:r=$Km;
                return 1388 << 16 | 2580;
              }
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.KNOTx::KNOTQ
              // KNOTQ REG:w=$Kr REG:r=$Km;
              return 1389 << 16 | 2584;
            }
            else
            {
              // TEMPLATE.KNOTW::KNOTW
              // KNOTW REG:w=$Kr REG:r=$Km;
              return 1388 << 16 | 2581;
            }
          }
        }
      }
      else
      {
        // TEMPLATE.CMOVZ::CMOVZ
        // CMOVZ   REG:cw=$GPRvr REG:r=$GPRvm;
        return 95 << 16 | 195;
      }
    }
    else
    {
      // TEMPLATE.CMOVZ::CMOVZm
      // CMOVZ   REG:cw=$GPRvr MEM:r:sx=$memv;
      return 95 << 16 | 196;
    }
  break;
  /* 0f.0x45 */
  case 325:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          if (b & 0x40)
          {
            if (d & 0x01)
            {
              // TEMPLATE.KORx::KORD
              // KORD REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1395 << 16 | 2593;
            }
            else
            {
              // TEMPLATE.KORB::KORB
              // KORB REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1393 << 16 | 2591;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.KORx::KORQ
              // KORQ REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1395 << 16 | 2594;
            }
            else
            {
              // TEMPLATE.KORW::KORW
              // KORW REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1394 << 16 | 2592;
            }
          }
        }
        else
        {
          // TEMPLATE.KOR::KOR
          // KOR REG:w=$Kr REG:r=$Km;
          return 3285 << 16 | 6809;
        }
      }
      else
      {
        // TEMPLATE.CMOVNZ::CMOVNZ
        // CMOVNZ  REG:cw=$GPRvr REG:r=$GPRvm;
        return 91 << 16 | 187;
      }
    }
    else
    {
      // TEMPLATE.CMOVNZ::CMOVNZm
      // CMOVNZ  REG:cw=$GPRvr MEM:r:sx=$memv;
      return 91 << 16 | 188;
    }
  break;
  /* 0f.0x46 */
  case 326:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          if (b & 0x40)
          {
            if (d & 0x01)
            {
              // TEMPLATE.KXNORx::KXNORD
              // KXNORD REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1408 << 16 | 2612;
            }
            else
            {
              // TEMPLATE.KXNORB::KXNORB
              // KXNORB REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1406 << 16 | 2610;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.KXNORx::KXNORQ
              // KXNORQ REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1408 << 16 | 2613;
            }
            else
            {
              // TEMPLATE.KXNORW::KXNORW
              // KXNORW REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1407 << 16 | 2611;
            }
          }
        }
        else
        {
          // TEMPLATE.KXNOR::KXNOR
          // KXNOR REG:w=$Kr REG:r=$Km;
          return 3287 << 16 | 6811;
        }
      }
      else
      {
        // TEMPLATE.CMOVBE::CMOVBE
        // CMOVBE  REG:cw=$GPRvr REG:r=$GPRvm;
        return 81 << 16 | 167;
      }
    }
    else
    {
      // TEMPLATE.CMOVBE::CMOVBEm
      // CMOVBE  REG:cw=$GPRvr MEM:r:sx=$memv;
      return 81 << 16 | 168;
    }
  break;
  /* 0f.0x47 */
  case 327:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          if (b & 0x40)
          {
            if (d & 0x01)
            {
              // TEMPLATE.KXORx::KXORD
              // KXORD REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1411 << 16 | 2616;
            }
            else
            {
              // TEMPLATE.KXORB::KXORB
              // KXORB REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1409 << 16 | 2614;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.KXORx::KXORQ
              // KXORQ REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1411 << 16 | 2617;
            }
            else
            {
              // TEMPLATE.KXORW::KXORW
              // KXORW REG:w=$Kr REG:r=$Kn REG:r=$Km;
              return 1410 << 16 | 2615;
            }
          }
        }
        else
        {
          // TEMPLATE.KXOR::KXOR
          // KXOR REG:w=$Kr REG:r=$Km;
          return 3288 << 16 | 6812;
        }
      }
      else
      {
        // TEMPLATE.CMOVNBE::CMOVNBE
        // CMOVNBE REG:cw=$GPRvr REG:r=$GPRvm;
        return 85 << 16 | 175;
      }
    }
    else
    {
      // TEMPLATE.CMOVNBE::CMOVNBEm
      // CMOVNBE REG:cw=$GPRvr MEM:r:sx=$memv;
      return 85 << 16 | 176;
    }
  break;
  /* 0f.0x48 */
  case 328:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // TEMPLATE.KMERGE2L1H::KMERGE2L1H
        // KMERGE2L1H REG:w=$Kr REG:r=$Km;
        return 3279 << 16 | 6803;
      }
      else
      {
        // TEMPLATE.CMOVS::CMOVS
        // CMOVS   REG:cw=$GPRvr REG:r=$GPRvm;
        return 94 << 16 | 193;
      }
    }
    else
    {
      // TEMPLATE.CMOVS::CMOVSm
      // CMOVS   REG:cw=$GPRvr MEM:r:sx=$memv;
      return 94 << 16 | 194;
    }
  break;
  /* 0f.0x49 */
  case 329:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // TEMPLATE.KMERGE2L1L::KMERGE2L1L
        // KMERGE2L1L REG:w=$Kr REG:r=$Km;
        return 3280 << 16 | 6804;
      }
      else
      {
        // TEMPLATE.CMOVNS::CMOVNS
        // CMOVNS  REG:cw=$GPRvr REG:r=$GPRvm;
        return 90 << 16 | 185;
      }
    }
    else
    {
      // TEMPLATE.CMOVNS::CMOVNSm
      // CMOVNS  REG:cw=$GPRvr MEM:r:sx=$memv;
      return 90 << 16 | 186;
    }
  break;
  /* 0f.0x4a */
  case 330:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x40)
        {
          if (d & 0x01)
          {
            // TEMPLATE.KADDx_V_2::KADDD
            // KADDD REG:w=$Kr REG:r=$Kn REG:r=$Km;
            return 1368 << 16 | 2541;
          }
          else
          {
            // TEMPLATE.KADDx_V_1::KADDB
            // KADDB REG:w=$Kr REG:r=$Kn REG:r=$Km;
            return 1367 << 16 | 2539;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.KADDx_V_2::KADDQ
            // KADDQ REG:w=$Kr REG:r=$Kn REG:r=$Km;
            return 1368 << 16 | 2542;
          }
          else
          {
            // TEMPLATE.KADDx_V_1::KADDW
            // KADDW REG:w=$Kr REG:r=$Kn REG:r=$Km;
            return 1367 << 16 | 2540;
          }
        }
      }
      else
      {
        // TEMPLATE.CMOVP::CMOVP
        // CMOVP   REG:cw=$GPRvr REG:r=$GPRvm;
        return 93 << 16 | 191;
      }
    }
    else
    {
      // TEMPLATE.CMOVP::CMOVPm
      // CMOVP   REG:cw=$GPRvr MEM:r:sx=$memv;
      return 93 << 16 | 192;
    }
  break;
  /* 0f.0x4b */
  case 331:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x40)
        {
          // TEMPLATE.KUNPCKBW::KUNPCKBW
          // KUNPCKBW REG:w=$Kr REG:r=$Kn REG:r=$Km;
          return 1404 << 16 | 2607;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.KUNPCKxx::KUNPCKDQ
            // KUNPCKDQ REG:w=$Kr REG:r=$Kn REG:r=$Km;
            return 1405 << 16 | 2608;
          }
          else
          {
            // TEMPLATE.KUNPCKxx::KUNPCKWD
            // KUNPCKWD REG:w=$Kr REG:r=$Kn REG:r=$Km;
            return 1405 << 16 | 2609;
          }
        }
      }
      else
      {
        // TEMPLATE.CMOVNP::CMOVNP
        // CMOVNP  REG:cw=$GPRvr REG:r=$GPRvm;
        return 89 << 16 | 183;
      }
    }
    else
    {
      // TEMPLATE.CMOVNP::CMOVNPm
      // CMOVNP  REG:cw=$GPRvr MEM:r:sx=$memv;
      return 89 << 16 | 184;
    }
  break;
  /* 0f.0x4c */
  case 332:
    if (a & 0x01)
    {
      // TEMPLATE.CMOVL::CMOVL
      // CMOVL   REG:cw=$GPRvr REG:r=$GPRvm;
      return 82 << 16 | 169;
    }
    else
    {
      // TEMPLATE.CMOVL::CMOVLm
      // CMOVL   REG:cw=$GPRvr MEM:r:sx=$memv;
      return 82 << 16 | 170;
    }
  break;
  /* 0f.0x4d */
  case 333:
    if (a & 0x01)
    {
      // TEMPLATE.CMOVNL::CMOVNL
      // CMOVNL  REG:cw=$GPRvr REG:r=$GPRvm;
      return 86 << 16 | 177;
    }
    else
    {
      // TEMPLATE.CMOVNL::CMOVNLm
      // CMOVNL  REG:cw=$GPRvr MEM:r:sx=$memv;
      return 86 << 16 | 178;
    }
  break;
  /* 0f.0x4e */
  case 334:
    if (a & 0x01)
    {
      // TEMPLATE.CMOVLE::CMOVLE
      // CMOVLE  REG:cw=$GPRvr REG:r=$GPRvm;
      return 83 << 16 | 171;
    }
    else
    {
      // TEMPLATE.CMOVLE::CMOVLEm
      // CMOVLE  REG:cw=$GPRvr MEM:r:sx=$memv;
      return 83 << 16 | 172;
    }
  break;
  /* 0f.0x4f */
  case 335:
    if (a & 0x01)
    {
      // TEMPLATE.CMOVNLE::CMOVNLE
      // CMOVNLE REG:cw=$GPRvr REG:r=$GPRvm;
      return 87 << 16 | 179;
    }
    else
    {
      // TEMPLATE.CMOVNLE::CMOVNLEm
      // CMOVNLE REG:cw=$GPRvr MEM:r:sx=$memv;
      return 87 << 16 | 180;
    }
  break;
  /* 0f.0x50 */
  case 336:
    if (b & 0x40)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VMOVMSKPD::VMOVMSKPD
          // VMOVMSKPD REG:w:s32=$GPR32r VREG:r:f64=$YMMm;
          return 1519 << 16 | 2845;
        }
        else
        {
          // TEMPLATE.VMOVMSKPD::VMOVMSKPD
          // VMOVMSKPD REG:w:s32=$GPR32r VREG:r:f64=$XMMm;
          return 1519 << 16 | 2844;
        }
      }
      else
      {
        // TEMPLATE.MOVMSKPD::MOVMSKPD
        // MOVMSKPD REG:w=$GPR32r VREG:r:f64=$XMMm;
        return 989 << 16 | 1665;
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VMOVMSKPS::VMOVMSKPS
          // VMOVMSKPS REG:w:s32=$GPR32r VREG:r:f32=$YMMm;
          return 1520 << 16 | 2847;
        }
        else
        {
          // TEMPLATE.VMOVMSKPS::VMOVMSKPS
          // VMOVMSKPS REG:w:s32=$GPR32r VREG:r:f32=$XMMm;
          return 1520 << 16 | 2846;
        }
      }
      else
      {
        // TEMPLATE.MOVMSKPS::MOVMSKPS
        // MOVMSKPS REG:w=$GPR32r VREG:r:f32=$XMMm;
        return 990 << 16 | 1666;
      }
    }
  break;
  /* 0f.0x51 */
  case 337:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.SQRTSD::SQRTSD
            // SQRTSD REG:w:f64=$XMMr REG:r:f64=$XMMm;
            return 1194 << 16 | 2045;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VSQRTSD_ronomq::VSQRTSD
            // VSQRTSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm;
            return 2188 << 16 | 4244;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VSQRTSD_ronomx::VSQRTSD
              // VSQRTSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
              return 2189 << 16 | 4247;
            }
            else
            {
              // TEMPLATE.VSQRTSD_ronomx::VSQRTSD
              // VSQRTSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2189 << 16 | 4246;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.SQRTSS::SQRTSS
              // SQRTSS REG:w:f32=$XMMr REG:r:f32=$XMMm;
              return 1195 << 16 | 2047;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VSQRTSS_ronomd::VSQRTSS
              // VSQRTSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm;
              return 2190 << 16 | 4249;
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VSQRTSS_ronomx::VSQRTSS
                // VSQRTSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
                return 2191 << 16 | 4252;
              }
              else
              {
                // TEMPLATE.VSQRTSS_ronomx::VSQRTSS
                // VSQRTSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                return 2191 << 16 | 4251;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.SQRTPD::SQRTPD
                // SQRTPD VREG:w:f64=$XMMr VREG:r:f64=$XMMm;
                return 1192 << 16 | 2041;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VSQRTPD_rxmx::VSQRTPD
                  // VSQRTPD VREG:w:f64=$YMMr VREG:r:f64=$YMMm;
                  return 2181 << 16 | 4225;
                }
                else
                {
                  // TEMPLATE.VSQRTPD_rxmx::VSQRTPD
                  // VSQRTPD VREG:w:f64=$XMMr VREG:r:f64=$XMMm;
                  return 2181 << 16 | 4224;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VSQRTPD_rzmz::VSQRTPD
                  // VSQRTPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMm RC=$RC;
                  return 2183 << 16 | 4230;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VSQRTPD_romo::VSQRTPD
                      // VSQRTPD VREG:w:f64=$XMMr PREG:r:Z=$Kk      VREG:r:f64=$XMMm;
                      return 2180 << 16 | 4222;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VSQRTPD_rymy::VSQRTPD
                      // VSQRTPD VREG:w:f64=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$YMMm;
                      return 2182 << 16 | 4228;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VSQRTPD_rzmz::VSQRTPD
                      // VSQRTPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMm;
                      return 2183 << 16 | 4231;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.SQRTPS::SQRTPS
                // SQRTPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
                return 1193 << 16 | 2043;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VSQRTPS_rxmx::VSQRTPS
                  // VSQRTPS VREG:w:f32=$YMMr VREG:r:f32=$YMMm;
                  return 2185 << 16 | 4236;
                }
                else
                {
                  // TEMPLATE.VSQRTPS_rxmx::VSQRTPS
                  // VSQRTPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
                  return 2185 << 16 | 4235;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VSQRTPS_rzmz::VSQRTPS
                  // VSQRTPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$ZMMm RC=$RC;
                  return 2187 << 16 | 4241;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VSQRTPS_romo::VSQRTPS
                      // VSQRTPS VREG:w:f32=$XMMr PREG:r:Z=$Kk      VREG:r:f32=$XMMm;
                      return 2184 << 16 | 4233;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VSQRTPS_rymy::VSQRTPS
                      // VSQRTPS VREG:w:f32=$YMMr PREG:r:Z=$Kk      VREG:r:f32=$YMMm;
                      return 2186 << 16 | 4239;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VSQRTPS_rzmz::VSQRTPS
                      // VSQRTPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$ZMMm;
                      return 2187 << 16 | 4242;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.SQRTSD::SQRTSDmq
            // SQRTSD REG:w:f64=$XMMr MEM:r:f64=$mem64;
            return 1194 << 16 | 2046;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VSQRTSD_ronomq::VSQRTSDmq
            // VSQRTSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 2188 << 16 | 4245;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VSQRTSD_ronomx::VSQRTSDmq
            // VSQRTSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 2189 << 16 | 4248;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.SQRTSS::SQRTSSmd
              // SQRTSS REG:w:f32=$XMMr MEM:r:f32=$mem32;
              return 1195 << 16 | 2048;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VSQRTSS_ronomd::VSQRTSSmd
              // VSQRTSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 2190 << 16 | 4250;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VSQRTSS_ronomx::VSQRTSSmd
              // VSQRTSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 2191 << 16 | 4253;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.SQRTPD::SQRTPDmx
                // SQRTPD VREG:w:f64=$XMMr MEM:r:f64=$mem128;
                return 1192 << 16 | 2042;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VSQRTPD_rxmx::VSQRTPDmy
                  // VSQRTPD VREG:w:f64=$YMMr MEM:r:f64=$mem256;
                  return 2181 << 16 | 4227;
                }
                else
                {
                  // TEMPLATE.VSQRTPD_rxmx::VSQRTPDmx
                  // VSQRTPD VREG:w:f64=$XMMr MEM:r:f64=$mem128;
                  return 2181 << 16 | 4226;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VSQRTPD_romo::VSQRTPDmx
                    // VSQRTPD VREG:w:f64=$XMMr PREG:r:Z=$Kk      MEM:r:f64=$mem128 BCST=$BCST;
                    return 2180 << 16 | 4223;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VSQRTPD_rymy::VSQRTPDmy
                    // VSQRTPD VREG:w:f64=$YMMr PREG:r:Z=$Kk      MEM:r:f64=$mem256 BCST=$BCST;
                    return 2182 << 16 | 4229;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VSQRTPD_rzmz::VSQRTPDmz
                    // VSQRTPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      MEM:r:f64=$mem512 BCST=$BCST;
                    return 2183 << 16 | 4232;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.SQRTPS::SQRTPSmx
                // SQRTPS VREG:w:f32=$XMMr MEM:r:f32=$mem128;
                return 1193 << 16 | 2044;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VSQRTPS_rxmx::VSQRTPSmy
                  // VSQRTPS VREG:w:f32=$YMMr MEM:r:f32=$mem256;
                  return 2185 << 16 | 4238;
                }
                else
                {
                  // TEMPLATE.VSQRTPS_rxmx::VSQRTPSmx
                  // VSQRTPS VREG:w:f32=$XMMr MEM:r:f32=$mem128;
                  return 2185 << 16 | 4237;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VSQRTPS_romo::VSQRTPSmx
                    // VSQRTPS VREG:w:f32=$XMMr PREG:r:Z=$Kk      MEM:r:f32=$mem128 BCST=$BCST;
                    return 2184 << 16 | 4234;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VSQRTPS_rymy::VSQRTPSmy
                    // VSQRTPS VREG:w:f32=$YMMr PREG:r:Z=$Kk      MEM:r:f32=$mem256 BCST=$BCST;
                    return 2186 << 16 | 4240;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VSQRTPS_rzmz::VSQRTPSmz
                    // VSQRTPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk      MEM:r:f32=$mem512 BCST=$BCST;
                    return 2187 << 16 | 4243;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x52 */
  case 338:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VRSQRTSS::VRSQRTSS
          // VRSQRTSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2171 << 16 | 4200;
        }
        else
        {
          // TEMPLATE.RSQRTSS::RSQRTSS
          // RSQRTSS REG:w:f32=$XMMr REG:r:f32=$XMMm;
          return 1188 << 16 | 2034;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VRSQRTPS::VRSQRTPS
            // VRSQRTPS VREG:w:f32=$YMMr VREG:r:f32=$YMMm;
            return 2170 << 16 | 4197;
          }
          else
          {
            // TEMPLATE.VRSQRTPS::VRSQRTPS
            // VRSQRTPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
            return 2170 << 16 | 4196;
          }
        }
        else
        {
          // TEMPLATE.RSQRTPS::RSQRTPS
          // RSQRTPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
          return 1187 << 16 | 2032;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VRSQRTSS::VRSQRTSSmd
          // VRSQRTSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2171 << 16 | 4201;
        }
        else
        {
          // TEMPLATE.RSQRTSS::RSQRTSSmd
          // RSQRTSS REG:w:f32=$XMMr MEM:r:f32=$mem32;
          return 1188 << 16 | 2035;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VRSQRTPS::VRSQRTPSmy
            // VRSQRTPS VREG:w:f32=$YMMr MEM:r:f32=$mem256;
            return 2170 << 16 | 4199;
          }
          else
          {
            // TEMPLATE.VRSQRTPS::VRSQRTPSmx
            // VRSQRTPS VREG:w:f32=$XMMr MEM:r:f32=$mem128;
            return 2170 << 16 | 4198;
          }
        }
        else
        {
          // TEMPLATE.RSQRTPS::RSQRTPSmx
          // RSQRTPS VREG:w:f32=$XMMr MEM:r:f32=$mem128;
          return 1187 << 16 | 2033;
        }
      }
    }
  break;
  /* 0f.0x53 */
  case 339:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VRCPSS::VRCPSS
          // VRCPSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2165 << 16 | 4182;
        }
        else
        {
          // TEMPLATE.RCPSS::RCPSS
          // RCPSS REG:w:f32=$XMMr REG:r:f32=$XMMm;
          return 1182 << 16 | 2022;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VRCPPS::VRCPPS
            // VRCPPS VREG:w:f32=$YMMr VREG:r:f32=$YMMm;
            return 2164 << 16 | 4179;
          }
          else
          {
            // TEMPLATE.VRCPPS::VRCPPS
            // VRCPPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
            return 2164 << 16 | 4178;
          }
        }
        else
        {
          // TEMPLATE.RCPPS::RCPPS
          // RCPPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
          return 1181 << 16 | 2020;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VRCPSS::VRCPSSmd
          // VRCPSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2165 << 16 | 4183;
        }
        else
        {
          // TEMPLATE.RCPSS::RCPSSmd
          // RCPSS REG:w:f32=$XMMr MEM:r:f32=$mem32;
          return 1182 << 16 | 2023;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VRCPPS::VRCPPSmy
            // VRCPPS VREG:w:f32=$YMMr MEM:r:f32=$mem256;
            return 2164 << 16 | 4181;
          }
          else
          {
            // TEMPLATE.VRCPPS::VRCPPSmx
            // VRCPPS VREG:w:f32=$XMMr MEM:r:f32=$mem128;
            return 2164 << 16 | 4180;
          }
        }
        else
        {
          // TEMPLATE.RCPPS::RCPPSmx
          // RCPPS VREG:w:f32=$XMMr MEM:r:f32=$mem128;
          return 1181 << 16 | 2021;
        }
      }
    }
  break;
  /* 0f.0x54 */
  case 340:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ANDPD::ANDPD
            // ANDPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
            return 901 << 16 | 1500;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VANDPD_rxnxmx::VANDPD
              // VANDPD VREG:w:u64=$YMMr VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
              return 1254 << 16 | 2181;
            }
            else
            {
              // TEMPLATE.VANDPD_rxnxmx::VANDPD
              // VANDPD VREG:w:u64=$XMMr VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
              return 1254 << 16 | 2180;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VANDPD_ronomo::VANDPD
                // VANDPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 1253 << 16 | 2178;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VANDPD_rynymy::VANDPD
                // VANDPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                return 1255 << 16 | 2184;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VANDPD_rznzmz::VANDPD
                // VANDPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 1256 << 16 | 2186;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ANDPS::ANDPS
            // ANDPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
            return 902 << 16 | 1502;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VANDPS_rxnxmx::VANDPS
              // VANDPS VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 1258 << 16 | 2191;
            }
            else
            {
              // TEMPLATE.VANDPS_rxnxmx::VANDPS
              // VANDPS VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 1258 << 16 | 2190;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VANDPS_ronomo::VANDPS
                // VANDPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 1257 << 16 | 2188;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VANDPS_rynymy::VANDPS
                // VANDPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                return 1259 << 16 | 2194;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VANDPS_rznzmz::VANDPS
                // VANDPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 1260 << 16 | 2196;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ANDPD::ANDPDmx
            // ANDPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
            return 901 << 16 | 1501;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VANDPD_rxnxmx::VANDPDmy
              // VANDPD VREG:w:u64=$YMMr VREG:r:u64=$YMMn MEM:r:u64=$mem256;
              return 1254 << 16 | 2183;
            }
            else
            {
              // TEMPLATE.VANDPD_rxnxmx::VANDPDmx
              // VANDPD VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem128;
              return 1254 << 16 | 2182;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VANDPD_ronomo::VANDPDmx
                // VANDPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                return 1253 << 16 | 2179;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VANDPD_rynymy::VANDPDmy
                // VANDPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                return 1255 << 16 | 2185;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VANDPD_rznzmz::VANDPDmz
                // VANDPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                return 1256 << 16 | 2187;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ANDPS::ANDPSmx
            // ANDPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
            return 902 << 16 | 1503;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VANDPS_rxnxmx::VANDPSmy
              // VANDPS VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
              return 1258 << 16 | 2193;
            }
            else
            {
              // TEMPLATE.VANDPS_rxnxmx::VANDPSmx
              // VANDPS VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
              return 1258 << 16 | 2192;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VANDPS_ronomo::VANDPSmx
                // VANDPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                return 1257 << 16 | 2189;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VANDPS_rynymy::VANDPSmy
                // VANDPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                return 1259 << 16 | 2195;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VANDPS_rznzmz::VANDPSmz
                // VANDPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                return 1260 << 16 | 2197;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f.0x55 */
  case 341:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ANDNPD::ANDNPD
            // ANDNPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
            return 899 << 16 | 1496;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VANDNPD_rxnxmx::VANDNPD
              // VANDNPD VREG:w:u64=$YMMr VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
              return 1246 << 16 | 2161;
            }
            else
            {
              // TEMPLATE.VANDNPD_rxnxmx::VANDNPD
              // VANDNPD VREG:w:u64=$XMMr VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
              return 1246 << 16 | 2160;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VANDNPD_ronomo::VANDNPD
                // VANDNPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 1245 << 16 | 2158;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VANDNPD_rynymy::VANDNPD
                // VANDNPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                return 1247 << 16 | 2164;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VANDNPD_rznzmz::VANDNPD
                // VANDNPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 1248 << 16 | 2166;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ANDNPS::ANDNPS
            // ANDNPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
            return 900 << 16 | 1498;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VANDNPS_rxnxmx::VANDNPS
              // VANDNPS VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 1250 << 16 | 2171;
            }
            else
            {
              // TEMPLATE.VANDNPS_rxnxmx::VANDNPS
              // VANDNPS VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 1250 << 16 | 2170;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VANDNPS_ronomo::VANDNPS
                // VANDNPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 1249 << 16 | 2168;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VANDNPS_rynymy::VANDNPS
                // VANDNPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                return 1251 << 16 | 2174;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VANDNPS_rznzmz::VANDNPS
                // VANDNPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 1252 << 16 | 2176;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ANDNPD::ANDNPDmx
            // ANDNPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
            return 899 << 16 | 1497;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VANDNPD_rxnxmx::VANDNPDmy
              // VANDNPD VREG:w:u64=$YMMr VREG:r:u64=$YMMn MEM:r:u64=$mem256;
              return 1246 << 16 | 2163;
            }
            else
            {
              // TEMPLATE.VANDNPD_rxnxmx::VANDNPDmx
              // VANDNPD VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem128;
              return 1246 << 16 | 2162;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VANDNPD_ronomo::VANDNPDmx
                // VANDNPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                return 1245 << 16 | 2159;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VANDNPD_rynymy::VANDNPDmy
                // VANDNPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                return 1247 << 16 | 2165;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VANDNPD_rznzmz::VANDNPDmz
                // VANDNPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                return 1248 << 16 | 2167;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ANDNPS::ANDNPSmx
            // ANDNPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
            return 900 << 16 | 1499;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VANDNPS_rxnxmx::VANDNPSmy
              // VANDNPS VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
              return 1250 << 16 | 2173;
            }
            else
            {
              // TEMPLATE.VANDNPS_rxnxmx::VANDNPSmx
              // VANDNPS VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
              return 1250 << 16 | 2172;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VANDNPS_ronomo::VANDNPSmx
                // VANDNPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                return 1249 << 16 | 2169;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VANDNPS_rynymy::VANDNPSmy
                // VANDNPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                return 1251 << 16 | 2175;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VANDNPS_rznzmz::VANDNPSmz
                // VANDNPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                return 1252 << 16 | 2177;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f.0x56 */
  case 342:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ORPD::ORPD
            // ORPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
            return 1018 << 16 | 1720;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VORPD_rxnxmx::VORPD
              // VORPD VREG:w:u64=$YMMr VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
              return 1605 << 16 | 3015;
            }
            else
            {
              // TEMPLATE.VORPD_rxnxmx::VORPD
              // VORPD VREG:w:u64=$XMMr VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
              return 1605 << 16 | 3014;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VORPD_ronomo::VORPD
                // VORPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 1604 << 16 | 3012;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VORPD_rynymy::VORPD
                // VORPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                return 1606 << 16 | 3018;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VORPD_rznzmz::VORPD
                // VORPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 1607 << 16 | 3020;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ORPS::ORPS
            // ORPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
            return 1019 << 16 | 1722;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VORPS_rxnxmx::VORPS
              // VORPS VREG:w:u32=$YMMr VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
              return 1609 << 16 | 3025;
            }
            else
            {
              // TEMPLATE.VORPS_rxnxmx::VORPS
              // VORPS VREG:w:u32=$XMMr VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
              return 1609 << 16 | 3024;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VORPS_ronomo::VORPS
                // VORPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 1608 << 16 | 3022;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VORPS_rynymy::VORPS
                // VORPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                return 1610 << 16 | 3028;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VORPS_rznzmz::VORPS
                // VORPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 1611 << 16 | 3030;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ORPD::ORPDmx
            // ORPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
            return 1018 << 16 | 1721;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VORPD_rxnxmx::VORPDmy
              // VORPD VREG:w:u64=$YMMr VREG:r:u64=$YMMn MEM:r:u64=$mem256;
              return 1605 << 16 | 3017;
            }
            else
            {
              // TEMPLATE.VORPD_rxnxmx::VORPDmx
              // VORPD VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem128;
              return 1605 << 16 | 3016;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VORPD_ronomo::VORPDmx
                // VORPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                return 1604 << 16 | 3013;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VORPD_rynymy::VORPDmy
                // VORPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                return 1606 << 16 | 3019;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VORPD_rznzmz::VORPDmz
                // VORPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                return 1607 << 16 | 3021;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ORPS::ORPSmx
            // ORPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
            return 1019 << 16 | 1723;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VORPS_rxnxmx::VORPSmy
              // VORPS VREG:w:u32=$YMMr VREG:r:u32=$YMMn MEM:r:u32=$mem256;
              return 1609 << 16 | 3027;
            }
            else
            {
              // TEMPLATE.VORPS_rxnxmx::VORPSmx
              // VORPS VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem128;
              return 1609 << 16 | 3026;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VORPS_ronomo::VORPSmx
                // VORPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                return 1608 << 16 | 3023;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VORPS_rynymy::VORPSmy
                // VORPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                return 1610 << 16 | 3029;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VORPS_rznzmz::VORPSmz
                // VORPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                return 1611 << 16 | 3031;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f.0x57 */
  case 343:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.XORPD::XORPD
            // XORPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
            return 1207 << 16 | 2070;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VXORPD_rxnxmx::VXORPD
              // VXORPD VREG:w:u64=$YMMr VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
              return 3098 << 16 | 6396;
            }
            else
            {
              // TEMPLATE.VXORPD_rxnxmx::VXORPD
              // VXORPD VREG:w:u64=$XMMr VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
              return 3098 << 16 | 6395;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VXORPD_ronomo::VXORPD
                // VXORPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 3097 << 16 | 6393;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VXORPD_rynymy::VXORPD
                // VXORPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                return 3099 << 16 | 6399;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VXORPD_rznzmz::VXORPD
                // VXORPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 3100 << 16 | 6401;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.XORPS::XORPS
            // XORPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
            return 1208 << 16 | 2072;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VXORPS_rxnxmx::VXORPS
              // VXORPS VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 3102 << 16 | 6406;
            }
            else
            {
              // TEMPLATE.VXORPS_rxnxmx::VXORPS
              // VXORPS VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 3102 << 16 | 6405;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VXORPS_ronomo::VXORPS
                // VXORPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 3101 << 16 | 6403;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VXORPS_rynymy::VXORPS
                // VXORPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                return 3103 << 16 | 6409;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VXORPS_rznzmz::VXORPS
                // VXORPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 3104 << 16 | 6411;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.XORPD::XORPDmx
            // XORPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
            return 1207 << 16 | 2071;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VXORPD_rxnxmx::VXORPDmy
              // VXORPD VREG:w:u64=$YMMr VREG:r:u64=$YMMn MEM:r:u64=$mem256;
              return 3098 << 16 | 6398;
            }
            else
            {
              // TEMPLATE.VXORPD_rxnxmx::VXORPDmx
              // VXORPD VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem128;
              return 3098 << 16 | 6397;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VXORPD_ronomo::VXORPDmx
                // VXORPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                return 3097 << 16 | 6394;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VXORPD_rynymy::VXORPDmy
                // VXORPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                return 3099 << 16 | 6400;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VXORPD_rznzmz::VXORPDmz
                // VXORPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                return 3100 << 16 | 6402;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.XORPS::XORPSmx
            // XORPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
            return 1208 << 16 | 2073;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VXORPS_rxnxmx::VXORPSmy
              // VXORPS VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
              return 3102 << 16 | 6408;
            }
            else
            {
              // TEMPLATE.VXORPS_rxnxmx::VXORPSmx
              // VXORPS VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
              return 3102 << 16 | 6407;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VXORPS_ronomo::VXORPSmx
                // VXORPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                return 3101 << 16 | 6404;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VXORPS_rynymy::VXORPSmy
                // VXORPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                return 3103 << 16 | 6410;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VXORPS_rznzmz::VXORPSmz
                // VXORPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                return 3104 << 16 | 6412;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f.0x58 */
  case 344:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ADDSD::ADDSD
            // ADDSD REG:rw:f64=$XMMr REG:r:f64=$XMMm;
            return 895 << 16 | 1488;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VADDSD_ronomq::VADDSD
            // VADDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm;
            return 1217 << 16 | 2096;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VADDSD_ronomx::VADDSD
              // VADDSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
              return 1218 << 16 | 2099;
            }
            else
            {
              // TEMPLATE.VADDSD_ronomx::VADDSD
              // VADDSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 1218 << 16 | 2098;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.ADDSS::ADDSS
              // ADDSS REG:rw:f32=$XMMr REG:r:f32=$XMMm;
              return 896 << 16 | 1490;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VADDSS_ronomd::VADDSS
              // VADDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm;
              return 1219 << 16 | 2101;
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VADDSS_ronomx::VADDSS
                // VADDSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
                return 1220 << 16 | 2104;
              }
              else
              {
                // TEMPLATE.VADDSS_ronomx::VADDSS
                // VADDSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                return 1220 << 16 | 2103;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.ADDPD::ADDPD
                // ADDPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
                return 893 << 16 | 1484;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VADDPD_rxnxmx::VADDPD
                  // VADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
                  return 1210 << 16 | 2077;
                }
                else
                {
                  // TEMPLATE.VADDPD_rxnxmx::VADDPD
                  // VADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
                  return 1210 << 16 | 2076;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VADDPD_rznzmz::VADDPD
                  // VADDPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
                  return 1212 << 16 | 2082;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VADDPD_ronomo::VADDPD
                      // VADDPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                      return 1209 << 16 | 2074;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VADDPD_rynymy::VADDPD
                      // VADDPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                      return 1211 << 16 | 2080;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VADDPD_rznzmz::VADDPD
                      // VADDPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                      return 1212 << 16 | 2083;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  // TEMPLATE.VADDPD_rznzmx::VADDPD
                  // VADDPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
                  return 3301 << 16 | 6835;
                }
                else
                {
                  // TEMPLATE.VADDPD_rznzmx::VADDPD
                  // VADDPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
                  return 3301 << 16 | 6834;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.ADDPS::ADDPS
                // ADDPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
                return 894 << 16 | 1486;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VADDPS_rxnxmx::VADDPS
                  // VADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
                  return 1214 << 16 | 2088;
                }
                else
                {
                  // TEMPLATE.VADDPS_rxnxmx::VADDPS
                  // VADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                  return 1214 << 16 | 2087;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VADDPS_rznzmz::VADDPS
                  // VADDPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
                  return 1216 << 16 | 2093;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VADDPS_ronomo::VADDPS
                      // VADDPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                      return 1213 << 16 | 2085;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VADDPS_rynymy::VADDPS
                      // VADDPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                      return 1215 << 16 | 2091;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VADDPS_rznzmz::VADDPS
                      // VADDPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                      return 1216 << 16 | 2094;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  // TEMPLATE.VADDPS_rznzmx::VADDPS
                  // VADDPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
                  return 3302 << 16 | 6838;
                }
                else
                {
                  // TEMPLATE.VADDPS_rznzmx::VADDPS
                  // VADDPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
                  return 3302 << 16 | 6837;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.ADDSD::ADDSDmq
            // ADDSD REG:rw:f64=$XMMr MEM:r:f64=$mem64;
            return 895 << 16 | 1489;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VADDSD_ronomq::VADDSDmq
            // VADDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 1217 << 16 | 2097;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VADDSD_ronomx::VADDSDmq
            // VADDSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 1218 << 16 | 2100;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.ADDSS::ADDSSmd
              // ADDSS REG:rw:f32=$XMMr MEM:r:f32=$mem32;
              return 896 << 16 | 1491;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VADDSS_ronomd::VADDSSmd
              // VADDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 1219 << 16 | 2102;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VADDSS_ronomx::VADDSSmd
              // VADDSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 1220 << 16 | 2105;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.ADDPD::ADDPDmx
                // ADDPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
                return 893 << 16 | 1485;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VADDPD_rxnxmx::VADDPDmy
                  // VADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
                  return 1210 << 16 | 2079;
                }
                else
                {
                  // TEMPLATE.VADDPD_rxnxmx::VADDPDmx
                  // VADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
                  return 1210 << 16 | 2078;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VADDPD_ronomo::VADDPDmx
                    // VADDPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                    return 1209 << 16 | 2075;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VADDPD_rynymy::VADDPDmy
                    // VADDPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                    return 1211 << 16 | 2081;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VADDPD_rznzmz::VADDPDmz
                    // VADDPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                    return 1212 << 16 | 2084;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VADDPD_rznzmx::VADDPDm
                // VADDPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
                return 3301 << 16 | 6836;
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.ADDPS::ADDPSmx
                // ADDPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
                return 894 << 16 | 1487;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VADDPS_rxnxmx::VADDPSmy
                  // VADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
                  return 1214 << 16 | 2090;
                }
                else
                {
                  // TEMPLATE.VADDPS_rxnxmx::VADDPSmx
                  // VADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
                  return 1214 << 16 | 2089;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VADDPS_ronomo::VADDPSmx
                    // VADDPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                    return 1213 << 16 | 2086;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VADDPS_rynymy::VADDPSmy
                    // VADDPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                    return 1215 << 16 | 2092;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VADDPS_rznzmz::VADDPSmz
                    // VADDPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                    return 1216 << 16 | 2095;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VADDPS_rznzmx::VADDPSm
                // VADDPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
                return 3302 << 16 | 6839;
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x59 */
  case 345:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MULSD::MULSD
            // MULSD REG:rw:f64=$XMMr REG:r:f64=$XMMm;
            return 1016 << 16 | 1716;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMULSD_ronomq::VMULSD
            // VMULSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm;
            return 1600 << 16 | 3002;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VMULSD_ronomx::VMULSD
              // VMULSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
              return 1601 << 16 | 3005;
            }
            else
            {
              // TEMPLATE.VMULSD_ronomx::VMULSD
              // VMULSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 1601 << 16 | 3004;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MULSS::MULSS
              // MULSS REG:rw:f32=$XMMr REG:r:f32=$XMMm;
              return 1017 << 16 | 1718;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMULSS_ronomd::VMULSS
              // VMULSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm;
              return 1602 << 16 | 3007;
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VMULSS_ronomx::VMULSS
                // VMULSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
                return 1603 << 16 | 3010;
              }
              else
              {
                // TEMPLATE.VMULSS_ronomx::VMULSS
                // VMULSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                return 1603 << 16 | 3009;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MULPD::MULPD
                // MULPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
                return 1014 << 16 | 1712;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMULPD_rxnxmx::VMULPD
                  // VMULPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
                  return 1593 << 16 | 2983;
                }
                else
                {
                  // TEMPLATE.VMULPD_rxnxmx::VMULPD
                  // VMULPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
                  return 1593 << 16 | 2982;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VMULPD_rznzmz::VMULPD
                  // VMULPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
                  return 1595 << 16 | 2988;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VMULPD_ronomo::VMULPD
                      // VMULPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                      return 1592 << 16 | 2980;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VMULPD_rynymy::VMULPD
                      // VMULPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                      return 1594 << 16 | 2986;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VMULPD_rznzmz::VMULPD
                      // VMULPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                      return 1595 << 16 | 2989;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  // TEMPLATE.VMULPD_rznzmx::VMULPD
                  // VMULPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
                  return 3400 << 16 | 7056;
                }
                else
                {
                  // TEMPLATE.VMULPD_rznzmx::VMULPD
                  // VMULPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
                  return 3400 << 16 | 7055;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MULPS::MULPS
                // MULPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
                return 1015 << 16 | 1714;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMULPS_rxnxmx::VMULPS
                  // VMULPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
                  return 1597 << 16 | 2994;
                }
                else
                {
                  // TEMPLATE.VMULPS_rxnxmx::VMULPS
                  // VMULPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                  return 1597 << 16 | 2993;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VMULPS_rznzmz::VMULPS
                  // VMULPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
                  return 1599 << 16 | 2999;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VMULPS_ronomo::VMULPS
                      // VMULPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                      return 1596 << 16 | 2991;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VMULPS_rynymy::VMULPS
                      // VMULPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                      return 1598 << 16 | 2997;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VMULPS_rznzmz::VMULPS
                      // VMULPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                      return 1599 << 16 | 3000;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  // TEMPLATE.VMULPS_rznzmx::VMULPS
                  // VMULPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
                  return 3401 << 16 | 7059;
                }
                else
                {
                  // TEMPLATE.VMULPS_rznzmx::VMULPS
                  // VMULPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
                  return 3401 << 16 | 7058;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MULSD::MULSDmq
            // MULSD REG:rw:f64=$XMMr MEM:r:f64=$mem64;
            return 1016 << 16 | 1717;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMULSD_ronomq::VMULSDmq
            // VMULSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 1600 << 16 | 3003;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VMULSD_ronomx::VMULSDmq
            // VMULSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 1601 << 16 | 3006;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MULSS::MULSSmd
              // MULSS REG:rw:f32=$XMMr MEM:r:f32=$mem32;
              return 1017 << 16 | 1719;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMULSS_ronomd::VMULSSmd
              // VMULSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 1602 << 16 | 3008;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMULSS_ronomx::VMULSSmd
              // VMULSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 1603 << 16 | 3011;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MULPD::MULPDmx
                // MULPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
                return 1014 << 16 | 1713;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMULPD_rxnxmx::VMULPDmy
                  // VMULPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
                  return 1593 << 16 | 2985;
                }
                else
                {
                  // TEMPLATE.VMULPD_rxnxmx::VMULPDmx
                  // VMULPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
                  return 1593 << 16 | 2984;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMULPD_ronomo::VMULPDmx
                    // VMULPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                    return 1592 << 16 | 2981;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMULPD_rynymy::VMULPDmy
                    // VMULPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                    return 1594 << 16 | 2987;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMULPD_rznzmz::VMULPDmz
                    // VMULPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                    return 1595 << 16 | 2990;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VMULPD_rznzmx::VMULPDm
                // VMULPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
                return 3400 << 16 | 7057;
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MULPS::MULPSmx
                // MULPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
                return 1015 << 16 | 1715;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMULPS_rxnxmx::VMULPSmy
                  // VMULPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
                  return 1597 << 16 | 2996;
                }
                else
                {
                  // TEMPLATE.VMULPS_rxnxmx::VMULPSmx
                  // VMULPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
                  return 1597 << 16 | 2995;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMULPS_ronomo::VMULPSmx
                    // VMULPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                    return 1596 << 16 | 2992;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMULPS_rynymy::VMULPSmy
                    // VMULPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                    return 1598 << 16 | 2998;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMULPS_rznzmz::VMULPSmz
                    // VMULPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                    return 1599 << 16 | 3001;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VMULPS_rznzmx::VMULPSm
                // VMULPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
                return 3401 << 16 | 7060;
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x5a */
  case 346:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.CVTSD2SS::CVTSD2SS
            // CVTSD2SS REG:w:f32=$XMMr REG:r:f64=$XMMm;
            return 926 << 16 | 1552;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VCVTSD2SS_ronomq::VCVTSD2SS
            // VCVTSD2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f64=$XMMm;
            return 1307 << 16 | 2336;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VCVTSD2SS_ronomx::VCVTSD2SS
              // VCVTSD2SS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
              return 1308 << 16 | 2339;
            }
            else
            {
              // TEMPLATE.VCVTSD2SS_ronomx::VCVTSD2SS
              // VCVTSD2SS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 1308 << 16 | 2338;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CVTSS2SD::CVTSS2SD
              // CVTSS2SD REG:w:f64=$XMMr REG:r:f32=$XMMm;
              return 929 << 16 | 1562;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VCVTSS2SD_ronomd::VCVTSS2SD
              // VCVTSS2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f32=$XMMm;
              return 1314 << 16 | 2369;
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VCVTSS2SD_ronomx::VCVTSS2SD
                // VCVTSS2SD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE;
                return 1315 << 16 | 2372;
              }
              else
              {
                // TEMPLATE.VCVTSS2SD_ronomx::VCVTSS2SD
                // VCVTSS2SD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                return 1315 << 16 | 2371;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.CVTPD2PS::CVTPD2PS
                // CVTPD2PS VREG:w:f32=$XMMr VREG:r:f64=$XMMm;
                return 919 << 16 | 1536;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VCVTPD2PS_romx::VCVTPD2PS
                  // VCVTPD2PS VREG:w:f32=$XMMr VREG:r:f64=$YMMm;
                  return 1294 << 16 | 2291;
                }
                else
                {
                  // TEMPLATE.VCVTPD2PS_romx::VCVTPD2PS
                  // VCVTPD2PS VREG:w:f32=$XMMr VREG:r:f64=$XMMm;
                  return 1294 << 16 | 2290;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VCVTPD2PS_rymz::VCVTPD2PS
                  // VCVTPD2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMm RC=$RC;
                  return 1296 << 16 | 2296;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VCVTPD2PS_romo::VCVTPD2PS
                      // VCVTPD2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk      VREG:r:f64=$XMMm;
                      return 1293 << 16 | 2288;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VCVTPD2PS_romy::VCVTPD2PS
                      // VCVTPD2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk      VREG:r:f64=$YMMm;
                      return 1295 << 16 | 2294;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VCVTPD2PS_rymz::VCVTPD2PS
                      // VCVTPD2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMm;
                      return 1296 << 16 | 2297;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  // TEMPLATE.VCVTPD2PS_rzmx::VCVTPD2PS
                  // VCVTPD2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm RC=$RC;
                  return 3323 << 16 | 6885;
                }
                else
                {
                  // TEMPLATE.VCVTPD2PS_rzmx::VCVTPD2PS
                  // VCVTPD2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SWZ=$r_i64;
                  return 3323 << 16 | 6884;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.CVTPS2PD::CVTPS2PD
                // CVTPS2PD VREG:w:f64=$XMMr VREG:r:f32=$XMMm;
                return 923 << 16 | 1544;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VCVTPS2PD_rxmx::VCVTPS2PD
                  // VCVTPS2PD VREG:w:f64=$YMMr VREG:r:f32=$XMMm;
                  return 1302 << 16 | 2313;
                }
                else
                {
                  // TEMPLATE.VCVTPS2PD_rxmx::VCVTPS2PD
                  // VCVTPS2PD VREG:w:f64=$XMMr VREG:r:f32=$XMMm;
                  return 1302 << 16 | 2312;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VCVTPS2PD_rzmy::VCVTPS2PD
                  // VCVTPS2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$YMMm SAE=$SAE;
                  return 1304 << 16 | 2318;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VCVTPS2PD_romx::VCVTPS2PD
                      // VCVTPS2PD VREG:w:f64=$XMMr PREG:r:Z=$Kk      VREG:r:f32=$XMMm;
                      return 1301 << 16 | 2310;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VCVTPS2PD_rymo::VCVTPS2PD
                      // VCVTPS2PD VREG:w:f64=$YMMr PREG:r:Z=$Kk      VREG:r:f32=$XMMm;
                      return 1303 << 16 | 2316;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VCVTPS2PD_rzmy::VCVTPS2PD
                      // VCVTPS2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$YMMm;
                      return 1304 << 16 | 2319;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  // TEMPLATE.VCVTPS2PD_rzmx::VCVTPS2PD
                  // VCVTPS2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE;
                  return 3324 << 16 | 6888;
                }
                else
                {
                  // TEMPLATE.VCVTPS2PD_rzmx::VCVTPS2PD
                  // VCVTPS2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SWZ=$r_i32;
                  return 3324 << 16 | 6887;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.CVTSD2SS::CVTSD2SSmq
            // CVTSD2SS REG:w:f32=$XMMr MEM:r:f64=$mem64;
            return 926 << 16 | 1553;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VCVTSD2SS_ronomq::VCVTSD2SSmq
            // VCVTSD2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f64=$mem64;
            return 1307 << 16 | 2337;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VCVTSD2SS_ronomx::VCVTSD2SSmq
            // VCVTSD2SS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 1308 << 16 | 2340;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CVTSS2SD::CVTSS2SDmd
              // CVTSS2SD REG:w:f64=$XMMr MEM:r:f32=$mem32;
              return 929 << 16 | 1563;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VCVTSS2SD_ronomd::VCVTSS2SDmd
              // VCVTSS2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f32=$mem32;
              return 1314 << 16 | 2370;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VCVTSS2SD_ronomx::VCVTSS2SDmd
              // VCVTSS2SD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 1315 << 16 | 2373;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.CVTPD2PS::CVTPD2PSmx
                // CVTPD2PS VREG:w:f32=$XMMr MEM:r:f64=$mem128;
                return 919 << 16 | 1537;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VCVTPD2PS_romx::VCVTPD2PSmy
                  // VCVTPD2PS VREG:w:f32=$XMMr MEM:r:f64=$mem256;
                  return 1294 << 16 | 2293;
                }
                else
                {
                  // TEMPLATE.VCVTPD2PS_romx::VCVTPD2PSmx
                  // VCVTPD2PS VREG:w:f32=$XMMr MEM:r:f64=$mem128;
                  return 1294 << 16 | 2292;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VCVTPD2PS_romo::VCVTPD2PSmx
                    // VCVTPD2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk      MEM:r:f64=$mem128 BCST=$BCST;
                    return 1293 << 16 | 2289;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VCVTPD2PS_romy::VCVTPD2PSmy
                    // VCVTPD2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk      MEM:r:f64=$mem256 BCST=$BCST;
                    return 1295 << 16 | 2295;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VCVTPD2PS_rymz::VCVTPD2PSmz
                    // VCVTPD2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk      MEM:r:f64=$mem512 BCST=$BCST;
                    return 1296 << 16 | 2298;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VCVTPD2PS_rzmx::VCVTPD2PSm
                // VCVTPD2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
                return 3323 << 16 | 6886;
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.CVTPS2PD::CVTPS2PDmq
                // CVTPS2PD VREG:w:f64=$XMMr MEM:r:f32=$mem64;
                return 923 << 16 | 1545;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VCVTPS2PD_rxmx::VCVTPS2PDmx
                  // VCVTPS2PD VREG:w:f64=$YMMr MEM:r:f32=$mem128;
                  return 1302 << 16 | 2315;
                }
                else
                {
                  // TEMPLATE.VCVTPS2PD_rxmx::VCVTPS2PDmq
                  // VCVTPS2PD VREG:w:f64=$XMMr MEM:r:f32=$mem64;
                  return 1302 << 16 | 2314;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VCVTPS2PD_romx::VCVTPS2PDmq
                    // VCVTPS2PD VREG:w:f64=$XMMr PREG:r:Z=$Kk      MEM:r:f32=$mem64 BCST=$BCST;
                    return 1301 << 16 | 2311;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VCVTPS2PD_rymo::VCVTPS2PDmx
                    // VCVTPS2PD VREG:w:f64=$YMMr PREG:r:Z=$Kk      MEM:r:f32=$mem128 BCST=$BCST;
                    return 1303 << 16 | 2317;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VCVTPS2PD_rzmy::VCVTPS2PDmy
                    // VCVTPS2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      MEM:r:f32=$mem256 BCST=$BCST;
                    return 1304 << 16 | 2320;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VCVTPS2PD_rzmx::VCVTPS2PDm
                // VCVTPS2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_hf32 EVH=$EVH;
                return 3324 << 16 | 6889;
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x5b */
  case 347:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.CVTTPS2DQ::CVTTPS2DQ
            // CVTTPS2DQ VREG:w:s32=$XMMr VREG:r:f32=$XMMm;
            return 933 << 16 | 1572;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VCVTTPS2DQ_rxmx::VCVTTPS2DQ
              // VCVTTPS2DQ VREG:w:s32=$YMMr VREG:r:f32=$YMMm;
              return 1323 << 16 | 2403;
            }
            else
            {
              // TEMPLATE.VCVTTPS2DQ_rxmx::VCVTTPS2DQ
              // VCVTTPS2DQ VREG:w:s32=$XMMr VREG:r:f32=$XMMm;
              return 1323 << 16 | 2402;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VCVTTPS2DQ_rzmz::VCVTTPS2DQ
              // VCVTTPS2DQ VREG:w:s32=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$ZMMm SAE=$SAE;
              return 1325 << 16 | 2408;
            }
            else
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VCVTTPS2DQ_romo::VCVTTPS2DQ
                  // VCVTTPS2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      VREG:r:f32=$XMMm;
                  return 1322 << 16 | 2400;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VCVTTPS2DQ_rymy::VCVTTPS2DQ
                  // VCVTTPS2DQ VREG:w:s32=$YMMr PREG:r:Z=$Kk      VREG:r:f32=$YMMm;
                  return 1324 << 16 | 2406;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VCVTTPS2DQ_rzmz::VCVTTPS2DQ
                  // VCVTTPS2DQ VREG:w:s32=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$ZMMm;
                  return 1325 << 16 | 2409;
                  break;
                }
                default: break;
              }
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x40)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CVTPS2DQ::CVTPS2DQ
              // CVTPS2DQ VREG:w:s32=$XMMr VREG:r:f32=$XMMm;
              return 922 << 16 | 1542;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VCVTPS2DQ_rxmx::VCVTPS2DQ
                // VCVTPS2DQ VREG:w:s32=$YMMr VREG:r:f32=$YMMm;
                return 1298 << 16 | 2302;
              }
              else
              {
                // TEMPLATE.VCVTPS2DQ_rxmx::VCVTPS2DQ
                // VCVTPS2DQ VREG:w:s32=$XMMr VREG:r:f32=$XMMm;
                return 1298 << 16 | 2301;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VCVTPS2DQ_rzmz::VCVTPS2DQ
                // VCVTPS2DQ VREG:w:s32=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$ZMMm RC=$RC;
                return 1300 << 16 | 2307;
              }
              else
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VCVTPS2DQ_romo::VCVTPS2DQ
                    // VCVTPS2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      VREG:r:f32=$XMMm;
                    return 1297 << 16 | 2299;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VCVTPS2DQ_rymy::VCVTPS2DQ
                    // VCVTPS2DQ VREG:w:s32=$YMMr PREG:r:Z=$Kk      VREG:r:f32=$YMMm;
                    return 1299 << 16 | 2305;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VCVTPS2DQ_rzmz::VCVTPS2DQ
                    // VCVTPS2DQ VREG:w:s32=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$ZMMm;
                    return 1300 << 16 | 2308;
                    break;
                  }
                  default: break;
                }
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CVTDQ2PS::CVTDQ2PS
              // CVTDQ2PS VREG:w:f32=$XMMr VREG:r:s32=$XMMm;
              return 916 << 16 | 1530;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VCVTDQ2PS_rxmx::VCVTDQ2PS
                // VCVTDQ2PS VREG:w:f32=$YMMr VREG:r:s32=$YMMm;
                return 1286 << 16 | 2269;
              }
              else
              {
                // TEMPLATE.VCVTDQ2PS_rxmx::VCVTDQ2PS
                // VCVTDQ2PS VREG:w:f32=$XMMr VREG:r:s32=$XMMm;
                return 1286 << 16 | 2268;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTQQ2PS_rymz::VCVTQQ2PS
                  // VCVTQQ2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMm RC=$RC;
                  return 2293 << 16 | 4479;
                }
                else
                {
                  // TEMPLATE.VCVTDQ2PS_rzmz::VCVTDQ2PS
                  // VCVTDQ2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk      VREG:r:s32=$ZMMm RC=$RC;
                  return 1288 << 16 | 2274;
                }
              }
              else
              {
                if (b & 0x01)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTQQ2PS_romy::VCVTQQ2PS
                    // VCVTQQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:u64=$YMMm;
                    return 2292 << 16 | 4477;
                  }
                  else
                  {
                    // TEMPLATE.VCVTDQ2PS_rymy::VCVTDQ2PS
                    // VCVTDQ2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk      VREG:r:s32=$YMMm;
                    return 1287 << 16 | 2272;
                  }
                }
                else
                {
                  if (b & 0x02)
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTQQ2PS_rymz::VCVTQQ2PS
                      // VCVTQQ2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMm;
                      return 2293 << 16 | 4480;
                    }
                    else
                    {
                      // TEMPLATE.VCVTDQ2PS_rzmz::VCVTDQ2PS
                      // VCVTDQ2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk      VREG:r:s32=$ZMMm;
                      return 1288 << 16 | 2275;
                    }
                  }
                  else
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTQQ2PS_romo::VCVTQQ2PS
                      // VCVTQQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMm;
                      return 2291 << 16 | 4475;
                    }
                    else
                    {
                      // TEMPLATE.VCVTDQ2PS_romo::VCVTDQ2PS
                      // VCVTDQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk      VREG:r:s32=$XMMm;
                      return 1285 << 16 | 2266;
                    }
                  }
                }
              }
              break;
            }
            default: break;
          }
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.CVTTPS2DQ::CVTTPS2DQmx
            // CVTTPS2DQ VREG:w:s32=$XMMr MEM:r:f32=$mem128;
            return 933 << 16 | 1573;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VCVTTPS2DQ_rxmx::VCVTTPS2DQmy
              // VCVTTPS2DQ VREG:w:s32=$YMMr MEM:r:f32=$mem256;
              return 1323 << 16 | 2405;
            }
            else
            {
              // TEMPLATE.VCVTTPS2DQ_rxmx::VCVTTPS2DQmx
              // VCVTTPS2DQ VREG:w:s32=$XMMr MEM:r:f32=$mem128;
              return 1323 << 16 | 2404;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VCVTTPS2DQ_romo::VCVTTPS2DQmx
                // VCVTTPS2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      MEM:r:f32=$mem128 BCST=$BCST;
                return 1322 << 16 | 2401;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VCVTTPS2DQ_rymy::VCVTTPS2DQmy
                // VCVTTPS2DQ VREG:w:s32=$YMMr PREG:r:Z=$Kk      MEM:r:f32=$mem256 BCST=$BCST;
                return 1324 << 16 | 2407;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VCVTTPS2DQ_rzmz::VCVTTPS2DQmz
                // VCVTTPS2DQ VREG:w:s32=$ZMMr PREG:r:Z=$Kk      MEM:r:f32=$mem512 BCST=$BCST;
                return 1325 << 16 | 2410;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x40)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CVTPS2DQ::CVTPS2DQmx
              // CVTPS2DQ VREG:w:s32=$XMMr MEM:r:f32=$mem128;
              return 922 << 16 | 1543;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VCVTPS2DQ_rxmx::VCVTPS2DQmy
                // VCVTPS2DQ VREG:w:s32=$YMMr MEM:r:f32=$mem256;
                return 1298 << 16 | 2304;
              }
              else
              {
                // TEMPLATE.VCVTPS2DQ_rxmx::VCVTPS2DQmx
                // VCVTPS2DQ VREG:w:s32=$XMMr MEM:r:f32=$mem128;
                return 1298 << 16 | 2303;
              }
              break;
            }
            case 0x02:
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VCVTPS2DQ_romo::VCVTPS2DQmx
                  // VCVTPS2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      MEM:r:f32=$mem128 BCST=$BCST;
                  return 1297 << 16 | 2300;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VCVTPS2DQ_rymy::VCVTPS2DQmy
                  // VCVTPS2DQ VREG:w:s32=$YMMr PREG:r:Z=$Kk      MEM:r:f32=$mem256 BCST=$BCST;
                  return 1299 << 16 | 2306;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VCVTPS2DQ_rzmz::VCVTPS2DQmz
                  // VCVTPS2DQ VREG:w:s32=$ZMMr PREG:r:Z=$Kk      MEM:r:f32=$mem512 BCST=$BCST;
                  return 1300 << 16 | 2309;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CVTDQ2PS::CVTDQ2PSmx
              // CVTDQ2PS VREG:w:f32=$XMMr MEM:r:s32=$mem128;
              return 916 << 16 | 1531;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VCVTDQ2PS_rxmx::VCVTDQ2PSmy
                // VCVTDQ2PS VREG:w:f32=$YMMr MEM:r:s32=$mem256;
                return 1286 << 16 | 2271;
              }
              else
              {
                // TEMPLATE.VCVTDQ2PS_rxmx::VCVTDQ2PSmx
                // VCVTDQ2PS VREG:w:f32=$XMMr MEM:r:s32=$mem128;
                return 1286 << 16 | 2270;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x01)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTQQ2PS_romy::VCVTQQ2PSmy
                  // VCVTQQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:u64=$mem256 BCST=$BCST;
                  return 2292 << 16 | 4478;
                }
                else
                {
                  // TEMPLATE.VCVTDQ2PS_rymy::VCVTDQ2PSmy
                  // VCVTDQ2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk      MEM:r:s32=$mem256 BCST=$BCST;
                  return 1287 << 16 | 2273;
                }
              }
              else
              {
                if (b & 0x02)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTQQ2PS_rymz::VCVTQQ2PSmz
                    // VCVTQQ2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk MEM:r:u64=$mem512 BCST=$BCST;
                    return 2293 << 16 | 4481;
                  }
                  else
                  {
                    // TEMPLATE.VCVTDQ2PS_rzmz::VCVTDQ2PSmz
                    // VCVTDQ2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk      MEM:r:s32=$mem512 BCST=$BCST;
                    return 1288 << 16 | 2276;
                  }
                }
                else
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTQQ2PS_romo::VCVTQQ2PSmx
                    // VCVTQQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:u64=$mem128 BCST=$BCST;
                    return 2291 << 16 | 4476;
                  }
                  else
                  {
                    // TEMPLATE.VCVTDQ2PS_romo::VCVTDQ2PSmx
                    // VCVTDQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk      MEM:r:s32=$mem128 BCST=$BCST;
                    return 1285 << 16 | 2267;
                  }
                }
              }
              break;
            }
            default: break;
          }
        }
      }
    }
  break;
  /* 0f.0x5c */
  case 348:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.SUBSD::SUBSD
            // SUBSD REG:rw:f64=$XMMr REG:r:f64=$XMMm;
            return 1199 << 16 | 2054;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VSUBSD_ronomq::VSUBSD
            // VSUBSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm;
            return 2201 << 16 | 4277;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VSUBSD_ronomx::VSUBSD
              // VSUBSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
              return 2202 << 16 | 4280;
            }
            else
            {
              // TEMPLATE.VSUBSD_ronomx::VSUBSD
              // VSUBSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2202 << 16 | 4279;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.SUBSS::SUBSS
              // SUBSS REG:rw:f32=$XMMr REG:r:f32=$XMMm;
              return 1200 << 16 | 2056;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VSUBSS_ronomd::VSUBSS
              // VSUBSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm;
              return 2203 << 16 | 4282;
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VSUBSS_ronomx::VSUBSS
                // VSUBSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
                return 2204 << 16 | 4285;
              }
              else
              {
                // TEMPLATE.VSUBSS_ronomx::VSUBSS
                // VSUBSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                return 2204 << 16 | 4284;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.SUBPD::SUBPD
                // SUBPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
                return 1197 << 16 | 2050;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VSUBPD_rxnxmx::VSUBPD
                  // VSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
                  return 2194 << 16 | 4258;
                }
                else
                {
                  // TEMPLATE.VSUBPD_rxnxmx::VSUBPD
                  // VSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
                  return 2194 << 16 | 4257;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VSUBPD_rznzmz::VSUBPD
                  // VSUBPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
                  return 2196 << 16 | 4263;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VSUBPD_ronomo::VSUBPD
                      // VSUBPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                      return 2193 << 16 | 4255;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VSUBPD_rynymy::VSUBPD
                      // VSUBPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                      return 2195 << 16 | 4261;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VSUBPD_rznzmz::VSUBPD
                      // VSUBPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                      return 2196 << 16 | 4264;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  // TEMPLATE.VSUBPD_rznzmx::VSUBPD
                  // VSUBPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
                  return 3505 << 16 | 7278;
                }
                else
                {
                  // TEMPLATE.VSUBPD_rznzmx::VSUBPD
                  // VSUBPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
                  return 3505 << 16 | 7277;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.SUBPS::SUBPS
                // SUBPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
                return 1198 << 16 | 2052;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VSUBPS_rxnxmx::VSUBPS
                  // VSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
                  return 2198 << 16 | 4269;
                }
                else
                {
                  // TEMPLATE.VSUBPS_rxnxmx::VSUBPS
                  // VSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                  return 2198 << 16 | 4268;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VSUBPS_rznzmz::VSUBPS
                  // VSUBPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
                  return 2200 << 16 | 4274;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VSUBPS_ronomo::VSUBPS
                      // VSUBPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                      return 2197 << 16 | 4266;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VSUBPS_rynymy::VSUBPS
                      // VSUBPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                      return 2199 << 16 | 4272;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VSUBPS_rznzmz::VSUBPS
                      // VSUBPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                      return 2200 << 16 | 4275;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  // TEMPLATE.VSUBPS_rznzmx::VSUBPS
                  // VSUBPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
                  return 3506 << 16 | 7281;
                }
                else
                {
                  // TEMPLATE.VSUBPS_rznzmx::VSUBPS
                  // VSUBPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
                  return 3506 << 16 | 7280;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.SUBSD::SUBSDmq
            // SUBSD REG:rw:f64=$XMMr MEM:r:f64=$mem64;
            return 1199 << 16 | 2055;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VSUBSD_ronomq::VSUBSDmq
            // VSUBSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 2201 << 16 | 4278;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VSUBSD_ronomx::VSUBSDmq
            // VSUBSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 2202 << 16 | 4281;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.SUBSS::SUBSSmd
              // SUBSS REG:rw:f32=$XMMr MEM:r:f32=$mem32;
              return 1200 << 16 | 2057;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VSUBSS_ronomd::VSUBSSmd
              // VSUBSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 2203 << 16 | 4283;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VSUBSS_ronomx::VSUBSSmd
              // VSUBSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 2204 << 16 | 4286;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.SUBPD::SUBPDmx
                // SUBPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
                return 1197 << 16 | 2051;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VSUBPD_rxnxmx::VSUBPDmy
                  // VSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
                  return 2194 << 16 | 4260;
                }
                else
                {
                  // TEMPLATE.VSUBPD_rxnxmx::VSUBPDmx
                  // VSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
                  return 2194 << 16 | 4259;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VSUBPD_ronomo::VSUBPDmx
                    // VSUBPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                    return 2193 << 16 | 4256;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VSUBPD_rynymy::VSUBPDmy
                    // VSUBPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                    return 2195 << 16 | 4262;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VSUBPD_rznzmz::VSUBPDmz
                    // VSUBPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                    return 2196 << 16 | 4265;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VSUBPD_rznzmx::VSUBPDm
                // VSUBPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
                return 3505 << 16 | 7279;
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.SUBPS::SUBPSmx
                // SUBPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
                return 1198 << 16 | 2053;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VSUBPS_rxnxmx::VSUBPSmy
                  // VSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
                  return 2198 << 16 | 4271;
                }
                else
                {
                  // TEMPLATE.VSUBPS_rxnxmx::VSUBPSmx
                  // VSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
                  return 2198 << 16 | 4270;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VSUBPS_ronomo::VSUBPSmx
                    // VSUBPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                    return 2197 << 16 | 4267;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VSUBPS_rynymy::VSUBPSmy
                    // VSUBPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                    return 2199 << 16 | 4273;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VSUBPS_rznzmz::VSUBPSmz
                    // VSUBPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                    return 2200 << 16 | 4276;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VSUBPS_rznzmx::VSUBPSm
                // VSUBPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
                return 3506 << 16 | 7282;
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x5d */
  case 349:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MINSD::MINSD
            // MINSD REG:rw:f64=$XMMr REG:r:f64=$XMMm;
            return 967 << 16 | 1632;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMINSD_ronomq::VMINSD
            // VMINSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm;
            return 1435 << 16 | 2676;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VMINSD_ronomx::VMINSD
              // VMINSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm SAE=$SAE;
              return 1436 << 16 | 2679;
            }
            else
            {
              // TEMPLATE.VMINSD_ronomx::VMINSD
              // VMINSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 1436 << 16 | 2678;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MINSS::MINSS
              // MINSS REG:rw:f32=$XMMr REG:r:f32=$XMMm;
              return 968 << 16 | 1634;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMINSS_ronomd::VMINSS
              // VMINSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm;
              return 1437 << 16 | 2681;
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VMINSS_ronomx::VMINSS
                // VMINSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE;
                return 1438 << 16 | 2684;
              }
              else
              {
                // TEMPLATE.VMINSS_ronomx::VMINSS
                // VMINSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                return 1438 << 16 | 2683;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MINPD::MINPD
                // MINPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
                return 965 << 16 | 1628;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMINPD_rxnxmx::VMINPD
                  // VMINPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
                  return 1428 << 16 | 2657;
                }
                else
                {
                  // TEMPLATE.VMINPD_rxnxmx::VMINPD
                  // VMINPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
                  return 1428 << 16 | 2656;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VMINPD_rznzmz::VMINPD
                  // VMINPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm SAE=$SAE;
                  return 1430 << 16 | 2662;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VMINPD_ronomo::VMINPD
                      // VMINPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                      return 1427 << 16 | 2654;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VMINPD_rynymy::VMINPD
                      // VMINPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                      return 1429 << 16 | 2660;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VMINPD_rznzmz::VMINPD
                      // VMINPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                      return 1430 << 16 | 2663;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MINPS::MINPS
                // MINPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
                return 966 << 16 | 1630;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMINPS_rxnxmx::VMINPS
                  // VMINPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
                  return 1432 << 16 | 2668;
                }
                else
                {
                  // TEMPLATE.VMINPS_rxnxmx::VMINPS
                  // VMINPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                  return 1432 << 16 | 2667;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VMINPS_rznzmz::VMINPS
                  // VMINPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm SAE=$SAE;
                  return 1434 << 16 | 2673;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VMINPS_ronomo::VMINPS
                      // VMINPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                      return 1431 << 16 | 2665;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VMINPS_rynymy::VMINPS
                      // VMINPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                      return 1433 << 16 | 2671;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VMINPS_rznzmz::VMINPS
                      // VMINPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                      return 1434 << 16 | 2674;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MINSD::MINSDmq
            // MINSD REG:rw:f64=$XMMr MEM:r:f64=$mem64;
            return 967 << 16 | 1633;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMINSD_ronomq::VMINSDmq
            // VMINSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 1435 << 16 | 2677;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VMINSD_ronomx::VMINSDmq
            // VMINSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 1436 << 16 | 2680;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MINSS::MINSSmd
              // MINSS REG:rw:f32=$XMMr MEM:r:f32=$mem32;
              return 968 << 16 | 1635;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMINSS_ronomd::VMINSSmd
              // VMINSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 1437 << 16 | 2682;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMINSS_ronomx::VMINSSmd
              // VMINSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 1438 << 16 | 2685;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MINPD::MINPDmx
                // MINPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
                return 965 << 16 | 1629;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMINPD_rxnxmx::VMINPDmy
                  // VMINPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
                  return 1428 << 16 | 2659;
                }
                else
                {
                  // TEMPLATE.VMINPD_rxnxmx::VMINPDmx
                  // VMINPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
                  return 1428 << 16 | 2658;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMINPD_ronomo::VMINPDmx
                    // VMINPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                    return 1427 << 16 | 2655;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMINPD_rynymy::VMINPDmy
                    // VMINPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                    return 1429 << 16 | 2661;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMINPD_rznzmz::VMINPDmz
                    // VMINPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                    return 1430 << 16 | 2664;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MINPS::MINPSmx
                // MINPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
                return 966 << 16 | 1631;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMINPS_rxnxmx::VMINPSmy
                  // VMINPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
                  return 1432 << 16 | 2670;
                }
                else
                {
                  // TEMPLATE.VMINPS_rxnxmx::VMINPSmx
                  // VMINPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
                  return 1432 << 16 | 2669;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMINPS_ronomo::VMINPSmx
                    // VMINPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                    return 1431 << 16 | 2666;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMINPS_rynymy::VMINPSmy
                    // VMINPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                    return 1433 << 16 | 2672;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMINPS_rznzmz::VMINPSmz
                    // VMINPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                    return 1434 << 16 | 2675;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x5e */
  case 350:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.DIVSD::DIVSD
            // DIVSD REG:rw:f64=$XMMr REG:r:f64=$XMMm;
            return 939 << 16 | 1588;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VDIVSD_ronomq::VDIVSD
            // VDIVSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm;
            return 1338 << 16 | 2463;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VDIVSD_ronomx::VDIVSD
              // VDIVSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
              return 1339 << 16 | 2466;
            }
            else
            {
              // TEMPLATE.VDIVSD_ronomx::VDIVSD
              // VDIVSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 1339 << 16 | 2465;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.DIVSS::DIVSS
              // DIVSS REG:rw:f32=$XMMr REG:r:f32=$XMMm;
              return 940 << 16 | 1590;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VDIVSS_ronomd::VDIVSS
              // VDIVSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm;
              return 1340 << 16 | 2468;
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VDIVSS_ronomx::VDIVSS
                // VDIVSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
                return 1341 << 16 | 2471;
              }
              else
              {
                // TEMPLATE.VDIVSS_ronomx::VDIVSS
                // VDIVSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                return 1341 << 16 | 2470;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.DIVPD::DIVPD
                // DIVPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
                return 937 << 16 | 1584;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VDIVPD_rxnxmx::VDIVPD
                  // VDIVPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
                  return 1331 << 16 | 2444;
                }
                else
                {
                  // TEMPLATE.VDIVPD_rxnxmx::VDIVPD
                  // VDIVPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
                  return 1331 << 16 | 2443;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VDIVPD_rznzmz::VDIVPD
                  // VDIVPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
                  return 1333 << 16 | 2449;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VDIVPD_ronomo::VDIVPD
                      // VDIVPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                      return 1330 << 16 | 2441;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VDIVPD_rynymy::VDIVPD
                      // VDIVPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                      return 1332 << 16 | 2447;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VDIVPD_rznzmz::VDIVPD
                      // VDIVPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                      return 1333 << 16 | 2450;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.DIVPS::DIVPS
                // DIVPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
                return 938 << 16 | 1586;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VDIVPS_rxnxmx::VDIVPS
                  // VDIVPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
                  return 1335 << 16 | 2455;
                }
                else
                {
                  // TEMPLATE.VDIVPS_rxnxmx::VDIVPS
                  // VDIVPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                  return 1335 << 16 | 2454;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VDIVPS_rznzmz::VDIVPS
                  // VDIVPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
                  return 1337 << 16 | 2460;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VDIVPS_ronomo::VDIVPS
                      // VDIVPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                      return 1334 << 16 | 2452;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VDIVPS_rynymy::VDIVPS
                      // VDIVPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                      return 1336 << 16 | 2458;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VDIVPS_rznzmz::VDIVPS
                      // VDIVPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                      return 1337 << 16 | 2461;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.DIVSD::DIVSDmq
            // DIVSD REG:rw:f64=$XMMr MEM:r:f64=$mem64;
            return 939 << 16 | 1589;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VDIVSD_ronomq::VDIVSDmq
            // VDIVSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 1338 << 16 | 2464;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VDIVSD_ronomx::VDIVSDmq
            // VDIVSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 1339 << 16 | 2467;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.DIVSS::DIVSSmd
              // DIVSS REG:rw:f32=$XMMr MEM:r:f32=$mem32;
              return 940 << 16 | 1591;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VDIVSS_ronomd::VDIVSSmd
              // VDIVSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 1340 << 16 | 2469;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VDIVSS_ronomx::VDIVSSmd
              // VDIVSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 1341 << 16 | 2472;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.DIVPD::DIVPDmx
                // DIVPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
                return 937 << 16 | 1585;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VDIVPD_rxnxmx::VDIVPDmy
                  // VDIVPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
                  return 1331 << 16 | 2446;
                }
                else
                {
                  // TEMPLATE.VDIVPD_rxnxmx::VDIVPDmx
                  // VDIVPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
                  return 1331 << 16 | 2445;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VDIVPD_ronomo::VDIVPDmx
                    // VDIVPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                    return 1330 << 16 | 2442;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VDIVPD_rynymy::VDIVPDmy
                    // VDIVPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                    return 1332 << 16 | 2448;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VDIVPD_rznzmz::VDIVPDmz
                    // VDIVPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                    return 1333 << 16 | 2451;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.DIVPS::DIVPSmx
                // DIVPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
                return 938 << 16 | 1587;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VDIVPS_rxnxmx::VDIVPSmy
                  // VDIVPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
                  return 1335 << 16 | 2457;
                }
                else
                {
                  // TEMPLATE.VDIVPS_rxnxmx::VDIVPSmx
                  // VDIVPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
                  return 1335 << 16 | 2456;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VDIVPS_ronomo::VDIVPSmx
                    // VDIVPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                    return 1334 << 16 | 2453;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VDIVPS_rynymy::VDIVPSmy
                    // VDIVPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                    return 1336 << 16 | 2459;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VDIVPS_rznzmz::VDIVPSmz
                    // VDIVPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                    return 1337 << 16 | 2462;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x5f */
  case 351:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MAXSD::MAXSD
            // MAXSD REG:rw:f64=$XMMr REG:r:f64=$XMMm;
            return 962 << 16 | 1623;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMAXSD_ronomq::VMAXSD
            // VMAXSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm;
            return 1423 << 16 | 2644;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VMAXSD_ronomx::VMAXSD
              // VMAXSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm SAE=$SAE;
              return 1424 << 16 | 2647;
            }
            else
            {
              // TEMPLATE.VMAXSD_ronomx::VMAXSD
              // VMAXSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 1424 << 16 | 2646;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MAXSS::MAXSS
              // MAXSS REG:rw:f32=$XMMr REG:r:f32=$XMMm;
              return 963 << 16 | 1625;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMAXSS_ronomd::VMAXSS
              // VMAXSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm;
              return 1425 << 16 | 2649;
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VMAXSS_ronomx::VMAXSS
                // VMAXSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE;
                return 1426 << 16 | 2652;
              }
              else
              {
                // TEMPLATE.VMAXSS_ronomx::VMAXSS
                // VMAXSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                return 1426 << 16 | 2651;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MAXPD::MAXPD
                // MAXPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
                return 960 << 16 | 1619;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMAXPD_rxnxmx::VMAXPD
                  // VMAXPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
                  return 1416 << 16 | 2625;
                }
                else
                {
                  // TEMPLATE.VMAXPD_rxnxmx::VMAXPD
                  // VMAXPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
                  return 1416 << 16 | 2624;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VMAXPD_rznzmz::VMAXPD
                  // VMAXPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm SAE=$SAE;
                  return 1418 << 16 | 2630;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VMAXPD_ronomo::VMAXPD
                      // VMAXPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                      return 1415 << 16 | 2622;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VMAXPD_rynymy::VMAXPD
                      // VMAXPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
                      return 1417 << 16 | 2628;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VMAXPD_rznzmz::VMAXPD
                      // VMAXPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                      return 1418 << 16 | 2631;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MAXPS::MAXPS
                // MAXPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
                return 961 << 16 | 1621;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMAXPS_rxnxmx::VMAXPS
                  // VMAXPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
                  return 1420 << 16 | 2636;
                }
                else
                {
                  // TEMPLATE.VMAXPS_rxnxmx::VMAXPS
                  // VMAXPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
                  return 1420 << 16 | 2635;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VMAXPS_rznzmz::VMAXPS
                  // VMAXPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm SAE=$SAE;
                  return 1422 << 16 | 2641;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VMAXPS_ronomo::VMAXPS
                      // VMAXPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                      return 1419 << 16 | 2633;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VMAXPS_rynymy::VMAXPS
                      // VMAXPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
                      return 1421 << 16 | 2639;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VMAXPS_rznzmz::VMAXPS
                      // VMAXPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                      return 1422 << 16 | 2642;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MAXSD::MAXSDmq
            // MAXSD REG:rw:f64=$XMMr MEM:r:f64=$mem64;
            return 962 << 16 | 1624;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMAXSD_ronomq::VMAXSDmq
            // VMAXSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 1423 << 16 | 2645;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VMAXSD_ronomx::VMAXSDmq
            // VMAXSD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 1424 << 16 | 2648;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MAXSS::MAXSSmd
              // MAXSS REG:rw:f32=$XMMr MEM:r:f32=$mem32;
              return 963 << 16 | 1626;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMAXSS_ronomd::VMAXSSmd
              // VMAXSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 1425 << 16 | 2650;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMAXSS_ronomx::VMAXSSmd
              // VMAXSS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn MEM:r:f32=$mem32;
              return 1426 << 16 | 2653;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MAXPD::MAXPDmx
                // MAXPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
                return 960 << 16 | 1620;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMAXPD_rxnxmx::VMAXPDmy
                  // VMAXPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
                  return 1416 << 16 | 2627;
                }
                else
                {
                  // TEMPLATE.VMAXPD_rxnxmx::VMAXPDmx
                  // VMAXPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
                  return 1416 << 16 | 2626;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMAXPD_ronomo::VMAXPDmx
                    // VMAXPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                    return 1415 << 16 | 2623;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMAXPD_rynymy::VMAXPDmy
                    // VMAXPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
                    return 1417 << 16 | 2629;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMAXPD_rznzmz::VMAXPDmz
                    // VMAXPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                    return 1418 << 16 | 2632;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MAXPS::MAXPSmx
                // MAXPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
                return 961 << 16 | 1622;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMAXPS_rxnxmx::VMAXPSmy
                  // VMAXPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
                  return 1420 << 16 | 2638;
                }
                else
                {
                  // TEMPLATE.VMAXPS_rxnxmx::VMAXPSmx
                  // VMAXPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
                  return 1420 << 16 | 2637;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VMAXPS_ronomo::VMAXPSmx
                    // VMAXPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                    return 1419 << 16 | 2634;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VMAXPS_rynymy::VMAXPSmy
                    // VMAXPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
                    return 1421 << 16 | 2640;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VMAXPS_rznzmz::VMAXPSmz
                    // VMAXPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                    return 1422 << 16 | 2643;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0x60 */
  case 352:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKLBW_romx::PUNPCKLBW
            // PUNPCKLBW  VREG:rw:s32=$XMMr REG:r:s64=$XMMm;
            return 1176 << 16 | 2010;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKLBW_rynymy_1::VPUNPCKLBW
              // VPUNPCKLBW  VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
              return 2144 << 16 | 4138;
            }
            else
            {
              // TEMPLATE.VPUNPCKLBW_ronomo_1::VPUNPCKLBW
              // VPUNPCKLBW  VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
              return 2142 << 16 | 4134;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKLBW_ronomo_2::VPUNPCKLBW
                // VPUNPCKLBW  VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   VREG:r:u8=$XMMm;
                return 2143 << 16 | 4136;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKLBW_rynymy_2::VPUNPCKLBW
                // VPUNPCKLBW  VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   VREG:r:u8=$YMMm;
                return 2145 << 16 | 4140;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKLBW_rznzmz::VPUNPCKLBW
                // VPUNPCKLBW  VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   VREG:r:u8=$ZMMm;
                return 2146 << 16 | 4142;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKLBW_rqmd::PUNPCKLBW
        // PUNPCKLBW REG:rw:u8=$MMXr  REG:r:u8=$MMXm;
        return 889 << 16 | 1476;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKLBW_romx::PUNPCKLBWmx
            // PUNPCKLBW  VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1176 << 16 | 2011;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKLBW_rynymy_1::VPUNPCKLBWmy
              // VPUNPCKLBW  VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
              return 2144 << 16 | 4139;
            }
            else
            {
              // TEMPLATE.VPUNPCKLBW_ronomo_1::VPUNPCKLBWmx
              // VPUNPCKLBW  VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
              return 2142 << 16 | 4135;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKLBW_ronomo_2::VPUNPCKLBWmx
                // VPUNPCKLBW  VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   MEM:r:u8=$mem128;
                return 2143 << 16 | 4137;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKLBW_rynymy_2::VPUNPCKLBWmy
                // VPUNPCKLBW  VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   MEM:r:u8=$mem256;
                return 2145 << 16 | 4141;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKLBW_rznzmz::VPUNPCKLBWmz
                // VPUNPCKLBW  VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   MEM:r:u8=$mem512;
                return 2146 << 16 | 4143;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKLBW_rqmd::PUNPCKLBWmd
        // PUNPCKLBW REG:rw:u8=$MMXr  MEM:r:u8=$mem32;
        return 889 << 16 | 1477;
      }
    }
  break;
  /* 0f.0x61 */
  case 353:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKLWD_romx::PUNPCKLWD
            // PUNPCKLWD  VREG:rw:s32=$XMMr REG:r:s64=$XMMm;
            return 1179 << 16 | 2016;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKLWD_rynymy_1::VPUNPCKLWD
              // VPUNPCKLWD  VREG:w:u16=$YMMr VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
              return 2159 << 16 | 4168;
            }
            else
            {
              // TEMPLATE.VPUNPCKLWD_ronomo_1::VPUNPCKLWD
              // VPUNPCKLWD  VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
              return 2157 << 16 | 4164;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKLWD_ronomo_2::VPUNPCKLWD
                // VPUNPCKLWD  VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 2158 << 16 | 4166;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKLWD_rynymy_2::VPUNPCKLWD
                // VPUNPCKLWD  VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 2160 << 16 | 4170;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKLWD_rznzmz::VPUNPCKLWD
                // VPUNPCKLWD  VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 2161 << 16 | 4172;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKLWD_rqmd::PUNPCKLWD
        // PUNPCKLWD REG:rw:u16=$MMXr REG:r:u16=$MMXm;
        return 891 << 16 | 1480;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKLWD_romx::PUNPCKLWDmx
            // PUNPCKLWD  VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1179 << 16 | 2017;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKLWD_rynymy_1::VPUNPCKLWDmy
              // VPUNPCKLWD  VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u16=$mem256;
              return 2159 << 16 | 4169;
            }
            else
            {
              // TEMPLATE.VPUNPCKLWD_ronomo_1::VPUNPCKLWDmx
              // VPUNPCKLWD  VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem128;
              return 2157 << 16 | 4165;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKLWD_ronomo_2::VPUNPCKLWDmx
                // VPUNPCKLWD  VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 2158 << 16 | 4167;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKLWD_rynymy_2::VPUNPCKLWDmy
                // VPUNPCKLWD  VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 2160 << 16 | 4171;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKLWD_rznzmz::VPUNPCKLWDmz
                // VPUNPCKLWD  VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 2161 << 16 | 4173;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKLWD_rqmd::PUNPCKLWDmd
        // PUNPCKLWD REG:rw:u16=$MMXr MEM:r:u16=$mem32;
        return 891 << 16 | 1481;
      }
    }
  break;
  /* 0f.0x62 */
  case 354:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKLDQ_romx::PUNPCKLDQ
            // PUNPCKLDQ  VREG:rw:s32=$XMMr REG:r:s64=$XMMm;
            return 1177 << 16 | 2012;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKLDQ_rynymy_1::VPUNPCKLDQ
              // VPUNPCKLDQ  VREG:w:u32=$YMMr VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
              return 2149 << 16 | 4148;
            }
            else
            {
              // TEMPLATE.VPUNPCKLDQ_ronomo_1::VPUNPCKLDQ
              // VPUNPCKLDQ  VREG:w:u32=$XMMr VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
              return 2147 << 16 | 4144;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKLDQ_ronomo_2::VPUNPCKLDQ
                // VPUNPCKLDQ  VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
                return 2148 << 16 | 4146;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKLDQ_rynymy_2::VPUNPCKLDQ
                // VPUNPCKLDQ  VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
                return 2150 << 16 | 4150;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKLDQ_rznzmz::VPUNPCKLDQ
                // VPUNPCKLDQ  VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
                return 2151 << 16 | 4152;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKLDQ_rqmd::PUNPCKLDQ
        // PUNPCKLDQ REG:rw:u32=$MMXr REG:r:u32=$MMXm;
        return 890 << 16 | 1478;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKLDQ_romx::PUNPCKLDQmx
            // PUNPCKLDQ  VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1177 << 16 | 2013;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKLDQ_rynymy_1::VPUNPCKLDQmy
              // VPUNPCKLDQ  VREG:w:u32=$YMMr VREG:r:u32=$YMMn MEM:r:u32=$mem256;
              return 2149 << 16 | 4149;
            }
            else
            {
              // TEMPLATE.VPUNPCKLDQ_ronomo_1::VPUNPCKLDQmx
              // VPUNPCKLDQ  VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem128;
              return 2147 << 16 | 4145;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKLDQ_ronomo_2::VPUNPCKLDQmx
                // VPUNPCKLDQ  VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
                return 2148 << 16 | 4147;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKLDQ_rynymy_2::VPUNPCKLDQmy
                // VPUNPCKLDQ  VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
                return 2150 << 16 | 4151;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKLDQ_rznzmz::VPUNPCKLDQmz
                // VPUNPCKLDQ  VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
                return 2151 << 16 | 4153;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKLDQ_rqmd::PUNPCKLDQmd
        // PUNPCKLDQ REG:rw:u32=$MMXr MEM:r:u32=$mem32;
        return 890 << 16 | 1479;
      }
    }
  break;
  /* 0f.0x63 */
  case 355:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PACKSSWB_romo::PACKSSWB
            // PACKSSWB VREG:rw:s16=$XMMr VREG:r:s16=$XMMm;
            return 1029 << 16 | 1738;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPACKSSWB_rynymy_1::VPACKSSWB
              // VPACKSSWB VREG:w:s8=$YMMr  VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 1637 << 16 | 3082;
            }
            else
            {
              // TEMPLATE.VPACKSSWB_ronomo_1::VPACKSSWB
              // VPACKSSWB VREG:w:s8=$XMMr  VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 1635 << 16 | 3078;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPACKSSWB_ronomo_2::VPACKSSWB
                // VPACKSSWB VREG:w:s8=$XMMr  PREG:r:Z=$Kk     VREG:r:s16=$XMMn  VREG:r:s16=$XMMm;
                return 1636 << 16 | 3080;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPACKSSWB_rynymy_2::VPACKSSWB
                // VPACKSSWB VREG:w:s8=$YMMr  PREG:r:Z=$Kk     VREG:r:s16=$YMMn  VREG:r:s16=$YMMm;
                return 1638 << 16 | 3084;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPACKSSWB_rznzmz::VPACKSSWB
                // VPACKSSWB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  VREG:r:s16=$ZMMm;
                return 1639 << 16 | 3086;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PACKSSWB_rqmq_1::PACKSSWB
        // PACKSSWB REG:rw:s16=$MMXr REG:r:s16=$MMXm;
        return 812 << 16 | 1363;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PACKSSWB_romo::PACKSSWBmx
            // PACKSSWB VREG:rw:s16=$XMMr MEM:r:s16=$mem128;
            return 1029 << 16 | 1739;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPACKSSWB_rynymy_1::VPACKSSWBmy
              // VPACKSSWB VREG:w:s8=$YMMr  VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 1637 << 16 | 3083;
            }
            else
            {
              // TEMPLATE.VPACKSSWB_ronomo_1::VPACKSSWBmx
              // VPACKSSWB VREG:w:s8=$XMMr  VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 1635 << 16 | 3079;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPACKSSWB_ronomo_2::VPACKSSWBmx
                // VPACKSSWB VREG:w:s8=$XMMr  PREG:r:Z=$Kk     VREG:r:s16=$XMMn  MEM:r:s16=$mem128;
                return 1636 << 16 | 3081;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPACKSSWB_rynymy_2::VPACKSSWBmy
                // VPACKSSWB VREG:w:s8=$YMMr  PREG:r:Z=$Kk     VREG:r:s16=$YMMn  MEM:r:s16=$mem256;
                return 1638 << 16 | 3085;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPACKSSWB_rznzmz::VPACKSSWBmz
                // VPACKSSWB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  MEM:r:s16=$mem512;
                return 1639 << 16 | 3087;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PACKSSWB_rqmq_2::PACKSSWBmq
        // PACKSSWB REG:rw:s16=$MMXr MEM:r:s16=$mem64;
        return 813 << 16 | 1364;
      }
    }
  break;
  /* 0f.0x64 */
  case 356:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPGTB_romo::PCMPGTB
            // PCMPGTB VREG:rw:s8=$XMMr  VREG:r:s8=$XMMm;
            return 1056 << 16 | 1796;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPGTB_rynymy::VPCMPGTB
              // VPCMPGTB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  VREG:r:s8=$YMMm;
              return 1748 << 16 | 3312;
            }
            else
            {
              // TEMPLATE.VPCMPGTB_ronomo::VPCMPGTB
              // VPCMPGTB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  VREG:r:s8=$XMMm;
              return 1747 << 16 | 3310;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPGTB_nomo::VPCMPGTB
                // VPCMPGTB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$XMMn   VREG:r:u8=$XMMm;
                return 1744 << 16 | 3304;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPGTB_nymy::VPCMPGTB
                // VPCMPGTB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$YMMn   VREG:r:u8=$YMMm;
                return 1745 << 16 | 3306;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPGTB_nzmz::VPCMPGTB
                // VPCMPGTB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   VREG:r:u8=$ZMMm;
                return 1746 << 16 | 3308;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPGTB_rqmq_1::PCMPGTB
        // PCMPGTB REG:rw:s8=$MMXr  REG:r:s8=$MMXm;
        return 836 << 16 | 1395;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPGTB_romo::PCMPGTBmx
            // PCMPGTB VREG:rw:s8=$XMMr  MEM:r:s8=$mem128;
            return 1056 << 16 | 1797;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPGTB_rynymy::VPCMPGTBmy
              // VPCMPGTB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  MEM:r:s8=$mem256;
              return 1748 << 16 | 3313;
            }
            else
            {
              // TEMPLATE.VPCMPGTB_ronomo::VPCMPGTBmx
              // VPCMPGTB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  MEM:r:s8=$mem128;
              return 1747 << 16 | 3311;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPGTB_nomo::VPCMPGTBmx
                // VPCMPGTB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$XMMn   MEM:r:u8=$mem128;
                return 1744 << 16 | 3305;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPGTB_nymy::VPCMPGTBmy
                // VPCMPGTB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$YMMn   MEM:r:u8=$mem256;
                return 1745 << 16 | 3307;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPGTB_nzmz::VPCMPGTBmz
                // VPCMPGTB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   MEM:r:u8=$mem512;
                return 1746 << 16 | 3309;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPGTB_rqmq_2::PCMPGTBmq
        // PCMPGTB REG:rw:s8=$MMXr  MEM:r:s8=$mem64;
        return 837 << 16 | 1396;
      }
    }
  break;
  /* 0f.0x65 */
  case 357:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPGTW_romo::PCMPGTW
            // PCMPGTW VREG:rw:s16=$XMMr VREG:r:s16=$XMMm;
            return 1058 << 16 | 1800;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPGTW_rynymy::VPCMPGTW
              // VPCMPGTW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 1758 << 16 | 3332;
            }
            else
            {
              // TEMPLATE.VPCMPGTW_ronomo::VPCMPGTW
              // VPCMPGTW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 1757 << 16 | 3330;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPGTW_nomo::VPCMPGTW
                // VPCMPGTW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 1754 << 16 | 3324;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPGTW_nymy::VPCMPGTW
                // VPCMPGTW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 1755 << 16 | 3326;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPGTW_nzmz::VPCMPGTW
                // VPCMPGTW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 1756 << 16 | 3328;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPGTW_rqmq_1::PCMPGTW
        // PCMPGTW REG:rw:s16=$MMXr REG:r:s16=$MMXm;
        return 840 << 16 | 1399;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPGTW_romo::PCMPGTWmx
            // PCMPGTW VREG:rw:s16=$XMMr MEM:r:s16=$mem128;
            return 1058 << 16 | 1801;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPGTW_rynymy::VPCMPGTWmy
              // VPCMPGTW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 1758 << 16 | 3333;
            }
            else
            {
              // TEMPLATE.VPCMPGTW_ronomo::VPCMPGTWmx
              // VPCMPGTW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 1757 << 16 | 3331;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPGTW_nomo::VPCMPGTWmx
                // VPCMPGTW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 1754 << 16 | 3325;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPGTW_nymy::VPCMPGTWmy
                // VPCMPGTW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 1755 << 16 | 3327;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPGTW_nzmz::VPCMPGTWmz
                // VPCMPGTW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 1756 << 16 | 3329;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPGTW_rqmq_2::PCMPGTWmq
        // PCMPGTW REG:rw:s16=$MMXr MEM:r:s16=$mem64;
        return 841 << 16 | 1400;
      }
    }
  break;
  /* 0f.0x66 */
  case 358:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPGTD_romo::PCMPGTD
            // PCMPGTD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1057 << 16 | 1798;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPGTD_rynymy::VPCMPGTD
              // VPCMPGTD VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 1753 << 16 | 3322;
            }
            else
            {
              // TEMPLATE.VPCMPGTD_ronomo::VPCMPGTD
              // VPCMPGTD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 1752 << 16 | 3320;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPGTD_nomo::VPCMPGTD
                // VPCMPGTD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s32=$XMMn  VREG:r:s32=$XMMm;
                return 1749 << 16 | 3314;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPGTD_nymy::VPCMPGTD
                // VPCMPGTD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s32=$YMMn  VREG:r:s32=$YMMm;
                return 1750 << 16 | 3316;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPGTD_nzmz::VPCMPGTD
                // VPCMPGTD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s32=$ZMMn  VREG:r:s32=$ZMMm;
                return 1751 << 16 | 3318;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            if (c & 0x08)
            {
              // TEMPLATE.VPCMPGTD_nzmx::VPCMPGTD
              // VPCMPGTD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm;
              return 3426 << 16 | 7110;
            }
            else
            {
              // TEMPLATE.VPCMPGTD_nzmx::VPCMPGTD
              // VPCMPGTD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm SWZ=$r_i64;
              return 3426 << 16 | 7109;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPGTD_rqmq_1::PCMPGTD
        // PCMPGTD REG:rw:s32=$MMXr REG:r:s32=$MMXm;
        return 838 << 16 | 1397;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPGTD_romo::PCMPGTDmx
            // PCMPGTD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1057 << 16 | 1799;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPGTD_rynymy::VPCMPGTDmy
              // VPCMPGTD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
              return 1753 << 16 | 3323;
            }
            else
            {
              // TEMPLATE.VPCMPGTD_ronomo::VPCMPGTDmx
              // VPCMPGTD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
              return 1752 << 16 | 3321;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPGTD_nomo::VPCMPGTDmx
                // VPCMPGTD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s32=$XMMn  MEM:r:s32=$mem128 BCST=$BCST;
                return 1749 << 16 | 3315;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPGTD_nymy::VPCMPGTDmy
                // VPCMPGTD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s32=$YMMn  MEM:r:s32=$mem256 BCST=$BCST;
                return 1750 << 16 | 3317;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPGTD_nzmz::VPCMPGTDmz
                // VPCMPGTD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s32=$ZMMn  MEM:r:s32=$mem512 BCST=$BCST;
                return 1751 << 16 | 3319;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            // TEMPLATE.VPCMPGTD_nzmx::VPCMPGTDm
            // VPCMPGTD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
            return 3426 << 16 | 7111;
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPGTD_rqmq_2::PCMPGTDmq
        // PCMPGTD REG:rw:s32=$MMXr MEM:r:s32=$mem64;
        return 839 << 16 | 1398;
      }
    }
  break;
  /* 0f.0x67 */
  case 359:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PACKUSWB_romo::PACKUSWB
            // PACKUSWB VREG:rw:s16=$XMMr VREG:r:s16=$XMMm;
            return 1031 << 16 | 1742;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPACKUSWB_rynymy_1::VPACKUSWB
              // VPACKUSWB VREG:w:u8=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 1647 << 16 | 3102;
            }
            else
            {
              // TEMPLATE.VPACKUSWB_ronomo_1::VPACKUSWB
              // VPACKUSWB VREG:w:u8=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 1645 << 16 | 3098;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPACKUSWB_ronomo_2::VPACKUSWB
                // VPACKUSWB VREG:w:u8=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 1646 << 16 | 3100;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPACKUSWB_rynymy_2::VPACKUSWB
                // VPACKUSWB VREG:w:u8=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 1648 << 16 | 3104;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPACKUSWB_rznzmz::VPACKUSWB
                // VPACKUSWB VREG:w:u8=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 1649 << 16 | 3106;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PACKUSWB_rqmq_1::PACKUSWB
        // PACKUSWB REG:rw:s16=$MMXr REG:r:s16=$MMXm;
        return 814 << 16 | 1365;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PACKUSWB_romo::PACKUSWBmx
            // PACKUSWB VREG:rw:s16=$XMMr MEM:r:s16=$mem128;
            return 1031 << 16 | 1743;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPACKUSWB_rynymy_1::VPACKUSWBmy
              // VPACKUSWB VREG:w:u8=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 1647 << 16 | 3103;
            }
            else
            {
              // TEMPLATE.VPACKUSWB_ronomo_1::VPACKUSWBmx
              // VPACKUSWB VREG:w:u8=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 1645 << 16 | 3099;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPACKUSWB_ronomo_2::VPACKUSWBmx
                // VPACKUSWB VREG:w:u8=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 1646 << 16 | 3101;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPACKUSWB_rynymy_2::VPACKUSWBmy
                // VPACKUSWB VREG:w:u8=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 1648 << 16 | 3105;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPACKUSWB_rznzmz::VPACKUSWBmz
                // VPACKUSWB VREG:w:u8=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 1649 << 16 | 3107;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PACKUSWB_rqmq_2::PACKUSWBmq
        // PACKUSWB REG:rw:s16=$MMXr MEM:r:s16=$mem64;
        return 815 << 16 | 1366;
      }
    }
  break;
  /* 0f.0x68 */
  case 360:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKHBW_romx::PUNPCKHBW
            // PUNPCKHBW  VREG:rw:s32=$XMMr REG:r:s64=$XMMm;
            return 1172 << 16 | 2002;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKHBW_rynymy_1::VPUNPCKHBW
              // VPUNPCKHBW  VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
              return 2124 << 16 | 4098;
            }
            else
            {
              // TEMPLATE.VPUNPCKHBW_ronomo_1::VPUNPCKHBW
              // VPUNPCKHBW  VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
              return 2122 << 16 | 4094;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKHBW_ronomo_2::VPUNPCKHBW
                // VPUNPCKHBW  VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   VREG:r:u8=$XMMm;
                return 2123 << 16 | 4096;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKHBW_rynymy_2::VPUNPCKHBW
                // VPUNPCKHBW  VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   VREG:r:u8=$YMMm;
                return 2125 << 16 | 4100;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKHBW_rznzmz::VPUNPCKHBW
                // VPUNPCKHBW  VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   VREG:r:u8=$ZMMm;
                return 2126 << 16 | 4102;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKHBW_rqmx::PUNPCKHBW
        // PUNPCKHBW REG:rw:s64=$MMXr REG:r:s32=$MMXm;
        return 886 << 16 | 1470;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKHBW_romx::PUNPCKHBWmx
            // PUNPCKHBW  VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1172 << 16 | 2003;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKHBW_rynymy_1::VPUNPCKHBWmy
              // VPUNPCKHBW  VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
              return 2124 << 16 | 4099;
            }
            else
            {
              // TEMPLATE.VPUNPCKHBW_ronomo_1::VPUNPCKHBWmx
              // VPUNPCKHBW  VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
              return 2122 << 16 | 4095;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKHBW_ronomo_2::VPUNPCKHBWmx
                // VPUNPCKHBW  VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   MEM:r:u8=$mem128;
                return 2123 << 16 | 4097;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKHBW_rynymy_2::VPUNPCKHBWmy
                // VPUNPCKHBW  VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   MEM:r:u8=$mem256;
                return 2125 << 16 | 4101;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKHBW_rznzmz::VPUNPCKHBWmz
                // VPUNPCKHBW  VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   MEM:r:u8=$mem512;
                return 2126 << 16 | 4103;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKHBW_rqmx::PUNPCKHBWmq
        // PUNPCKHBW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 886 << 16 | 1471;
      }
    }
  break;
  /* 0f.0x69 */
  case 361:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKHWD_romx::PUNPCKHWD
            // PUNPCKHWD  VREG:rw:s32=$XMMr REG:r:s64=$XMMm;
            return 1175 << 16 | 2008;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKHWD_rynymy_1::VPUNPCKHWD
              // VPUNPCKHWD  VREG:w:u16=$YMMr VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
              return 2139 << 16 | 4128;
            }
            else
            {
              // TEMPLATE.VPUNPCKHWD_ronomo_1::VPUNPCKHWD
              // VPUNPCKHWD  VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
              return 2137 << 16 | 4124;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKHWD_ronomo_2::VPUNPCKHWD
                // VPUNPCKHWD  VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 2138 << 16 | 4126;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKHWD_rynymy_2::VPUNPCKHWD
                // VPUNPCKHWD  VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 2140 << 16 | 4130;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKHWD_rznzmz::VPUNPCKHWD
                // VPUNPCKHWD  VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 2141 << 16 | 4132;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKHWD_rqmx::PUNPCKHWD
        // PUNPCKHWD REG:rw:s64=$MMXr REG:r:s32=$MMXm;
        return 888 << 16 | 1474;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKHWD_romx::PUNPCKHWDmx
            // PUNPCKHWD  VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1175 << 16 | 2009;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKHWD_rynymy_1::VPUNPCKHWDmy
              // VPUNPCKHWD  VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u16=$mem256;
              return 2139 << 16 | 4129;
            }
            else
            {
              // TEMPLATE.VPUNPCKHWD_ronomo_1::VPUNPCKHWDmx
              // VPUNPCKHWD  VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem128;
              return 2137 << 16 | 4125;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKHWD_ronomo_2::VPUNPCKHWDmx
                // VPUNPCKHWD  VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 2138 << 16 | 4127;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKHWD_rynymy_2::VPUNPCKHWDmy
                // VPUNPCKHWD  VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 2140 << 16 | 4131;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKHWD_rznzmz::VPUNPCKHWDmz
                // VPUNPCKHWD  VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 2141 << 16 | 4133;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKHWD_rqmx::PUNPCKHWDmq
        // PUNPCKHWD REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 888 << 16 | 1475;
      }
    }
  break;
  /* 0f.0x6a */
  case 362:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKHDQ_romx::PUNPCKHDQ
            // PUNPCKHDQ  VREG:rw:s32=$XMMr REG:r:s64=$XMMm;
            return 1173 << 16 | 2004;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKHDQ_rynymy_1::VPUNPCKHDQ
              // VPUNPCKHDQ  VREG:w:u32=$YMMr VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
              return 2129 << 16 | 4108;
            }
            else
            {
              // TEMPLATE.VPUNPCKHDQ_ronomo_1::VPUNPCKHDQ
              // VPUNPCKHDQ  VREG:w:u32=$XMMr VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
              return 2127 << 16 | 4104;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKHDQ_ronomo_2::VPUNPCKHDQ
                // VPUNPCKHDQ  VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
                return 2128 << 16 | 4106;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKHDQ_rynymy_2::VPUNPCKHDQ
                // VPUNPCKHDQ  VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
                return 2130 << 16 | 4110;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKHDQ_rznzmz::VPUNPCKHDQ
                // VPUNPCKHDQ  VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
                return 2131 << 16 | 4112;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKHDQ_rqmx::PUNPCKHDQ
        // PUNPCKHDQ REG:rw:s64=$MMXr REG:r:s32=$MMXm;
        return 887 << 16 | 1472;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PUNPCKHDQ_romx::PUNPCKHDQmx
            // PUNPCKHDQ  VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1173 << 16 | 2005;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPUNPCKHDQ_rynymy_1::VPUNPCKHDQmy
              // VPUNPCKHDQ  VREG:w:u32=$YMMr VREG:r:u32=$YMMn MEM:r:u32=$mem256;
              return 2129 << 16 | 4109;
            }
            else
            {
              // TEMPLATE.VPUNPCKHDQ_ronomo_1::VPUNPCKHDQmx
              // VPUNPCKHDQ  VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem128;
              return 2127 << 16 | 4105;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPUNPCKHDQ_ronomo_2::VPUNPCKHDQmx
                // VPUNPCKHDQ  VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
                return 2128 << 16 | 4107;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPUNPCKHDQ_rynymy_2::VPUNPCKHDQmy
                // VPUNPCKHDQ  VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
                return 2130 << 16 | 4111;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPUNPCKHDQ_rznzmz::VPUNPCKHDQmz
                // VPUNPCKHDQ  VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
                return 2131 << 16 | 4113;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PUNPCKHDQ_rqmx::PUNPCKHDQmq
        // PUNPCKHDQ REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 887 << 16 | 1473;
      }
    }
  break;
  /* 0f.0x6b */
  case 363:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PACKSSDW_romo::PACKSSDW
            // PACKSSDW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1028 << 16 | 1736;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPACKSSDW_rynymy_1::VPACKSSDW
              // VPACKSSDW VREG:w:s16=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 1632 << 16 | 3072;
            }
            else
            {
              // TEMPLATE.VPACKSSDW_ronomo_1::VPACKSSDW
              // VPACKSSDW VREG:w:s16=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 1630 << 16 | 3068;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPACKSSDW_ronomo_2::VPACKSSDW
                // VPACKSSDW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s32=$XMMn  VREG:r:s32=$XMMm;
                return 1631 << 16 | 3070;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPACKSSDW_rynymy_2::VPACKSSDW
                // VPACKSSDW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s32=$YMMn  VREG:r:s32=$YMMm;
                return 1633 << 16 | 3074;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPACKSSDW_rznzmz::VPACKSSDW
                // VPACKSSDW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s32=$ZMMn  VREG:r:s32=$ZMMm;
                return 1634 << 16 | 3076;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PACKSSDW_rqmq_1::PACKSSDW
        // PACKSSDW REG:rw:s32=$MMXr REG:r:s32=$MMXm;
        return 810 << 16 | 1361;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PACKSSDW_romo::PACKSSDWmx
            // PACKSSDW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1028 << 16 | 1737;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPACKSSDW_rynymy_1::VPACKSSDWmy
              // VPACKSSDW VREG:w:s16=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
              return 1632 << 16 | 3073;
            }
            else
            {
              // TEMPLATE.VPACKSSDW_ronomo_1::VPACKSSDWmx
              // VPACKSSDW VREG:w:s16=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
              return 1630 << 16 | 3069;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPACKSSDW_ronomo_2::VPACKSSDWmx
                // VPACKSSDW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s32=$XMMn  MEM:r:s32=$mem128 BCST=$BCST;
                return 1631 << 16 | 3071;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPACKSSDW_rynymy_2::VPACKSSDWmy
                // VPACKSSDW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s32=$YMMn  MEM:r:s32=$mem256 BCST=$BCST;
                return 1633 << 16 | 3075;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPACKSSDW_rznzmz::VPACKSSDWmz
                // VPACKSSDW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s32=$ZMMn  MEM:r:s32=$mem512 BCST=$BCST;
                return 1634 << 16 | 3077;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PACKSSDW_rqmq_2::PACKSSDWmq
        // PACKSSDW REG:rw:s32=$MMXr MEM:r:s32=$mem64;
        return 811 << 16 | 1362;
      }
    }
  break;
  /* 0f.0x6c */
  case 364:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PUNPCKLQDQ::PUNPCKLQDQ
          // PUNPCKLQDQ VREG:rw:s32=$XMMr REG:r:s64=$XMMm;
          return 1178 << 16 | 2014;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPUNPCKLQDQ_rynymy_1::VPUNPCKLQDQ
            // VPUNPCKLQDQ VREG:w:u64=$YMMr VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
            return 2154 << 16 | 4158;
          }
          else
          {
            // TEMPLATE.VPUNPCKLQDQ_ronomo_1::VPUNPCKLQDQ
            // VPUNPCKLQDQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
            return 2152 << 16 | 4154;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPUNPCKLQDQ_ronomo_2::VPUNPCKLQDQ
              // VPUNPCKLQDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
              return 2153 << 16 | 4156;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPUNPCKLQDQ_rynymy_2::VPUNPCKLQDQ
              // VPUNPCKLQDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
              return 2155 << 16 | 4160;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPUNPCKLQDQ_rznzmz::VPUNPCKLQDQ
              // VPUNPCKLQDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
              return 2156 << 16 | 4162;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PUNPCKLQDQ::PUNPCKLQDQmx
          // PUNPCKLQDQ VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1178 << 16 | 2015;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPUNPCKLQDQ_rynymy_1::VPUNPCKLQDQmy
            // VPUNPCKLQDQ VREG:w:u64=$YMMr VREG:r:u64=$YMMn MEM:r:u64=$mem256;
            return 2154 << 16 | 4159;
          }
          else
          {
            // TEMPLATE.VPUNPCKLQDQ_ronomo_1::VPUNPCKLQDQmx
            // VPUNPCKLQDQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem128;
            return 2152 << 16 | 4155;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPUNPCKLQDQ_ronomo_2::VPUNPCKLQDQmx
              // VPUNPCKLQDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
              return 2153 << 16 | 4157;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPUNPCKLQDQ_rynymy_2::VPUNPCKLQDQmy
              // VPUNPCKLQDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
              return 2155 << 16 | 4161;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPUNPCKLQDQ_rznzmz::VPUNPCKLQDQmz
              // VPUNPCKLQDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
              return 2156 << 16 | 4163;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f.0x6d */
  case 365:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PUNPCKHQDQ::PUNPCKHQDQ
          // PUNPCKHQDQ VREG:rw:s32=$XMMr REG:r:s64=$XMMm;
          return 1174 << 16 | 2006;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPUNPCKHQDQ_rynymy_1::VPUNPCKHQDQ
            // VPUNPCKHQDQ VREG:w:u64=$YMMr VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
            return 2134 << 16 | 4118;
          }
          else
          {
            // TEMPLATE.VPUNPCKHQDQ_ronomo_1::VPUNPCKHQDQ
            // VPUNPCKHQDQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
            return 2132 << 16 | 4114;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPUNPCKHQDQ_ronomo_2::VPUNPCKHQDQ
              // VPUNPCKHQDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
              return 2133 << 16 | 4116;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPUNPCKHQDQ_rynymy_2::VPUNPCKHQDQ
              // VPUNPCKHQDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
              return 2135 << 16 | 4120;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPUNPCKHQDQ_rznzmz::VPUNPCKHQDQ
              // VPUNPCKHQDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
              return 2136 << 16 | 4122;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PUNPCKHQDQ::PUNPCKHQDQmx
          // PUNPCKHQDQ VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1174 << 16 | 2007;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPUNPCKHQDQ_rynymy_1::VPUNPCKHQDQmy
            // VPUNPCKHQDQ VREG:w:u64=$YMMr VREG:r:u64=$YMMn MEM:r:u64=$mem256;
            return 2134 << 16 | 4119;
          }
          else
          {
            // TEMPLATE.VPUNPCKHQDQ_ronomo_1::VPUNPCKHQDQmx
            // VPUNPCKHQDQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem128;
            return 2132 << 16 | 4115;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPUNPCKHQDQ_ronomo_2::VPUNPCKHQDQmx
              // VPUNPCKHQDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
              return 2133 << 16 | 4117;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPUNPCKHQDQ_rynymy_2::VPUNPCKHQDQmy
              // VPUNPCKHQDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
              return 2135 << 16 | 4121;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPUNPCKHQDQ_rznzmz::VPUNPCKHQDQmz
              // VPUNPCKHQDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
              return 2136 << 16 | 4123;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f.0x6e */
  case 366:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.MOVQ_romq_1::MOVQ
                // MOVQ VREG:w:s32=$XMMr REG:r=$GPR64m;
                return 998 << 16 | 1677;
              }
              else
              {
                // TEMPLATE.MOVD_romd::MOVD
                // MOVD VREG:w:s32=$XMMr REG:r=$GPR32m;
                return 1012 << 16 | 1706;
              }
            }
            else
            {
              // TEMPLATE.MOVD_romd::MOVD
              // MOVD VREG:w:s32=$XMMr REG:r=$GPR32m;
              return 1012 << 16 | 1708;
            }
            break;
          }
          case 0x01:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VMOVQ_romq_1::VMOVQ
                // VMOVQ VREG:w:s32=$XMMr  REG:r:s64=$GPR64m;
                return 1542 << 16 | 2876;
              }
              else
              {
                // TEMPLATE.VMOVD_romd_1::VMOVD
                // VMOVD VREG:w:s32=$XMMr  REG:r:s32=$GPR32m;
                return 1588 << 16 | 2968;
              }
            }
            else
            {
              // TEMPLATE.VMOVD_romd_1::VMOVD
              // VMOVD VREG:w:s32=$XMMr  REG:r:s32=$GPR32m;
              return 1588 << 16 | 2970;
            }
            break;
          }
          case 0x02:
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VMOVQ_romq_3::VMOVQ
                // VMOVQ VREG:w:u64=$XMMr  REG:r:u64=$GPR64m;
                return 1544 << 16 | 2880;
              }
              else
              {
                // TEMPLATE.VMOVD_romd_2::VMOVD
                // VMOVD VREG:w:u32=$XMMr  REG:r:u32=$GPR32m;
                return 1589 << 16 | 2974;
              }
            }
            else
            {
              // TEMPLATE.VMOVD_romd_2::VMOVD
              // VMOVD VREG:w:u32=$XMMr  REG:r:u32=$GPR32m;
              return 1589 << 16 | 2972;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.MOVQ_rqmq_1::MOVQ
            // MOVQ REG:w:s64=$MMXr  REG:r=$GPR64m;
            return 806 << 16 | 1349;
          }
          else
          {
            // TEMPLATE.MOVD_rqmd::MOVD
            // MOVD REG:w:s64=$MMXr  REG:r=$GPR32m;
            return 809 << 16 | 1357;
          }
        }
        else
        {
          // TEMPLATE.MOVD_rqmd::MOVD
          // MOVD REG:w:s64=$MMXr  REG:r=$GPR32m;
          return 809 << 16 | 1359;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.MOVQ_romq_1::MOVQmq
                // MOVQ VREG:w:s32=$XMMr MEM:r:s64=$mem64;
                return 998 << 16 | 1678;
              }
              else
              {
                // TEMPLATE.MOVD_romd::MOVDmd
                // MOVD VREG:w:s32=$XMMr MEM:r:s32=$mem32;
                return 1012 << 16 | 1707;
              }
            }
            else
            {
              // TEMPLATE.MOVD_romd::MOVDmd
              // MOVD VREG:w:s32=$XMMr MEM:r:s32=$mem32;
              return 1012 << 16 | 1709;
            }
            break;
          }
          case 0x01:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VMOVQ_romq_1::VMOVQmq
                // VMOVQ VREG:w:s32=$XMMr  MEM:r:s64=$mem64;
                return 1542 << 16 | 2877;
              }
              else
              {
                // TEMPLATE.VMOVD_romd_1::VMOVDmd
                // VMOVD VREG:w:s32=$XMMr  MEM:r:s32=$mem32;
                return 1588 << 16 | 2969;
              }
            }
            else
            {
              // TEMPLATE.VMOVD_romd_1::VMOVDmd
              // VMOVD VREG:w:s32=$XMMr  MEM:r:s32=$mem32;
              return 1588 << 16 | 2971;
            }
            break;
          }
          case 0x02:
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VMOVQ_romq_3::VMOVQmq
                // VMOVQ VREG:w:u64=$XMMr  MEM:r:u64=$mem64;
                return 1544 << 16 | 2881;
              }
              else
              {
                // TEMPLATE.VMOVD_romd_2::VMOVDmd
                // VMOVD VREG:w:u32=$XMMr  MEM:r:u32=$mem32;
                return 1589 << 16 | 2975;
              }
            }
            else
            {
              // TEMPLATE.VMOVD_romd_2::VMOVDmd
              // VMOVD VREG:w:u32=$XMMr  MEM:r:u32=$mem32;
              return 1589 << 16 | 2973;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.MOVQ_rqmq_1::MOVQmq
            // MOVQ REG:w:s64=$MMXr  MEM:r:s64=$mem64;
            return 806 << 16 | 1350;
          }
          else
          {
            // TEMPLATE.MOVD_rqmd::MOVDmd
            // MOVD REG:w:s64=$MMXr  MEM:r:s32=$mem32;
            return 809 << 16 | 1358;
          }
        }
        else
        {
          // TEMPLATE.MOVD_rqmd::MOVDmd
          // MOVD REG:w:s64=$MMXr  MEM:r:s32=$mem32;
          return 809 << 16 | 1360;
        }
      }
    }
  break;
  /* 0f.0x6f */
  case 367:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VMOVDQUx_rymy::VMOVDQU16
            // VMOVDQU16 VREG:w:u16=$YMMr  PREG:r:Z=$Kk      VREG:r:u16=$YMMm;
            return 1491 << 16 | 2792;
          }
          else
          {
            // TEMPLATE.VMOVDQUx_rymy::VMOVDQU8
            // VMOVDQU8  VREG:w:u8=$YMMr   PREG:r:Z=$Kk      VREG:r:u8=$YMMm;
            return 1491 << 16 | 2794;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VMOVDQUx_rzmz::VMOVDQU16
              // VMOVDQU16 VREG:w:u16=$ZMMr  PREG:r:Z=$Kk      VREG:r:u16=$ZMMm;
              return 1492 << 16 | 2796;
            }
            else
            {
              // TEMPLATE.VMOVDQUx_rzmz::VMOVDQU8
              // VMOVDQU8  VREG:w:u8=$ZMMr   PREG:r:Z=$Kk      VREG:r:u8=$ZMMm;
              return 1492 << 16 | 2798;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VMOVDQUx_romo::VMOVDQU16
              // VMOVDQU16 VREG:w:u16=$XMMr  PREG:r:Z=$Kk      VREG:r:u16=$XMMm;
              return 1490 << 16 | 2788;
            }
            else
            {
              // TEMPLATE.VMOVDQUx_romo::VMOVDQU8
              // VMOVDQU8  VREG:w:u8=$XMMr   PREG:r:Z=$Kk      VREG:r:u8=$XMMm;
              return 1490 << 16 | 2790;
            }
          }
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVDQU_romo::MOVDQU
              // MOVDQU VREG:w:s32=$XMMr  VREG:r:s32=$XMMm;
              return 978 << 16 | 1653;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VMOVDQU_rxmx::VMOVDQU
                // VMOVDQU   VREG:w:s32=$YMMr  VREG:r:s32=$YMMm;
                return 1486 << 16 | 2773;
              }
              else
              {
                // TEMPLATE.VMOVDQU_rxmx::VMOVDQU
                // VMOVDQU   VREG:w:s32=$XMMr  VREG:r:s32=$XMMm;
                return 1486 << 16 | 2772;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x01)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VMOVDQUxx_rymy::VMOVDQU64
                  // VMOVDQU64 VREG:w:u64=$YMMr  PREG:r:Z=$Kk      VREG:r:u64=$YMMm;
                  return 1497 << 16 | 2818;
                }
                else
                {
                  // TEMPLATE.VMOVDQUxx_rymy::VMOVDQU32
                  // VMOVDQU32 VREG:w:u32=$YMMr  PREG:r:Z=$Kk      VREG:r:u32=$YMMm;
                  return 1497 << 16 | 2816;
                }
              }
              else
              {
                if (b & 0x02)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQUxx_rzmz::VMOVDQU64
                    // VMOVDQU64 VREG:w:u64=$ZMMr  PREG:r:Z=$Kk      VREG:r:u64=$ZMMm;
                    return 1498 << 16 | 2822;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQUxx_rzmz::VMOVDQU32
                    // VMOVDQU32 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk      VREG:r:u32=$ZMMm;
                    return 1498 << 16 | 2820;
                  }
                }
                else
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQUxx_romo::VMOVDQU64
                    // VMOVDQU64 VREG:w:u64=$XMMr  PREG:r:Z=$Kk      VREG:r:u64=$XMMm;
                    return 1496 << 16 | 2814;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQUxx_romo::VMOVDQU32
                    // VMOVDQU32 VREG:w:u32=$XMMr  PREG:r:Z=$Kk      VREG:r:u32=$XMMm;
                    return 1496 << 16 | 2812;
                  }
                }
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVDQA_romo::MOVDQA
                // MOVDQA VREG:w:s32=$XMMr  VREG:r:s32=$XMMm;
                return 976 << 16 | 1649;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVDQA_rxmx::VMOVDQA
                  // VMOVDQA   VREG:w:s32=$YMMr  VREG:r:s32=$YMMm;
                  return 1472 << 16 | 2741;
                }
                else
                {
                  // TEMPLATE.VMOVDQA_rxmx::VMOVDQA
                  // VMOVDQA   VREG:w:s32=$XMMr  VREG:r:s32=$XMMm;
                  return 1472 << 16 | 2740;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x01)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQAxx_rymy_1::VMOVDQA64
                    // VMOVDQA64 VREG:w:u64=$YMMr  PREG:r:Z=$Kk      VREG:r:u64=$YMMm;
                    return 1481 << 16 | 2761;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQAxx_rymy_1::VMOVDQA32
                    // VMOVDQA32 VREG:w:u32=$YMMr  PREG:r:Z=$Kk      VREG:r:u32=$YMMm;
                    return 1481 << 16 | 2760;
                  }
                }
                else
                {
                  if (b & 0x02)
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VMOVDQAxx_rzmz_1::VMOVDQA64
                      // VMOVDQA64 VREG:w:u64=$ZMMr  PREG:r:Z=$Kk      VREG:r:u64=$ZMMm;
                      return 1483 << 16 | 2765;
                    }
                    else
                    {
                      // TEMPLATE.VMOVDQAxx_rzmz_1::VMOVDQA32
                      // VMOVDQA32 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk      VREG:r:u32=$ZMMm;
                      return 1483 << 16 | 2764;
                    }
                  }
                  else
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VMOVDQAxx_romo_1::VMOVDQA64
                      // VMOVDQA64 VREG:w:u64=$XMMr  PREG:r:Z=$Kk      VREG:r:u64=$XMMm;
                      return 1479 << 16 | 2757;
                    }
                    else
                    {
                      // TEMPLATE.VMOVDQAxx_romo_1::VMOVDQA32
                      // VMOVDQA32 VREG:w:u32=$XMMr  PREG:r:Z=$Kk      VREG:r:u32=$XMMm;
                      return 1479 << 16 | 2756;
                    }
                  }
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQA64_rzmx::VMOVDQA64
                    // VMOVDQA64 VREG:rw:s64=$ZMMr PREG:r:Z=$Kk VREG:r:s64=$ZMMm;
                    return 3395 << 16 | 7049;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQA32_rzmx::VMOVDQA32
                    // VMOVDQA32 VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm;
                    return 3393 << 16 | 7045;
                  }
                }
                else
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQA64_rzmx::VMOVDQA64
                    // VMOVDQA64 VREG:rw:s64=$ZMMr PREG:r:Z=$Kk VREG:r:s64=$ZMMm SWZ=$r_i64;
                    return 3395 << 16 | 7048;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQA32_rzmx::VMOVDQA32
                    // VMOVDQA32 VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm SWZ=$r_i32;
                    return 3393 << 16 | 7044;
                  }
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // TEMPLATE.MOVQ_rqmq_2::MOVQ
            // MOVQ REG:w:s64=$MMXr  REG:r:s64=$MMXm;
            return 807 << 16 | 1351;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VMOVDQUx_rymy::VMOVDQU16my
            // VMOVDQU16 VREG:w:u16=$YMMr  PREG:r:Z=$Kk      MEM:r:u16=$mem256;
            return 1491 << 16 | 2793;
          }
          else
          {
            // TEMPLATE.VMOVDQUx_rymy::VMOVDQU8my
            // VMOVDQU8  VREG:w:u8=$YMMr   PREG:r:Z=$Kk      MEM:r:u8=$mem256;
            return 1491 << 16 | 2795;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VMOVDQUx_rzmz::VMOVDQU16mz
              // VMOVDQU16 VREG:w:u16=$ZMMr  PREG:r:Z=$Kk      MEM:r:u16=$mem512;
              return 1492 << 16 | 2797;
            }
            else
            {
              // TEMPLATE.VMOVDQUx_rzmz::VMOVDQU8mz
              // VMOVDQU8  VREG:w:u8=$ZMMr   PREG:r:Z=$Kk      MEM:r:u8=$mem512;
              return 1492 << 16 | 2799;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VMOVDQUx_romo::VMOVDQU16mx
              // VMOVDQU16 VREG:w:u16=$XMMr  PREG:r:Z=$Kk      MEM:r:u16=$mem128;
              return 1490 << 16 | 2789;
            }
            else
            {
              // TEMPLATE.VMOVDQUx_romo::VMOVDQU8mx
              // VMOVDQU8  VREG:w:u8=$XMMr   PREG:r:Z=$Kk      MEM:r:u8=$mem128;
              return 1490 << 16 | 2791;
            }
          }
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVDQU_romo::MOVDQUmx
              // MOVDQU VREG:w:s32=$XMMr  MEM:r:s32=$mem128;
              return 978 << 16 | 1654;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VMOVDQU_rxmx::VMOVDQUmy
                // VMOVDQU   VREG:w:s32=$YMMr  MEM:r:s32=$mem256;
                return 1486 << 16 | 2775;
              }
              else
              {
                // TEMPLATE.VMOVDQU_rxmx::VMOVDQUmx
                // VMOVDQU   VREG:w:s32=$XMMr  MEM:r:s32=$mem128;
                return 1486 << 16 | 2774;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x01)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VMOVDQUxx_rymy::VMOVDQU64my
                  // VMOVDQU64 VREG:w:u64=$YMMr  PREG:r:Z=$Kk      MEM:r:u64=$mem256;
                  return 1497 << 16 | 2819;
                }
                else
                {
                  // TEMPLATE.VMOVDQUxx_rymy::VMOVDQU32my
                  // VMOVDQU32 VREG:w:u32=$YMMr  PREG:r:Z=$Kk      MEM:r:u32=$mem256;
                  return 1497 << 16 | 2817;
                }
              }
              else
              {
                if (b & 0x02)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQUxx_rzmz::VMOVDQU64mz
                    // VMOVDQU64 VREG:w:u64=$ZMMr  PREG:r:Z=$Kk      MEM:r:u64=$mem512;
                    return 1498 << 16 | 2823;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQUxx_rzmz::VMOVDQU32mz
                    // VMOVDQU32 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk      MEM:r:u32=$mem512;
                    return 1498 << 16 | 2821;
                  }
                }
                else
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQUxx_romo::VMOVDQU64mx
                    // VMOVDQU64 VREG:w:u64=$XMMr  PREG:r:Z=$Kk      MEM:r:u64=$mem128;
                    return 1496 << 16 | 2815;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQUxx_romo::VMOVDQU32mx
                    // VMOVDQU32 VREG:w:u32=$XMMr  PREG:r:Z=$Kk      MEM:r:u32=$mem128;
                    return 1496 << 16 | 2813;
                  }
                }
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVDQA_romo::MOVDQAmx
                // MOVDQA VREG:w:s32=$XMMr  MEM:r:s32=$mem128;
                return 976 << 16 | 1650;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVDQA_rxmx::VMOVDQAmy
                  // VMOVDQA   VREG:w:s32=$YMMr  MEM:r:s32=$mem256;
                  return 1472 << 16 | 2743;
                }
                else
                {
                  // TEMPLATE.VMOVDQA_rxmx::VMOVDQAmx
                  // VMOVDQA   VREG:w:s32=$XMMr  MEM:r:s32=$mem128;
                  return 1472 << 16 | 2742;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x01)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQAxx_rymy_2::VMOVDQA64my
                    // VMOVDQA64 VREG:w:u64=$YMMr  PREG:r:Z=$Kk      MEM:r:u64=$mem256;
                    return 1482 << 16 | 2763;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQAxx_rymy_2::VMOVDQA32my
                    // VMOVDQA32 VREG:w:u32=$YMMr  PREG:r:Z=$Kk      MEM:r:u32=$mem256;
                    return 1482 << 16 | 2762;
                  }
                }
                else
                {
                  if (b & 0x02)
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VMOVDQAxx_rzmz_2::VMOVDQA64mz
                      // VMOVDQA64 VREG:w:u64=$ZMMr  PREG:r:Z=$Kk      MEM:r:u64=$mem512;
                      return 1484 << 16 | 2767;
                    }
                    else
                    {
                      // TEMPLATE.VMOVDQAxx_rzmz_2::VMOVDQA32mz
                      // VMOVDQA32 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk      MEM:r:u32=$mem512;
                      return 1484 << 16 | 2766;
                    }
                  }
                  else
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VMOVDQAxx_romo_2::VMOVDQA64mx
                      // VMOVDQA64 VREG:w:u64=$XMMr  PREG:r:Z=$Kk      MEM:r:u64=$mem128;
                      return 1480 << 16 | 2759;
                    }
                    else
                    {
                      // TEMPLATE.VMOVDQAxx_romo_2::VMOVDQA32mx
                      // VMOVDQA32 VREG:w:u32=$XMMr  PREG:r:Z=$Kk      MEM:r:u32=$mem128;
                      return 1480 << 16 | 2758;
                    }
                  }
                }
                break;
              }
              case 0x03:
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VMOVDQA64_rzmx::VMOVDQA64m
                  // VMOVDQA64 VREG:rw:s64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_i64 EVH=$EVH;
                  return 3395 << 16 | 7050;
                }
                else
                {
                  // TEMPLATE.VMOVDQA32_rzmx::VMOVDQA32m
                  // VMOVDQA32 VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_i32 EVH=$EVH;
                  return 3393 << 16 | 7046;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // TEMPLATE.MOVQ_rqmq_2::MOVQmq
            // MOVQ REG:w:s64=$MMXr  MEM:r:s64=$mem64;
            return 807 << 16 | 1352;
          }
        }
      }
    }
  break;
  /* 0f.0x70 */
  case 368:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSHUFLW::PSHUFLW
            // PSHUFLW VREG:w:u16=$XMMr VREG:r:u16=$XMMm  ORDER:r:u8=$order;
            return 1129 << 16 | 1942;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSHUFLW_rymyub_1::VPSHUFLW
              // VPSHUFLW VREG:w:u16=$YMMr VREG:r:u16=$YMMm  ORDER:r:u8=$order;
              return 1982 << 16 | 3820;
            }
            else
            {
              // TEMPLATE.VPSHUFLW_romoub_1::VPSHUFLW
              // VPSHUFLW VREG:w:s32=$XMMr VREG:r:s32=$XMMm  ORDER:r:u8=$order;
              return 1980 << 16 | 3816;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSHUFLW_romoub_2::VPSHUFLW
                // VPSHUFLW VREG:w:u16=$XMMr PREG:r:Z=$Kk      VREG:r:u16=$XMMm  ORDER:r:u8=$order;
                return 1981 << 16 | 3818;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSHUFLW_rymyub_2::VPSHUFLW
                // VPSHUFLW VREG:w:u16=$YMMr PREG:r:Z=$Kk      VREG:r:u16=$YMMm  ORDER:r:u8=$order;
                return 1983 << 16 | 3822;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSHUFLW_rzmzub::VPSHUFLW
                // VPSHUFLW VREG:w:u16=$ZMMr PREG:r:Z=$Kk      VREG:r:u16=$ZMMm  ORDER:r:u8=$order;
                return 1984 << 16 | 3824;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.PSHUFHW::PSHUFHW
              // PSHUFHW VREG:w:u16=$XMMr VREG:r:u16=$XMMm  ORDER:r:u8=$order;
              return 1128 << 16 | 1940;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VPSHUFHW_rymyub_1::VPSHUFHW
                // VPSHUFHW VREG:w:u16=$YMMr VREG:r:u16=$YMMm  ORDER:r:u8=$order;
                return 1977 << 16 | 3810;
              }
              else
              {
                // TEMPLATE.VPSHUFHW_romoub_1::VPSHUFHW
                // VPSHUFHW VREG:w:s32=$XMMr VREG:r:s32=$XMMm  ORDER:r:u8=$order;
                return 1975 << 16 | 3806;
              }
              break;
            }
            case 0x02:
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VPSHUFHW_romoub_2::VPSHUFHW
                  // VPSHUFHW VREG:w:u16=$XMMr PREG:r:Z=$Kk      VREG:r:u16=$XMMm  ORDER:r:u8=$order;
                  return 1976 << 16 | 3808;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VPSHUFHW_rymyub_2::VPSHUFHW
                  // VPSHUFHW VREG:w:u16=$YMMr PREG:r:Z=$Kk      VREG:r:u16=$YMMm  ORDER:r:u8=$order;
                  return 1978 << 16 | 3812;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VPSHUFHW_rzmzub::VPSHUFHW
                  // VPSHUFHW VREG:w:u16=$ZMMr PREG:r:Z=$Kk      VREG:r:u16=$ZMMm  ORDER:r:u8=$order;
                  return 1979 << 16 | 3814;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.PSHUFD::PSHUFD
                // PSHUFD VREG:w:u32=$XMMr VREG:r:u32=$XMMm  ORDER:r:u8=$order;
                return 1127 << 16 | 1938;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VPSHUFD_rymyub_1::VPSHUFD
                  // VPSHUFD VREG:w:u32=$YMMr VREG:r:u32=$YMMm  ORDER:r:u8=$order;
                  return 1972 << 16 | 3800;
                }
                else
                {
                  // TEMPLATE.VPSHUFD_romoub_1::VPSHUFD
                  // VPSHUFD VREG:w:s32=$XMMr VREG:r:s32=$XMMm  ORDER:r:u8=$order;
                  return 1970 << 16 | 3796;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VPSHUFD_romoub_2::VPSHUFD
                    // VPSHUFD VREG:w:u32=$XMMr PREG:r:Z=$Kk      VREG:r:u32=$XMMm             ORDER:r:u8=$order;
                    return 1971 << 16 | 3798;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VPSHUFD_rymyub_2::VPSHUFD
                    // VPSHUFD VREG:w:u32=$YMMr PREG:r:Z=$Kk      VREG:r:u32=$YMMm             ORDER:r:u8=$order;
                    return 1973 << 16 | 3802;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VPSHUFD_rzmzub_1::VPSHUFD
                    // VPSHUFD VREG:w:u32=$ZMMr PREG:r:Z=$Kk      VREG:r:u32=$ZMMm             ORDER:r:u8=$order;
                    return 1974 << 16 | 3804;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  // TEMPLATE.VPSHUFD_rzmzub_2::VPSHUFD
                  // VPSHUFD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm                      ORDER:r:u8=$order;
                  return 3464 << 16 | 7183;
                }
                else
                {
                  // TEMPLATE.VPSHUFD_rzmzub_2::VPSHUFD
                  // VPSHUFD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm                      ORDER:r:u8=$order;
                  return 3464 << 16 | 7182;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // TEMPLATE.PSHUFW::PSHUFW
            // PSHUFW REG:w:u16=$MMXr REG:r:u16=$MMXm  ORDER:r:u8=$order;
            return 862 << 16 | 1430;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSHUFLW::PSHUFLWmx
            // PSHUFLW VREG:w:u16=$XMMr MEM:r:u16=$mem128 ORDER:r:u8=$order;
            return 1129 << 16 | 1943;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSHUFLW_rymyub_1::VPSHUFLWmy
              // VPSHUFLW VREG:w:u16=$YMMr MEM:r:u16=$mem256 ORDER:r:u8=$order;
              return 1982 << 16 | 3821;
            }
            else
            {
              // TEMPLATE.VPSHUFLW_romoub_1::VPSHUFLWmx
              // VPSHUFLW VREG:w:s32=$XMMr MEM:r:s32=$mem128 ORDER:r:u8=$order;
              return 1980 << 16 | 3817;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSHUFLW_romoub_2::VPSHUFLWmx
                // VPSHUFLW VREG:w:u16=$XMMr PREG:r:Z=$Kk      MEM:r:u16=$mem128 ORDER:r:u8=$order;
                return 1981 << 16 | 3819;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSHUFLW_rymyub_2::VPSHUFLWmy
                // VPSHUFLW VREG:w:u16=$YMMr PREG:r:Z=$Kk      MEM:r:u16=$mem256 ORDER:r:u8=$order;
                return 1983 << 16 | 3823;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSHUFLW_rzmzub::VPSHUFLWmz
                // VPSHUFLW VREG:w:u16=$ZMMr PREG:r:Z=$Kk      MEM:r:u16=$mem512 ORDER:r:u8=$order;
                return 1984 << 16 | 3825;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.PSHUFHW::PSHUFHWmx
              // PSHUFHW VREG:w:u16=$XMMr MEM:r:u16=$mem128 ORDER:r:u8=$order;
              return 1128 << 16 | 1941;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VPSHUFHW_rymyub_1::VPSHUFHWmy
                // VPSHUFHW VREG:w:u16=$YMMr MEM:r:u16=$mem256 ORDER:r:u8=$order;
                return 1977 << 16 | 3811;
              }
              else
              {
                // TEMPLATE.VPSHUFHW_romoub_1::VPSHUFHWmx
                // VPSHUFHW VREG:w:s32=$XMMr MEM:r:s32=$mem128 ORDER:r:u8=$order;
                return 1975 << 16 | 3807;
              }
              break;
            }
            case 0x02:
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VPSHUFHW_romoub_2::VPSHUFHWmx
                  // VPSHUFHW VREG:w:u16=$XMMr PREG:r:Z=$Kk      MEM:r:u16=$mem128 ORDER:r:u8=$order;
                  return 1976 << 16 | 3809;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VPSHUFHW_rymyub_2::VPSHUFHWmy
                  // VPSHUFHW VREG:w:u16=$YMMr PREG:r:Z=$Kk      MEM:r:u16=$mem256 ORDER:r:u8=$order;
                  return 1978 << 16 | 3813;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VPSHUFHW_rzmzub::VPSHUFHWmz
                  // VPSHUFHW VREG:w:u16=$ZMMr PREG:r:Z=$Kk      MEM:r:u16=$mem512 ORDER:r:u8=$order;
                  return 1979 << 16 | 3815;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.PSHUFD::PSHUFDmx
                // PSHUFD VREG:w:u32=$XMMr MEM:r:u32=$mem128 ORDER:r:u8=$order;
                return 1127 << 16 | 1939;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VPSHUFD_rymyub_1::VPSHUFDmy
                  // VPSHUFD VREG:w:u32=$YMMr MEM:r:u32=$mem256 ORDER:r:u8=$order;
                  return 1972 << 16 | 3801;
                }
                else
                {
                  // TEMPLATE.VPSHUFD_romoub_1::VPSHUFDmx
                  // VPSHUFD VREG:w:s32=$XMMr MEM:r:s32=$mem128 ORDER:r:u8=$order;
                  return 1970 << 16 | 3797;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VPSHUFD_romoub_2::VPSHUFDmx
                    // VPSHUFD VREG:w:u32=$XMMr PREG:r:Z=$Kk      MEM:r:u32=$mem128 BCST=$BCST ORDER:r:u8=$order;
                    return 1971 << 16 | 3799;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VPSHUFD_rymyub_2::VPSHUFDmy
                    // VPSHUFD VREG:w:u32=$YMMr PREG:r:Z=$Kk      MEM:r:u32=$mem256 BCST=$BCST ORDER:r:u8=$order;
                    return 1973 << 16 | 3803;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VPSHUFD_rzmzub_1::VPSHUFDmz
                    // VPSHUFD VREG:w:u32=$ZMMr PREG:r:Z=$Kk      MEM:r:u32=$mem512 BCST=$BCST ORDER:r:u8=$order;
                    return 1974 << 16 | 3805;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VPSHUFD_rzmzub_2::VPSHUFDmz
                // VPSHUFD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r:s32=$mem512 SWZ=$n_i32 EVH=$EVH ORDER:r:u8=$order;
                return 3464 << 16 | 7184;
                break;
              }
              default: break;
            }
          }
          else
          {
            // TEMPLATE.PSHUFW::PSHUFWmq
            // PSHUFW REG:w:u16=$MMXr MEM:r:u16=$mem64 ORDER:r:u8=$order;
            return 862 << 16 | 1431;
          }
        }
      }
    }
  break;
  /* 0f.0x71 */
  case 369:
    if (a & 0x01)
    {
      if (a & 0x04)
      {
        if (a & 0x08)
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.PSLLW_moub::PSLLW
                // PSLLW VREG:rw:u16=$XMMm SHIFT:r:u8=$shl;
                return 1143 << 16 | 1963;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VPSLLW_nymyub_1::VPSLLW
                  // VPSLLW VREG:w:u16=$YMMn VREG:r:u16=$YMMm SHIFT:r:u8=$shl;
                  return 2018 << 16 | 3885;
                }
                else
                {
                  // TEMPLATE.VPSLLW_nomoub_1::VPSLLW
                  // VPSLLW VREG:w:u16=$XMMn VREG:r:u16=$XMMm SHIFT:r:u8=$shl;
                  return 2016 << 16 | 3882;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VPSLLW_nomoub_2::VPSLLW
                    // VPSLLW VREG:w:u16=$XMMn PREG:r:Z=$Kk     VREG:r:u16=$XMMm             SHIFT:r:u8=$shl;
                    return 2017 << 16 | 3883;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VPSLLW_nymyub_2::VPSLLW
                    // VPSLLW VREG:w:u16=$YMMn PREG:r:Z=$Kk     VREG:r:u16=$YMMm             SHIFT:r:u8=$shl;
                    return 2019 << 16 | 3886;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VPSLLW_nzmzub::VPSLLW
                    // VPSLLW VREG:w:u16=$ZMMn PREG:r:Z=$Kk     VREG:r:u16=$ZMMm             SHIFT:r:u8=$shl;
                    return 2020 << 16 | 3888;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // TEMPLATE.PSLLW_mqub::PSLLW
            // PSLLW REG:rw:u16=$MMXm SHIFT:r:u8=$shl;
            return 867 << 16 | 1438;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.PSRLW_moub::PSRLW
                // PSRLW VREG:rw:u16=$XMMm SHIFT:r:u8=$shr;
                return 1159 << 16 | 1979;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VPSRLW_nymyub_1::VPSRLW
                  // VPSRLW VREG:w:u16=$YMMn VREG:r:u16=$YMMm SHIFT:r:u8=$shr;
                  return 2073 << 16 | 3995;
                }
                else
                {
                  // TEMPLATE.VPSRLW_nomoub_1::VPSRLW
                  // VPSRLW VREG:w:u16=$XMMn VREG:r:u16=$XMMm SHIFT:r:u8=$shr;
                  return 2071 << 16 | 3992;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VPSRLW_nomoub_2::VPSRLW
                    // VPSRLW VREG:w:u16=$XMMn PREG:r:Z=$Kk     VREG:r:u16=$XMMm             SHIFT:r:u8=$shr;
                    return 2072 << 16 | 3993;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VPSRLW_nymyub_2::VPSRLW
                    // VPSRLW VREG:w:u16=$YMMn PREG:r:Z=$Kk     VREG:r:u16=$YMMm             SHIFT:r:u8=$shr;
                    return 2074 << 16 | 3996;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VPSRLW_nzmzub::VPSRLW
                    // VPSRLW VREG:w:u16=$ZMMn PREG:r:Z=$Kk     VREG:r:u16=$ZMMm             SHIFT:r:u8=$shr;
                    return 2075 << 16 | 3998;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // TEMPLATE.PSRLW_mqub::PSRLW
            // PSRLW REG:rw:u16=$MMXm SHIFT:r:u8=$shr;
            return 877 << 16 | 1453;
          }
        }
      }
      else
      {
        if (b & 0x40)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.PSRAW_moub::PSRAW
              // PSRAW VREG:rw:s16=$XMMm SHIFT:r:u8=$shr;
              return 1149 << 16 | 1969;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VPSRAW_nymyub_1::VPSRAW
                // VPSRAW VREG:w:s16=$YMMn VREG:r:s16=$YMMm SHIFT:r:u8=$shr;
                return 2032 << 16 | 3909;
              }
              else
              {
                // TEMPLATE.VPSRAW_nomoub_1::VPSRAW
                // VPSRAW VREG:w:s16=$XMMn VREG:r:s16=$XMMm SHIFT:r:u8=$shr;
                return 2030 << 16 | 3906;
              }
              break;
            }
            case 0x02:
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VPSRAW_nomoub_2::VPSRAW
                  // VPSRAW VREG:w:u16=$XMMn PREG:r:Z=$Kk     VREG:r:u16=$XMMm             SHIFT:r:u8=$shr;
                  return 2031 << 16 | 3907;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VPSRAW_nymyub_2::VPSRAW
                  // VPSRAW VREG:w:u16=$YMMn PREG:r:Z=$Kk     VREG:r:u16=$YMMm             SHIFT:r:u8=$shr;
                  return 2033 << 16 | 3910;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VPSRAW_nzmzub::VPSRAW
                  // VPSRAW VREG:w:u16=$ZMMn PREG:r:Z=$Kk     VREG:r:u16=$ZMMm             SHIFT:r:u8=$shr;
                  return 2034 << 16 | 3912;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          // TEMPLATE.PSRAW_mqub::PSRAW
          // PSRAW REG:rw:s16=$MMXm SHIFT:r:u8=$shr;
          return 871 << 16 | 1444;
        }
      }
    }
    else
    {
      if (a & 0x04)
      {
        if (a & 0x08)
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPSLLW_nomoub_2::VPSLLWmx
              // VPSLLW VREG:w:u16=$XMMn PREG:r:Z=$Kk     MEM:r:u16=$mem128            SHIFT:r:u8=$shl;
              return 2017 << 16 | 3884;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPSLLW_nymyub_2::VPSLLWmy
              // VPSLLW VREG:w:u16=$YMMn PREG:r:Z=$Kk     MEM:r:u16=$mem256            SHIFT:r:u8=$shl;
              return 2019 << 16 | 3887;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPSLLW_nzmzub::VPSLLWmz
              // VPSLLW VREG:w:u16=$ZMMn PREG:r:Z=$Kk     MEM:r:u16=$mem512            SHIFT:r:u8=$shl;
              return 2020 << 16 | 3889;
              break;
            }
            default: break;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPSRLW_nomoub_2::VPSRLWmx
              // VPSRLW VREG:w:u16=$XMMn PREG:r:Z=$Kk     MEM:r:u16=$mem128            SHIFT:r:u8=$shr;
              return 2072 << 16 | 3994;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPSRLW_nymyub_2::VPSRLWmy
              // VPSRLW VREG:w:u16=$YMMn PREG:r:Z=$Kk     MEM:r:u16=$mem256            SHIFT:r:u8=$shr;
              return 2074 << 16 | 3997;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPSRLW_nzmzub::VPSRLWmz
              // VPSRLW VREG:w:u16=$ZMMn PREG:r:Z=$Kk     MEM:r:u16=$mem512            SHIFT:r:u8=$shr;
              return 2075 << 16 | 3999;
              break;
            }
            default: break;
          }
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPSRAW_nomoub_2::VPSRAWmx
            // VPSRAW VREG:w:u16=$XMMn PREG:r:Z=$Kk     MEM:r:u16=$mem128            SHIFT:r:u8=$shr;
            return 2031 << 16 | 3908;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPSRAW_nymyub_2::VPSRAWmy
            // VPSRAW VREG:w:u16=$YMMn PREG:r:Z=$Kk     MEM:r:u16=$mem256            SHIFT:r:u8=$shr;
            return 2033 << 16 | 3911;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPSRAW_nzmzub::VPSRAWmz
            // VPSRAW VREG:w:u16=$ZMMn PREG:r:Z=$Kk     MEM:r:u16=$mem512            SHIFT:r:u8=$shr;
            return 2034 << 16 | 3913;
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f.0x72 */
  case 370:
    if (a & 0x01)
    {
      if (a & 0x02)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPROLx_nymyub::VPROLQ
            // VPROLQ  VREG:w:u64=$YMMn PREG:r:Z=$Kk VREG:r:u64=$YMMm             ROTATE:r:u8=$rol;
            return 2934 << 16 | 5941;
          }
          else
          {
            // TEMPLATE.VPROLx_nymyub::VPROLD
            // VPROLD  VREG:w:u32=$YMMn PREG:r:Z=$Kk VREG:r:u32=$YMMm             ROTATE:r:u8=$rol;
            return 2934 << 16 | 5939;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPROLx_nzmzub::VPROLQ
              // VPROLQ  VREG:w:u64=$ZMMn PREG:r:Z=$Kk VREG:r:u64=$ZMMm             ROTATE:r:u8=$rol;
              return 2935 << 16 | 5945;
            }
            else
            {
              // TEMPLATE.VPROLx_nzmzub::VPROLD
              // VPROLD  VREG:w:u32=$ZMMn PREG:r:Z=$Kk VREG:r:u32=$ZMMm             ROTATE:r:u8=$rol;
              return 2935 << 16 | 5943;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPROLx_nomoub::VPROLQ
              // VPROLQ  VREG:w:u64=$XMMn PREG:r:Z=$Kk VREG:r:u64=$XMMm             ROTATE:r:u8=$rol;
              return 2933 << 16 | 5937;
            }
            else
            {
              // TEMPLATE.VPROLx_nomoub::VPROLD
              // VPROLD  VREG:w:u32=$XMMn PREG:r:Z=$Kk VREG:r:u32=$XMMm             ROTATE:r:u8=$rol;
              return 2933 << 16 | 5935;
            }
          }
        }
      }
      else
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            if (b & 0x40)
            {
              // the following switch contains 4 case.
              switch (c & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.PSLLD_moub::PSLLD
                  // PSLLD VREG:rw:u32=$XMMm SHIFT:r:u8=$shl;
                  return 1137 << 16 | 1957;
                  break;
                }
                case 0x01:
                {
                  if (b & 0x01)
                  {
                    // TEMPLATE.VPSLLD_nymyub_1::VPSLLD
                    // VPSLLD VREG:w:u32=$YMMn VREG:r:u32=$YMMm SHIFT:r:u8=$shl;
                    return 1998 << 16 | 3849;
                  }
                  else
                  {
                    // TEMPLATE.VPSLLD_nomoub_1::VPSLLD
                    // VPSLLD VREG:w:u32=$XMMn VREG:r:u32=$XMMm SHIFT:r:u8=$shl;
                    return 1996 << 16 | 3846;
                  }
                  break;
                }
                case 0x02:
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VPSLLD_nomoub_2::VPSLLD
                      // VPSLLD VREG:w:u32=$XMMn PREG:r:Z=$Kk     VREG:r:u32=$XMMm             SHIFT:r:u8=$shl;
                      return 1997 << 16 | 3847;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VPSLLD_nymyub_2::VPSLLD
                      // VPSLLD VREG:w:u32=$YMMn PREG:r:Z=$Kk     VREG:r:u32=$YMMm             SHIFT:r:u8=$shl;
                      return 1999 << 16 | 3850;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VPSLLD_nzmzub::VPSLLD
                      // VPSLLD VREG:w:u32=$ZMMn PREG:r:Z=$Kk     VREG:r:u32=$ZMMm             SHIFT:r:u8=$shl;
                      return 2000 << 16 | 3852;
                      break;
                    }
                    default: break;
                  }
                  break;
                }
                case 0x03:
                {
                  if (c & 0x08)
                  {
                    // TEMPLATE.VPSLLD_nzmxub::VPSLLD
                    // VPSLLD VREG:rw:f32=$ZMMn PREG:r:Z=$Kk VREG:r:f32=$ZMMm                SHIFT:r:u8=$shl;
                    return 3465 << 16 | 7186;
                  }
                  else
                  {
                    // TEMPLATE.VPSLLD_nzmxub::VPSLLD
                    // VPSLLD VREG:rw:f32=$ZMMn PREG:r:Z=$Kk VREG:r:f32=$ZMMm SWZ=$r_i32     SHIFT:r:u8=$shl;
                    return 3465 << 16 | 7185;
                  }
                  break;
                }
                default: break;
              }
            }
            else
            {
              // TEMPLATE.PSLLD_mqub::PSLLD
              // PSLLD REG:rw:u32=$MMXm SHIFT:r:u8=$shl;
              return 863 << 16 | 1432;
            }
          }
          else
          {
            if (b & 0x40)
            {
              // the following switch contains 4 case.
              switch (c & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.PSRLD_moub::PSRLD
                  // PSRLD VREG:rw:u32=$XMMm SHIFT:r:u8=$shr;
                  return 1153 << 16 | 1973;
                  break;
                }
                case 0x01:
                {
                  if (b & 0x01)
                  {
                    // TEMPLATE.VPSRLD_nymyub_1::VPSRLD
                    // VPSRLD VREG:w:u32=$YMMn VREG:r:u32=$YMMm SHIFT:r:u8=$shr;
                    return 2053 << 16 | 3959;
                  }
                  else
                  {
                    // TEMPLATE.VPSRLD_nomoub_1::VPSRLD
                    // VPSRLD VREG:w:u32=$XMMn VREG:r:u32=$XMMm SHIFT:r:u8=$shr;
                    return 2051 << 16 | 3956;
                  }
                  break;
                }
                case 0x02:
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VPSRLD_nomoub_2::VPSRLD
                      // VPSRLD VREG:w:u32=$XMMn PREG:r:Z=$Kk     VREG:r:u32=$XMMm             SHIFT:r:u8=$shr;
                      return 2052 << 16 | 3957;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VPSRLD_nymyub_2::VPSRLD
                      // VPSRLD VREG:w:u32=$YMMn PREG:r:Z=$Kk     VREG:r:u32=$YMMm             SHIFT:r:u8=$shr;
                      return 2054 << 16 | 3960;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VPSRLD_nzmzub::VPSRLD
                      // VPSRLD VREG:w:u32=$ZMMn PREG:r:Z=$Kk     VREG:r:u32=$ZMMm             SHIFT:r:u8=$shr;
                      return 2055 << 16 | 3962;
                      break;
                    }
                    default: break;
                  }
                  break;
                }
                case 0x03:
                {
                  if (c & 0x08)
                  {
                    // TEMPLATE.VPSRLD_nzmxub::VPSRLD
                    // VPSRLD VREG:rw:f32=$ZMMn PREG:r:Z=$Kk VREG:r:f32=$ZMMm                SHIFT:r:u8=$shr;
                    return 3469 << 16 | 7198;
                  }
                  else
                  {
                    // TEMPLATE.VPSRLD_nzmxub::VPSRLD
                    // VPSRLD VREG:rw:f32=$ZMMn PREG:r:Z=$Kk VREG:r:f32=$ZMMm SWZ=$r_i32     SHIFT:r:u8=$shr;
                    return 3469 << 16 | 7197;
                  }
                  break;
                }
                default: break;
              }
            }
            else
            {
              // TEMPLATE.PSRLD_mqub::PSRLD
              // PSRLD REG:rw:u32=$MMXm SHIFT:r:u8=$shr;
              return 873 << 16 | 1447;
            }
          }
        }
        else
        {
          if (a & 0x08)
          {
            if (b & 0x40)
            {
              // the following switch contains 4 case.
              switch (c & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.PSRAD_moub::PSRAD
                  // PSRAD VREG:rw:s32=$XMMm SHIFT:r:u8=$shr;
                  return 1146 << 16 | 1966;
                  break;
                }
                case 0x01:
                {
                  if (b & 0x01)
                  {
                    // TEMPLATE.VPSRAD_nymyub::VPSRAD
                    // VPSRAD VREG:w:s32=$YMMn VREG:r:s32=$YMMm SHIFT:r:u8=$shr;
                    return 2027 << 16 | 3901;
                  }
                  else
                  {
                    // TEMPLATE.VPSRAD_nomoub::VPSRAD
                    // VPSRAD VREG:w:s32=$XMMn VREG:r:s32=$XMMm SHIFT:r:u8=$shr;
                    return 2026 << 16 | 3900;
                  }
                  break;
                }
                case 0x02:
                {
                  if (b & 0x01)
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VPSRAx_nymyub::VPSRAQ
                      // VPSRAQ VREG:w:u64=$YMMn PREG:r:Z=$Kk     VREG:r:u64=$YMMm             SHIFT:r:u8=$shr;
                      return 2041 << 16 | 3930;
                    }
                    else
                    {
                      // TEMPLATE.VPSRAx_nymyub::VPSRAD
                      // VPSRAD VREG:w:u32=$YMMn PREG:r:Z=$Kk     VREG:r:u32=$YMMm             SHIFT:r:u8=$shr;
                      return 2041 << 16 | 3928;
                    }
                  }
                  else
                  {
                    if (b & 0x02)
                    {
                      if (d & 0x01)
                      {
                        // TEMPLATE.VPSRAx_nzmzub::VPSRAQ
                        // VPSRAQ VREG:w:u64=$ZMMn PREG:r:Z=$Kk     VREG:r:u64=$ZMMm             SHIFT:r:u8=$shr;
                        return 2042 << 16 | 3934;
                      }
                      else
                      {
                        // TEMPLATE.VPSRAx_nzmzub::VPSRAD
                        // VPSRAD VREG:w:u32=$ZMMn PREG:r:Z=$Kk     VREG:r:u32=$ZMMm             SHIFT:r:u8=$shr;
                        return 2042 << 16 | 3932;
                      }
                    }
                    else
                    {
                      if (d & 0x01)
                      {
                        // TEMPLATE.VPSRAx_nomoub::VPSRAQ
                        // VPSRAQ VREG:w:u64=$XMMn PREG:r:Z=$Kk     VREG:r:u64=$XMMm             SHIFT:r:u8=$shr;
                        return 2040 << 16 | 3926;
                      }
                      else
                      {
                        // TEMPLATE.VPSRAx_nomoub::VPSRAD
                        // VPSRAD VREG:w:u32=$XMMn PREG:r:Z=$Kk     VREG:r:u32=$XMMm             SHIFT:r:u8=$shr;
                        return 2040 << 16 | 3924;
                      }
                    }
                  }
                  break;
                }
                case 0x03:
                {
                  if (c & 0x08)
                  {
                    // TEMPLATE.VPSRAD_nzmxub::VPSRAD
                    // VPSRAD VREG:rw:f32=$ZMMn PREG:r:Z=$Kk VREG:r:f32=$ZMMm                SHIFT:r:u8=$shr;
                    return 3467 << 16 | 7192;
                  }
                  else
                  {
                    // TEMPLATE.VPSRAD_nzmxub::VPSRAD
                    // VPSRAD VREG:rw:f32=$ZMMn PREG:r:Z=$Kk VREG:r:f32=$ZMMm SWZ=$r_i32     SHIFT:r:u8=$shr;
                    return 3467 << 16 | 7191;
                  }
                  break;
                }
                default: break;
              }
            }
            else
            {
              // TEMPLATE.PSRAD_mqub::PSRAD
              // PSRAD REG:rw:s32=$MMXm SHIFT:r:u8=$shr;
              return 869 << 16 | 1441;
            }
          }
          else
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPRORx_nymyub::VPRORQ
                // VPRORQ  VREG:w:u64=$YMMn PREG:r:Z=$Kk VREG:r:u64=$YMMm             ROTATE:r:u8=$ror;
                return 2940 << 16 | 5965;
              }
              else
              {
                // TEMPLATE.VPRORx_nymyub::VPRORD
                // VPRORD  VREG:w:u32=$YMMn PREG:r:Z=$Kk VREG:r:u32=$YMMm             ROTATE:r:u8=$ror;
                return 2940 << 16 | 5963;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPRORx_nzmzub::VPRORQ
                  // VPRORQ  VREG:w:u64=$ZMMn PREG:r:Z=$Kk VREG:r:u64=$ZMMm             ROTATE:r:u8=$ror;
                  return 2941 << 16 | 5969;
                }
                else
                {
                  // TEMPLATE.VPRORx_nzmzub::VPRORD
                  // VPRORD  VREG:w:u32=$ZMMn PREG:r:Z=$Kk VREG:r:u32=$ZMMm             ROTATE:r:u8=$ror;
                  return 2941 << 16 | 5967;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPRORx_nomoub::VPRORQ
                  // VPRORQ  VREG:w:u64=$XMMn PREG:r:Z=$Kk VREG:r:u64=$XMMm             ROTATE:r:u8=$ror;
                  return 2939 << 16 | 5961;
                }
                else
                {
                  // TEMPLATE.VPRORx_nomoub::VPRORD
                  // VPRORD  VREG:w:u32=$XMMn PREG:r:Z=$Kk VREG:r:u32=$XMMm             ROTATE:r:u8=$ror;
                  return 2939 << 16 | 5959;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (a & 0x02)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPROLx_nymyub::VPROLQmy
            // VPROLQ  VREG:w:u64=$YMMn PREG:r:Z=$Kk MEM:r:u64=$mem256 BCST=$BCST ROTATE:r:u8=$rol;
            return 2934 << 16 | 5942;
          }
          else
          {
            // TEMPLATE.VPROLx_nymyub::VPROLDmy
            // VPROLD  VREG:w:u32=$YMMn PREG:r:Z=$Kk MEM:r:u32=$mem256 BCST=$BCST ROTATE:r:u8=$rol;
            return 2934 << 16 | 5940;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPROLx_nzmzub::VPROLQmz
              // VPROLQ  VREG:w:u64=$ZMMn PREG:r:Z=$Kk MEM:r:u64=$mem512 BCST=$BCST ROTATE:r:u8=$rol;
              return 2935 << 16 | 5946;
            }
            else
            {
              // TEMPLATE.VPROLx_nzmzub::VPROLDmz
              // VPROLD  VREG:w:u32=$ZMMn PREG:r:Z=$Kk MEM:r:u32=$mem512 BCST=$BCST ROTATE:r:u8=$rol;
              return 2935 << 16 | 5944;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPROLx_nomoub::VPROLQmx
              // VPROLQ  VREG:w:u64=$XMMn PREG:r:Z=$Kk MEM:r:u64=$mem128 BCST=$BCST ROTATE:r:u8=$rol;
              return 2933 << 16 | 5938;
            }
            else
            {
              // TEMPLATE.VPROLx_nomoub::VPROLDmx
              // VPROLD  VREG:w:u32=$XMMn PREG:r:Z=$Kk MEM:r:u32=$mem128 BCST=$BCST ROTATE:r:u8=$rol;
              return 2933 << 16 | 5936;
            }
          }
        }
      }
      else
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            if (c & 0x01)
            {
              // TEMPLATE.VPSLLD_nzmxub::VPSLLDm
              // VPSLLD VREG:rw:f32=$ZMMn PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_i32 EVH=$EVH SHIFT:r:u8=$shl;
              return 3465 << 16 | 7187;
            }
            else
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VPSLLD_nomoub_2::VPSLLDmx
                  // VPSLLD VREG:w:u32=$XMMn PREG:r:Z=$Kk     MEM:r:u32=$mem128 BCST=$BCST SHIFT:r:u8=$shl;
                  return 1997 << 16 | 3848;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VPSLLD_nymyub_2::VPSLLDmy
                  // VPSLLD VREG:w:u32=$YMMn PREG:r:Z=$Kk     MEM:r:u32=$mem256 BCST=$BCST SHIFT:r:u8=$shl;
                  return 1999 << 16 | 3851;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VPSLLD_nzmzub::VPSLLDmz
                  // VPSLLD VREG:w:u32=$ZMMn PREG:r:Z=$Kk     MEM:r:u32=$mem512 BCST=$BCST SHIFT:r:u8=$shl;
                  return 2000 << 16 | 3853;
                  break;
                }
                default: break;
              }
            }
          }
          else
          {
            if (c & 0x01)
            {
              // TEMPLATE.VPSRLD_nzmxub::VPSRLDm
              // VPSRLD VREG:rw:f32=$ZMMn PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_i32 EVH=$EVH SHIFT:r:u8=$shr;
              return 3469 << 16 | 7199;
            }
            else
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VPSRLD_nomoub_2::VPSRLDmx
                  // VPSRLD VREG:w:u32=$XMMn PREG:r:Z=$Kk     MEM:r:u32=$mem128 BCST=$BCST SHIFT:r:u8=$shr;
                  return 2052 << 16 | 3958;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VPSRLD_nymyub_2::VPSRLDmy
                  // VPSRLD VREG:w:u32=$YMMn PREG:r:Z=$Kk     MEM:r:u32=$mem256 BCST=$BCST SHIFT:r:u8=$shr;
                  return 2054 << 16 | 3961;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VPSRLD_nzmzub::VPSRLDmz
                  // VPSRLD VREG:w:u32=$ZMMn PREG:r:Z=$Kk     MEM:r:u32=$mem512 BCST=$BCST SHIFT:r:u8=$shr;
                  return 2055 << 16 | 3963;
                  break;
                }
                default: break;
              }
            }
          }
        }
        else
        {
          if (a & 0x08)
          {
            if (c & 0x01)
            {
              // TEMPLATE.VPSRAD_nzmxub::VPSRADm
              // VPSRAD VREG:rw:f32=$ZMMn PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_i32 EVH=$EVH SHIFT:r:u8=$shr;
              return 3467 << 16 | 7193;
            }
            else
            {
              if (b & 0x01)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPSRAx_nymyub::VPSRAQmy
                  // VPSRAQ VREG:w:u64=$YMMn PREG:r:Z=$Kk     MEM:r:u64=$mem256 BCST=$BCST SHIFT:r:u8=$shr;
                  return 2041 << 16 | 3931;
                }
                else
                {
                  // TEMPLATE.VPSRAx_nymyub::VPSRADmy
                  // VPSRAD VREG:w:u32=$YMMn PREG:r:Z=$Kk     MEM:r:u32=$mem256 BCST=$BCST SHIFT:r:u8=$shr;
                  return 2041 << 16 | 3929;
                }
              }
              else
              {
                if (b & 0x02)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VPSRAx_nzmzub::VPSRAQmz
                    // VPSRAQ VREG:w:u64=$ZMMn PREG:r:Z=$Kk     MEM:r:u64=$mem512 BCST=$BCST SHIFT:r:u8=$shr;
                    return 2042 << 16 | 3935;
                  }
                  else
                  {
                    // TEMPLATE.VPSRAx_nzmzub::VPSRADmz
                    // VPSRAD VREG:w:u32=$ZMMn PREG:r:Z=$Kk     MEM:r:u32=$mem512 BCST=$BCST SHIFT:r:u8=$shr;
                    return 2042 << 16 | 3933;
                  }
                }
                else
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VPSRAx_nomoub::VPSRAQmx
                    // VPSRAQ VREG:w:u64=$XMMn PREG:r:Z=$Kk     MEM:r:u64=$mem128 BCST=$BCST SHIFT:r:u8=$shr;
                    return 2040 << 16 | 3927;
                  }
                  else
                  {
                    // TEMPLATE.VPSRAx_nomoub::VPSRADmx
                    // VPSRAD VREG:w:u32=$XMMn PREG:r:Z=$Kk     MEM:r:u32=$mem128 BCST=$BCST SHIFT:r:u8=$shr;
                    return 2040 << 16 | 3925;
                  }
                }
              }
            }
          }
          else
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPRORx_nymyub::VPRORQmy
                // VPRORQ  VREG:w:u64=$YMMn PREG:r:Z=$Kk MEM:r:u64=$mem256 BCST=$BCST ROTATE:r:u8=$ror;
                return 2940 << 16 | 5966;
              }
              else
              {
                // TEMPLATE.VPRORx_nymyub::VPRORDmy
                // VPRORD  VREG:w:u32=$YMMn PREG:r:Z=$Kk MEM:r:u32=$mem256 BCST=$BCST ROTATE:r:u8=$ror;
                return 2940 << 16 | 5964;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPRORx_nzmzub::VPRORQmz
                  // VPRORQ  VREG:w:u64=$ZMMn PREG:r:Z=$Kk MEM:r:u64=$mem512 BCST=$BCST ROTATE:r:u8=$ror;
                  return 2941 << 16 | 5970;
                }
                else
                {
                  // TEMPLATE.VPRORx_nzmzub::VPRORDmz
                  // VPRORD  VREG:w:u32=$ZMMn PREG:r:Z=$Kk MEM:r:u32=$mem512 BCST=$BCST ROTATE:r:u8=$ror;
                  return 2941 << 16 | 5968;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPRORx_nomoub::VPRORQmx
                  // VPRORQ  VREG:w:u64=$XMMn PREG:r:Z=$Kk MEM:r:u64=$mem128 BCST=$BCST ROTATE:r:u8=$ror;
                  return 2939 << 16 | 5962;
                }
                else
                {
                  // TEMPLATE.VPRORx_nomoub::VPRORDmx
                  // VPRORD  VREG:w:u32=$XMMn PREG:r:Z=$Kk MEM:r:u32=$mem128 BCST=$BCST ROTATE:r:u8=$ror;
                  return 2939 << 16 | 5960;
                }
              }
            }
          }
        }
      }
    }
  break;
  /* 0f.0x73 */
  case 371:
    if (a & 0x01)
    {
      if (a & 0x02)
      {
        if (a & 0x08)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.PSLLDQ::PSLLDQ
              // PSLLDQ REG:rw:u128=$XMMm SHIFT:r:u8=$shl;
              return 1136 << 16 | 1956;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VPSLLDQ_nymyub_1::VPSLLDQ
                // VPSLLDQ VREG:w:u128=$YMMn VREG:r:u128=$YMMm SHIFT:r:u8=$shl;
                return 1993 << 16 | 3841;
              }
              else
              {
                // TEMPLATE.VPSLLDQ_nomoub_1::VPSLLDQ
                // VPSLLDQ REG:w:u128=$XMMn  REG:r:u128=$XMMm  SHIFT:r:u8=$shl;
                return 1991 << 16 | 3838;
              }
              break;
            }
            case 0x02:
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VPSLLDQ_nomoub_2::VPSLLDQ
                  // VPSLLDQ VREG:w:u8=$XMMn   VREG:r:u8=$XMMm   SHIFT:r:u8=$shl;
                  return 1992 << 16 | 3839;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VPSLLDQ_nymyub_2::VPSLLDQ
                  // VPSLLDQ VREG:w:u8=$YMMn   VREG:r:u8=$YMMm   SHIFT:r:u8=$shl;
                  return 1994 << 16 | 3842;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VPSLLDQ_nzmzub::VPSLLDQ
                  // VPSLLDQ VREG:w:u8=$ZMMn   VREG:r:u8=$ZMMm   SHIFT:r:u8=$shl;
                  return 1995 << 16 | 3844;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.PSRLDQ::PSRLDQ
              // PSRLDQ REG:rw:u128=$XMMm SHIFT:r:u8=$shr;
              return 1152 << 16 | 1972;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VPSRLDQ_nymyub_1::VPSRLDQ
                // VPSRLDQ VREG:w:u128=$YMMn VREG:r:u128=$YMMm SHIFT:r:u8=$shr;
                return 2048 << 16 | 3951;
              }
              else
              {
                // TEMPLATE.VPSRLDQ_nomoub_1::VPSRLDQ
                // VPSRLDQ REG:w:u128=$XMMn  REG:r:u128=$XMMm  SHIFT:r:u8=$shr;
                return 2046 << 16 | 3948;
              }
              break;
            }
            case 0x02:
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VPSRLDQ_nomoub_2::VPSRLDQ
                  // VPSRLDQ VREG:w:u8=$XMMn   VREG:r:u8=$XMMm   SHIFT:r:u8=$shr;
                  return 2047 << 16 | 3949;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VPSRLDQ_nymyub_2::VPSRLDQ
                  // VPSRLDQ VREG:w:u8=$YMMn   VREG:r:u8=$YMMm   SHIFT:r:u8=$shr;
                  return 2049 << 16 | 3952;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VPSRLDQ_nzmzub::VPSRLDQ
                  // VPSRLDQ VREG:w:u8=$ZMMn   VREG:r:u8=$ZMMm   SHIFT:r:u8=$shr;
                  return 2050 << 16 | 3954;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
        }
      }
      else
      {
        if (a & 0x08)
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.PSLLQ_moub::PSLLQ
                // PSLLQ VREG:rw:u64=$XMMm SHIFT:r:u8=$shl;
                return 1140 << 16 | 1960;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VPSLLQ_nymyub_1::VPSLLQ
                  // VPSLLQ VREG:w:u64=$YMMn VREG:r:u64=$YMMm SHIFT:r:u8=$shl;
                  return 2008 << 16 | 3867;
                }
                else
                {
                  // TEMPLATE.VPSLLQ_nomoub_1::VPSLLQ
                  // VPSLLQ VREG:w:u64=$XMMn VREG:r:u64=$XMMm SHIFT:r:u8=$shl;
                  return 2006 << 16 | 3864;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VPSLLQ_nomoub_2::VPSLLQ
                    // VPSLLQ VREG:w:u64=$XMMn PREG:r:Z=$Kk     VREG:r:u64=$XMMm             SHIFT:r:u8=$shl;
                    return 2007 << 16 | 3865;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VPSLLQ_nymyub_2::VPSLLQ
                    // VPSLLQ VREG:w:u64=$YMMn PREG:r:Z=$Kk     VREG:r:u64=$YMMm             SHIFT:r:u8=$shl;
                    return 2009 << 16 | 3868;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VPSLLQ_nzmzub::VPSLLQ
                    // VPSLLQ VREG:w:u64=$ZMMn PREG:r:Z=$Kk     VREG:r:u64=$ZMMm             SHIFT:r:u8=$shl;
                    return 2010 << 16 | 3870;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // TEMPLATE.PSLLQ_mqub::PSLLQ
            // PSLLQ REG:rw:u64=$MMXm SHIFT:r:u8=$shl;
            return 865 << 16 | 1435;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.PSRLQ_moub::PSRLQ
                // PSRLQ VREG:rw:u64=$XMMm SHIFT:r:u8=$shr;
                return 1156 << 16 | 1976;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VPSRLQ_nymyub_1::VPSRLQ
                  // VPSRLQ VREG:w:u64=$YMMn VREG:r:u64=$YMMm SHIFT:r:u8=$shr;
                  return 2063 << 16 | 3977;
                }
                else
                {
                  // TEMPLATE.VPSRLQ_nomoub_1::VPSRLQ
                  // VPSRLQ VREG:w:u64=$XMMn VREG:r:u64=$XMMm SHIFT:r:u8=$shr;
                  return 2061 << 16 | 3974;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VPSRLQ_nomoub_2::VPSRLQ
                    // VPSRLQ VREG:w:u64=$XMMn PREG:r:Z=$Kk     VREG:r:u64=$XMMm             SHIFT:r:u8=$shr;
                    return 2062 << 16 | 3975;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VPSRLQ_nymyub_2::VPSRLQ
                    // VPSRLQ VREG:w:u64=$YMMn PREG:r:Z=$Kk     VREG:r:u64=$YMMm             SHIFT:r:u8=$shr;
                    return 2064 << 16 | 3978;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VPSRLQ_nzmzub::VPSRLQ
                    // VPSRLQ VREG:w:u64=$ZMMn PREG:r:Z=$Kk     VREG:r:u64=$ZMMm             SHIFT:r:u8=$shr;
                    return 2065 << 16 | 3980;
                    break;
                  }
                  default: break;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // TEMPLATE.PSRLQ_mqub::PSRLQ
            // PSRLQ REG:rw:u64=$MMXm SHIFT:r:u8=$shr;
            return 875 << 16 | 1450;
          }
        }
      }
    }
    else
    {
      if (a & 0x02)
      {
        if (a & 0x08)
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPSLLDQ_nomoub_2::VPSLLDQmx
              // VPSLLDQ VREG:w:u8=$XMMn   MEM:r:u8=$mem128  SHIFT:r:u8=$shl;
              return 1992 << 16 | 3840;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPSLLDQ_nymyub_2::VPSLLDQmy
              // VPSLLDQ VREG:w:u8=$YMMn   MEM:r:u8=$mem256  SHIFT:r:u8=$shl;
              return 1994 << 16 | 3843;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPSLLDQ_nzmzub::VPSLLDQmz
              // VPSLLDQ VREG:w:u8=$ZMMn   MEM:r:u8=$mem512  SHIFT:r:u8=$shl;
              return 1995 << 16 | 3845;
              break;
            }
            default: break;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPSRLDQ_nomoub_2::VPSRLDQmx
              // VPSRLDQ VREG:w:u8=$XMMn   MEM:r:u8=$mem128  SHIFT:r:u8=$shr;
              return 2047 << 16 | 3950;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPSRLDQ_nymyub_2::VPSRLDQmy
              // VPSRLDQ VREG:w:u8=$YMMn   MEM:r:u8=$mem256  SHIFT:r:u8=$shr;
              return 2049 << 16 | 3953;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPSRLDQ_nzmzub::VPSRLDQmz
              // VPSRLDQ VREG:w:u8=$ZMMn   MEM:r:u8=$mem512  SHIFT:r:u8=$shr;
              return 2050 << 16 | 3955;
              break;
            }
            default: break;
          }
        }
      }
      else
      {
        if (a & 0x08)
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPSLLQ_nomoub_2::VPSLLQmx
              // VPSLLQ VREG:w:u64=$XMMn PREG:r:Z=$Kk     MEM:r:u64=$mem128 BCST=$BCST SHIFT:r:u8=$shl;
              return 2007 << 16 | 3866;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPSLLQ_nymyub_2::VPSLLQmy
              // VPSLLQ VREG:w:u64=$YMMn PREG:r:Z=$Kk     MEM:r:u64=$mem256 BCST=$BCST SHIFT:r:u8=$shl;
              return 2009 << 16 | 3869;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPSLLQ_nzmzub::VPSLLQmz
              // VPSLLQ VREG:w:u64=$ZMMn PREG:r:Z=$Kk     MEM:r:u64=$mem512 BCST=$BCST SHIFT:r:u8=$shl;
              return 2010 << 16 | 3871;
              break;
            }
            default: break;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPSRLQ_nomoub_2::VPSRLQmx
              // VPSRLQ VREG:w:u64=$XMMn PREG:r:Z=$Kk     MEM:r:u64=$mem128 BCST=$BCST SHIFT:r:u8=$shr;
              return 2062 << 16 | 3976;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPSRLQ_nymyub_2::VPSRLQmy
              // VPSRLQ VREG:w:u64=$YMMn PREG:r:Z=$Kk     MEM:r:u64=$mem256 BCST=$BCST SHIFT:r:u8=$shr;
              return 2064 << 16 | 3979;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPSRLQ_nzmzub::VPSRLQmz
              // VPSRLQ VREG:w:u64=$ZMMn PREG:r:Z=$Kk     MEM:r:u64=$mem512 BCST=$BCST SHIFT:r:u8=$shr;
              return 2065 << 16 | 3981;
              break;
            }
            default: break;
          }
        }
      }
    }
  break;
  /* 0f.0x74 */
  case 372:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPEQB_romo::PCMPEQB
            // PCMPEQB VREG:rw:s8=$XMMr  VREG:r:s8=$XMMm;
            return 1050 << 16 | 1780;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPEQB_rynymy::VPCMPEQB
              // VPCMPEQB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
              return 1726 << 16 | 3260;
            }
            else
            {
              // TEMPLATE.VPCMPEQB_ronomo::VPCMPEQB
              // VPCMPEQB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
              return 1725 << 16 | 3258;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPEQB_nomo::VPCMPEQB
                // VPCMPEQB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$XMMn   VREG:r:u8=$XMMm;
                return 1722 << 16 | 3252;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPEQB_nymy::VPCMPEQB
                // VPCMPEQB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$YMMn   VREG:r:u8=$YMMm;
                return 1723 << 16 | 3254;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPEQB_nzmz::VPCMPEQB
                // VPCMPEQB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   VREG:r:u8=$ZMMm;
                return 1724 << 16 | 3256;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPEQB_rqmq::PCMPEQB
        // PCMPEQB REG:rw:s8=$MMXr  REG:r:s8=$MMXm;
        return 833 << 16 | 1389;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPEQB_romo::PCMPEQBmx
            // PCMPEQB VREG:rw:s8=$XMMr  MEM:r:s8=$mem128;
            return 1050 << 16 | 1781;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPEQB_rynymy::VPCMPEQBmy
              // VPCMPEQB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
              return 1726 << 16 | 3261;
            }
            else
            {
              // TEMPLATE.VPCMPEQB_ronomo::VPCMPEQBmx
              // VPCMPEQB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
              return 1725 << 16 | 3259;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPEQB_nomo::VPCMPEQBmx
                // VPCMPEQB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$XMMn   MEM:r:u8=$mem128;
                return 1722 << 16 | 3253;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPEQB_nymy::VPCMPEQBmy
                // VPCMPEQB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$YMMn   MEM:r:u8=$mem256;
                return 1723 << 16 | 3255;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPEQB_nzmz::VPCMPEQBmz
                // VPCMPEQB REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   MEM:r:u8=$mem512;
                return 1724 << 16 | 3257;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPEQB_rqmq::PCMPEQBmq
        // PCMPEQB REG:rw:s8=$MMXr  MEM:r:s8=$mem64;
        return 833 << 16 | 1390;
      }
    }
  break;
  /* 0f.0x75 */
  case 373:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPEQW_romo::PCMPEQW
            // PCMPEQW VREG:rw:s16=$XMMr VREG:r:s16=$XMMm;
            return 1052 << 16 | 1784;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPEQW_rynymy::VPCMPEQW
              // VPCMPEQW VREG:w:u16=$YMMr VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
              return 1736 << 16 | 3280;
            }
            else
            {
              // TEMPLATE.VPCMPEQW_ronomo::VPCMPEQW
              // VPCMPEQW VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
              return 1735 << 16 | 3278;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPEQW_nomo::VPCMPEQW
                // VPCMPEQW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 1732 << 16 | 3272;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPEQW_nymy::VPCMPEQW
                // VPCMPEQW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 1733 << 16 | 3274;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPEQW_nzmz::VPCMPEQW
                // VPCMPEQW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 1734 << 16 | 3276;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPEQW_rqmq::PCMPEQW
        // PCMPEQW REG:rw:s16=$MMXr REG:r:s16=$MMXm;
        return 835 << 16 | 1393;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPEQW_romo::PCMPEQWmx
            // PCMPEQW VREG:rw:s16=$XMMr MEM:r:s16=$mem128;
            return 1052 << 16 | 1785;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPEQW_rynymy::VPCMPEQWmy
              // VPCMPEQW VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u16=$mem256;
              return 1736 << 16 | 3281;
            }
            else
            {
              // TEMPLATE.VPCMPEQW_ronomo::VPCMPEQWmx
              // VPCMPEQW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem128;
              return 1735 << 16 | 3279;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPEQW_nomo::VPCMPEQWmx
                // VPCMPEQW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 1732 << 16 | 3273;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPEQW_nymy::VPCMPEQWmy
                // VPCMPEQW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 1733 << 16 | 3275;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPEQW_nzmz::VPCMPEQWmz
                // VPCMPEQW REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 1734 << 16 | 3277;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPEQW_rqmq::PCMPEQWmq
        // PCMPEQW REG:rw:s16=$MMXr MEM:r:s16=$mem64;
        return 835 << 16 | 1394;
      }
    }
  break;
  /* 0f.0x76 */
  case 374:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPEQD_romo::PCMPEQD
            // PCMPEQD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1051 << 16 | 1782;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPEQD_rynymy::VPCMPEQD
              // VPCMPEQD VREG:w:u32=$YMMr VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
              return 1731 << 16 | 3270;
            }
            else
            {
              // TEMPLATE.VPCMPEQD_ronomo::VPCMPEQD
              // VPCMPEQD VREG:w:u32=$XMMr VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
              return 1730 << 16 | 3268;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPEQD_nomo::VPCMPEQD
                // VPCMPEQD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
                return 1727 << 16 | 3262;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPEQD_nymy::VPCMPEQD
                // VPCMPEQD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
                return 1728 << 16 | 3264;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPEQD_nzmz::VPCMPEQD
                // VPCMPEQD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
                return 1729 << 16 | 3266;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            if (c & 0x08)
            {
              // TEMPLATE.VPCMPEQD_nzmx::VPCMPEQD
              // VPCMPEQD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm;
              return 3425 << 16 | 7107;
            }
            else
            {
              // TEMPLATE.VPCMPEQD_nzmx::VPCMPEQD
              // VPCMPEQD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm SWZ=$r_i64;
              return 3425 << 16 | 7106;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPEQD_rqmq::PCMPEQD
        // PCMPEQD REG:rw:s32=$MMXr REG:r:s32=$MMXm;
        return 834 << 16 | 1391;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPEQD_romo::PCMPEQDmx
            // PCMPEQD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1051 << 16 | 1783;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPEQD_rynymy::VPCMPEQDmy
              // VPCMPEQD VREG:w:u32=$YMMr VREG:r:u32=$YMMn MEM:r:u32=$mem256;
              return 1731 << 16 | 3271;
            }
            else
            {
              // TEMPLATE.VPCMPEQD_ronomo::VPCMPEQDmx
              // VPCMPEQD VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem128;
              return 1730 << 16 | 3269;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPEQD_nomo::VPCMPEQDmx
                // VPCMPEQD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
                return 1727 << 16 | 3263;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPEQD_nymy::VPCMPEQDmy
                // VPCMPEQD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
                return 1728 << 16 | 3265;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPEQD_nzmz::VPCMPEQDmz
                // VPCMPEQD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
                return 1729 << 16 | 3267;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            // TEMPLATE.VPCMPEQD_nzmx::VPCMPEQDm
            // VPCMPEQD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
            return 3425 << 16 | 7108;
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PCMPEQD_rqmq::PCMPEQDmq
        // PCMPEQD REG:rw:s32=$MMXr MEM:r:s32=$mem64;
        return 834 << 16 | 1392;
      }
    }
  break;
  /* 0f.0x77 */
  case 375:
    if (c & 0x01)
    {
      if (b & 0x01)
      {
        // TEMPLATE.VZEROALL::VZEROALL
        // VZEROALL;
        return 3071 << 16 | 6343;
      }
      else
      {
        // TEMPLATE.VZEROUPPER::VZEROUPPER
        // VZEROUPPER;
        return 3072 << 16 | 6344;
      }
    }
    else
    {
      // TEMPLATE.EMMS::EMMS
      // EMMS;
      return 801 << 16 | 1342;
    }
  break;
  /* 0f.0x78 */
  case 376:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (c & 0x02)
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTTSD2USI::VCVTTSD2USI
                // VCVTTSD2USI REG:w:u64=$GPR64r VREG:r:f64=$XMMm SAE=$SAE;
                return 2314 << 16 | 4546;
              }
              else
              {
                // TEMPLATE.VCVTTSD2USI::VCVTTSD2USI
                // VCVTTSD2USI REG:w:u32=$GPR32r VREG:r:f64=$XMMm SAE=$SAE;
                return 2314 << 16 | 4549;
              }
            }
            else
            {
              // TEMPLATE.VCVTTSD2USI::VCVTTSD2USI
              // VCVTTSD2USI REG:w:u32=$GPR32r VREG:r:f64=$XMMm SAE=$SAE;
              return 2314 << 16 | 4543;
            }
          }
          else
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTTSD2USI::VCVTTSD2USI
                // VCVTTSD2USI REG:w:u64=$GPR64r VREG:r:f64=$XMMm;
                return 2314 << 16 | 4545;
              }
              else
              {
                // TEMPLATE.VCVTTSD2USI::VCVTTSD2USI
                // VCVTTSD2USI REG:w:u32=$GPR32r VREG:r:f64=$XMMm;
                return 2314 << 16 | 4548;
              }
            }
            else
            {
              // TEMPLATE.VCVTTSD2USI::VCVTTSD2USI
              // VCVTTSD2USI REG:w:u32=$GPR32r VREG:r:f64=$XMMm;
              return 2314 << 16 | 4542;
            }
          }
        }
        else
        {
          // TEMPLATE.INSERTQ_rqmqub::INSERTQib
          // INSERTQ REG:w:s64=$XMMr REG:r:s64=$XMMm  IMM:u8=$index IMM:u8=$index;
          return 3117 << 16 | 6449;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTTSS2USI::VCVTTSS2USI
                // VCVTTSS2USI REG:w:u64=$GPR64r VREG:r:f32=$XMMm SAE=$SAE;
                return 2315 << 16 | 4555;
              }
              else
              {
                // TEMPLATE.VCVTTSS2USI::VCVTTSS2USI
                // VCVTTSS2USI REG:w:u32=$GPR32r VREG:r:f32=$XMMm SAE=$SAE;
                return 2315 << 16 | 4558;
              }
            }
            else
            {
              // TEMPLATE.VCVTTSS2USI::VCVTTSS2USI
              // VCVTTSS2USI REG:w:u32=$GPR32r VREG:r:f32=$XMMm SAE=$SAE;
              return 2315 << 16 | 4552;
            }
          }
          else
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTTSS2USI::VCVTTSS2USI
                // VCVTTSS2USI REG:w:u64=$GPR64r VREG:r:f32=$XMMm;
                return 2315 << 16 | 4554;
              }
              else
              {
                // TEMPLATE.VCVTTSS2USI::VCVTTSS2USI
                // VCVTTSS2USI REG:w:u32=$GPR32r VREG:r:f32=$XMMm;
                return 2315 << 16 | 4557;
              }
            }
            else
            {
              // TEMPLATE.VCVTTSS2USI::VCVTTSS2USI
              // VCVTTSS2USI REG:w:u32=$GPR32r VREG:r:f32=$XMMm;
              return 2315 << 16 | 4551;
            }
          }
        }
        else
        {
          if (b & 0x40)
          {
            if (c & 0x02)
            {
              if (b & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTTPD2UQQ_rzmz::VCVTTPD2UQQ
                  // VCVTTPD2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE;
                  return 2304 << 16 | 4518;
                }
                else
                {
                  // TEMPLATE.VCVTTPS2UQQ_rzmy::VCVTTPS2UQQ
                  // VCVTTPS2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm SAE=$SAE;
                  return 2313 << 16 | 4539;
                }
              }
              else
              {
                if (b & 0x01)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTTPD2UQQ_rymy::VCVTTPD2UQQ
                    // VCVTTPD2UQQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm;
                    return 2303 << 16 | 4516;
                  }
                  else
                  {
                    // TEMPLATE.VCVTTPS2UQQ_rymo::VCVTTPS2UQQ
                    // VCVTTPS2UQQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
                    return 2312 << 16 | 4537;
                  }
                }
                else
                {
                  if (b & 0x02)
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTTPD2UQQ_rzmz::VCVTTPD2UQQ
                      // VCVTTPD2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
                      return 2304 << 16 | 4519;
                    }
                    else
                    {
                      // TEMPLATE.VCVTTPS2UQQ_rzmy::VCVTTPS2UQQ
                      // VCVTTPS2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm;
                      return 2313 << 16 | 4540;
                    }
                  }
                  else
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTTPD2UQQ_romo::VCVTTPD2UQQ
                      // VCVTTPD2UQQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm;
                      return 2302 << 16 | 4514;
                    }
                    else
                    {
                      // TEMPLATE.VCVTTPS2UQQ_romx::VCVTTPS2UQQ
                      // VCVTTPS2UQQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
                      return 2311 << 16 | 4535;
                    }
                  }
                }
              }
            }
            else
            {
              // TEMPLATE.EXTRQ_mqub::EXTRQib
              // EXTRQ REG:w:s64=$XMMm IMM:u8=$uimm8    IMM:u8=$uimm8;
              return 3114 << 16 | 6446;
            }
          }
          else
          {
            if (c & 0x02)
            {
              if (b & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTTPD2UDQ_rymz::VCVTTPD2UDQ
                  // VCVTTPD2UDQ VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE;
                  return 2301 << 16 | 4511;
                }
                else
                {
                  // TEMPLATE.VCVTTPS2UDQ_rzmz::VCVTTPS2UDQ
                  // VCVTTPS2UDQ VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE;
                  return 2310 << 16 | 4532;
                }
              }
              else
              {
                if (b & 0x01)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTTPD2UDQ_romy::VCVTTPD2UDQ
                    // VCVTTPD2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm;
                    return 2300 << 16 | 4509;
                  }
                  else
                  {
                    // TEMPLATE.VCVTTPS2UDQ_rymy::VCVTTPS2UDQ
                    // VCVTTPS2UDQ VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm;
                    return 2309 << 16 | 4530;
                  }
                }
                else
                {
                  if (b & 0x02)
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTTPD2UDQ_rymz::VCVTTPD2UDQ
                      // VCVTTPD2UDQ VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
                      return 2301 << 16 | 4512;
                    }
                    else
                    {
                      // TEMPLATE.VCVTTPS2UDQ_rzmz::VCVTTPS2UDQ
                      // VCVTTPS2UDQ VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm;
                      return 2310 << 16 | 4533;
                    }
                  }
                  else
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTTPD2UDQ_romo::VCVTTPD2UDQ
                      // VCVTTPD2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm;
                      return 2299 << 16 | 4507;
                    }
                    else
                    {
                      // TEMPLATE.VCVTTPS2UDQ_romo::VCVTTPS2UDQ
                      // VCVTTPS2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
                      return 2308 << 16 | 4528;
                    }
                  }
                }
              }
            }
            else
            {
              if (c & 0x80)
              {
                // TEMPLATE.VMREAD::VMREAD
                // VMREAD REG:w=$GPR64m    REG:r=$GPR64r;
                return 750 << 16 | 1256;
              }
              else
              {
                // TEMPLATE.VMREAD::VMREAD
                // VMREAD REG:w=$GPR32m    REG:r=$GPR32r;
                return 750 << 16 | 1258;
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (d & 0x01)
        {
          if (c & 0x80)
          {
            // TEMPLATE.VCVTTSD2USI::VCVTTSD2USImq
            // VCVTTSD2USI REG:w:u64=$GPR64r MEM:r:f64=$mem64;
            return 2314 << 16 | 4547;
          }
          else
          {
            // TEMPLATE.VCVTTSD2USI::VCVTTSD2USImq
            // VCVTTSD2USI REG:w:u32=$GPR32r MEM:r:f64=$mem64;
            return 2314 << 16 | 4550;
          }
        }
        else
        {
          // TEMPLATE.VCVTTSD2USI::VCVTTSD2USImq
          // VCVTTSD2USI REG:w:u32=$GPR32r MEM:r:f64=$mem64;
          return 2314 << 16 | 4544;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (d & 0x01)
          {
            if (c & 0x80)
            {
              // TEMPLATE.VCVTTSS2USI::VCVTTSS2USImd
              // VCVTTSS2USI REG:w:u64=$GPR64r MEM:r:f32=$mem32;
              return 2315 << 16 | 4556;
            }
            else
            {
              // TEMPLATE.VCVTTSS2USI::VCVTTSS2USImd
              // VCVTTSS2USI REG:w:u32=$GPR32r MEM:r:f32=$mem32;
              return 2315 << 16 | 4559;
            }
          }
          else
          {
            // TEMPLATE.VCVTTSS2USI::VCVTTSS2USImd
            // VCVTTSS2USI REG:w:u32=$GPR32r MEM:r:f32=$mem32;
            return 2315 << 16 | 4553;
          }
        }
        else
        {
          if (b & 0x40)
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTTPD2UQQ_rymy::VCVTTPD2UQQmy
                // VCVTTPD2UQQ VREG:w:u64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST;
                return 2303 << 16 | 4517;
              }
              else
              {
                // TEMPLATE.VCVTTPS2UQQ_rymo::VCVTTPS2UQQmx
                // VCVTTPS2UQQ VREG:w:u64=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST;
                return 2312 << 16 | 4538;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTTPD2UQQ_rzmz::VCVTTPD2UQQmz
                  // VCVTTPD2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
                  return 2304 << 16 | 4520;
                }
                else
                {
                  // TEMPLATE.VCVTTPS2UQQ_rzmy::VCVTTPS2UQQmy
                  // VCVTTPS2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST;
                  return 2313 << 16 | 4541;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTTPD2UQQ_romo::VCVTTPD2UQQmx
                  // VCVTTPD2UQQ VREG:w:u64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST;
                  return 2302 << 16 | 4515;
                }
                else
                {
                  // TEMPLATE.VCVTTPS2UQQ_romx::VCVTTPS2UQQmq
                  // VCVTTPS2UQQ VREG:w:u64=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem64 BCST=$BCST;
                  return 2311 << 16 | 4536;
                }
              }
            }
          }
          else
          {
            if (c & 0x02)
            {
              if (b & 0x01)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTTPD2UDQ_romy::VCVTTPD2UDQmy
                  // VCVTTPD2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST;
                  return 2300 << 16 | 4510;
                }
                else
                {
                  // TEMPLATE.VCVTTPS2UDQ_rymy::VCVTTPS2UDQmy
                  // VCVTTPS2UDQ VREG:w:u32=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST;
                  return 2309 << 16 | 4531;
                }
              }
              else
              {
                if (b & 0x02)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTTPD2UDQ_rymz::VCVTTPD2UDQmz
                    // VCVTTPD2UDQ VREG:w:u32=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
                    return 2301 << 16 | 4513;
                  }
                  else
                  {
                    // TEMPLATE.VCVTTPS2UDQ_rzmz::VCVTTPS2UDQmz
                    // VCVTTPS2UDQ VREG:w:u32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST;
                    return 2310 << 16 | 4534;
                  }
                }
                else
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTTPD2UDQ_romo::VCVTTPD2UDQmx
                    // VCVTTPD2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST;
                    return 2299 << 16 | 4508;
                  }
                  else
                  {
                    // TEMPLATE.VCVTTPS2UDQ_romo::VCVTTPS2UDQmx
                    // VCVTTPS2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST;
                    return 2308 << 16 | 4529;
                  }
                }
              }
            }
            else
            {
              if (c & 0x80)
              {
                // TEMPLATE.VMREAD::VMREADmq
                // VMREAD MEM:w:s64=$mem64 REG:r=$GPR64r;
                return 750 << 16 | 1257;
              }
              else
              {
                // TEMPLATE.VMREAD::VMREADmd
                // VMREAD MEM:w:s32=$mem32 REG:r=$GPR32r;
                return 750 << 16 | 1259;
              }
            }
          }
        }
      }
    }
  break;
  /* 0f.0x79 */
  case 377:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (c & 0x02)
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTSD2USI::VCVTSD2USI
                // VCVTSD2USI REG:w:u64=$GPR64r VREG:r:f64=$XMMm RC=$RC;
                return 2294 << 16 | 4486;
              }
              else
              {
                // TEMPLATE.VCVTSD2USI::VCVTSD2USI
                // VCVTSD2USI REG:w:u32=$GPR32r VREG:r:f64=$XMMm RC=$RC;
                return 2294 << 16 | 4489;
              }
            }
            else
            {
              // TEMPLATE.VCVTSD2USI::VCVTSD2USI
              // VCVTSD2USI REG:w:u32=$GPR32r VREG:r:f64=$XMMm RC=$RC;
              return 2294 << 16 | 4483;
            }
          }
          else
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTSD2USI::VCVTSD2USI
                // VCVTSD2USI REG:w:u64=$GPR64r VREG:r:f64=$XMMm;
                return 2294 << 16 | 4485;
              }
              else
              {
                // TEMPLATE.VCVTSD2USI::VCVTSD2USI
                // VCVTSD2USI REG:w:u32=$GPR32r VREG:r:f64=$XMMm;
                return 2294 << 16 | 4488;
              }
            }
            else
            {
              // TEMPLATE.VCVTSD2USI::VCVTSD2USI
              // VCVTSD2USI REG:w:u32=$GPR32r VREG:r:f64=$XMMm;
              return 2294 << 16 | 4482;
            }
          }
        }
        else
        {
          // TEMPLATE.INSERTQ_rqmo::INSERTQ
          // INSERTQ REG:w:s64=$XMMr VREG:r:s32=$XMMm;
          return 3116 << 16 | 6448;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTSS2USI::VCVTSS2USI
                // VCVTSS2USI REG:w:u64=$GPR64r VREG:r:f32=$XMMm RC=$RC;
                return 2295 << 16 | 4495;
              }
              else
              {
                // TEMPLATE.VCVTSS2USI::VCVTSS2USI
                // VCVTSS2USI REG:w:u32=$GPR32r VREG:r:f32=$XMMm RC=$RC;
                return 2295 << 16 | 4498;
              }
            }
            else
            {
              // TEMPLATE.VCVTSS2USI::VCVTSS2USI
              // VCVTSS2USI REG:w:u32=$GPR32r VREG:r:f32=$XMMm RC=$RC;
              return 2295 << 16 | 4492;
            }
          }
          else
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTSS2USI::VCVTSS2USI
                // VCVTSS2USI REG:w:u64=$GPR64r VREG:r:f32=$XMMm;
                return 2295 << 16 | 4494;
              }
              else
              {
                // TEMPLATE.VCVTSS2USI::VCVTSS2USI
                // VCVTSS2USI REG:w:u32=$GPR32r VREG:r:f32=$XMMm;
                return 2295 << 16 | 4497;
              }
            }
            else
            {
              // TEMPLATE.VCVTSS2USI::VCVTSS2USI
              // VCVTSS2USI REG:w:u32=$GPR32r VREG:r:f32=$XMMm;
              return 2295 << 16 | 4491;
            }
          }
        }
        else
        {
          if (b & 0x40)
          {
            if (c & 0x02)
            {
              if (b & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTPD2UQQ_rzmz::VCVTPD2UQQ
                  // VCVTPD2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm RC=$RC;
                  return 2269 << 16 | 4430;
                }
                else
                {
                  // TEMPLATE.VCVTPS2UQQ_rzmy::VCVTPS2UQQ
                  // VCVTPS2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm RC=$RC;
                  return 2287 << 16 | 4465;
                }
              }
              else
              {
                if (b & 0x01)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTPD2UQQ_rymy::VCVTPD2UQQ
                    // VCVTPD2UQQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm;
                    return 2268 << 16 | 4428;
                  }
                  else
                  {
                    // TEMPLATE.VCVTPS2UQQ_rymo::VCVTPS2UQQ
                    // VCVTPS2UQQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
                    return 2286 << 16 | 4463;
                  }
                }
                else
                {
                  if (b & 0x02)
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTPD2UQQ_rzmz::VCVTPD2UQQ
                      // VCVTPD2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
                      return 2269 << 16 | 4431;
                    }
                    else
                    {
                      // TEMPLATE.VCVTPS2UQQ_rzmy::VCVTPS2UQQ
                      // VCVTPS2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm;
                      return 2287 << 16 | 4466;
                    }
                  }
                  else
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTPD2UQQ_romo::VCVTPD2UQQ
                      // VCVTPD2UQQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm;
                      return 2267 << 16 | 4426;
                    }
                    else
                    {
                      // TEMPLATE.VCVTPS2UQQ_romx::VCVTPS2UQQ
                      // VCVTPS2UQQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
                      return 2285 << 16 | 4461;
                    }
                  }
                }
              }
            }
            else
            {
              // TEMPLATE.EXTRQ_rqmo::EXTRQ
              // EXTRQ REG:w:s64=$XMMr VREG:r:s32=$XMMm;
              return 3115 << 16 | 6447;
            }
          }
          else
          {
            if (c & 0x02)
            {
              if (b & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTPD2UDQ_rymz::VCVTPD2UDQ
                  // VCVTPD2UDQ VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm RC=$RC;
                  return 2266 << 16 | 4423;
                }
                else
                {
                  // TEMPLATE.VCVTPS2UDQ_rzmz::VCVTPS2UDQ
                  // VCVTPS2UDQ VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm RC=$RC;
                  return 2284 << 16 | 4458;
                }
              }
              else
              {
                if (b & 0x01)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTPD2UDQ_romy::VCVTPD2UDQ
                    // VCVTPD2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm;
                    return 2265 << 16 | 4421;
                  }
                  else
                  {
                    // TEMPLATE.VCVTPS2UDQ_rymy::VCVTPS2UDQ
                    // VCVTPS2UDQ VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm;
                    return 2283 << 16 | 4456;
                  }
                }
                else
                {
                  if (b & 0x02)
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTPD2UDQ_rymz::VCVTPD2UDQ
                      // VCVTPD2UDQ VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
                      return 2266 << 16 | 4424;
                    }
                    else
                    {
                      // TEMPLATE.VCVTPS2UDQ_rzmz::VCVTPS2UDQ
                      // VCVTPS2UDQ VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm;
                      return 2284 << 16 | 4459;
                    }
                  }
                  else
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTPD2UDQ_romo::VCVTPD2UDQ
                      // VCVTPD2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm;
                      return 2264 << 16 | 4419;
                    }
                    else
                    {
                      // TEMPLATE.VCVTPS2UDQ_romo::VCVTPS2UDQ
                      // VCVTPS2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
                      return 2282 << 16 | 4454;
                    }
                  }
                }
              }
            }
            else
            {
              if (c & 0x80)
              {
                // TEMPLATE.VMWRITE::VMWRITE
                // VMWRITE REG:r=$GPR64r REG:r=$GPR64m;
                return 751 << 16 | 1260;
              }
              else
              {
                // TEMPLATE.VMWRITE::VMWRITE
                // VMWRITE REG:r=$GPR32r REG:r=$GPR32m;
                return 751 << 16 | 1262;
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (d & 0x01)
        {
          if (c & 0x80)
          {
            // TEMPLATE.VCVTSD2USI::VCVTSD2USImq
            // VCVTSD2USI REG:w:u64=$GPR64r MEM:r:f64=$mem64;
            return 2294 << 16 | 4487;
          }
          else
          {
            // TEMPLATE.VCVTSD2USI::VCVTSD2USImq
            // VCVTSD2USI REG:w:u32=$GPR32r MEM:r:f64=$mem64;
            return 2294 << 16 | 4490;
          }
        }
        else
        {
          // TEMPLATE.VCVTSD2USI::VCVTSD2USImq
          // VCVTSD2USI REG:w:u32=$GPR32r MEM:r:f64=$mem64;
          return 2294 << 16 | 4484;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (d & 0x01)
          {
            if (c & 0x80)
            {
              // TEMPLATE.VCVTSS2USI::VCVTSS2USImd
              // VCVTSS2USI REG:w:u64=$GPR64r MEM:r:f32=$mem32;
              return 2295 << 16 | 4496;
            }
            else
            {
              // TEMPLATE.VCVTSS2USI::VCVTSS2USImd
              // VCVTSS2USI REG:w:u32=$GPR32r MEM:r:f32=$mem32;
              return 2295 << 16 | 4499;
            }
          }
          else
          {
            // TEMPLATE.VCVTSS2USI::VCVTSS2USImd
            // VCVTSS2USI REG:w:u32=$GPR32r MEM:r:f32=$mem32;
            return 2295 << 16 | 4493;
          }
        }
        else
        {
          if (b & 0x40)
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTPD2UQQ_rymy::VCVTPD2UQQmy
                // VCVTPD2UQQ VREG:w:u64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST;
                return 2268 << 16 | 4429;
              }
              else
              {
                // TEMPLATE.VCVTPS2UQQ_rymo::VCVTPS2UQQmx
                // VCVTPS2UQQ VREG:w:u64=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST;
                return 2286 << 16 | 4464;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTPD2UQQ_rzmz::VCVTPD2UQQmz
                  // VCVTPD2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
                  return 2269 << 16 | 4432;
                }
                else
                {
                  // TEMPLATE.VCVTPS2UQQ_rzmy::VCVTPS2UQQmy
                  // VCVTPS2UQQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST;
                  return 2287 << 16 | 4467;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTPD2UQQ_romo::VCVTPD2UQQmx
                  // VCVTPD2UQQ VREG:w:u64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST;
                  return 2267 << 16 | 4427;
                }
                else
                {
                  // TEMPLATE.VCVTPS2UQQ_romx::VCVTPS2UQQmq
                  // VCVTPS2UQQ VREG:w:u64=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem64 BCST=$BCST;
                  return 2285 << 16 | 4462;
                }
              }
            }
          }
          else
          {
            if (c & 0x02)
            {
              if (b & 0x01)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTPD2UDQ_romy::VCVTPD2UDQmy
                  // VCVTPD2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST;
                  return 2265 << 16 | 4422;
                }
                else
                {
                  // TEMPLATE.VCVTPS2UDQ_rymy::VCVTPS2UDQmy
                  // VCVTPS2UDQ VREG:w:u32=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST;
                  return 2283 << 16 | 4457;
                }
              }
              else
              {
                if (b & 0x02)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTPD2UDQ_rymz::VCVTPD2UDQmz
                    // VCVTPD2UDQ VREG:w:u32=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
                    return 2266 << 16 | 4425;
                  }
                  else
                  {
                    // TEMPLATE.VCVTPS2UDQ_rzmz::VCVTPS2UDQmz
                    // VCVTPS2UDQ VREG:w:u32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST;
                    return 2284 << 16 | 4460;
                  }
                }
                else
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTPD2UDQ_romo::VCVTPD2UDQmx
                    // VCVTPD2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST;
                    return 2264 << 16 | 4420;
                  }
                  else
                  {
                    // TEMPLATE.VCVTPS2UDQ_romo::VCVTPS2UDQmx
                    // VCVTPS2UDQ VREG:w:u32=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST;
                    return 2282 << 16 | 4455;
                  }
                }
              }
            }
            else
            {
              if (c & 0x80)
              {
                // TEMPLATE.VMWRITE::VMWRITEmq
                // VMWRITE REG:r=$GPR64r MEM:r:s64=$mem64;
                return 751 << 16 | 1261;
              }
              else
              {
                // TEMPLATE.VMWRITE::VMWRITEmd
                // VMWRITE REG:r=$GPR32r MEM:r:s32=$mem32;
                return 751 << 16 | 1263;
              }
            }
          }
        }
      }
    }
  break;
  /* 0f.0x7a */
  case 378:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VCVTUQQ2PS_rymz::VCVTUQQ2PS
            // VCVTUQQ2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMm RC=$RC;
            return 2327 << 16 | 4584;
          }
          else
          {
            // TEMPLATE.VCVTUDQ2PS_rzmz::VCVTUDQ2PS
            // VCVTUDQ2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMm RC=$RC;
            return 2321 << 16 | 4570;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VCVTUQQ2PS_romy::VCVTUQQ2PS
              // VCVTUQQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:u64=$YMMm;
              return 2326 << 16 | 4582;
            }
            else
            {
              // TEMPLATE.VCVTUDQ2PS_rymy::VCVTUDQ2PS
              // VCVTUDQ2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMm;
              return 2320 << 16 | 4568;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTUQQ2PS_rymz::VCVTUQQ2PS
                // VCVTUQQ2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMm;
                return 2327 << 16 | 4585;
              }
              else
              {
                // TEMPLATE.VCVTUDQ2PS_rzmz::VCVTUDQ2PS
                // VCVTUDQ2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMm;
                return 2321 << 16 | 4571;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTUQQ2PS_romo::VCVTUQQ2PS
                // VCVTUQQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMm;
                return 2325 << 16 | 4580;
              }
              else
              {
                // TEMPLATE.VCVTUDQ2PS_romo::VCVTUDQ2PS
                // VCVTUDQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMm;
                return 2319 << 16 | 4566;
              }
            }
          }
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (c & 0x01)
          {
            if (c & 0x08)
            {
              // TEMPLATE.VCVTUDQ2PD_rzmx::VCVTUDQ2PD
              // VCVTUDQ2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
              return 3325 << 16 | 6891;
            }
            else
            {
              // TEMPLATE.VCVTUDQ2PD_rzmx::VCVTUDQ2PD
              // VCVTUDQ2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SWZ=$r_i32;
              return 3325 << 16 | 6890;
            }
          }
          else
          {
            if (b & 0x80)
            {
              // TEMPLATE.VCVTUQQ2PD_rzmz::VCVTUQQ2PD
              // VCVTUQQ2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMm RC=$RC;
              return 2324 << 16 | 4577;
            }
            else
            {
              if (b & 0x01)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTUQQ2PD_rymy::VCVTUQQ2PD
                  // VCVTUQQ2PD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMm;
                  return 2323 << 16 | 4575;
                }
                else
                {
                  // TEMPLATE.VCVTUDQ2PD_rymo::VCVTUDQ2PD
                  // VCVTUDQ2PD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:u32=$XMMm;
                  return 2317 << 16 | 4562;
                }
              }
              else
              {
                if (b & 0x02)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTUQQ2PD_rzmz::VCVTUQQ2PD
                    // VCVTUQQ2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMm;
                    return 2324 << 16 | 4578;
                  }
                  else
                  {
                    // TEMPLATE.VCVTUDQ2PD_rzmy::VCVTUDQ2PD
                    // VCVTUDQ2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$YMMm;
                    return 2318 << 16 | 4564;
                  }
                }
                else
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTUQQ2PD_romo::VCVTUQQ2PD
                    // VCVTUQQ2PD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMm;
                    return 2322 << 16 | 4573;
                  }
                  else
                  {
                    // TEMPLATE.VCVTUDQ2PD_romx::VCVTUDQ2PD
                    // VCVTUDQ2PD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMm;
                    return 2316 << 16 | 4560;
                  }
                }
              }
            }
          }
        }
        else
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VCVTTPD2QQ_rzmz::VCVTTPD2QQ
              // VCVTTPD2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE;
              return 2298 << 16 | 4504;
            }
            else
            {
              // TEMPLATE.VCVTTPS2QQ_rzmy::VCVTTPS2QQ
              // VCVTTPS2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm SAE=$SAE;
              return 2307 << 16 | 4525;
            }
          }
          else
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTTPD2QQ_rymy::VCVTTPD2QQ
                // VCVTTPD2QQ VREG:w:s64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm;
                return 2297 << 16 | 4502;
              }
              else
              {
                // TEMPLATE.VCVTTPS2QQ_rymo::VCVTTPS2QQ
                // VCVTTPS2QQ VREG:w:s64=$YMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
                return 2306 << 16 | 4523;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTTPD2QQ_rzmz::VCVTTPD2QQ
                  // VCVTTPD2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
                  return 2298 << 16 | 4505;
                }
                else
                {
                  // TEMPLATE.VCVTTPS2QQ_rzmy::VCVTTPS2QQ
                  // VCVTTPS2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm;
                  return 2307 << 16 | 4526;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTTPD2QQ_romo::VCVTTPD2QQ
                  // VCVTTPD2QQ VREG:w:s64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm;
                  return 2296 << 16 | 4500;
                }
                else
                {
                  // TEMPLATE.VCVTTPS2QQ_romx::VCVTTPS2QQ
                  // VCVTTPS2QQ VREG:w:s64=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
                  return 2305 << 16 | 4521;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VCVTUQQ2PS_romy::VCVTUQQ2PSmy
            // VCVTUQQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:u64=$mem256 BCST=$BCST;
            return 2326 << 16 | 4583;
          }
          else
          {
            // TEMPLATE.VCVTUDQ2PS_rymy::VCVTUDQ2PSmy
            // VCVTUDQ2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk MEM:r:u32=$mem256 BCST=$BCST;
            return 2320 << 16 | 4569;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VCVTUQQ2PS_rymz::VCVTUQQ2PSmz
              // VCVTUQQ2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk MEM:r:u64=$mem512 BCST=$BCST;
              return 2327 << 16 | 4586;
            }
            else
            {
              // TEMPLATE.VCVTUDQ2PS_rzmz::VCVTUDQ2PSmz
              // VCVTUDQ2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:u32=$mem512 BCST=$BCST;
              return 2321 << 16 | 4572;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VCVTUQQ2PS_romo::VCVTUQQ2PSmx
              // VCVTUQQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:u64=$mem128 BCST=$BCST;
              return 2325 << 16 | 4581;
            }
            else
            {
              // TEMPLATE.VCVTUDQ2PS_romo::VCVTUDQ2PSmx
              // VCVTUDQ2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:u32=$mem128 BCST=$BCST;
              return 2319 << 16 | 4567;
            }
          }
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (c & 0x01)
          {
            // TEMPLATE.VCVTUDQ2PD_rzmx::VCVTUDQ2PDm
            // VCVTUDQ2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_hi32 EVH=$EVH;
            return 3325 << 16 | 6892;
          }
          else
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTUQQ2PD_rymy::VCVTUQQ2PDmy
                // VCVTUQQ2PD VREG:w:f64=$YMMr PREG:r:Z=$Kk MEM:r:u64=$mem256 BCST=$BCST;
                return 2323 << 16 | 4576;
              }
              else
              {
                // TEMPLATE.VCVTUDQ2PD_rymo::VCVTUDQ2PDmx
                // VCVTUDQ2PD VREG:w:f64=$YMMr PREG:r:Z=$Kk MEM:r:u32=$mem128 BCST=$BCST;
                return 2317 << 16 | 4563;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTUQQ2PD_rzmz::VCVTUQQ2PDmz
                  // VCVTUQQ2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:u64=$mem512 BCST=$BCST;
                  return 2324 << 16 | 4579;
                }
                else
                {
                  // TEMPLATE.VCVTUDQ2PD_rzmy::VCVTUDQ2PDmy
                  // VCVTUDQ2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:u32=$mem256 BCST=$BCST;
                  return 2318 << 16 | 4565;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTUQQ2PD_romo::VCVTUQQ2PDmx
                  // VCVTUQQ2PD VREG:w:f64=$XMMr PREG:r:Z=$Kk MEM:r:u64=$mem128 BCST=$BCST;
                  return 2322 << 16 | 4574;
                }
                else
                {
                  // TEMPLATE.VCVTUDQ2PD_romx::VCVTUDQ2PDmq
                  // VCVTUDQ2PD VREG:w:f64=$XMMr PREG:r:Z=$Kk MEM:r:u32=$mem64 BCST=$BCST;
                  return 2316 << 16 | 4561;
                }
              }
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VCVTTPD2QQ_rymy::VCVTTPD2QQmy
              // VCVTTPD2QQ VREG:w:s64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST;
              return 2297 << 16 | 4503;
            }
            else
            {
              // TEMPLATE.VCVTTPS2QQ_rymo::VCVTTPS2QQmx
              // VCVTTPS2QQ VREG:w:s64=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST;
              return 2306 << 16 | 4524;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTTPD2QQ_rzmz::VCVTTPD2QQmz
                // VCVTTPD2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
                return 2298 << 16 | 4506;
              }
              else
              {
                // TEMPLATE.VCVTTPS2QQ_rzmy::VCVTTPS2QQmy
                // VCVTTPS2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST;
                return 2307 << 16 | 4527;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTTPD2QQ_romo::VCVTTPD2QQmx
                // VCVTTPD2QQ VREG:w:s64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST;
                return 2296 << 16 | 4501;
              }
              else
              {
                // TEMPLATE.VCVTTPS2QQ_romx::VCVTTPS2QQmq
                // VCVTTPS2QQ VREG:w:s64=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem64 BCST=$BCST;
                return 2305 << 16 | 4522;
              }
            }
          }
        }
      }
    }
  break;
  /* 0f.0x7b */
  case 379:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (b & 0x80)
        {
          // TEMPLATE.VCVTUSI2SD_ronomq::VCVTUSI2SD
          // VCVTUSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn RC=$RC REG:r:u64=$GPR64m;
          return 2329 << 16 | 4592;
        }
        else
        {
          if (d & 0x01)
          {
            if (c & 0x80)
            {
              // TEMPLATE.VCVTUSI2SD_ronomq::VCVTUSI2SD
              // VCVTUSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        REG:r:u64=$GPR64m;
              return 2329 << 16 | 4591;
            }
            else
            {
              // TEMPLATE.VCVTUSI2SD_ronomd::VCVTUSI2SD
              // VCVTUSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        REG:r:u32=$GPR32m;
              return 2328 << 16 | 4589;
            }
          }
          else
          {
            // TEMPLATE.VCVTUSI2SD_ronomd::VCVTUSI2SD
            // VCVTUSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        REG:r:u32=$GPR32m;
            return 2328 << 16 | 4587;
          }
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTUSI2SS::VCVTUSI2SS
                // VCVTUSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn RC=$RC REG:r:u64=$GPR64m;
                return 2330 << 16 | 4598;
              }
              else
              {
                // TEMPLATE.VCVTUSI2SS::VCVTUSI2SS
                // VCVTUSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn RC=$RC REG:r:u32=$GPR32m;
                return 2330 << 16 | 4601;
              }
            }
            else
            {
              // TEMPLATE.VCVTUSI2SS::VCVTUSI2SS
              // VCVTUSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn RC=$RC REG:r:u32=$GPR32m;
              return 2330 << 16 | 4595;
            }
          }
          else
          {
            if (d & 0x01)
            {
              if (c & 0x80)
              {
                // TEMPLATE.VCVTUSI2SS::VCVTUSI2SS
                // VCVTUSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        REG:r:u64=$GPR64m;
                return 2330 << 16 | 4597;
              }
              else
              {
                // TEMPLATE.VCVTUSI2SS::VCVTUSI2SS
                // VCVTUSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        REG:r:u32=$GPR32m;
                return 2330 << 16 | 4600;
              }
            }
            else
            {
              // TEMPLATE.VCVTUSI2SS::VCVTUSI2SS
              // VCVTUSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        REG:r:u32=$GPR32m;
              return 2330 << 16 | 4594;
            }
          }
        }
        else
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VCVTPD2QQ_rzmz::VCVTPD2QQ
              // VCVTPD2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm RC=$RC;
              return 2263 << 16 | 4416;
            }
            else
            {
              // TEMPLATE.VCVTPS2QQ_rzmy::VCVTPS2QQ
              // VCVTPS2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm RC=$RC;
              return 2281 << 16 | 4451;
            }
          }
          else
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTPD2QQ_rymy::VCVTPD2QQ
                // VCVTPD2QQ VREG:w:s64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm;
                return 2262 << 16 | 4414;
              }
              else
              {
                // TEMPLATE.VCVTPS2QQ_rymo::VCVTPS2QQ
                // VCVTPS2QQ VREG:w:s64=$YMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
                return 2280 << 16 | 4449;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTPD2QQ_rzmz::VCVTPD2QQ
                  // VCVTPD2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
                  return 2263 << 16 | 4417;
                }
                else
                {
                  // TEMPLATE.VCVTPS2QQ_rzmy::VCVTPS2QQ
                  // VCVTPS2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm;
                  return 2281 << 16 | 4452;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTPD2QQ_romo::VCVTPD2QQ
                  // VCVTPD2QQ VREG:w:s64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm;
                  return 2261 << 16 | 4412;
                }
                else
                {
                  // TEMPLATE.VCVTPS2QQ_romx::VCVTPS2QQ
                  // VCVTPS2QQ VREG:w:s64=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
                  return 2279 << 16 | 4447;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (d & 0x01)
        {
          if (c & 0x80)
          {
            // TEMPLATE.VCVTUSI2SD_ronomq::VCVTUSI2SDmq
            // VCVTUSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        MEM:r:u64=$mem64;
            return 2329 << 16 | 4593;
          }
          else
          {
            // TEMPLATE.VCVTUSI2SD_ronomd::VCVTUSI2SDmd
            // VCVTUSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        MEM:r:u32=$mem32;
            return 2328 << 16 | 4590;
          }
        }
        else
        {
          // TEMPLATE.VCVTUSI2SD_ronomd::VCVTUSI2SDmd
          // VCVTUSI2SD VREG:w:f64=$XMMr VREG:r:f64=$XMMn        MEM:r:u32=$mem32;
          return 2328 << 16 | 4588;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (d & 0x01)
          {
            if (c & 0x80)
            {
              // TEMPLATE.VCVTUSI2SS::VCVTUSI2SSmq
              // VCVTUSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        MEM:r:u64=$mem64;
              return 2330 << 16 | 4599;
            }
            else
            {
              // TEMPLATE.VCVTUSI2SS::VCVTUSI2SSmd
              // VCVTUSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        MEM:r:u32=$mem32;
              return 2330 << 16 | 4602;
            }
          }
          else
          {
            // TEMPLATE.VCVTUSI2SS::VCVTUSI2SSmd
            // VCVTUSI2SS VREG:w:f32=$XMMr VREG:r:f32=$XMMn        MEM:r:u32=$mem32;
            return 2330 << 16 | 4596;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VCVTPD2QQ_rymy::VCVTPD2QQmy
              // VCVTPD2QQ VREG:w:s64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST;
              return 2262 << 16 | 4415;
            }
            else
            {
              // TEMPLATE.VCVTPS2QQ_rymo::VCVTPS2QQmx
              // VCVTPS2QQ VREG:w:s64=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST;
              return 2280 << 16 | 4450;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTPD2QQ_rzmz::VCVTPD2QQmz
                // VCVTPD2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
                return 2263 << 16 | 4418;
              }
              else
              {
                // TEMPLATE.VCVTPS2QQ_rzmy::VCVTPS2QQmy
                // VCVTPS2QQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST;
                return 2281 << 16 | 4453;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VCVTPD2QQ_romo::VCVTPD2QQmx
                // VCVTPD2QQ VREG:w:s64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST;
                return 2261 << 16 | 4413;
              }
              else
              {
                // TEMPLATE.VCVTPS2QQ_romx::VCVTPS2QQmq
                // VCVTPS2QQ VREG:w:s64=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem64 BCST=$BCST;
                return 2279 << 16 | 4448;
              }
            }
          }
        }
      }
    }
  break;
  /* 0f.0x7c */
  case 380:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VHADDPS::VHADDPS
            // VHADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
            return 1362 << 16 | 2524;
          }
          else
          {
            // TEMPLATE.VHADDPS::VHADDPS
            // VHADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 1362 << 16 | 2523;
          }
        }
        else
        {
          // TEMPLATE.HADDPS::HADDPS
          // HADDPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
          return 952 << 16 | 1607;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VHADDPD::VHADDPD
            // VHADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
            return 1361 << 16 | 2520;
          }
          else
          {
            // TEMPLATE.VHADDPD::VHADDPD
            // VHADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 1361 << 16 | 2519;
          }
        }
        else
        {
          // TEMPLATE.HADDPD::HADDPD
          // HADDPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
          return 951 << 16 | 1605;
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VHADDPS::VHADDPSmy
            // VHADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
            return 1362 << 16 | 2526;
          }
          else
          {
            // TEMPLATE.VHADDPS::VHADDPSmx
            // VHADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
            return 1362 << 16 | 2525;
          }
        }
        else
        {
          // TEMPLATE.HADDPS::HADDPSmx
          // HADDPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
          return 952 << 16 | 1608;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VHADDPD::VHADDPDmy
            // VHADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
            return 1361 << 16 | 2522;
          }
          else
          {
            // TEMPLATE.VHADDPD::VHADDPDmx
            // VHADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
            return 1361 << 16 | 2521;
          }
        }
        else
        {
          // TEMPLATE.HADDPD::HADDPDmx
          // HADDPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
          return 951 << 16 | 1606;
        }
      }
    }
  break;
  /* 0f.0x7d */
  case 381:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VHSUBPS::VHSUBPS
            // VHSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
            return 1364 << 16 | 2532;
          }
          else
          {
            // TEMPLATE.VHSUBPS::VHSUBPS
            // VHSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 1364 << 16 | 2531;
          }
        }
        else
        {
          // TEMPLATE.HSUBPS::HSUBPS
          // HSUBPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
          return 954 << 16 | 1611;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VHSUBPD::VHSUBPD
            // VHSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
            return 1363 << 16 | 2528;
          }
          else
          {
            // TEMPLATE.VHSUBPD::VHSUBPD
            // VHSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 1363 << 16 | 2527;
          }
        }
        else
        {
          // TEMPLATE.HSUBPD::HSUBPD
          // HSUBPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
          return 953 << 16 | 1609;
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VHSUBPS::VHSUBPSmy
            // VHSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
            return 1364 << 16 | 2534;
          }
          else
          {
            // TEMPLATE.VHSUBPS::VHSUBPSmx
            // VHSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
            return 1364 << 16 | 2533;
          }
        }
        else
        {
          // TEMPLATE.HSUBPS::HSUBPSmx
          // HSUBPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
          return 954 << 16 | 1612;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VHSUBPD::VHSUBPDmy
            // VHSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
            return 1363 << 16 | 2530;
          }
          else
          {
            // TEMPLATE.VHSUBPD::VHSUBPDmx
            // VHSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
            return 1363 << 16 | 2529;
          }
        }
        else
        {
          // TEMPLATE.HSUBPD::HSUBPDmx
          // HSUBPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
          return 953 << 16 | 1610;
        }
      }
    }
  break;
  /* 0f.0x7e */
  case 382:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVQ_romq_2::MOVQ
            // MOVQ VREG:w:s32=$XMMr REG:r:s64=$XMMm;
            return 999 << 16 | 1679;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMOVQ_romq_2::VMOVQ
            // VMOVQ VREG:w:s32=$XMMr  REG:r:s64=$XMMm;
            return 1543 << 16 | 2878;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VMOVQ_romx::VMOVQ
            // VMOVQ VREG:w:u64=$XMMr  VREG:r:u64=$XMMm;
            return 1545 << 16 | 2882;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x40)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              if (c & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.MOVQ_mqrq_2::MOVQ
                  // MOVQ REG:w=$GPR64m    REG:r:s64=$XMMr;
                  return 996 << 16 | 1673;
                }
                else
                {
                  // TEMPLATE.MOVD_mdrd_2::MOVD
                  // MOVD REG:w=$GPR32m    REG:r:s32=$XMMr;
                  return 1011 << 16 | 1702;
                }
              }
              else
              {
                // TEMPLATE.MOVD_mdrd_2::MOVD
                // MOVD REG:w=$GPR32m    REG:r:s32=$XMMr;
                return 1011 << 16 | 1704;
              }
              break;
            }
            case 0x01:
            {
              if (c & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VMOVQ_mqrq::VMOVQ
                  // VMOVQ REG:w:s64=$GPR64m REG:r:s64=$XMMr;
                  return 1539 << 16 | 2870;
                }
                else
                {
                  // TEMPLATE.VMOVD_mdrd::VMOVD
                  // VMOVD REG:w:s32=$GPR32m REG:r:s32=$XMMr;
                  return 1586 << 16 | 2960;
                }
              }
              else
              {
                // TEMPLATE.VMOVD_mdrd::VMOVD
                // VMOVD REG:w:s32=$GPR32m REG:r:s32=$XMMr;
                return 1586 << 16 | 2962;
              }
              break;
            }
            case 0x02:
            {
              if (d & 0x01)
              {
                if (c & 0x80)
                {
                  // TEMPLATE.VMOVQ_mqro::VMOVQ
                  // VMOVQ REG:w:u64=$GPR64m VREG:r:u64=$XMMr;
                  return 1538 << 16 | 2868;
                }
                else
                {
                  // TEMPLATE.VMOVD_mdro::VMOVD
                  // VMOVD REG:w:u32=$GPR32m VREG:r:u32=$XMMr;
                  return 1587 << 16 | 2966;
                }
              }
              else
              {
                // TEMPLATE.VMOVD_mdro::VMOVD
                // VMOVD REG:w:u32=$GPR32m VREG:r:u32=$XMMr;
                return 1587 << 16 | 2964;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.MOVQ_mqrq_1::MOVQ
              // MOVQ REG:w=$GPR64m    REG:r:s64=$MMXr;
              return 804 << 16 | 1345;
            }
            else
            {
              // TEMPLATE.MOVD_mdrd_1::MOVD
              // MOVD REG:w=$GPR32m    REG:r:s32=$MMXr;
              return 808 << 16 | 1353;
            }
          }
          else
          {
            // TEMPLATE.MOVD_mdrd_1::MOVD
            // MOVD REG:w=$GPR32m    REG:r:s32=$MMXr;
            return 808 << 16 | 1355;
          }
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.MOVQ_romq_2::MOVQmq
            // MOVQ VREG:w:s32=$XMMr MEM:r:s64=$mem64;
            return 999 << 16 | 1680;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VMOVQ_romq_2::VMOVQmq
            // VMOVQ VREG:w:s32=$XMMr  MEM:r:s64=$mem64;
            return 1543 << 16 | 2879;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VMOVQ_romx::VMOVQmq
            // VMOVQ VREG:w:u64=$XMMr  MEM:r:u64=$mem64;
            return 1545 << 16 | 2883;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x40)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              if (c & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.MOVQ_mqrq_2::MOVQmq
                  // MOVQ MEM:w:s64=$mem64 REG:r:s64=$XMMr;
                  return 996 << 16 | 1674;
                }
                else
                {
                  // TEMPLATE.MOVD_mdrd_2::MOVDmd
                  // MOVD MEM:w:s32=$mem32 REG:r:s32=$XMMr;
                  return 1011 << 16 | 1703;
                }
              }
              else
              {
                // TEMPLATE.MOVD_mdrd_2::MOVDmd
                // MOVD MEM:w:s32=$mem32 REG:r:s32=$XMMr;
                return 1011 << 16 | 1705;
              }
              break;
            }
            case 0x01:
            {
              if (c & 0x80)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VMOVQ_mqrq::VMOVQmq
                  // VMOVQ MEM:w:s64=$mem64  REG:r:s64=$XMMr;
                  return 1539 << 16 | 2871;
                }
                else
                {
                  // TEMPLATE.VMOVD_mdrd::VMOVDmd
                  // VMOVD MEM:w:s32=$mem32  REG:r:s32=$XMMr;
                  return 1586 << 16 | 2961;
                }
              }
              else
              {
                // TEMPLATE.VMOVD_mdrd::VMOVDmd
                // VMOVD MEM:w:s32=$mem32  REG:r:s32=$XMMr;
                return 1586 << 16 | 2963;
              }
              break;
            }
            case 0x02:
            {
              if (d & 0x01)
              {
                if (c & 0x80)
                {
                  // TEMPLATE.VMOVQ_mqro::VMOVQmq
                  // VMOVQ MEM:w:u64=$mem64  VREG:r:u64=$XMMr;
                  return 1538 << 16 | 2869;
                }
                else
                {
                  // TEMPLATE.VMOVD_mdro::VMOVDmd
                  // VMOVD MEM:w:u32=$mem32  VREG:r:u32=$XMMr;
                  return 1587 << 16 | 2967;
                }
              }
              else
              {
                // TEMPLATE.VMOVD_mdro::VMOVDmd
                // VMOVD MEM:w:u32=$mem32  VREG:r:u32=$XMMr;
                return 1587 << 16 | 2965;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.MOVQ_mqrq_1::MOVQmq
              // MOVQ MEM:w:s64=$mem64 REG:r:s64=$MMXr;
              return 804 << 16 | 1346;
            }
            else
            {
              // TEMPLATE.MOVD_mdrd_1::MOVDmd
              // MOVD MEM:w:s32=$mem32 REG:r:s32=$MMXr;
              return 808 << 16 | 1354;
            }
          }
          else
          {
            // TEMPLATE.MOVD_mdrd_1::MOVDmd
            // MOVD MEM:w:s32=$mem32 REG:r:s32=$MMXr;
            return 808 << 16 | 1356;
          }
        }
      }
    }
  break;
  /* 0f.0x7f */
  case 383:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VMOVDQUx_myry::VMOVDQU16
            // VMOVDQU16 VREG:w:u16=$YMMm  PREG:r:Z=$Kk      VREG:r:u16=$YMMr;
            return 1488 << 16 | 2780;
          }
          else
          {
            // TEMPLATE.VMOVDQUx_myry::VMOVDQU8
            // VMOVDQU8  VREG:w:u8=$YMMm   PREG:r:Z=$Kk      VREG:r:u8=$YMMr;
            return 1488 << 16 | 2782;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VMOVDQUx_mzrz::VMOVDQU16
              // VMOVDQU16 VREG:w:u16=$ZMMm  PREG:r:Z=$Kk      VREG:r:u16=$ZMMr;
              return 1489 << 16 | 2784;
            }
            else
            {
              // TEMPLATE.VMOVDQUx_mzrz::VMOVDQU8
              // VMOVDQU8  VREG:w:u8=$ZMMm   PREG:r:Z=$Kk      VREG:r:u8=$ZMMr;
              return 1489 << 16 | 2786;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VMOVDQUx_moro::VMOVDQU16
              // VMOVDQU16 VREG:w:u16=$XMMm  PREG:r:Z=$Kk      VREG:r:u16=$XMMr;
              return 1487 << 16 | 2776;
            }
            else
            {
              // TEMPLATE.VMOVDQUx_moro::VMOVDQU8
              // VMOVDQU8  VREG:w:u8=$XMMm   PREG:r:Z=$Kk      VREG:r:u8=$XMMr;
              return 1487 << 16 | 2778;
            }
          }
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVDQU_moro::MOVDQU
              // MOVDQU VREG:w:s32=$XMMm  VREG:r:s32=$XMMr;
              return 977 << 16 | 1651;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VMOVDQU_mxrx::VMOVDQU
                // VMOVDQU   VREG:w:s32=$YMMm  VREG:r:s32=$YMMr;
                return 1485 << 16 | 2769;
              }
              else
              {
                // TEMPLATE.VMOVDQU_mxrx::VMOVDQU
                // VMOVDQU   VREG:w:s32=$XMMm  VREG:r:s32=$XMMr;
                return 1485 << 16 | 2768;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x01)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VMOVDQUxx_myry::VMOVDQU64
                  // VMOVDQU64 VREG:w:u64=$YMMm  PREG:r:Z=$Kk      VREG:r:u64=$YMMr;
                  return 1494 << 16 | 2806;
                }
                else
                {
                  // TEMPLATE.VMOVDQUxx_myry::VMOVDQU32
                  // VMOVDQU32 VREG:w:u32=$YMMm  PREG:r:Z=$Kk      VREG:r:u32=$YMMr;
                  return 1494 << 16 | 2804;
                }
              }
              else
              {
                if (b & 0x02)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQUxx_mzrz::VMOVDQU64
                    // VMOVDQU64 VREG:w:u64=$ZMMm  PREG:r:Z=$Kk      VREG:r:u64=$ZMMr;
                    return 1495 << 16 | 2810;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQUxx_mzrz::VMOVDQU32
                    // VMOVDQU32 VREG:w:u32=$ZMMm  PREG:r:Z=$Kk      VREG:r:u32=$ZMMr;
                    return 1495 << 16 | 2808;
                  }
                }
                else
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQUxx_moro::VMOVDQU64
                    // VMOVDQU64 VREG:w:u64=$XMMm  PREG:r:Z=$Kk      VREG:r:u64=$XMMr;
                    return 1493 << 16 | 2802;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQUxx_moro::VMOVDQU32
                    // VMOVDQU32 VREG:w:u32=$XMMm  PREG:r:Z=$Kk      VREG:r:u32=$XMMr;
                    return 1493 << 16 | 2800;
                  }
                }
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 3 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVDQA_moro::MOVDQA
                // MOVDQA VREG:w:s32=$XMMm  VREG:r:s32=$XMMr;
                return 975 << 16 | 1647;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVDQA_mxrx::VMOVDQA
                  // VMOVDQA   VREG:w:s32=$YMMm  VREG:r:s32=$YMMr;
                  return 1471 << 16 | 2737;
                }
                else
                {
                  // TEMPLATE.VMOVDQA_mxrx::VMOVDQA
                  // VMOVDQA   VREG:w:s32=$XMMm  VREG:r:s32=$XMMr;
                  return 1471 << 16 | 2736;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x01)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQAxx_myry_1::VMOVDQA64
                    // VMOVDQA64 VREG:w:u64=$YMMm  PREG:r:Z=$Kk      VREG:r:u64=$YMMr;
                    return 1475 << 16 | 2749;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQAxx_myry_1::VMOVDQA32
                    // VMOVDQA32 VREG:w:u32=$YMMm  PREG:r:Z=$Kk      VREG:r:u32=$YMMr;
                    return 1475 << 16 | 2748;
                  }
                }
                else
                {
                  if (b & 0x02)
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VMOVDQAxx_mzrz_1::VMOVDQA64
                      // VMOVDQA64 VREG:w:u64=$ZMMm  PREG:r:Z=$Kk      VREG:r:u64=$ZMMr;
                      return 1477 << 16 | 2753;
                    }
                    else
                    {
                      // TEMPLATE.VMOVDQAxx_mzrz_1::VMOVDQA32
                      // VMOVDQA32 VREG:w:u32=$ZMMm  PREG:r:Z=$Kk      VREG:r:u32=$ZMMr;
                      return 1477 << 16 | 2752;
                    }
                  }
                  else
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VMOVDQAxx_moro_1::VMOVDQA64
                      // VMOVDQA64 VREG:w:u64=$XMMm  PREG:r:Z=$Kk      VREG:r:u64=$XMMr;
                      return 1473 << 16 | 2745;
                    }
                    else
                    {
                      // TEMPLATE.VMOVDQAxx_moro_1::VMOVDQA32
                      // VMOVDQA32 VREG:w:u32=$XMMm  PREG:r:Z=$Kk      VREG:r:u32=$XMMr;
                      return 1473 << 16 | 2744;
                    }
                  }
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // TEMPLATE.MOVQ_mqrq_3::MOVQ
            // MOVQ REG:w:s64=$MMXm  REG:r:s64=$MMXr;
            return 805 << 16 | 1347;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VMOVDQUx_myry::VMOVDQU16my
            // VMOVDQU16 MEM:w:u16=$mem256 PREG:r:Z=$Kk      VREG:r:u16=$YMMr;
            return 1488 << 16 | 2781;
          }
          else
          {
            // TEMPLATE.VMOVDQUx_myry::VMOVDQU8my
            // VMOVDQU8  MEM:w:u8=$mem256  PREG:r:Z=$Kk      VREG:r:u8=$YMMr;
            return 1488 << 16 | 2783;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VMOVDQUx_mzrz::VMOVDQU16mz
              // VMOVDQU16 MEM:w:u16=$mem512 PREG:r:Z=$Kk      VREG:r:u16=$ZMMr;
              return 1489 << 16 | 2785;
            }
            else
            {
              // TEMPLATE.VMOVDQUx_mzrz::VMOVDQU8mz
              // VMOVDQU8  MEM:w:u8=$mem512  PREG:r:Z=$Kk      VREG:r:u8=$ZMMr;
              return 1489 << 16 | 2787;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VMOVDQUx_moro::VMOVDQU16mx
              // VMOVDQU16 MEM:w:u16=$mem128 PREG:r:Z=$Kk      VREG:r:u16=$XMMr;
              return 1487 << 16 | 2777;
            }
            else
            {
              // TEMPLATE.VMOVDQUx_moro::VMOVDQU8mx
              // VMOVDQU8  MEM:w:u8=$mem128  PREG:r:Z=$Kk      VREG:r:u8=$XMMr;
              return 1487 << 16 | 2779;
            }
          }
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVDQU_moro::MOVDQUmx
              // MOVDQU MEM:w:s32=$mem128 VREG:r:s32=$XMMr;
              return 977 << 16 | 1652;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VMOVDQU_mxrx::VMOVDQUmy
                // VMOVDQU   MEM:w:s32=$mem256 VREG:r:s32=$YMMr;
                return 1485 << 16 | 2771;
              }
              else
              {
                // TEMPLATE.VMOVDQU_mxrx::VMOVDQUmx
                // VMOVDQU   MEM:w:s32=$mem128 VREG:r:s32=$XMMr;
                return 1485 << 16 | 2770;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x01)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VMOVDQUxx_myry::VMOVDQU64my
                  // VMOVDQU64 MEM:w:u64=$mem256 PREG:r:Z=$Kk      VREG:r:u64=$YMMr;
                  return 1494 << 16 | 2807;
                }
                else
                {
                  // TEMPLATE.VMOVDQUxx_myry::VMOVDQU32my
                  // VMOVDQU32 MEM:w:u32=$mem256 PREG:r:Z=$Kk      VREG:r:u32=$YMMr;
                  return 1494 << 16 | 2805;
                }
              }
              else
              {
                if (b & 0x02)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQUxx_mzrz::VMOVDQU64mz
                    // VMOVDQU64 MEM:w:u64=$mem512 PREG:r:Z=$Kk      VREG:r:u64=$ZMMr;
                    return 1495 << 16 | 2811;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQUxx_mzrz::VMOVDQU32mz
                    // VMOVDQU32 MEM:w:u32=$mem512 PREG:r:Z=$Kk      VREG:r:u32=$ZMMr;
                    return 1495 << 16 | 2809;
                  }
                }
                else
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQUxx_moro::VMOVDQU64mx
                    // VMOVDQU64 MEM:w:u64=$mem128 PREG:r:Z=$Kk      VREG:r:u64=$XMMr;
                    return 1493 << 16 | 2803;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQUxx_moro::VMOVDQU32mx
                    // VMOVDQU32 MEM:w:u32=$mem128 PREG:r:Z=$Kk      VREG:r:u32=$XMMr;
                    return 1493 << 16 | 2801;
                  }
                }
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.MOVDQA_moro::MOVDQAmx
                // MOVDQA MEM:w:s32=$mem128 VREG:r:s32=$XMMr;
                return 975 << 16 | 1648;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VMOVDQA_mxrx::VMOVDQAmy
                  // VMOVDQA   MEM:w:s32=$mem256 VREG:r:s32=$YMMr;
                  return 1471 << 16 | 2739;
                }
                else
                {
                  // TEMPLATE.VMOVDQA_mxrx::VMOVDQAmx
                  // VMOVDQA   MEM:w:s32=$mem128 VREG:r:s32=$XMMr;
                  return 1471 << 16 | 2738;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x01)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VMOVDQAxx_myry_2::VMOVDQA64my
                    // VMOVDQA64 MEM:w:u64=$mem256 PREG:r:Z=$Kk      VREG:r:u64=$YMMr;
                    return 1476 << 16 | 2751;
                  }
                  else
                  {
                    // TEMPLATE.VMOVDQAxx_myry_2::VMOVDQA32my
                    // VMOVDQA32 MEM:w:u32=$mem256 PREG:r:Z=$Kk      VREG:r:u32=$YMMr;
                    return 1476 << 16 | 2750;
                  }
                }
                else
                {
                  if (b & 0x02)
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VMOVDQAxx_mzrz_2::VMOVDQA64mz
                      // VMOVDQA64 MEM:w:u64=$mem512 PREG:r:Z=$Kk      VREG:r:u64=$ZMMr;
                      return 1478 << 16 | 2755;
                    }
                    else
                    {
                      // TEMPLATE.VMOVDQAxx_mzrz_2::VMOVDQA32mz
                      // VMOVDQA32 MEM:w:u32=$mem512 PREG:r:Z=$Kk      VREG:r:u32=$ZMMr;
                      return 1478 << 16 | 2754;
                    }
                  }
                  else
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VMOVDQAxx_moro_2::VMOVDQA64mx
                      // VMOVDQA64 MEM:w:u64=$mem128 PREG:r:Z=$Kk      VREG:r:u64=$XMMr;
                      return 1474 << 16 | 2747;
                    }
                    else
                    {
                      // TEMPLATE.VMOVDQAxx_moro_2::VMOVDQA32mx
                      // VMOVDQA32 MEM:w:u32=$mem128 PREG:r:Z=$Kk      VREG:r:u32=$XMMr;
                      return 1474 << 16 | 2746;
                    }
                  }
                }
                break;
              }
              case 0x03:
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VMOVDQA64_mzrz::VMOVDQA64mz
                  // VMOVDQA64 MEM:w:s64=$mem512 PREG:r:Z=$Kk VREG:r:s64=$ZMMr SWZ=$d_i64 EVH=$EVH;
                  return 3394 << 16 | 7047;
                }
                else
                {
                  // TEMPLATE.VMOVDQA32_m0rz::VMOVDQA32m
                  // VMOVDQA32 MEM:w=$mem        PREG:r:Z=$Kk VREG:r:s32=$ZMMr SWZ=$d_i32 EVH=$EVH;
                  return 3392 << 16 | 7043;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // TEMPLATE.MOVQ_mqrq_3::MOVQmq
            // MOVQ MEM:w:s64=$mem64 REG:r:s64=$MMXr;
            return 805 << 16 | 1348;
          }
        }
      }
    }
  break;
  /* 0f.0x80 */
  case 384:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JO_sx::JO
        // JO    REL:sx=$relz   REG:SUPP:rw=RIP;
        return 215 << 16 | 389;
      }
      else
      {
        // TEMPLATE.JO_sx::JO
        // JO    REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 215 << 16 | 388;
      }
    }
    else
    {
      // TEMPLATE.JO_sz::JO
      // JO    REL:sx=$relz   REG:SUPP:rw=EIP;
      return 216 << 16 | 390;
    }
  break;
  /* 0f.0x81 */
  case 385:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JNO_sx::JNO
        // JNO   REL:sx=$relz   REG:SUPP:rw=RIP;
        return 203 << 16 | 369;
      }
      else
      {
        // TEMPLATE.JNO_sx::JNO
        // JNO   REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 203 << 16 | 368;
      }
    }
    else
    {
      // TEMPLATE.JNO_sz::JNO
      // JNO   REL:sx=$relz   REG:SUPP:rw=EIP;
      return 204 << 16 | 370;
    }
  break;
  /* 0f.0x82 */
  case 386:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JB_sx::JB
        // JB    REL:sx=$relz   REG:SUPP:rw=RIP;
        return 180 << 16 | 330;
      }
      else
      {
        // TEMPLATE.JB_sx::JB
        // JB    REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 180 << 16 | 329;
      }
    }
    else
    {
      // TEMPLATE.JB_sz::JB
      // JB    REL:sx=$relz   REG:SUPP:rw=EIP;
      return 181 << 16 | 331;
    }
  break;
  /* 0f.0x83 */
  case 387:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JNB_sx::JNB
        // JNB   REL:sx=$relz   REG:SUPP:rw=RIP;
        return 194 << 16 | 354;
      }
      else
      {
        // TEMPLATE.JNB_sx::JNB
        // JNB   REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 194 << 16 | 353;
      }
    }
    else
    {
      // TEMPLATE.JNB_sz::JNB
      // JNB   REL:sx=$relz   REG:SUPP:rw=EIP;
      return 195 << 16 | 355;
    }
  break;
  /* 0f.0x84 */
  case 388:
    // the following switch contains 3 case.
    switch (c & 0x81)
    {
      case 0x00:
      {
        // TEMPLATE.JZ_sz::JZ
        // JZ    REL:sx=$relz   REG:SUPP:rw=EIP;
        return 226 << 16 | 407;
        break;
      }
      case 0x80:
      {
        if (d & 0x02)
        {
          // TEMPLATE.JZ_sx::JZ
          // JZ    REL:sx=$relz   REG:SUPP:rw=RIP;
          return 225 << 16 | 406;
        }
        else
        {
          // TEMPLATE.JZ_sx::JZ
          // JZ    REL:s32=$rel32 REG:SUPP:rw=RIP;
          return 225 << 16 | 405;
        }
        break;
      }
      case 0x81:
      {
        // TEMPLATE.JKZD_sz::JKZD
        // JKZD REG:w=$Kn REL:sx=$relz;
        return 3272 << 16 | 6796;
        break;
      }
      default: break;
    }
  break;
  /* 0f.0x85 */
  case 389:
    // the following switch contains 3 case.
    switch (c & 0x81)
    {
      case 0x00:
      {
        // TEMPLATE.JNZ_sz::JNZ
        // JNZ   REL:sx=$relz   REG:SUPP:rw=EIP;
        return 213 << 16 | 385;
        break;
      }
      case 0x80:
      {
        if (d & 0x02)
        {
          // TEMPLATE.JNZ_sx::JNZ
          // JNZ   REL:sx=$relz   REG:SUPP:rw=RIP;
          return 212 << 16 | 384;
        }
        else
        {
          // TEMPLATE.JNZ_sx::JNZ
          // JNZ   REL:s32=$rel32 REG:SUPP:rw=RIP;
          return 212 << 16 | 383;
        }
        break;
      }
      case 0x81:
      {
        // TEMPLATE.JKNZD_sz::JKNZD
        // JKNZD REG:w=$Kn REL:sx=$relz;
        return 3270 << 16 | 6794;
        break;
      }
      default: break;
    }
  break;
  /* 0f.0x86 */
  case 390:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JBE_sx::JBE
        // JBE   REL:sx=$relz   REG:SUPP:rw=RIP;
        return 177 << 16 | 325;
      }
      else
      {
        // TEMPLATE.JBE_sx::JBE
        // JBE   REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 177 << 16 | 324;
      }
    }
    else
    {
      // TEMPLATE.JBE_sz::JBE
      // JBE   REL:sx=$relz   REG:SUPP:rw=EIP;
      return 178 << 16 | 326;
    }
  break;
  /* 0f.0x87 */
  case 391:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JNBE_sx::JNBE
        // JNBE  REL:sx=$relz   REG:SUPP:rw=RIP;
        return 191 << 16 | 349;
      }
      else
      {
        // TEMPLATE.JNBE_sx::JNBE
        // JNBE  REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 191 << 16 | 348;
      }
    }
    else
    {
      // TEMPLATE.JNBE_sz::JNBE
      // JNBE  REL:sx=$relz   REG:SUPP:rw=EIP;
      return 192 << 16 | 350;
    }
  break;
  /* 0f.0x88 */
  case 392:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JS_sx::JS
        // JS    REL:sx=$relz   REG:SUPP:rw=RIP;
        return 222 << 16 | 401;
      }
      else
      {
        // TEMPLATE.JS_sx::JS
        // JS    REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 222 << 16 | 400;
      }
    }
    else
    {
      // TEMPLATE.JS_sz::JS
      // JS    REL:sx=$relz   REG:SUPP:rw=EIP;
      return 223 << 16 | 402;
    }
  break;
  /* 0f.0x89 */
  case 393:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JNS_sx::JNS
        // JNS   REL:sx=$relz   REG:SUPP:rw=RIP;
        return 209 << 16 | 379;
      }
      else
      {
        // TEMPLATE.JNS_sx::JNS
        // JNS   REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 209 << 16 | 378;
      }
    }
    else
    {
      // TEMPLATE.JNS_sz::JNS
      // JNS   REL:sx=$relz   REG:SUPP:rw=EIP;
      return 210 << 16 | 380;
    }
  break;
  /* 0f.0x8a */
  case 394:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JP_sx::JP
        // JP    REL:sx=$relz   REG:SUPP:rw=RIP;
        return 218 << 16 | 394;
      }
      else
      {
        // TEMPLATE.JP_sx::JP
        // JP    REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 218 << 16 | 393;
      }
    }
    else
    {
      // TEMPLATE.JP_sz::JP
      // JP    REL:sx=$relz   REG:SUPP:rw=EIP;
      return 219 << 16 | 395;
    }
  break;
  /* 0f.0x8b */
  case 395:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JNP_sx::JNP
        // JNP   REL:sx=$relz   REG:SUPP:rw=RIP;
        return 206 << 16 | 374;
      }
      else
      {
        // TEMPLATE.JNP_sx::JNP
        // JNP   REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 206 << 16 | 373;
      }
    }
    else
    {
      // TEMPLATE.JNP_sz::JNP
      // JNP   REL:sx=$relz   REG:SUPP:rw=EIP;
      return 207 << 16 | 375;
    }
  break;
  /* 0f.0x8c */
  case 396:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JL_sx::JL
        // JL    REL:sx=$relz   REG:SUPP:rw=RIP;
        return 188 << 16 | 344;
      }
      else
      {
        // TEMPLATE.JL_sx::JL
        // JL    REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 188 << 16 | 343;
      }
    }
    else
    {
      // TEMPLATE.JL_sz::JL
      // JL    REL:sx=$relz   REG:SUPP:rw=EIP;
      return 189 << 16 | 345;
    }
  break;
  /* 0f.0x8d */
  case 397:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JNL_sx::JNL
        // JNL   REL:sx=$relz   REG:SUPP:rw=RIP;
        return 200 << 16 | 364;
      }
      else
      {
        // TEMPLATE.JNL_sx::JNL
        // JNL   REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 200 << 16 | 363;
      }
    }
    else
    {
      // TEMPLATE.JNL_sz::JNL
      // JNL   REL:sx=$relz   REG:SUPP:rw=EIP;
      return 201 << 16 | 365;
    }
  break;
  /* 0f.0x8e */
  case 398:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JLE_sx::JLE
        // JLE   REL:sx=$relz   REG:SUPP:rw=RIP;
        return 185 << 16 | 339;
      }
      else
      {
        // TEMPLATE.JLE_sx::JLE
        // JLE   REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 185 << 16 | 338;
      }
    }
    else
    {
      // TEMPLATE.JLE_sz::JLE
      // JLE   REL:sx=$relz   REG:SUPP:rw=EIP;
      return 186 << 16 | 340;
    }
  break;
  /* 0f.0x8f */
  case 399:
    if (c & 0x80)
    {
      if (d & 0x02)
      {
        // TEMPLATE.JNLE_sx::JNLE
        // JNLE  REL:sx=$relz   REG:SUPP:rw=RIP;
        return 197 << 16 | 359;
      }
      else
      {
        // TEMPLATE.JNLE_sx::JNLE
        // JNLE  REL:s32=$rel32 REG:SUPP:rw=RIP;
        return 197 << 16 | 358;
      }
    }
    else
    {
      // TEMPLATE.JNLE_sz::JNLE
      // JNLE  REL:sx=$relz   REG:SUPP:rw=EIP;
      return 198 << 16 | 360;
    }
  break;
  /* 0f.0x90 */
  case 400:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x40)
        {
          if (d & 0x01)
          {
            // TEMPLATE.KMOVx_mx_1::KMOVD
            // KMOVD REG:w=$Kr         REG:r:u32=$Km;
            return 1383 << 16 | 2565;
          }
          else
          {
            // TEMPLATE.KMOVB_mb_1::KMOVB
            // KMOVB REG:w=$Kr         REG:r:u8=$Km;
            return 1375 << 16 | 2551;
          }
        }
        else
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.KMOVx_mx_1::KMOVQ
              // KMOVQ REG:w=$Kr         REG:r:u64=$Km;
              return 1383 << 16 | 2567;
            }
            else
            {
              if (d & 0x04)
              {
                // TEMPLATE.KMOV_V::KMOV
                // KMOV REG:w=$Kr     REG:r=$Km;
                return 3281 << 16 | 6805;
              }
              else
              {
                // TEMPLATE.KMOVW_mw_1::KMOVW
                // KMOVW REG:w=$Kr         REG:r:u16=$Km;
                return 1380 << 16 | 2558;
              }
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.KMOVx_mx_1::KMOVQ
              // KMOVQ REG:w=$Kr         REG:r:u64=$Km;
              return 1383 << 16 | 2569;
            }
            else
            {
              // TEMPLATE.KMOVW_mw_1::KMOVW
              // KMOVW REG:w=$Kr         REG:r:u16=$Km;
              return 1380 << 16 | 2560;
            }
          }
        }
      }
      else
      {
        // TEMPLATE.SETO::SETO
        // SETO   REG:w=$GPR8m;
        return 459 << 16 | 812;
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (b & 0x40)
        {
          if (d & 0x01)
          {
            // TEMPLATE.KMOVx_mx_1::KMOVDmd
            // KMOVD REG:w=$Kr         MEM:r:u32=$mem32;
            return 1383 << 16 | 2566;
          }
          else
          {
            // TEMPLATE.KMOVB_mb_1::KMOVBmb
            // KMOVB REG:w=$Kr         MEM:r:u8=$mem8;
            return 1375 << 16 | 2552;
          }
        }
        else
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.KMOVx_mx_1::KMOVQmq
              // KMOVQ REG:w=$Kr         MEM:r:u64=$mem64;
              return 1383 << 16 | 2568;
            }
            else
            {
              // TEMPLATE.KMOVW_mw_1::KMOVWmw
              // KMOVW REG:w=$Kr         MEM:r:u16=$mem16;
              return 1380 << 16 | 2559;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.KMOVx_mx_1::KMOVQmq
              // KMOVQ REG:w=$Kr         MEM:r:u64=$mem64;
              return 1383 << 16 | 2570;
            }
            else
            {
              // TEMPLATE.KMOVW_mw_1::KMOVWmw
              // KMOVW REG:w=$Kr         MEM:r:u16=$mem16;
              return 1380 << 16 | 2561;
            }
          }
        }
      }
      else
      {
        // TEMPLATE.SETO::SETOmb
        // SETO   MEM:w:u8=$mem8;
        return 459 << 16 | 813;
      }
    }
  break;
  /* 0f.0x91 */
  case 401:
    if (a & 0x01)
    {
      // TEMPLATE.SETNO::SETNO
      // SETNO  REG:w=$GPR8m;
      return 455 << 16 | 804;
    }
    else
    {
      if (c & 0x01)
      {
        if (b & 0x40)
        {
          if (d & 0x01)
          {
            // TEMPLATE.KMOVx_mx_2::KMOVDmd
            // KMOVD MEM:w:u32=$mem32  REG:r=$Kr;
            return 1384 << 16 | 2571;
          }
          else
          {
            // TEMPLATE.KMOVB_mb_2::KMOVBmb
            // KMOVB MEM:w:u8=$mem8    REG:r=$Kr;
            return 1376 << 16 | 2553;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.KMOVx_mx_2::KMOVQmq
            // KMOVQ MEM:w:u64=$mem64  REG:r=$Kr;
            return 1384 << 16 | 2572;
          }
          else
          {
            // TEMPLATE.KMOVW_mw_2::KMOVWmw
            // KMOVW MEM:w:u16=$mem16  REG:r=$Kr;
            return 1381 << 16 | 2562;
          }
        }
      }
      else
      {
        // TEMPLATE.SETNO::SETNOmb
        // SETNO  MEM:w:u8=$mem8;
        return 455 << 16 | 805;
      }
    }
  break;
  /* 0f.0x92 */
  case 402:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // the following switch contains 3 case.
        switch (b & 0x50)
        {
          case 0x00:
          {
            if (c & 0x80)
            {
              if (d & 0x04)
              {
                // TEMPLATE.KMOV_mq::KMOV
                // KMOV REG:w=$Kr     REG:r=$GPR32m;
                return 3282 << 16 | 6806;
              }
              else
              {
                // TEMPLATE.KMOVW_md::KMOVW
                // KMOVW REG:w=$Kr         REG:r:u32=$GPR32m;
                return 1379 << 16 | 2556;
              }
            }
            else
            {
              // TEMPLATE.KMOVW_md::KMOVW
              // KMOVW REG:w=$Kr         REG:r:u32=$GPR32m;
              return 1379 << 16 | 2557;
            }
            break;
          }
          case 0x10:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.KMOVx_mx_3::KMOVQ
                // KMOVQ REG:w=$Kr         REG:r:u64=$GPR64m;
                return 1385 << 16 | 2575;
              }
              else
              {
                // TEMPLATE.KMOVx_mx_3::KMOVD
                // KMOVD REG:w=$Kr         REG:r:u32=$GPR32m;
                return 1385 << 16 | 2573;
              }
            }
            else
            {
              // TEMPLATE.KMOVx_mx_3::KMOVD
              // KMOVD REG:w=$Kr         REG:r:u32=$GPR32m;
              return 1385 << 16 | 2574;
            }
            break;
          }
          case 0x40:
          {
            // TEMPLATE.KMOVB_md::KMOVB
            // KMOVB REG:w=$Kr         REG:r:u32=$GPR32m;
            return 1377 << 16 | 2554;
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.SETB::SETB
        // SETB   REG:w=$GPR8m;
        return 447 << 16 | 788;
      }
    }
    else
    {
      // TEMPLATE.SETB::SETBmb
      // SETB   MEM:w:u8=$mem8;
      return 447 << 16 | 789;
    }
  break;
  /* 0f.0x93 */
  case 403:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // the following switch contains 3 case.
        switch (b & 0x50)
        {
          case 0x00:
          {
            if (c & 0x80)
            {
              if (d & 0x04)
              {
                // TEMPLATE.KMOV_rq::KMOV
                // KMOV REG:w=$GPR32r REG:r=$Km;
                return 3283 << 16 | 6807;
              }
              else
              {
                // TEMPLATE.KMOVW_rd::KMOVW
                // KMOVW REG:w:u32=$GPR32r REG:r=$Km;
                return 1382 << 16 | 2563;
              }
            }
            else
            {
              // TEMPLATE.KMOVW_rd::KMOVW
              // KMOVW REG:w:u32=$GPR32r REG:r=$Km;
              return 1382 << 16 | 2564;
            }
            break;
          }
          case 0x10:
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.KMOVx_rx::KMOVQ
                // KMOVQ REG:w:u64=$GPR64r REG:r=$Km;
                return 1386 << 16 | 2578;
              }
              else
              {
                // TEMPLATE.KMOVx_rx::KMOVD
                // KMOVD REG:w:u32=$GPR32r REG:r=$Km;
                return 1386 << 16 | 2576;
              }
            }
            else
            {
              // TEMPLATE.KMOVx_rx::KMOVD
              // KMOVD REG:w:u32=$GPR32r REG:r=$Km;
              return 1386 << 16 | 2577;
            }
            break;
          }
          case 0x40:
          {
            // TEMPLATE.KMOVB_rd::KMOVB
            // KMOVB REG:w:u32=$GPR32r REG:r=$Km;
            return 1378 << 16 | 2555;
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.SETNB::SETNB
        // SETNB  REG:w=$GPR8m;
        return 451 << 16 | 796;
      }
    }
    else
    {
      // TEMPLATE.SETNB::SETNBmb
      // SETNB  MEM:w:u8=$mem8;
      return 451 << 16 | 797;
    }
  break;
  /* 0f.0x94 */
  case 404:
    if (a & 0x01)
    {
      // TEMPLATE.SETZ::SETZ
      // SETZ   REG:w=$GPR8m;
      return 462 << 16 | 818;
    }
    else
    {
      // TEMPLATE.SETZ::SETZmb
      // SETZ   MEM:w:u8=$mem8;
      return 462 << 16 | 819;
    }
  break;
  /* 0f.0x95 */
  case 405:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // TEMPLATE.KCONCATH::KCONCATH
        // KCONCATH REG:w:s64=$GPR64r REG:r=$Kn REG:r=$Km;
        return 3276 << 16 | 6800;
      }
      else
      {
        // TEMPLATE.SETNZ::SETNZ
        // SETNZ  REG:w=$GPR8m;
        return 458 << 16 | 810;
      }
    }
    else
    {
      // TEMPLATE.SETNZ::SETNZmb
      // SETNZ  MEM:w:u8=$mem8;
      return 458 << 16 | 811;
    }
  break;
  /* 0f.0x96 */
  case 406:
    if (a & 0x01)
    {
      // TEMPLATE.SETBE::SETBE
      // SETBE  REG:w=$GPR8m;
      return 448 << 16 | 790;
    }
    else
    {
      // TEMPLATE.SETBE::SETBEmb
      // SETBE  MEM:w:u8=$mem8;
      return 448 << 16 | 791;
    }
  break;
  /* 0f.0x97 */
  case 407:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // TEMPLATE.KCONCATL::KCONCATL
        // KCONCATL REG:w:s64=$GPR64r REG:r=$Kn REG:r=$Km;
        return 3277 << 16 | 6801;
      }
      else
      {
        // TEMPLATE.SETNBE::SETNBE
        // SETNBE REG:w=$GPR8m;
        return 452 << 16 | 798;
      }
    }
    else
    {
      // TEMPLATE.SETNBE::SETNBEmb
      // SETNBE MEM:w:u8=$mem8;
      return 452 << 16 | 799;
    }
  break;
  /* 0f.0x98 */
  case 408:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x40)
        {
          if (d & 0x01)
          {
            // TEMPLATE.KORTESTx::KORTESTD
            // KORTESTD REG:r=$Kr REG:r=$Km;
            return 1392 << 16 | 2588;
          }
          else
          {
            // TEMPLATE.KORTESTB::KORTESTB
            // KORTESTB REG:r=$Kr REG:r=$Km;
            return 1390 << 16 | 2585;
          }
        }
        else
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.KORTESTx::KORTESTQ
              // KORTESTQ REG:r=$Kr REG:r=$Km;
              return 1392 << 16 | 2589;
            }
            else
            {
              if (d & 0x04)
              {
                // TEMPLATE.KORTEST::KORTEST
                // KORTEST REG:r=$Kr REG:r=$Km;
                return 3286 << 16 | 6810;
              }
              else
              {
                // TEMPLATE.KORTESTW::KORTESTW
                // KORTESTW REG:r=$Kr REG:r=$Km;
                return 1391 << 16 | 2586;
              }
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.KORTESTx::KORTESTQ
              // KORTESTQ REG:r=$Kr REG:r=$Km;
              return 1392 << 16 | 2590;
            }
            else
            {
              // TEMPLATE.KORTESTW::KORTESTW
              // KORTESTW REG:r=$Kr REG:r=$Km;
              return 1391 << 16 | 2587;
            }
          }
        }
      }
      else
      {
        // TEMPLATE.SETS::SETS
        // SETS   REG:w=$GPR8m;
        return 461 << 16 | 816;
      }
    }
    else
    {
      // TEMPLATE.SETS::SETSmb
      // SETS   MEM:w:u8=$mem8;
      return 461 << 16 | 817;
    }
  break;
  /* 0f.0x99 */
  case 409:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x40)
        {
          if (d & 0x01)
          {
            // TEMPLATE.KTESTx_V_2::KTESTD
            // KTESTD REG:r=$Kr REG:r=$Km;
            return 1403 << 16 | 2605;
          }
          else
          {
            // TEMPLATE.KTESTx_V_1::KTESTB
            // KTESTB REG:r=$Kr REG:r=$Km;
            return 1402 << 16 | 2603;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.KTESTx_V_2::KTESTQ
            // KTESTQ REG:r=$Kr REG:r=$Km;
            return 1403 << 16 | 2606;
          }
          else
          {
            // TEMPLATE.KTESTx_V_1::KTESTW
            // KTESTW REG:r=$Kr REG:r=$Km;
            return 1402 << 16 | 2604;
          }
        }
      }
      else
      {
        // TEMPLATE.SETNS::SETNS
        // SETNS  REG:w=$GPR8m;
        return 457 << 16 | 808;
      }
    }
    else
    {
      // TEMPLATE.SETNS::SETNSmb
      // SETNS  MEM:w:u8=$mem8;
      return 457 << 16 | 809;
    }
  break;
  /* 0f.0x9a */
  case 410:
    if (a & 0x01)
    {
      // TEMPLATE.SETP::SETP
      // SETP   REG:w=$GPR8m;
      return 460 << 16 | 814;
    }
    else
    {
      // TEMPLATE.SETP::SETPmb
      // SETP   MEM:w:u8=$mem8;
      return 460 << 16 | 815;
    }
  break;
  /* 0f.0x9b */
  case 411:
    if (a & 0x01)
    {
      // TEMPLATE.SETNP::SETNP
      // SETNP  REG:w=$GPR8m;
      return 456 << 16 | 806;
    }
    else
    {
      // TEMPLATE.SETNP::SETNPmb
      // SETNP  MEM:w:u8=$mem8;
      return 456 << 16 | 807;
    }
  break;
  /* 0f.0x9c */
  case 412:
    if (a & 0x01)
    {
      // TEMPLATE.SETL::SETL
      // SETL   REG:w=$GPR8m;
      return 449 << 16 | 792;
    }
    else
    {
      // TEMPLATE.SETL::SETLmb
      // SETL   MEM:w:u8=$mem8;
      return 449 << 16 | 793;
    }
  break;
  /* 0f.0x9d */
  case 413:
    if (a & 0x01)
    {
      // TEMPLATE.SETNL::SETNL
      // SETNL  REG:w=$GPR8m;
      return 453 << 16 | 800;
    }
    else
    {
      // TEMPLATE.SETNL::SETNLmb
      // SETNL  MEM:w:u8=$mem8;
      return 453 << 16 | 801;
    }
  break;
  /* 0f.0x9e */
  case 414:
    if (a & 0x01)
    {
      // TEMPLATE.SETLE::SETLE
      // SETLE  REG:w=$GPR8m;
      return 450 << 16 | 794;
    }
    else
    {
      // TEMPLATE.SETLE::SETLEmb
      // SETLE  MEM:w:u8=$mem8;
      return 450 << 16 | 795;
    }
  break;
  /* 0f.0x9f */
  case 415:
    if (a & 0x01)
    {
      // TEMPLATE.SETNLE::SETNLE
      // SETNLE REG:w=$GPR8m;
      return 454 << 16 | 802;
    }
    else
    {
      // TEMPLATE.SETNLE::SETNLEmb
      // SETNLE MEM:w:u8=$mem8;
      return 454 << 16 | 803;
    }
  break;
  /* 0f.0xa0 */
  case 416:
    // TEMPLATE.PUSH_w_5::PUSHm
    // PUSH REG:r=FS       REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 387 << 16 | 685;
  break;
  /* 0f.0xa1 */
  case 417:
    // TEMPLATE.POP_w_4::POPm
    // POP REG:w=FS       REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 365 << 16 | 660;
  break;
  /* 0f.0xa2 */
  case 418:
    // TEMPLATE.CPUID::CPUID
    // CPUID REG:SUPP:rw=EAX REG:SUPP:w=EBX REG:SUPP:crw=ECX REG:SUPP:w=EDX;
    return 118 << 16 | 234;
  break;
  /* 0f.0xa3 */
  case 419:
    if (a & 0x01)
    {
      // TEMPLATE.BT_mvrv::BT
      // BT REG:r=$GPRvm   REG:r=$GPRvr;
      return 59 << 16 | 128;
    }
    else
    {
      // TEMPLATE.BT_mvrv::BTm
      // BT MEM:r:sx=$memv REG:r=$GPRvr;
      return 59 << 16 | 129;
    }
  break;
  /* 0f.0xa4 */
  case 420:
    if (a & 0x01)
    {
      // TEMPLATE.SHLD_mvrvub::SHLD
      // SHLD REG:rcw=$GPRvm   REG:r=$GPRvr SHIFT:r:u8=$shl;
      return 505 << 16 | 904;
    }
    else
    {
      // TEMPLATE.SHLD_mvrvub::SHLDm
      // SHLD MEM:rcw:sx=$memv REG:r=$GPRvr SHIFT:r:u8=$shl;
      return 505 << 16 | 905;
    }
  break;
  /* 0f.0xa5 */
  case 421:
    if (a & 0x01)
    {
      // TEMPLATE.SHLD_mvrvb::SHLD
      // SHLD REG:rcw=$GPRvm   REG:r=$GPRvr REG:r=CL;
      return 504 << 16 | 902;
    }
    else
    {
      // TEMPLATE.SHLD_mvrvb::SHLDm
      // SHLD MEM:rcw:sx=$memv REG:r=$GPRvr REG:r=CL;
      return 504 << 16 | 903;
    }
  break;
  /* 0f.0xa6 */
  case 422:
    // the following switch contains 3 case.
    switch (a & 0x16)
    {
      case 0x00:
      {
        // TEMPLATE.MONTMUL::MONTMULm
        // MONTMUL REG:SUPP:rw=$AXa REG:SUPP:rw=$CXa REG:SUPP:w=EDX REG:SUPP:r=$SIa MEM:SUPP:r={SEG:r=ES BASE:r=$SIa SZ=SZ_V};
        return 3254 << 16 | 6775;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.XSHA1::XSHA1m
        // XSHA1 REG:SUPP:rcw=$AXa REG:SUPP:r=$CXa REG:SUPP:rcw=$SIa REG:SUPP:cr=$DIa MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$SIa SZ=SZ_V} MEM:SUPP:cw:sx={SEG:r=ES BASE:r=$DIa SZ=SZ_V};
        return 3260 << 16 | 6781;
        break;
      }
      case 0x14:
      {
        // TEMPLATE.XSHA256::XSHA256m
        // XSHA256 REG:SUPP:rcw=$AXa REG:SUPP:r=$CXa REG:SUPP:rcw=$SIa REG:SUPP:cr=$DIa MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$SIa SZ=SZ_V} MEM:SUPP:cw:sx={SEG:r=ES BASE:r=$DIa SZ=SZ_V};
        return 3261 << 16 | 6782;
        break;
      }
      default: break;
    }
  break;
  /* 0f.0xa7 */
  case 423:
    if (a & 0x02)
    {
      // the following switch contains 3 case.
      switch (a & 0x0c)
      {
        case 0x00:
        {
          // TEMPLATE.XCRYPT_ECB::XCRYPT_ECBm
          // XCRYPT_ECB REG:SUPP:rcw=$CXa REG:SUPP:rcw=$SIa REG:SUPP:rcw=$DIa MEM:SUPP:cr={SEG:r=ES BASE:r=$DXa SZ=SZ_V} MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$BXa SZ=SZ_V} MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$SIa SZ=SZ_V} MEM:SUPP:cw:sx={SEG:r=ES BASE:r=$DIa SZ=SZ_V};
          return 3258 << 16 | 6779;
          break;
        }
        case 0x04:
        {
          // TEMPLATE.XCRYPT_CTR::XCRYPT_CTRm
          // XCRYPT_CTR REG:SUPP:rcw=$AXa REG:SUPP:rcw=$CXa REG:SUPP:rcw=$SIa REG:SUPP:rcw=$DIa MEM:SUPP:rcw:sx={SEG:r=ES BASE:r=$AXa SZ=SZ_V} MEM:SUPP:cr={SEG:r=ES BASE:r=$DXa SZ=SZ_V} MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$BXa SZ=SZ_V} MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$SIa SZ=SZ_V} MEM:SUPP:cw:sx={SEG:r=ES BASE:r=$DIa SZ=SZ_V};
          return 3257 << 16 | 6778;
          break;
        }
        case 0x08:
        {
          // TEMPLATE.XCRYPT_OFB::XCRYPT_OFBm
          // XCRYPT_OFB REG:SUPP:rcw=$AXa REG:SUPP:rcw=$CXa REG:SUPP:rcw=$SIa REG:SUPP:rcw=$DIa MEM:SUPP:rcw:sx={SEG:r=ES BASE:r=$AXa SZ=SZ_V} MEM:SUPP:cr={SEG:r=ES BASE:r=$DXa SZ=SZ_V} MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$BXa SZ=SZ_V} MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$SIa SZ=SZ_V} MEM:SUPP:cw:sx={SEG:r=ES BASE:r=$DIa SZ=SZ_V};
          return 3259 << 16 | 6780;
          break;
        }
        default: break;
      }
    }
    else
    {
      if (a & 0x04)
      {
        // TEMPLATE.XCRYPT_CBC::XCRYPT_CBCm
        // XCRYPT_CBC REG:SUPP:rcw=$AXa REG:SUPP:rcw=$CXa REG:SUPP:rcw=$SIa MEM:SUPP:rcw:sx={SEG:r=ES BASE:r=$AXa SZ=SZ_V} MEM:SUPP:cr={SEG:r=ES BASE:r=$DXa SZ=SZ_V} MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$BXa SZ=SZ_V} MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$SIa SZ=SZ_V} MEM:SUPP:cw:sx={SEG:r=ES BASE:r=$DIa SZ=SZ_V};
        return 3255 << 16 | 6776;
      }
      else
      {
        if (a & 0x08)
        {
          // TEMPLATE.XCRYPT_CFB::XCRYPT_CFBm
          // XCRYPT_CFB REG:SUPP:rcw=$AXa REG:SUPP:rcw=$CXa REG:SUPP:rcw=$SIa MEM:SUPP:rcw:sx={SEG:r=ES BASE:r=$AXa SZ=SZ_V} MEM:SUPP:cr={SEG:r=ES BASE:r=$DXa SZ=SZ_V} MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$BXa SZ=SZ_V} MEM:SUPP:cr:sx={SEG:r=ES BASE:r=$SIa SZ=SZ_V} MEM:SUPP:cw:sx={SEG:r=ES BASE:r=$DIa SZ=SZ_V};
          return 3256 << 16 | 6777;
        }
        else
        {
          if (b & 0x20)
          {
            // TEMPLATE.XSTORE::XSTOREmb
            // XSTORE REG:SUPP:cw=EAX REG:SUPP:rcw=$CXa REG:SUPP:rcw=EDX REG:SUPP:rcw=$DIa                         MEM:SUPP:cw:s8={SEG:r=ES BASE:r=$DIa SZ=8};
            return 3262 << 16 | 6784;
          }
          else
          {
            // TEMPLATE.XSTORE::XSTOREmb
            // XSTORE REG:SUPP:w=EAX  REG:SUPP:r=EDX    REG:SUPP:rw=$DIa MEM:SUPP:w:s8={SEG:r=ES BASE:r=$DIa SZ=8};
            return 3262 << 16 | 6783;
          }
        }
      }
    }
  break;
  /* 0f.0xa8 */
  case 424:
    // TEMPLATE.PUSH_w_6::PUSHm
    // PUSH REG:r=GS       REG:SUPP:rw=$SPa MEM:SUPP:w:sx={BASE:r=$SPa SZ=SZ_V};
    return 388 << 16 | 686;
  break;
  /* 0f.0xa9 */
  case 425:
    // TEMPLATE.POP_w_5::POPm
    // POP REG:w=GS       REG:SUPP:rw=$SPa MEM:SUPP:r:sx={BASE:r=$SPa SZ=SZ_V};
    return 366 << 16 | 661;
  break;
  /* 0f.0xaa */
  case 426:
    // TEMPLATE.RSM::RSM
    // RSM REG:SUPP:w=$IPa;
    return 426 << 16 | 755;
  break;
  /* 0f.0xab */
  case 427:
    if (a & 0x01)
    {
      // TEMPLATE.BTS_mvrv::BTS
      // BTS REG:rw=$GPRvm   REG:r=$GPRvr;
      return 65 << 16 | 140;
    }
    else
    {
      // TEMPLATE.BTS_mvrv::BTSm
      // BTS MEM:rw:sx=$memv REG:r=$GPRvr;
      return 65 << 16 | 141;
    }
  break;
  /* 0f.0xac */
  case 428:
    if (a & 0x01)
    {
      // TEMPLATE.SHRD_mvrvub::SHRD
      // SHRD REG:rcw=$GPRvm   REG:r=$GPRvr SHIFT:r:u8=$shr;
      return 507 << 16 | 908;
    }
    else
    {
      // TEMPLATE.SHRD_mvrvub::SHRDm
      // SHRD MEM:rcw:sx=$memv REG:r=$GPRvr SHIFT:r:u8=$shr;
      return 507 << 16 | 909;
    }
  break;
  /* 0f.0xad */
  case 429:
    if (a & 0x01)
    {
      // TEMPLATE.SHRD_mvrvb::SHRD
      // SHRD REG:rcw=$GPRvm   REG:r=$GPRvr REG:r=CL;
      return 506 << 16 | 906;
    }
    else
    {
      // TEMPLATE.SHRD_mvrvb::SHRDm
      // SHRD MEM:rcw:sx=$memv REG:r=$GPRvr REG:r=CL;
      return 506 << 16 | 907;
    }
  break;
  /* 0f.0xae */
  case 430:
    if (a & 0x01)
    {
      if (a & 0x02)
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            // TEMPLATE.SFENCE::SFENCE
            // SFENCE;
            return 1189 << 16 | 2036;
          }
          else
          {
            // TEMPLATE.WRGSBASE::WRGSBASE
            // WRGSBASE REG:r=$GPRym;
            return 758 << 16 | 1272;
          }
        }
        else
        {
          if (a & 0x08)
          {
            if (b & 0x20)
            {
              if (d & 0x01)
              {
                // TEMPLATE.INCSSPx::INCSSPQ
                // INCSSPQ REG:r:u8=$GPR64m;
                return 721 << 16 | 1217;
              }
              else
              {
                // TEMPLATE.INCSSPx::INCSSPD
                // INCSSPD REG:r:u8=$GPR32m;
                return 721 << 16 | 1216;
              }
            }
            else
            {
              // TEMPLATE.LFENCE::LFENCE
              // LFENCE;
              return 958 << 16 | 1617;
            }
          }
          else
          {
            // TEMPLATE.RDGSBASE::RDGSBASE
            // RDGSBASE REG:w=$GPRym;
            return 735 << 16 | 1239;
          }
        }
      }
      else
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            if (b & 0x10)
            {
              if (c & 0x01)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.SPFLT::SPFLT
                  // SPFLT REG:r:s64=$GPR64m;
                  return 3292 << 16 | 6819;
                }
                else
                {
                  // TEMPLATE.SPFLT::SPFLT
                  // SPFLT REG:r:s32=$GPR32m;
                  return 3292 << 16 | 6818;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.UMWAIT::UMWAIT
                  // UMWAIT REG:r:u64=$GPR64m REG:SUPP:r:u32=EDX REG:SUPP:r:u32=EAX;
                  return 742 << 16 | 1248;
                }
                else
                {
                  // TEMPLATE.UMWAIT::UMWAIT
                  // UMWAIT REG:r:u32=$GPR32m REG:SUPP:r:u32=EDX REG:SUPP:r:u32=EAX;
                  return 742 << 16 | 1247;
                }
              }
            }
            else
            {
              if (b & 0x20)
              {
                if (c & 0x01)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.DELAY::DELAY
                    // DELAY REG:r:s64=$GPR64m;
                    return 3268 << 16 | 6792;
                  }
                  else
                  {
                    // TEMPLATE.DELAY::DELAY
                    // DELAY REG:r:s32=$GPR32m;
                    return 3268 << 16 | 6791;
                  }
                }
                else
                {
                  // TEMPLATE.UMONITOR::UMONITOR
                  // UMONITOR REG:r=$GPRam;
                  return 741 << 16 | 1246;
                }
              }
              else
              {
                if (b & 0x40)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.TPAUSE::TPAUSE
                    // TPAUSE REG:r:u64=$GPR64m REG:SUPP:r:u32=EDX REG:SUPP:r:u32=EAX;
                    return 740 << 16 | 1245;
                  }
                  else
                  {
                    // TEMPLATE.TPAUSE::TPAUSE
                    // TPAUSE REG:r:u32=$GPR32m REG:SUPP:r:u32=EDX REG:SUPP:r:u32=EAX;
                    return 740 << 16 | 1244;
                  }
                }
                else
                {
                  // TEMPLATE.MFENCE::MFENCE
                  // MFENCE;
                  return 964 << 16 | 1627;
                }
              }
            }
          }
          else
          {
            // TEMPLATE.WRFSBASE::WRFSBASE
            // WRFSBASE REG:r=$GPRym;
            return 757 << 16 | 1271;
          }
        }
        else
        {
          if (a & 0x08)
          {
            // TEMPLATE.PTWRITE::PTWRITE
            // PTWRITE REG:r=$GPRym;
            return 727 << 16 | 1228;
          }
          else
          {
            // TEMPLATE.RDFSBASE::RDFSBASE
            // RDFSBASE REG:w=$GPRym;
            return 734 << 16 | 1238;
          }
        }
      }
    }
    else
    {
      if (a & 0x02)
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            if (b & 0x10)
            {
              if (b & 0x02)
              {
                // TEMPLATE.CLEVICT0_mb_2::CLEVICT0mb
                // CLEVICT0 MEM:r:s64=$mem8 SWZ=$n_i32 EVH=$EVH;
                return 3265 << 16 | 6788;
              }
              else
              {
                // TEMPLATE.CLEVICT0_mb_1::CLEVICT0mb
                // CLEVICT0 MEM:r:s64=$mem8;
                return 3264 << 16 | 6787;
              }
            }
            else
            {
              if (b & 0x20)
              {
                if (b & 0x02)
                {
                  // TEMPLATE.CLEVICT1_mb_2::CLEVICT1mb
                  // CLEVICT1 MEM:r:s64=$mem8 SWZ=$n_i32 EVH=$EVH;
                  return 3267 << 16 | 6790;
                }
                else
                {
                  // TEMPLATE.CLEVICT1_mb_1::CLEVICT1mb
                  // CLEVICT1 MEM:r:s64=$mem8;
                  return 3266 << 16 | 6789;
                }
              }
              else
              {
                if (b & 0x40)
                {
                  // TEMPLATE.CLFLUSHOPT::CLFLUSHOPTmz
                  // CLFLUSHOPT MEM:r:s64=$mem512;
                  return 710 << 16 | 1202;
                }
                else
                {
                  // TEMPLATE.CLFLUSH::CLFLUSHmz
                  // CLFLUSH MEM:r:s64=$mem512;
                  return 709 << 16 | 1201;
                }
              }
            }
          }
          else
          {
            if (c & 0x01)
            {
              // TEMPLATE.VSTMXCSR::VSTMXCSRmd
              // VSTMXCSR MEM:w:s32=$mem32 REG:SUPP:r=MXCSR;
              return 2192 << 16 | 4254;
            }
            else
            {
              // TEMPLATE.STMXCSR::STMXCSRmd
              // STMXCSR MEM:w:s32=$mem32 REG:SUPP:r=MXCSR;
              return 1196 << 16 | 2049;
            }
          }
        }
        else
        {
          if (a & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.XRSTOR::XRSTOR64m
              // XRSTOR64 MEM:r=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
              return 763 << 16 | 1278;
            }
            else
            {
              // TEMPLATE.XRSTOR::XRSTORm
              // XRSTOR   MEM:r=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
              return 763 << 16 | 1277;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.FXRSTOR64::FXRSTOR64m
              // FXRSTOR64 MEM:r=$mem4096;
              return 948 << 16 | 1602;
            }
            else
            {
              // TEMPLATE.FXRSTOR::FXRSTORm
              // FXRSTOR   MEM:r=$mem4096;
              return 947 << 16 | 1601;
            }
          }
        }
      }
      else
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            // the following switch contains 3 case.
            switch (b & 0x60)
            {
              case 0x00:
              {
                if (d & 0x01)
                {
                  // TEMPLATE.XSAVEOPT::XSAVEOPT64m
                  // XSAVEOPT64 MEM:rw=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
                  return 767 << 16 | 1286;
                }
                else
                {
                  // TEMPLATE.XSAVEOPT::XSAVEOPTm
                  // XSAVEOPT   MEM:rw=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
                  return 767 << 16 | 1285;
                }
                break;
              }
              case 0x20:
              {
                // TEMPLATE.CLRSSBSY::CLRSSBSYmq
                // CLRSSBSY MEM:rw:u64=$mem64;
                return 711 << 16 | 1203;
                break;
              }
              case 0x40:
              {
                // TEMPLATE.CLWB::CLWBmz
                // CLWB MEM:r:s64=$mem512;
                return 712 << 16 | 1204;
                break;
              }
              default: break;
            }
          }
          else
          {
            if (c & 0x01)
            {
              // TEMPLATE.VLDMXCSR::VLDMXCSRmd
              // VLDMXCSR MEM:r:s32=$mem32 REG:SUPP:w=MXCSR;
              return 1413 << 16 | 2620;
            }
            else
            {
              // TEMPLATE.LDMXCSR::LDMXCSRmd
              // LDMXCSR MEM:r:s32=$mem32 REG:SUPP:w=MXCSR;
              return 957 << 16 | 1616;
            }
          }
        }
        else
        {
          if (a & 0x08)
          {
            if (b & 0x20)
            {
              // TEMPLATE.PTWRITE::PTWRITEm
              // PTWRITE MEM:r:sx=$memy;
              return 727 << 16 | 1229;
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.XSAVE::XSAVE64m
                // XSAVE64 MEM:rw=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
                return 765 << 16 | 1282;
              }
              else
              {
                // TEMPLATE.XSAVE::XSAVEm
                // XSAVE   MEM:rw=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
                return 765 << 16 | 1281;
              }
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.FXSAVE64::FXSAVE64m
              // FXSAVE64 MEM:w=$mem4096;
              return 950 << 16 | 1604;
            }
            else
            {
              // TEMPLATE.FXSAVE::FXSAVEm
              // FXSAVE   MEM:w=$mem4096;
              return 949 << 16 | 1603;
            }
          }
        }
      }
    }
  break;
  /* 0f.0xaf */
  case 431:
    if (a & 0x01)
    {
      // TEMPLATE.IMUL_rvmv::IMUL
      // IMUL REG:rw=$GPRvr  REG:r=$GPRvm;
      return 142 << 16 | 266;
    }
    else
    {
      // TEMPLATE.IMUL_rvmv::IMULm
      // IMUL REG:rw=$GPRvr  MEM:r:sx=$memv;
      return 142 << 16 | 267;
    }
  break;
  /* 0f.0xb0 */
  case 432:
    if (a & 0x01)
    {
      // TEMPLATE.CMPXCHG_mbrb::CMPXCHG
      // CMPXCHG REG:rcw=$GPR8m   REG:r=$GPR8r REG:SUPP:rcw=AL;
      return 114 << 16 | 227;
    }
    else
    {
      // TEMPLATE.CMPXCHG_mbrb::CMPXCHGmb
      // CMPXCHG MEM:rcw:u8=$mem8 REG:r=$GPR8r REG:SUPP:rcw=AL;
      return 114 << 16 | 228;
    }
  break;
  /* 0f.0xb1 */
  case 433:
    if (a & 0x01)
    {
      // TEMPLATE.CMPXCHG_mvrv::CMPXCHG
      // CMPXCHG REG:rcw=$GPRvm   REG:r=$GPRvr REG:SUPP:rcw=$AXv;
      return 115 << 16 | 229;
    }
    else
    {
      // TEMPLATE.CMPXCHG_mvrv::CMPXCHGm
      // CMPXCHG MEM:rcw:sx=$memv REG:r=$GPRvr REG:SUPP:rcw=$AXv;
      return 115 << 16 | 230;
    }
  break;
  /* 0f.0xb2 */
  case 434:
    // TEMPLATE.LSS::LSSm
    // LSS REG:w=$GPRvr MEM:r=$memdpr REG:SUPP:w=SS;
    return 249 << 16 | 446;
  break;
  /* 0f.0xb3 */
  case 435:
    if (a & 0x01)
    {
      // TEMPLATE.BTR_mvrv::BTR
      // BTR REG:rw=$GPRvm   REG:r=$GPRvr;
      return 63 << 16 | 136;
    }
    else
    {
      // TEMPLATE.BTR_mvrv::BTRm
      // BTR MEM:rw:sx=$memv REG:r=$GPRvr;
      return 63 << 16 | 137;
    }
  break;
  /* 0f.0xb4 */
  case 436:
    // TEMPLATE.LFS::LFSm
    // LFS REG:w=$GPRvr MEM:r=$memdpr REG:SUPP:w=FS;
    return 247 << 16 | 444;
  break;
  /* 0f.0xb5 */
  case 437:
    // TEMPLATE.LGS::LGSm
    // LGS REG:w=$GPRvr MEM:r=$memdpr REG:SUPP:w=GS;
    return 248 << 16 | 445;
  break;
  /* 0f.0xb6 */
  case 438:
    if (a & 0x01)
    {
      // TEMPLATE.MOVZX_rvmb::MOVZX
      // MOVZX REG:w=$GPRvr REG:r=$GPR8m;
      return 289 << 16 | 507;
    }
    else
    {
      // TEMPLATE.MOVZX_rvmb::MOVZXmb
      // MOVZX REG:w=$GPRvr MEM:r:u8=$mem8;
      return 289 << 16 | 508;
    }
  break;
  /* 0f.0xb7 */
  case 439:
    if (a & 0x01)
    {
      // TEMPLATE.MOVZX_rvmw::MOVZX
      // MOVZX REG:w=$GPRvr REG:r=$GPR16m;
      return 290 << 16 | 509;
    }
    else
    {
      // TEMPLATE.MOVZX_rvmw::MOVZXmw
      // MOVZX REG:w=$GPRvr MEM:r:s16=$mem16;
      return 290 << 16 | 510;
    }
  break;
  /* 0f.0xb8 */
  case 440:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.POPCNT_rxmx::POPCNT
          // POPCNT REG:w:s64=$GPR64r REG:r:s64=$GPR64m;
          return 3290 << 16 | 6816;
        }
        else
        {
          // TEMPLATE.POPCNT_rxmx::POPCNT
          // POPCNT REG:w:s32=$GPR32r REG:r:s32=$GPR32m;
          return 3290 << 16 | 6815;
        }
      }
      else
      {
        // TEMPLATE.POPCNT_rvmv::POPCNT
        // POPCNT REG:w:sx=$GPRvr REG:r:sx=$GPRvm;
        return 1118 << 16 | 1924;
      }
    }
    else
    {
      // TEMPLATE.POPCNT_rvmv::POPCNTm
      // POPCNT REG:w:sx=$GPRvr MEM:r:sx=$memv;
      return 1118 << 16 | 1925;
    }
  break;
  /* 0f.0xb9 */
  case 441:
    if (a & 0x01)
    {
      // TEMPLATE.UD1::UD1
      // UD1 REG:r=$GPR32r REG:r=$GPR32m;
      return 544 << 16 | 977;
    }
    else
    {
      // TEMPLATE.UD1::UD1md
      // UD1 REG:r=$GPR32r MEM:r:s32=$mem32;
      return 544 << 16 | 978;
    }
  break;
  /* 0f.0xba */
  case 442:
    // the following switch contains 8 case.
    switch (a & 0x07)
    {
      case 0x00:
      {
        // TEMPLATE.BT_mvub::BTmib
        // BT MEM:r:sx=$memv IMM:u8=$uimm8;
        return 60 << 16 | 131;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.BT_mvub::BTib
        // BT REG:r=$GPRvm   IMM:u8=$uimm8;
        return 60 << 16 | 130;
        break;
      }
      case 0x02:
      {
        // TEMPLATE.BTS_mvub::BTSmib
        // BTS MEM:rw:sx=$memv IMM:u8=$uimm8;
        return 66 << 16 | 143;
        break;
      }
      case 0x03:
      {
        // TEMPLATE.BTS_mvub::BTSib
        // BTS REG:rw=$GPRvm   IMM:u8=$uimm8;
        return 66 << 16 | 142;
        break;
      }
      case 0x04:
      {
        // TEMPLATE.BTR_mvub::BTRmib
        // BTR MEM:rw:sx=$memv IMM:u8=$uimm8;
        return 64 << 16 | 139;
        break;
      }
      case 0x05:
      {
        // TEMPLATE.BTR_mvub::BTRib
        // BTR REG:rw=$GPRvm   IMM:u8=$uimm8;
        return 64 << 16 | 138;
        break;
      }
      case 0x06:
      {
        // TEMPLATE.BTC_mvub::BTCmib
        // BTC MEM:rw:sx=$memv IMM:u8=$uimm8;
        return 62 << 16 | 135;
        break;
      }
      case 0x07:
      {
        // TEMPLATE.BTC_mvub::BTCib
        // BTC REG:rw=$GPRvm   IMM:u8=$uimm8;
        return 62 << 16 | 134;
        break;
      }
      default: break;
    }
  break;
  /* 0f.0xbb */
  case 443:
    if (a & 0x01)
    {
      // TEMPLATE.BTC_mvrv::BTC
      // BTC REG:rw=$GPRvm   REG:r=$GPRvr;
      return 61 << 16 | 132;
    }
    else
    {
      // TEMPLATE.BTC_mvrv::BTCm
      // BTC MEM:rw:sx=$memv REG:r=$GPRvr;
      return 61 << 16 | 133;
    }
  break;
  /* 0f.0xbc */
  case 444:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x10)
        {
          if (d & 0x01)
          {
            // TEMPLATE.TZCNTI::TZCNTI
            // TZCNTI REG:rw:s64=$GPR64r REG:r:s64=$GPR64m;
            return 3294 << 16 | 6823;
          }
          else
          {
            // TEMPLATE.TZCNTI::TZCNTI
            // TZCNTI REG:rw:s32=$GPR32r REG:r:s32=$GPR32m;
            return 3294 << 16 | 6822;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.TZCNT_rxmx::TZCNT
            // TZCNT REG:w:s64=$GPR64r REG:r:s64=$GPR64m;
            return 3293 << 16 | 6821;
          }
          else
          {
            // TEMPLATE.TZCNT_rxmx::TZCNT
            // TZCNT REG:w:s32=$GPR32r REG:r:s32=$GPR32m;
            return 3293 << 16 | 6820;
          }
        }
      }
      else
      {
        if (d & 0x10)
        {
          if (b & 0x20)
          {
            // TEMPLATE.TZCNT_rvmv::TZCNT
            // TZCNT REG:w=$GPRvr REG:r=$GPRvm;
            return 542 << 16 | 973;
          }
          else
          {
            // TEMPLATE.BSF::BSF
            // BSF REG:cw=$GPRvr REG:r=$GPRvm;
            return 49 << 16 | 114;
          }
        }
        else
        {
          // TEMPLATE.BSF::BSF
          // BSF REG:cw=$GPRvr REG:r=$GPRvm;
          return 49 << 16 | 112;
        }
      }
    }
    else
    {
      if (d & 0x10)
      {
        if (b & 0x20)
        {
          // TEMPLATE.TZCNT_rvmv::TZCNTm
          // TZCNT REG:w=$GPRvr MEM:r:sx=$memv;
          return 542 << 16 | 974;
        }
        else
        {
          // TEMPLATE.BSF::BSFm
          // BSF REG:cw=$GPRvr MEM:r:sx=$memv;
          return 49 << 16 | 115;
        }
      }
      else
      {
        // TEMPLATE.BSF::BSFm
        // BSF REG:cw=$GPRvr MEM:r:sx=$memv;
        return 49 << 16 | 113;
      }
    }
  break;
  /* 0f.0xbd */
  case 445:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.LZCNT_rxmx::LZCNT
          // LZCNT REG:w:s64=$GPR64r REG:r:s64=$GPR64m;
          return 3289 << 16 | 6814;
        }
        else
        {
          // TEMPLATE.LZCNT_rxmx::LZCNT
          // LZCNT REG:w:s32=$GPR32r REG:r:s32=$GPR32m;
          return 3289 << 16 | 6813;
        }
      }
      else
      {
        if (d & 0x10)
        {
          if (b & 0x20)
          {
            // TEMPLATE.LZCNT_rvmv::LZCNT
            // LZCNT REG:w:sx=$GPRvr REG:r:sx=$GPRvm;
            return 242 << 16 | 436;
          }
          else
          {
            // TEMPLATE.BSR::BSR
            // BSR REG:cw=$GPRvr REG:r=$GPRvm;
            return 50 << 16 | 118;
          }
        }
        else
        {
          // TEMPLATE.BSR::BSR
          // BSR REG:cw=$GPRvr REG:r=$GPRvm;
          return 50 << 16 | 116;
        }
      }
    }
    else
    {
      if (d & 0x10)
      {
        if (b & 0x20)
        {
          // TEMPLATE.LZCNT_rvmv::LZCNTm
          // LZCNT REG:w:sx=$GPRvr MEM:r:sx=$memv;
          return 242 << 16 | 437;
        }
        else
        {
          // TEMPLATE.BSR::BSRm
          // BSR REG:cw=$GPRvr MEM:r:sx=$memv;
          return 50 << 16 | 119;
        }
      }
      else
      {
        // TEMPLATE.BSR::BSRm
        // BSR REG:cw=$GPRvr MEM:r:sx=$memv;
        return 50 << 16 | 117;
      }
    }
  break;
  /* 0f.0xbe */
  case 446:
    if (a & 0x01)
    {
      // TEMPLATE.MOVSX_rvmb::MOVSX
      // MOVSX  REG:w=$GPRvr REG:r=$GPR8m;
      return 287 << 16 | 503;
    }
    else
    {
      // TEMPLATE.MOVSX_rvmb::MOVSXmb
      // MOVSX  REG:w=$GPRvr MEM:r:u8=$mem8;
      return 287 << 16 | 504;
    }
  break;
  /* 0f.0xbf */
  case 447:
    if (a & 0x01)
    {
      // TEMPLATE.MOVSX_rvmw::MOVSX
      // MOVSX  REG:w=$GPRvr REG:r=$GPR16m;
      return 288 << 16 | 505;
    }
    else
    {
      // TEMPLATE.MOVSX_rvmw::MOVSXmw
      // MOVSX  REG:w=$GPRvr MEM:r:s16=$mem16;
      return 288 << 16 | 506;
    }
  break;
  /* 0f.0xc0 */
  case 448:
    if (a & 0x01)
    {
      // TEMPLATE.XADD_mbrb::XADD
      // XADD REG:rw=$GPR8m   REG:rw=$GPR8r;
      return 552 << 16 | 994;
    }
    else
    {
      // TEMPLATE.XADD_mbrb::XADDmb
      // XADD MEM:rw:u8=$mem8 REG:rw=$GPR8r;
      return 552 << 16 | 995;
    }
  break;
  /* 0f.0xc1 */
  case 449:
    if (a & 0x01)
    {
      // TEMPLATE.XADD_mvrv::XADD
      // XADD REG:rw=$GPRvm   REG:rw=$GPRvr;
      return 553 << 16 | 996;
    }
    else
    {
      // TEMPLATE.XADD_mvrv::XADDm
      // XADD MEM:rw:sx=$memv REG:rw=$GPRvr;
      return 553 << 16 | 997;
    }
  break;
  /* 0f.0xc2 */
  case 450:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.CMPSD_rqmqub::CMPSD
            // CMPSD REG:rw:f64=$XMMr REG:r:f64=$XMMm  CC:u8=$cc3;
            return 909 << 16 | 1516;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VCMPSD_ronomqub::VCMPSD
            // VCMPSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm  CC:u8=$cc5;
            return 1274 << 16 | 2239;
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VCMPSD_nomxub::VCMPSD
              // VCMPSD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm SAE=$SAE CC:u8=$cc5;
              return 1273 << 16 | 2237;
            }
            else
            {
              // TEMPLATE.VCMPSD_nomxub::VCMPSD
              // VCMPSD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f64=$XMMn VREG:r:f64=$XMMm          CC:u8=$cc5;
              return 1273 << 16 | 2236;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CMPSS::CMPSS
              // CMPSS REG:rw:f32=$XMMr REG:r:f32=$XMMm  CC:u8=$cc3;
              return 910 << 16 | 1518;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VCMPSS_ronomdub::VCMPSS
              // VCMPSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm  CC:u8=$cc5;
              return 1276 << 16 | 2244;
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VCMPSS_nomxub::VCMPSS
                // VCMPSS REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE CC:u8=$cc5;
                return 1275 << 16 | 2242;
              }
              else
              {
                // TEMPLATE.VCMPSS_nomxub::VCMPSS
                // VCMPSS REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f32=$XMMn VREG:r:f32=$XMMm          CC:u8=$cc5;
                return 1275 << 16 | 2241;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.CMPPD::CMPPD
                // CMPPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm  CC:u8=$cc3;
                return 907 << 16 | 1512;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VCMPPD_rxnxmxub::VCMPPD
                  // VCMPPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm  CC:u8=$cc5;
                  return 1268 << 16 | 2222;
                }
                else
                {
                  // TEMPLATE.VCMPPD_rxnxmxub::VCMPPD
                  // VCMPPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm  CC:u8=$cc5;
                  return 1268 << 16 | 2221;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VCMPPD_nzmzub::VCMPPD
                  // VCMPPD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm SAE=$SAE    CC:u8=$cc5;
                  return 1267 << 16 | 2218;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VCMPPD_nomoub::VCMPPD
                      // VCMPPD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm             CC:u8=$cc5;
                      return 1265 << 16 | 2214;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VCMPPD_nymyub::VCMPPD
                      // VCMPPD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm             CC:u8=$cc5;
                      return 1266 << 16 | 2216;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VCMPPD_nzmzub::VCMPPD
                      // VCMPPD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm             CC:u8=$cc5;
                      return 1267 << 16 | 2219;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  // TEMPLATE.VCMPPD_nzmxub::VCMPPD
                  // VCMPPD REG:w=$Kr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SAE=$SAE       CC:u8=$cc5;
                  return 3314 << 16 | 6858;
                }
                else
                {
                  // TEMPLATE.VCMPPD_nzmxub::VCMPPD
                  // VCMPPD REG:w=$Kr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64     CC:u8=$cc5;
                  return 3314 << 16 | 6857;
                }
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.CMPPS::CMPPS
                // CMPPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm  CC:u8=$cc3;
                return 908 << 16 | 1514;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VCMPPS_rxnxmxub::VCMPPS
                  // VCMPPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm  CC:u8=$cc5;
                  return 1272 << 16 | 2233;
                }
                else
                {
                  // TEMPLATE.VCMPPS_rxnxmxub::VCMPPS
                  // VCMPPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm  CC:u8=$cc5;
                  return 1272 << 16 | 2232;
                }
                break;
              }
              case 0x02:
              {
                if (b & 0x80)
                {
                  // TEMPLATE.VCMPPS_nzmzub::VCMPPS
                  // VCMPPS REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm SAE=$SAE    CC:u8=$cc5;
                  return 1271 << 16 | 2229;
                }
                else
                {
                  // the following switch contains 3 case.
                  switch (b & 0x03)
                  {
                    case 0x00:
                    {
                      // TEMPLATE.VCMPPS_nomoub::VCMPPS
                      // VCMPPS REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm             CC:u8=$cc5;
                      return 1269 << 16 | 2225;
                      break;
                    }
                    case 0x01:
                    {
                      // TEMPLATE.VCMPPS_nymyub::VCMPPS
                      // VCMPPS REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm             CC:u8=$cc5;
                      return 1270 << 16 | 2227;
                      break;
                    }
                    case 0x02:
                    {
                      // TEMPLATE.VCMPPS_nzmzub::VCMPPS
                      // VCMPPS REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm             CC:u8=$cc5;
                      return 1271 << 16 | 2230;
                      break;
                    }
                    default: break;
                  }
                }
                break;
              }
              case 0x03:
              {
                if (c & 0x08)
                {
                  // TEMPLATE.VCMPPS_nzmxub::VCMPPS
                  // VCMPPS REG:w=$Kr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SAE=$SAE       CC:u8=$cc5;
                  return 3315 << 16 | 6861;
                }
                else
                {
                  // TEMPLATE.VCMPPS_nzmxub::VCMPPS
                  // VCMPPS REG:w=$Kr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i64     CC:u8=$cc5;
                  return 3315 << 16 | 6860;
                }
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.CMPSD_rqmqub::CMPSDmq
            // CMPSD REG:rw:f64=$XMMr MEM:r:f64=$mem64 CC:u8=$cc3;
            return 909 << 16 | 1517;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VCMPSD_ronomqub::VCMPSDmq
            // VCMPSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64 CC:u8=$cc5;
            return 1274 << 16 | 2240;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VCMPSD_nomxub::VCMPSDmq
            // VCMPSD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f64=$XMMn MEM:r:f64=$mem64          CC:u8=$cc5;
            return 1273 << 16 | 2238;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CMPSS::CMPSSmd
              // CMPSS REG:rw:f32=$XMMr MEM:r:f32=$mem32 CC:u8=$cc3;
              return 910 << 16 | 1519;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VCMPSS_ronomdub::VCMPSSmd
              // VCMPSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32 CC:u8=$cc5;
              return 1276 << 16 | 2245;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VCMPSS_nomxub::VCMPSSmd
              // VCMPSS REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f32=$XMMn MEM:r:f32=$mem32          CC:u8=$cc5;
              return 1275 << 16 | 2243;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (b & 0x40)
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.CMPPD::CMPPDmx
                // CMPPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128 CC:u8=$cc3;
                return 907 << 16 | 1513;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VCMPPD_rxnxmxub::VCMPPDmy
                  // VCMPPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256 CC:u8=$cc5;
                  return 1268 << 16 | 2224;
                }
                else
                {
                  // TEMPLATE.VCMPPD_rxnxmxub::VCMPPDmx
                  // VCMPPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128 CC:u8=$cc5;
                  return 1268 << 16 | 2223;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VCMPPD_nomoub::VCMPPDmx
                    // VCMPPD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST CC:u8=$cc5;
                    return 1265 << 16 | 2215;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VCMPPD_nymyub::VCMPPDmy
                    // VCMPPD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST CC:u8=$cc5;
                    return 1266 << 16 | 2217;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VCMPPD_nzmzub::VCMPPDmz
                    // VCMPPD REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST CC:u8=$cc5;
                    return 1267 << 16 | 2220;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VCMPPD_nzmxub::VCMPPDm
                // VCMPPD REG:w=$Kr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH CC:u8=$cc5;
                return 3314 << 16 | 6859;
                break;
              }
              default: break;
            }
          }
          else
          {
            // the following switch contains 4 case.
            switch (c & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.CMPPS::CMPPSmx
                // CMPPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128 CC:u8=$cc3;
                return 908 << 16 | 1515;
                break;
              }
              case 0x01:
              {
                if (b & 0x01)
                {
                  // TEMPLATE.VCMPPS_rxnxmxub::VCMPPSmy
                  // VCMPPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256 CC:u8=$cc5;
                  return 1272 << 16 | 2235;
                }
                else
                {
                  // TEMPLATE.VCMPPS_rxnxmxub::VCMPPSmx
                  // VCMPPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128 CC:u8=$cc5;
                  return 1272 << 16 | 2234;
                }
                break;
              }
              case 0x02:
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VCMPPS_nomoub::VCMPPSmx
                    // VCMPPS REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST CC:u8=$cc5;
                    return 1269 << 16 | 2226;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VCMPPS_nymyub::VCMPPSmy
                    // VCMPPS REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST CC:u8=$cc5;
                    return 1270 << 16 | 2228;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VCMPPS_nzmzub::VCMPPSmz
                    // VCMPPS REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST CC:u8=$cc5;
                    return 1271 << 16 | 2231;
                    break;
                  }
                  default: break;
                }
                break;
              }
              case 0x03:
              {
                // TEMPLATE.VCMPPS_nzmxub::VCMPPSm
                // VCMPPS REG:w=$Kr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH CC:u8=$cc5;
                return 3315 << 16 | 6862;
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f.0xc3 */
  case 451:
    if (b & 0x04)
    {
      // TEMPLATE.MOVNTI::MOVNTImq
      // MOVNTI MEM:w:s64=$mem64 REG:r=$GPR64r;
      return 993 << 16 | 1669;
    }
    else
    {
      // TEMPLATE.MOVNTI::MOVNTImd
      // MOVNTI MEM:w:s32=$mem32 REG:r=$GPR32r;
      return 993 << 16 | 1670;
    }
  break;
  /* 0f.0xc4 */
  case 452:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PINSRW_romxub::PINSRWib
            // PINSRW VREG:rw:s32=$XMMr REG:r=$GPR32m    IMM:u8=$index;
            return 1078 << 16 | 1843;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPINSRW_ronomxub_1::VPINSRWib
            // VPINSRW VREG:w:u16=$XMMr VREG:r:u16=$XMMn REG:r:u16=$GPR32m IMM:u8=$index;
            return 1782 << 16 | 3390;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPINSRW_ronomxub_2::VPINSRWib
            // VPINSRW VREG:w:u16=$XMMr VREG:r:u16=$XMMn REG:r:u16=$GPR32m IMM:u8=$index;
            return 1783 << 16 | 3392;
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PINSRW_rqmxub::PINSRWib
        // PINSRW REG:rw:u16=$MMXr REG:r=$GPR32m    IMM:u8=$index;
        return 845 << 16 | 1406;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PINSRW_romxub::PINSRWmwib
            // PINSRW VREG:rw:s32=$XMMr MEM:r:s16=$mem16 IMM:u8=$index;
            return 1078 << 16 | 1844;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPINSRW_ronomxub_1::VPINSRWmwib
            // VPINSRW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem16  IMM:u8=$index;
            return 1782 << 16 | 3391;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPINSRW_ronomxub_2::VPINSRWmwib
            // VPINSRW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem16  IMM:u8=$index;
            return 1783 << 16 | 3393;
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PINSRW_rqmxub::PINSRWmwib
        // PINSRW REG:rw:u16=$MMXr MEM:r:u16=$mem16 IMM:u8=$index;
        return 845 << 16 | 1407;
      }
    }
  break;
  /* 0f.0xc5 */
  case 453:
    if (b & 0x40)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PEXTRW_rdmoub::PEXTRWib
          // PEXTRW REG:w=$GPR32r    VREG:r:s32=$XMMm IMM:u8=$index;
          return 1062 << 16 | 1810;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPEXTRW_rdmoub_1::VPEXTRWib
          // VPEXTRW REG:w:s32=$GPR32r VREG:r:u16=$XMMm IMM:u8=$index;
          return 1763 << 16 | 3346;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPEXTRW_rdmoub_2::VPEXTRWib
          // VPEXTRW REG:w:u16=$GPR32r VREG:r:u16=$XMMm IMM:u8=$index;
          return 1764 << 16 | 3347;
          break;
        }
        default: break;
      }
    }
    else
    {
      // TEMPLATE.PEXTRW_rdmqub::PEXTRWib
      // PEXTRW REG:w=$GPR32r REG:r:u16=$MMXm IMM:u8=$index;
      return 842 << 16 | 1401;
    }
  break;
  /* 0f.0xc6 */
  case 454:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.SHUFPD::SHUFPD
            // SHUFPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm  ORDER:r:u8=$order;
            return 1190 << 16 | 2037;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VSHUFPD_rxnxmxub::VSHUFPD
              // VSHUFPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm  ORDER:r:u8=$order;
              return 2173 << 16 | 4205;
            }
            else
            {
              // TEMPLATE.VSHUFPD_rxnxmxub::VSHUFPD
              // VSHUFPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm  ORDER:r:u8=$order;
              return 2173 << 16 | 4204;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VSHUFPD_ronomoub::VSHUFPD
                // VSHUFPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm             ORDER:r:u8=$order;
                return 2172 << 16 | 4202;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VSHUFPD_rynymyub::VSHUFPD
                // VSHUFPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm             ORDER:r:u8=$order;
                return 2174 << 16 | 4208;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VSHUFPD_rznzmzub::VSHUFPD
                // VSHUFPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm             ORDER:r:u8=$order;
                return 2175 << 16 | 4210;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.SHUFPS::SHUFPS
            // SHUFPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm  ORDER:r:u8=$order;
            return 1191 << 16 | 2039;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VSHUFPS_rxnxmxub::VSHUFPS
              // VSHUFPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm  ORDER:r:u8=$order;
              return 2177 << 16 | 4215;
            }
            else
            {
              // TEMPLATE.VSHUFPS_rxnxmxub::VSHUFPS
              // VSHUFPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm  ORDER:r:u8=$order;
              return 2177 << 16 | 4214;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VSHUFPS_ronomoub::VSHUFPS
                // VSHUFPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm             ORDER:r:u8=$order;
                return 2176 << 16 | 4212;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VSHUFPS_rynymyub::VSHUFPS
                // VSHUFPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm             ORDER:r:u8=$order;
                return 2178 << 16 | 4218;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VSHUFPS_rznzmzub::VSHUFPS
                // VSHUFPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm             ORDER:r:u8=$order;
                return 2179 << 16 | 4220;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.SHUFPD::SHUFPDmx
            // SHUFPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128 ORDER:r:u8=$order;
            return 1190 << 16 | 2038;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VSHUFPD_rxnxmxub::VSHUFPDmy
              // VSHUFPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256 ORDER:r:u8=$order;
              return 2173 << 16 | 4207;
            }
            else
            {
              // TEMPLATE.VSHUFPD_rxnxmxub::VSHUFPDmx
              // VSHUFPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128 ORDER:r:u8=$order;
              return 2173 << 16 | 4206;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VSHUFPD_ronomoub::VSHUFPDmx
                // VSHUFPD VREG:w:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST ORDER:r:u8=$order;
                return 2172 << 16 | 4203;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VSHUFPD_rynymyub::VSHUFPDmy
                // VSHUFPD VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST ORDER:r:u8=$order;
                return 2174 << 16 | 4209;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VSHUFPD_rznzmzub::VSHUFPDmz
                // VSHUFPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST ORDER:r:u8=$order;
                return 2175 << 16 | 4211;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.SHUFPS::SHUFPSmx
            // SHUFPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128 ORDER:r:u8=$order;
            return 1191 << 16 | 2040;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VSHUFPS_rxnxmxub::VSHUFPSmy
              // VSHUFPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256 ORDER:r:u8=$order;
              return 2177 << 16 | 4217;
            }
            else
            {
              // TEMPLATE.VSHUFPS_rxnxmxub::VSHUFPSmx
              // VSHUFPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128 ORDER:r:u8=$order;
              return 2177 << 16 | 4216;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VSHUFPS_ronomoub::VSHUFPSmx
                // VSHUFPS VREG:w:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST ORDER:r:u8=$order;
                return 2176 << 16 | 4213;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VSHUFPS_rynymyub::VSHUFPSmy
                // VSHUFPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST ORDER:r:u8=$order;
                return 2178 << 16 | 4219;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VSHUFPS_rznzmzub::VSHUFPSmz
                // VSHUFPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST ORDER:r:u8=$order;
                return 2179 << 16 | 4221;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f.0xc7 */
  case 455:
    // the following switch contains 8 case.
    switch ((a & 0x0f) - 2)
    {
      case 0x00:
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.CMPXCHG16B::CMPXCHG16Bmx
            // CMPXCHG16B MEM:rcw:s32=$mem128 REG:SUPP:rcw=RDX REG:SUPP:rcw=RAX REG:SUPP:r=RCX REG:SUPP:r=RBX;
            return 116 << 16 | 231;
          }
          else
          {
            // TEMPLATE.CMPXCHG8B::CMPXCHG8Bmq
            // CMPXCHG8B  MEM:rcw:s64=$mem64  REG:SUPP:rcw=EDX REG:SUPP:rcw=EAX REG:SUPP:r=ECX REG:SUPP:r=EBX;
            return 117 << 16 | 232;
          }
        }
        else
        {
          // TEMPLATE.CMPXCHG8B::CMPXCHG8Bmq
          // CMPXCHG8B  MEM:rcw:s64=$mem64  REG:SUPP:rcw=EDX REG:SUPP:rcw=EAX REG:SUPP:r=ECX REG:SUPP:r=EBX;
          return 117 << 16 | 233;
        }
        break;
      }
      case 0x04:
      {
        if (d & 0x01)
        {
          // TEMPLATE.XRSTORS::XRSTORS64m
          // XRSTORS64 MEM:r=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
          return 764 << 16 | 1280;
        }
        else
        {
          // TEMPLATE.XRSTORS::XRSTORSm
          // XRSTORS   MEM:r=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
          return 764 << 16 | 1279;
        }
        break;
      }
      case 0x06:
      {
        if (d & 0x01)
        {
          // TEMPLATE.XSAVEC::XSAVEC64m
          // XSAVEC64 MEM:w=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
          return 766 << 16 | 1284;
        }
        else
        {
          // TEMPLATE.XSAVEC::XSAVECm
          // XSAVEC   MEM:w=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
          return 766 << 16 | 1283;
        }
        break;
      }
      case 0x08:
      {
        if (d & 0x01)
        {
          // TEMPLATE.XSAVES64::XSAVES64m
          // XSAVES64 MEM:w=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
          return 769 << 16 | 1288;
        }
        else
        {
          // TEMPLATE.XSAVES::XSAVESm
          // XSAVES   MEM:w=$mem4608 REG:SUPP:r=EDX REG:SUPP:r=EAX REG:SUPP:r=XCR0;
          return 768 << 16 | 1287;
        }
        break;
      }
      case 0x0a:
      {
        // the following switch contains 3 case.
        switch (b & 0x60)
        {
          case 0x00:
          {
            // TEMPLATE.VMPTRLD::VMPTRLDmq
            // VMPTRLD MEM:r:s64=$mem64;
            return 748 << 16 | 1254;
            break;
          }
          case 0x20:
          {
            // TEMPLATE.VMXON::VMXONmq
            // VMXON MEM:r:s64=$mem64;
            return 753 << 16 | 1265;
            break;
          }
          case 0x40:
          {
            // TEMPLATE.VMCLEAR::VMCLEARmq
            // VMCLEAR MEM:r:s64=$mem64;
            return 744 << 16 | 1250;
            break;
          }
          default: break;
        }
        break;
      }
      case 0x0b:
      {
        // TEMPLATE.RDRAND::RDRAND
        // RDRAND REG:w=$GPRvm;
        return 730 << 16 | 1233;
        break;
      }
      case 0x0c:
      {
        // TEMPLATE.VMPTRST::VMPTRSTmq
        // VMPTRST MEM:w:s64=$mem64;
        return 749 << 16 | 1255;
        break;
      }
      case 0x0d:
      {
        if (b & 0x20)
        {
          if (c & 0x80)
          {
            // TEMPLATE.RDPID::RDPID
            // RDPID REG:w:u64=$GPR64m;
            return 728 << 16 | 1230;
          }
          else
          {
            // TEMPLATE.RDPID::RDPID
            // RDPID REG:w:u32=$GPR32m;
            return 728 << 16 | 1231;
          }
        }
        else
        {
          // TEMPLATE.RDSEED::RDSEED
          // RDSEED REG:w=$GPRvm;
          return 731 << 16 | 1234;
        }
        break;
      }
      default: break;
    }
  break;
  /* 0f.0xc8 */
  case 456:
    // TEMPLATE.BSWAP_ov_1::BSWAP
    // BSWAP REG:rw=$GPRvo;
    return 51 << 16 | 120;
  break;
  /* 0f.0xc9 */
  case 457:
    // TEMPLATE.BSWAP_ov_2::BSWAP
    // BSWAP REG:rw=$GPRvo;
    return 52 << 16 | 121;
  break;
  /* 0f.0xca */
  case 458:
    // TEMPLATE.BSWAP_ov_3::BSWAP
    // BSWAP REG:rw=$GPRvo;
    return 53 << 16 | 122;
  break;
  /* 0f.0xcb */
  case 459:
    // TEMPLATE.BSWAP_ov_4::BSWAP
    // BSWAP REG:rw=$GPRvo;
    return 54 << 16 | 123;
  break;
  /* 0f.0xcc */
  case 460:
    // TEMPLATE.BSWAP_ov_5::BSWAP
    // BSWAP REG:rw=$GPRvo;
    return 55 << 16 | 124;
  break;
  /* 0f.0xcd */
  case 461:
    // TEMPLATE.BSWAP_ov_6::BSWAP
    // BSWAP REG:rw=$GPRvo;
    return 56 << 16 | 125;
  break;
  /* 0f.0xce */
  case 462:
    // TEMPLATE.BSWAP_ov_7::BSWAP
    // BSWAP REG:rw=$GPRvo;
    return 57 << 16 | 126;
  break;
  /* 0f.0xcf */
  case 463:
    // TEMPLATE.BSWAP_ov_8::BSWAP
    // BSWAP REG:rw=$GPRvo;
    return 58 << 16 | 127;
  break;
  /* 0f.0xd0 */
  case 464:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VADDSUBPS::VADDSUBPS
            // VADDSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
            return 1222 << 16 | 2111;
          }
          else
          {
            // TEMPLATE.VADDSUBPS::VADDSUBPS
            // VADDSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 1222 << 16 | 2110;
          }
        }
        else
        {
          // TEMPLATE.ADDSUBPS::ADDSUBPS
          // ADDSUBPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm;
          return 898 << 16 | 1494;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VADDSUBPD::VADDSUBPD
            // VADDSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
            return 1221 << 16 | 2107;
          }
          else
          {
            // TEMPLATE.VADDSUBPD::VADDSUBPD
            // VADDSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 1221 << 16 | 2106;
          }
        }
        else
        {
          // TEMPLATE.ADDSUBPD::ADDSUBPD
          // ADDSUBPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm;
          return 897 << 16 | 1492;
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VADDSUBPS::VADDSUBPSmy
            // VADDSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
            return 1222 << 16 | 2113;
          }
          else
          {
            // TEMPLATE.VADDSUBPS::VADDSUBPSmx
            // VADDSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
            return 1222 << 16 | 2112;
          }
        }
        else
        {
          // TEMPLATE.ADDSUBPS::ADDSUBPSmx
          // ADDSUBPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128;
          return 898 << 16 | 1495;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VADDSUBPD::VADDSUBPDmy
            // VADDSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
            return 1221 << 16 | 2109;
          }
          else
          {
            // TEMPLATE.VADDSUBPD::VADDSUBPDmx
            // VADDSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
            return 1221 << 16 | 2108;
          }
        }
        else
        {
          // TEMPLATE.ADDSUBPD::ADDSUBPDmx
          // ADDSUBPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128;
          return 897 << 16 | 1493;
        }
      }
    }
  break;
  /* 0f.0xd1 */
  case 465:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSRLW_romo_1::PSRLW
            // PSRLW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1160 << 16 | 1980;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSRLW_rynymx::VPSRLW
              // VPSRLW VREG:w:u16=$YMMr VREG:r:u16=$YMMn REG:r:u64=$XMMm;
              return 2079 << 16 | 4006;
            }
            else
            {
              // TEMPLATE.VPSRLW_ronomo_1::VPSRLW
              // VPSRLW VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u64=$XMMm;
              return 2076 << 16 | 4000;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSRLW_ronomo_2::VPSRLW
                // VPSRLW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn             VREG:r:u16=$XMMm;
                return 2077 << 16 | 4002;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSRLW_rynymo::VPSRLW
                // VPSRLW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn             VREG:r:u16=$XMMm;
                return 2078 << 16 | 4004;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSRLW_rznzmo::VPSRLW
                // VPSRLW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn             VREG:r:u16=$XMMm;
                return 2080 << 16 | 4008;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSRLW_rqmq::PSRLW
        // PSRLW REG:rw:u16=$MMXr REG:r:s64=$MMXm;
        return 878 << 16 | 1454;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSRLW_romo_2::PSRLWmx
            // PSRLW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1161 << 16 | 1981;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSRLW_rynymx::VPSRLWmx
              // VPSRLW VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u64=$mem128;
              return 2079 << 16 | 4007;
            }
            else
            {
              // TEMPLATE.VPSRLW_ronomo_1::VPSRLWmx
              // VPSRLW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u64=$mem128;
              return 2076 << 16 | 4001;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSRLW_ronomo_2::VPSRLWmx
                // VPSRLW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn             MEM:r:u16=$mem128;
                return 2077 << 16 | 4003;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSRLW_rynymo::VPSRLWmx
                // VPSRLW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn             MEM:r:u16=$mem128;
                return 2078 << 16 | 4005;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSRLW_rznzmo::VPSRLWmx
                // VPSRLW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn             MEM:r:u16=$mem128;
                return 2080 << 16 | 4009;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSRLW_rqmq::PSRLWmq
        // PSRLW REG:rw:u16=$MMXr MEM:r:s64=$mem64;
        return 878 << 16 | 1455;
      }
    }
  break;
  /* 0f.0xd2 */
  case 466:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSRLD_romo_1::PSRLD
            // PSRLD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1154 << 16 | 1974;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSRLD_rynymx::VPSRLD
              // VPSRLD VREG:w:u32=$YMMr VREG:r:u32=$YMMn REG:r:u64=$XMMm;
              return 2059 << 16 | 3970;
            }
            else
            {
              // TEMPLATE.VPSRLD_ronomo_1::VPSRLD
              // VPSRLD VREG:w:u32=$XMMr VREG:r:u32=$XMMn VREG:r:u64=$XMMm;
              return 2056 << 16 | 3964;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSRLD_ronomo_2::VPSRLD
                // VPSRLD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn             VREG:r:u32=$XMMm;
                return 2057 << 16 | 3966;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSRLD_rynymo::VPSRLD
                // VPSRLD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn             VREG:r:u32=$XMMm;
                return 2058 << 16 | 3968;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSRLD_rznzmo::VPSRLD
                // VPSRLD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn             VREG:r:u32=$XMMm;
                return 2060 << 16 | 3972;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSRLD_rqmq::PSRLD
        // PSRLD REG:rw:u32=$MMXr REG:r:s64=$MMXm;
        return 874 << 16 | 1448;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSRLD_romo_2::PSRLDmx
            // PSRLD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1155 << 16 | 1975;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSRLD_rynymx::VPSRLDmx
              // VPSRLD VREG:w:u32=$YMMr VREG:r:u32=$YMMn MEM:r:u64=$mem128;
              return 2059 << 16 | 3971;
            }
            else
            {
              // TEMPLATE.VPSRLD_ronomo_1::VPSRLDmx
              // VPSRLD VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u64=$mem128;
              return 2056 << 16 | 3965;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSRLD_ronomo_2::VPSRLDmx
                // VPSRLD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn             MEM:r:u32=$mem128;
                return 2057 << 16 | 3967;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSRLD_rynymo::VPSRLDmx
                // VPSRLD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn             MEM:r:u32=$mem128;
                return 2058 << 16 | 3969;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSRLD_rznzmo::VPSRLDmx
                // VPSRLD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn             MEM:r:u32=$mem128;
                return 2060 << 16 | 3973;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSRLD_rqmq::PSRLDmq
        // PSRLD REG:rw:u32=$MMXr MEM:r:s64=$mem64;
        return 874 << 16 | 1449;
      }
    }
  break;
  /* 0f.0xd3 */
  case 467:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSRLQ_romo_1::PSRLQ
            // PSRLQ VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1157 << 16 | 1977;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSRLQ_rynymx::VPSRLQ
              // VPSRLQ VREG:w:u64=$YMMr VREG:r:u64=$YMMn REG:r:u64=$XMMm;
              return 2069 << 16 | 3988;
            }
            else
            {
              // TEMPLATE.VPSRLQ_ronomo_1::VPSRLQ
              // VPSRLQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
              return 2066 << 16 | 3982;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSRLQ_ronomo_2::VPSRLQ
                // VPSRLQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn             VREG:r:u64=$XMMm;
                return 2067 << 16 | 3984;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSRLQ_rynymo::VPSRLQ
                // VPSRLQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn             VREG:r:u64=$XMMm;
                return 2068 << 16 | 3986;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSRLQ_rznzmo::VPSRLQ
                // VPSRLQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn             VREG:r:u64=$XMMm;
                return 2070 << 16 | 3990;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSRLQ_rqmq::PSRLQ
        // PSRLQ REG:rw:u64=$MMXr REG:r:s64=$MMXm;
        return 876 << 16 | 1451;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSRLQ_romo_2::PSRLQmx
            // PSRLQ VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1158 << 16 | 1978;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSRLQ_rynymx::VPSRLQmx
              // VPSRLQ VREG:w:u64=$YMMr VREG:r:u64=$YMMn MEM:r:u64=$mem128;
              return 2069 << 16 | 3989;
            }
            else
            {
              // TEMPLATE.VPSRLQ_ronomo_1::VPSRLQmx
              // VPSRLQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem128;
              return 2066 << 16 | 3983;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSRLQ_ronomo_2::VPSRLQmx
                // VPSRLQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn             MEM:r:u64=$mem128;
                return 2067 << 16 | 3985;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSRLQ_rynymo::VPSRLQmx
                // VPSRLQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn             MEM:r:u64=$mem128;
                return 2068 << 16 | 3987;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSRLQ_rznzmo::VPSRLQmx
                // VPSRLQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn             MEM:r:u64=$mem128;
                return 2070 << 16 | 3991;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSRLQ_rqmq::PSRLQmq
        // PSRLQ REG:rw:u64=$MMXr MEM:r:s64=$mem64;
        return 876 << 16 | 1452;
      }
    }
  break;
  /* 0f.0xd4 */
  case 468:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDQ_romo::PADDQ
            // PADDQ VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1038 << 16 | 1756;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDQ_rynymy_1::VPADDQ
              // VPADDQ VREG:w:s64=$YMMr VREG:r:s64=$YMMn VREG:r:s64=$YMMm;
              return 1682 << 16 | 3172;
            }
            else
            {
              // TEMPLATE.VPADDQ_ronomo_1::VPADDQ
              // VPADDQ VREG:w:s64=$XMMr VREG:r:s64=$XMMn VREG:r:s64=$XMMm;
              return 1680 << 16 | 3168;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDQ_ronomo_2::VPADDQ
                // VPADDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
                return 1681 << 16 | 3170;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDQ_rynymy_2::VPADDQ
                // VPADDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
                return 1683 << 16 | 3174;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDQ_rznzmz::VPADDQ
                // VPADDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
                return 1684 << 16 | 3176;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDQ_rqmq::PADDQ
        // PADDQ REG:rw:u64=$MMXr  REG:r:u64=$MMXm;
        return 1039 << 16 | 1758;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDQ_romo::PADDQmx
            // PADDQ VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1038 << 16 | 1757;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDQ_rynymy_1::VPADDQmy
              // VPADDQ VREG:w:s64=$YMMr VREG:r:s64=$YMMn MEM:r:s64=$mem256;
              return 1682 << 16 | 3173;
            }
            else
            {
              // TEMPLATE.VPADDQ_ronomo_1::VPADDQmx
              // VPADDQ VREG:w:s64=$XMMr VREG:r:s64=$XMMn MEM:r:s64=$mem128;
              return 1680 << 16 | 3169;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDQ_ronomo_2::VPADDQmx
                // VPADDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
                return 1681 << 16 | 3171;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDQ_rynymy_2::VPADDQmy
                // VPADDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
                return 1683 << 16 | 3175;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDQ_rznzmz::VPADDQmz
                // VPADDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
                return 1684 << 16 | 3177;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDQ_rqmq::PADDQmq
        // PADDQ REG:rw:u64=$MMXr  MEM:r:u64=$mem64;
        return 1039 << 16 | 1759;
      }
    }
  break;
  /* 0f.0xd5 */
  case 469:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMULLW_romo::PMULLW
            // PMULLW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1114 << 16 | 1916;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMULLW_rynymy_1::VPMULLW
              // VPMULLW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 1942 << 16 | 3740;
            }
            else
            {
              // TEMPLATE.VPMULLW_ronomo_1::VPMULLW
              // VPMULLW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 1940 << 16 | 3736;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMULLW_ronomo_2::VPMULLW
                // VPMULLW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 1941 << 16 | 3738;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMULLW_rynymy_2::VPMULLW
                // VPMULLW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 1943 << 16 | 3742;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMULLW_rznzmz::VPMULLW
                // VPMULLW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 1944 << 16 | 3744;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMULLW_rqmq::PMULLW
        // PMULLW REG:rw:s16=$MMXr REG:r:s16=$MMXm;
        return 858 << 16 | 1423;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMULLW_romo::PMULLWmx
            // PMULLW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1114 << 16 | 1917;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMULLW_rynymy_1::VPMULLWmy
              // VPMULLW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 1942 << 16 | 3741;
            }
            else
            {
              // TEMPLATE.VPMULLW_ronomo_1::VPMULLWmx
              // VPMULLW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 1940 << 16 | 3737;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMULLW_ronomo_2::VPMULLWmx
                // VPMULLW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 1941 << 16 | 3739;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMULLW_rynymy_2::VPMULLWmy
                // VPMULLW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 1943 << 16 | 3743;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMULLW_rznzmz::VPMULLWmz
                // VPMULLW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 1944 << 16 | 3745;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMULLW_rqmq::PMULLWmq
        // PMULLW REG:rw:s16=$MMXr MEM:r:s16=$mem64;
        return 858 << 16 | 1424;
      }
    }
  break;
  /* 0f.0xd6 */
  case 470:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // TEMPLATE.MOVDQ2Q::MOVDQ2Q
        // MOVDQ2Q REG:w:u64=$MMXr REG:r:u64=$XMMm;
        return 974 << 16 | 1646;
      }
      else
      {
        if (b & 0x20)
        {
          // TEMPLATE.MOVQ2DQ::MOVQ2DQ
          // MOVQ2DQ VREG:w:u64=$XMMr REG:r:u64=$MMXm;
          return 1000 << 16 | 1681;
        }
        else
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.MOVQ_mxrq::MOVQ
              // MOVQ VREG:w:s32=$XMMm REG:r:s64=$XMMr;
              return 997 << 16 | 1675;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMOVQ_mxrq::VMOVQ
              // VMOVQ VREG:w:s32=$XMMm  REG:r:s64=$XMMr;
              return 1541 << 16 | 2874;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMOVQ_mxro::VMOVQ
              // VMOVQ VREG:w:u64=$XMMm  VREG:r:u64=$XMMr;
              return 1540 << 16 | 2872;
              break;
            }
            default: break;
          }
        }
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.MOVQ_mxrq::MOVQmq
          // MOVQ MEM:w:s64=$mem64 REG:r:s64=$XMMr;
          return 997 << 16 | 1676;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VMOVQ_mxrq::VMOVQmq
          // VMOVQ MEM:w:s64=$mem64  REG:r:s64=$XMMr;
          return 1541 << 16 | 2875;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VMOVQ_mxro::VMOVQmq
          // VMOVQ MEM:w:u64=$mem64  VREG:r:u64=$XMMr;
          return 1540 << 16 | 2873;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f.0xd7 */
  case 471:
    if (b & 0x40)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VPMOVMSKB_rdmy::VPMOVMSKB
          // VPMOVMSKB REG:w:u32=$GPR32r VREG:r:s8=$YMMm;
          return 1859 << 16 | 3575;
        }
        else
        {
          // TEMPLATE.VPMOVMSKB_rdmo::VPMOVMSKB
          // VPMOVMSKB REG:w:u32=$GPR32r VREG:r:s8=$XMMm;
          return 1858 << 16 | 3574;
        }
      }
      else
      {
        // TEMPLATE.PMOVMSKB_rdmo::PMOVMSKB
        // PMOVMSKB REG:w=$GPR32r VREG:r:s8=$XMMm;
        return 1096 << 16 | 1881;
      }
    }
    else
    {
      // TEMPLATE.PMOVMSKB_rdmq::PMOVMSKB
      // PMOVMSKB REG:w=$GPR32r REG:r:s8=$MMXm;
      return 853 << 16 | 1418;
    }
  break;
  /* 0f.0xd8 */
  case 472:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBUSB_romo::PSUBUSB
            // PSUBUSB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1166 << 16 | 1990;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBUSB_rynymy_1::VPSUBUSB
              // VPSUBUSB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
              return 2098 << 16 | 4044;
            }
            else
            {
              // TEMPLATE.VPSUBUSB_ronomo_1::VPSUBUSB
              // VPSUBUSB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
              return 2096 << 16 | 4040;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBUSB_ronomo_2::VPSUBUSB
                // VPSUBUSB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   VREG:r:u8=$XMMm;
                return 2097 << 16 | 4042;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBUSB_rynymy_2::VPSUBUSB
                // VPSUBUSB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   VREG:r:u8=$YMMm;
                return 2099 << 16 | 4046;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBUSB_rznzmz::VPSUBUSB
                // VPSUBUSB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   VREG:r:u8=$ZMMm;
                return 2100 << 16 | 4048;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBUSB_rqmq::PSUBUSB
        // PSUBUSB REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 881 << 16 | 1460;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBUSB_romo::PSUBUSBmx
            // PSUBUSB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1166 << 16 | 1991;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBUSB_rynymy_1::VPSUBUSBmy
              // VPSUBUSB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
              return 2098 << 16 | 4045;
            }
            else
            {
              // TEMPLATE.VPSUBUSB_ronomo_1::VPSUBUSBmx
              // VPSUBUSB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
              return 2096 << 16 | 4041;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBUSB_ronomo_2::VPSUBUSBmx
                // VPSUBUSB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   MEM:r:u8=$mem128;
                return 2097 << 16 | 4043;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBUSB_rynymy_2::VPSUBUSBmy
                // VPSUBUSB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   MEM:r:u8=$mem256;
                return 2099 << 16 | 4047;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBUSB_rznzmz::VPSUBUSBmz
                // VPSUBUSB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   MEM:r:u8=$mem512;
                return 2100 << 16 | 4049;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBUSB_rqmq::PSUBUSBmq
        // PSUBUSB REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 881 << 16 | 1461;
      }
    }
  break;
  /* 0f.0xd9 */
  case 473:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBUSW_romo::PSUBUSW
            // PSUBUSW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1167 << 16 | 1992;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBUSW_rynymy_1::VPSUBUSW
              // VPSUBUSW VREG:w:u16=$YMMr VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
              return 2103 << 16 | 4054;
            }
            else
            {
              // TEMPLATE.VPSUBUSW_ronomo_1::VPSUBUSW
              // VPSUBUSW VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
              return 2101 << 16 | 4050;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBUSW_ronomo_2::VPSUBUSW
                // VPSUBUSW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 2102 << 16 | 4052;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBUSW_rynymy_2::VPSUBUSW
                // VPSUBUSW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 2104 << 16 | 4056;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBUSW_rznzmz::VPSUBUSW
                // VPSUBUSW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 2105 << 16 | 4058;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBUSW_rqmq::PSUBUSW
        // PSUBUSW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 882 << 16 | 1462;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBUSW_romo::PSUBUSWmx
            // PSUBUSW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1167 << 16 | 1993;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBUSW_rynymy_1::VPSUBUSWmy
              // VPSUBUSW VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u16=$mem256;
              return 2103 << 16 | 4055;
            }
            else
            {
              // TEMPLATE.VPSUBUSW_ronomo_1::VPSUBUSWmx
              // VPSUBUSW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem128;
              return 2101 << 16 | 4051;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBUSW_ronomo_2::VPSUBUSWmx
                // VPSUBUSW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 2102 << 16 | 4053;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBUSW_rynymy_2::VPSUBUSWmy
                // VPSUBUSW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 2104 << 16 | 4057;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBUSW_rznzmz::VPSUBUSWmz
                // VPSUBUSW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 2105 << 16 | 4059;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBUSW_rqmq::PSUBUSWmq
        // PSUBUSW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 882 << 16 | 1463;
      }
    }
  break;
  /* 0f.0xda */
  case 474:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMINUB_romo::PMINUB
            // PMINUB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1093 << 16 | 1875;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMINUB_rynymy_1::VPMINUB
              // VPMINUB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
              return 1845 << 16 | 3542;
            }
            else
            {
              // TEMPLATE.VPMINUB_ronomo_1::VPMINUB
              // VPMINUB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
              return 1843 << 16 | 3538;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMINUB_ronomo_2::VPMINUB
                // VPMINUB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   VREG:r:u8=$XMMm;
                return 1844 << 16 | 3540;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMINUB_rynymy_2::VPMINUB
                // VPMINUB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   VREG:r:u8=$YMMm;
                return 1846 << 16 | 3544;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMINUB_rznzmz::VPMINUB
                // VPMINUB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   VREG:r:u8=$ZMMm;
                return 1847 << 16 | 3546;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMINUB_rqmq_1::PMINUB
        // PMINUB REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 851 << 16 | 1416;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMINUB_romo::PMINUBmx
            // PMINUB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1093 << 16 | 1876;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMINUB_rynymy_1::VPMINUBmy
              // VPMINUB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
              return 1845 << 16 | 3543;
            }
            else
            {
              // TEMPLATE.VPMINUB_ronomo_1::VPMINUBmx
              // VPMINUB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
              return 1843 << 16 | 3539;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMINUB_ronomo_2::VPMINUBmx
                // VPMINUB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   MEM:r:u8=$mem128;
                return 1844 << 16 | 3541;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMINUB_rynymy_2::VPMINUBmy
                // VPMINUB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   MEM:r:u8=$mem256;
                return 1846 << 16 | 3545;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMINUB_rznzmz::VPMINUBmz
                // VPMINUB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   MEM:r:u8=$mem512;
                return 1847 << 16 | 3547;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMINUB_rqmq_2::PMINUBmq
        // PMINUB REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 852 << 16 | 1417;
      }
    }
  break;
  /* 0f.0xdb */
  case 475:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PAND_romo::PAND
            // PAND VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1043 << 16 | 1766;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPAND_rynymy::VPAND
              // VPAND REG:w:u256=$YMMr REG:r:u256=$YMMn REG:r:u256=$YMMm;
              return 1696 << 16 | 3200;
            }
            else
            {
              // TEMPLATE.VPAND_ronomo::VPAND
              // VPAND REG:w:u128=$XMMr REG:r:u128=$XMMn REG:r:u128=$XMMm;
              return 1695 << 16 | 3198;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPANDQ_rynymy::VPANDQ
                // VPANDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
                return 3083 << 16 | 6365;
              }
              else
              {
                // TEMPLATE.VPANDD_rynymy::VPANDD
                // VPANDD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
                return 3074 << 16 | 6347;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPANDQ_rznzmz::VPANDQ
                  // VPANDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
                  return 3084 << 16 | 6367;
                }
                else
                {
                  // TEMPLATE.VPANDD_rznzmz::VPANDD
                  // VPANDD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
                  return 3075 << 16 | 6349;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPANDQ_ronomo::VPANDQ
                  // VPANDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
                  return 3082 << 16 | 6363;
                }
                else
                {
                  // TEMPLATE.VPANDD_ronomo::VPANDD
                  // VPANDD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
                  return 3073 << 16 | 6345;
                }
              }
            }
            break;
          }
          case 0x03:
          {
            if (c & 0x08)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPANDQ_rznzmx::VPANDQ
                // VPANDQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm;
                return 3419 << 16 | 7093;
              }
              else
              {
                // TEMPLATE.VPANDD_rznzmx::VPANDD
                // VPANDD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
                return 3416 << 16 | 7084;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPANDQ_rznzmx::VPANDQ
                // VPANDQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
                return 3419 << 16 | 7092;
              }
              else
              {
                // TEMPLATE.VPANDD_rznzmx::VPANDD
                // VPANDD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
                return 3416 << 16 | 7083;
              }
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PAND_rqmq_1::PAND
        // PAND REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 825 << 16 | 1381;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PAND_romo::PANDmx
            // PAND VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1043 << 16 | 1767;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPAND_rynymy::VPANDmy
              // VPAND REG:w:u256=$YMMr REG:r:u256=$YMMn MEM:r:u256=$mem256;
              return 1696 << 16 | 3201;
            }
            else
            {
              // TEMPLATE.VPAND_ronomo::VPANDmx
              // VPAND REG:w:u128=$XMMr REG:r:u128=$XMMn MEM:r:u128=$mem128;
              return 1695 << 16 | 3199;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPANDQ_rynymy::VPANDQmy
                // VPANDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
                return 3083 << 16 | 6366;
              }
              else
              {
                // TEMPLATE.VPANDD_rynymy::VPANDDmy
                // VPANDD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
                return 3074 << 16 | 6348;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPANDQ_rznzmz::VPANDQmz
                  // VPANDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
                  return 3084 << 16 | 6368;
                }
                else
                {
                  // TEMPLATE.VPANDD_rznzmz::VPANDDmz
                  // VPANDD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
                  return 3075 << 16 | 6350;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPANDQ_ronomo::VPANDQmx
                  // VPANDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
                  return 3082 << 16 | 6364;
                }
                else
                {
                  // TEMPLATE.VPANDD_ronomo::VPANDDmx
                  // VPANDD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
                  return 3073 << 16 | 6346;
                }
              }
            }
            break;
          }
          case 0x03:
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPANDQ_rznzmx::VPANDQm
              // VPANDQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_i64 EVH=$EVH;
              return 3419 << 16 | 7094;
            }
            else
            {
              // TEMPLATE.VPANDD_rznzmx::VPANDDm
              // VPANDD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
              return 3416 << 16 | 7085;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PAND_rqmq_2::PANDmq
        // PAND REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 826 << 16 | 1382;
      }
    }
  break;
  /* 0f.0xdc */
  case 476:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDUSB_romo::PADDUSB
            // PADDUSB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1034 << 16 | 1748;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDUSB_rynymy_1::VPADDUSB
              // VPADDUSB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
              return 1662 << 16 | 3132;
            }
            else
            {
              // TEMPLATE.VPADDUSB_ronomo_1::VPADDUSB
              // VPADDUSB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
              return 1660 << 16 | 3128;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDUSB_ronomo_2::VPADDUSB
                // VPADDUSB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   VREG:r:u8=$XMMm;
                return 1661 << 16 | 3130;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDUSB_rynymy_2::VPADDUSB
                // VPADDUSB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   VREG:r:u8=$YMMm;
                return 1663 << 16 | 3134;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDUSB_rznzmz::VPADDUSB
                // VPADDUSB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   VREG:r:u8=$ZMMm;
                return 1664 << 16 | 3136;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDUSB_rqmq_1::PADDUSB
        // PADDUSB REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 818 << 16 | 1371;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDUSB_romo::PADDUSBmx
            // PADDUSB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1034 << 16 | 1749;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDUSB_rynymy_1::VPADDUSBmy
              // VPADDUSB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
              return 1662 << 16 | 3133;
            }
            else
            {
              // TEMPLATE.VPADDUSB_ronomo_1::VPADDUSBmx
              // VPADDUSB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
              return 1660 << 16 | 3129;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDUSB_ronomo_2::VPADDUSBmx
                // VPADDUSB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   MEM:r:u8=$mem128;
                return 1661 << 16 | 3131;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDUSB_rynymy_2::VPADDUSBmy
                // VPADDUSB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   MEM:r:u8=$mem256;
                return 1663 << 16 | 3135;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDUSB_rznzmz::VPADDUSBmz
                // VPADDUSB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   MEM:r:u8=$mem512;
                return 1664 << 16 | 3137;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDUSB_rqmq_2::PADDUSBmq
        // PADDUSB REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 819 << 16 | 1372;
      }
    }
  break;
  /* 0f.0xdd */
  case 477:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDUSW_romo::PADDUSW
            // PADDUSW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1035 << 16 | 1750;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDUSW_rynymy_1::VPADDUSW
              // VPADDUSW VREG:w:u16=$YMMr VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
              return 1667 << 16 | 3142;
            }
            else
            {
              // TEMPLATE.VPADDUSW_ronomo_1::VPADDUSW
              // VPADDUSW VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
              return 1665 << 16 | 3138;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDUSW_ronomo_2::VPADDUSW
                // VPADDUSW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 1666 << 16 | 3140;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDUSW_rynymy_2::VPADDUSW
                // VPADDUSW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 1668 << 16 | 3144;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDUSW_rznzmz::VPADDUSW
                // VPADDUSW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 1669 << 16 | 3146;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDUSW_rqmq_1::PADDUSW
        // PADDUSW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 820 << 16 | 1373;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDUSW_romo::PADDUSWmx
            // PADDUSW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1035 << 16 | 1751;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDUSW_rynymy_1::VPADDUSWmy
              // VPADDUSW VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u16=$mem256;
              return 1667 << 16 | 3143;
            }
            else
            {
              // TEMPLATE.VPADDUSW_ronomo_1::VPADDUSWmx
              // VPADDUSW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem128;
              return 1665 << 16 | 3139;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDUSW_ronomo_2::VPADDUSWmx
                // VPADDUSW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 1666 << 16 | 3141;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDUSW_rynymy_2::VPADDUSWmy
                // VPADDUSW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 1668 << 16 | 3145;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDUSW_rznzmz::VPADDUSWmz
                // VPADDUSW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 1669 << 16 | 3147;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDUSW_rqmq_2::PADDUSWmq
        // PADDUSW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 821 << 16 | 1374;
      }
    }
  break;
  /* 0f.0xde */
  case 478:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMAXUB_romo::PMAXUB
            // PMAXUB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1087 << 16 | 1863;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMAXUB_rynymy_1::VPMAXUB
              // VPMAXUB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
              return 1815 << 16 | 3470;
            }
            else
            {
              // TEMPLATE.VPMAXUB_ronomo_1::VPMAXUB
              // VPMAXUB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
              return 1813 << 16 | 3466;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMAXUB_ronomo_2::VPMAXUB
                // VPMAXUB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   VREG:r:u8=$XMMm;
                return 1814 << 16 | 3468;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMAXUB_rynymy_2::VPMAXUB
                // VPMAXUB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   VREG:r:u8=$YMMm;
                return 1816 << 16 | 3472;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMAXUB_rznzmz::VPMAXUB
                // VPMAXUB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   VREG:r:u8=$ZMMm;
                return 1817 << 16 | 3474;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMAXUB_rqmq_1::PMAXUB
        // PMAXUB REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 848 << 16 | 1412;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMAXUB_romo::PMAXUBmx
            // PMAXUB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1087 << 16 | 1864;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMAXUB_rynymy_1::VPMAXUBmy
              // VPMAXUB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
              return 1815 << 16 | 3471;
            }
            else
            {
              // TEMPLATE.VPMAXUB_ronomo_1::VPMAXUBmx
              // VPMAXUB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
              return 1813 << 16 | 3467;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMAXUB_ronomo_2::VPMAXUBmx
                // VPMAXUB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   MEM:r:u8=$mem128;
                return 1814 << 16 | 3469;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMAXUB_rynymy_2::VPMAXUBmy
                // VPMAXUB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   MEM:r:u8=$mem256;
                return 1816 << 16 | 3473;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMAXUB_rznzmz::VPMAXUBmz
                // VPMAXUB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   MEM:r:u8=$mem512;
                return 1817 << 16 | 3475;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMAXUB_rqmq_2::PMAXUBmq
        // PMAXUB REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 849 << 16 | 1413;
      }
    }
  break;
  /* 0f.0xdf */
  case 479:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PANDN_romo::PANDN
            // PANDN VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1044 << 16 | 1768;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPANDN_rynymy::VPANDN
              // VPANDN REG:w:u256=$YMMr REG:r:u256=$YMMn REG:r:u256=$YMMm;
              return 1698 << 16 | 3204;
            }
            else
            {
              // TEMPLATE.VPANDN_ronomo::VPANDN
              // VPANDN REG:w:u128=$XMMr REG:r:u128=$XMMn REG:r:u128=$XMMm;
              return 1697 << 16 | 3202;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPANDNQ_rynymy::VPANDNQ
                // VPANDNQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
                return 3080 << 16 | 6359;
              }
              else
              {
                // TEMPLATE.VPANDND_rynymy::VPANDND
                // VPANDND VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
                return 3077 << 16 | 6353;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPANDNQ_rznzmz::VPANDNQ
                  // VPANDNQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
                  return 3081 << 16 | 6361;
                }
                else
                {
                  // TEMPLATE.VPANDND_rznzmz::VPANDND
                  // VPANDND VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
                  return 3078 << 16 | 6355;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPANDNQ_ronomo::VPANDNQ
                  // VPANDNQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
                  return 3079 << 16 | 6357;
                }
                else
                {
                  // TEMPLATE.VPANDND_ronomo::VPANDND
                  // VPANDND VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
                  return 3076 << 16 | 6351;
                }
              }
            }
            break;
          }
          case 0x03:
          {
            if (c & 0x08)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPANDNQ_rznzmx::VPANDNQ
                // VPANDNQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm;
                return 3418 << 16 | 7090;
              }
              else
              {
                // TEMPLATE.VPANDND_rznzmx::VPANDND
                // VPANDND VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
                return 3417 << 16 | 7087;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPANDNQ_rznzmx::VPANDNQ
                // VPANDNQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
                return 3418 << 16 | 7089;
              }
              else
              {
                // TEMPLATE.VPANDND_rznzmx::VPANDND
                // VPANDND VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
                return 3417 << 16 | 7086;
              }
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PANDN_rqmq_1::PANDN
        // PANDN REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 827 << 16 | 1383;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PANDN_romo::PANDNmx
            // PANDN VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1044 << 16 | 1769;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPANDN_rynymy::VPANDNmy
              // VPANDN REG:w:u256=$YMMr REG:r:u256=$YMMn MEM:r:u256=$mem256;
              return 1698 << 16 | 3205;
            }
            else
            {
              // TEMPLATE.VPANDN_ronomo::VPANDNmx
              // VPANDN REG:w:u128=$XMMr REG:r:u128=$XMMn MEM:r:u128=$mem128;
              return 1697 << 16 | 3203;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPANDNQ_rynymy::VPANDNQmy
                // VPANDNQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
                return 3080 << 16 | 6360;
              }
              else
              {
                // TEMPLATE.VPANDND_rynymy::VPANDNDmy
                // VPANDND VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
                return 3077 << 16 | 6354;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPANDNQ_rznzmz::VPANDNQmz
                  // VPANDNQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
                  return 3081 << 16 | 6362;
                }
                else
                {
                  // TEMPLATE.VPANDND_rznzmz::VPANDNDmz
                  // VPANDND VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
                  return 3078 << 16 | 6356;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPANDNQ_ronomo::VPANDNQmx
                  // VPANDNQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
                  return 3079 << 16 | 6358;
                }
                else
                {
                  // TEMPLATE.VPANDND_ronomo::VPANDNDmx
                  // VPANDND VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
                  return 3076 << 16 | 6352;
                }
              }
            }
            break;
          }
          case 0x03:
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPANDNQ_rznzmx::VPANDNQm
              // VPANDNQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_i64 EVH=$EVH;
              return 3418 << 16 | 7091;
            }
            else
            {
              // TEMPLATE.VPANDND_rznzmx::VPANDNDm
              // VPANDND VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
              return 3417 << 16 | 7088;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PANDN_rqmq_2::PANDNmq
        // PANDN REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 828 << 16 | 1384;
      }
    }
  break;
  /* 0f.0xe0 */
  case 480:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PAVGB_romo::PAVGB
            // PAVGB VREG:rw:u8=$XMMr  VREG:r:u8=$XMMm;
            return 1045 << 16 | 1770;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPAVGB_rynymy_1::VPAVGB
              // VPAVGB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
              return 1701 << 16 | 3210;
            }
            else
            {
              // TEMPLATE.VPAVGB_ronomo_1::VPAVGB
              // VPAVGB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
              return 1699 << 16 | 3206;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPAVGB_ronomo_2::VPAVGB
                // VPAVGB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   VREG:r:u8=$XMMm;
                return 1700 << 16 | 3208;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPAVGB_rynymy_2::VPAVGB
                // VPAVGB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   VREG:r:u8=$YMMm;
                return 1702 << 16 | 3212;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPAVGB_rznzmz::VPAVGB
                // VPAVGB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   VREG:r:u8=$ZMMm;
                return 1703 << 16 | 3214;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PAVGB_rqmq_1::PAVGB
        // PAVGB REG:rw:s8=$MMXr  REG:r:s8=$MMXm;
        return 829 << 16 | 1385;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PAVGB_romo::PAVGBmx
            // PAVGB VREG:rw:u8=$XMMr  MEM:r:u8=$mem128;
            return 1045 << 16 | 1771;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPAVGB_rynymy_1::VPAVGBmy
              // VPAVGB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
              return 1701 << 16 | 3211;
            }
            else
            {
              // TEMPLATE.VPAVGB_ronomo_1::VPAVGBmx
              // VPAVGB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
              return 1699 << 16 | 3207;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPAVGB_ronomo_2::VPAVGBmx
                // VPAVGB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   MEM:r:u8=$mem128;
                return 1700 << 16 | 3209;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPAVGB_rynymy_2::VPAVGBmy
                // VPAVGB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   MEM:r:u8=$mem256;
                return 1702 << 16 | 3213;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPAVGB_rznzmz::VPAVGBmz
                // VPAVGB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   MEM:r:u8=$mem512;
                return 1703 << 16 | 3215;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PAVGB_rqmq_2::PAVGBmq
        // PAVGB REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 830 << 16 | 1386;
      }
    }
  break;
  /* 0f.0xe1 */
  case 481:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSRAW_romo_1::PSRAW
            // PSRAW VREG:rw:s16=$XMMr VREG:r:u64=$XMMm;
            return 1150 << 16 | 1970;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSRAW_rynymx::VPSRAW
              // VPSRAW VREG:w:s16=$YMMr VREG:r:s16=$YMMn REG:r:u64=$XMMm;
              return 2038 << 16 | 3920;
            }
            else
            {
              // TEMPLATE.VPSRAW_ronomo_1::VPSRAW
              // VPSRAW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:u64=$XMMm;
              return 2035 << 16 | 3914;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSRAW_ronomo_2::VPSRAW
                // VPSRAW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn             VREG:r:u16=$XMMm;
                return 2036 << 16 | 3916;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSRAW_rynymo::VPSRAW
                // VPSRAW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn             VREG:r:u16=$XMMm;
                return 2037 << 16 | 3918;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSRAW_rznzmo::VPSRAW
                // VPSRAW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn             VREG:r:u16=$XMMm;
                return 2039 << 16 | 3922;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSRAW_rqmq::PSRAW
        // PSRAW REG:rw:s16=$MMXr REG:r:s64=$MMXm;
        return 872 << 16 | 1445;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSRAW_romo_2::PSRAWmx
            // PSRAW VREG:rw:s16=$XMMr MEM:r:u64=$mem128;
            return 1151 << 16 | 1971;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSRAW_rynymx::VPSRAWmx
              // VPSRAW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:u64=$mem128;
              return 2038 << 16 | 3921;
            }
            else
            {
              // TEMPLATE.VPSRAW_ronomo_1::VPSRAWmx
              // VPSRAW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:u64=$mem128;
              return 2035 << 16 | 3915;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSRAW_ronomo_2::VPSRAWmx
                // VPSRAW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn             MEM:r:u16=$mem128;
                return 2036 << 16 | 3917;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSRAW_rynymo::VPSRAWmx
                // VPSRAW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn             MEM:r:u16=$mem128;
                return 2037 << 16 | 3919;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSRAW_rznzmo::VPSRAWmx
                // VPSRAW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn             MEM:r:u16=$mem128;
                return 2039 << 16 | 3923;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSRAW_rqmq::PSRAWmq
        // PSRAW REG:rw:s16=$MMXr MEM:r:s64=$mem64;
        return 872 << 16 | 1446;
      }
    }
  break;
  /* 0f.0xe2 */
  case 482:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSRAD_romo_1::PSRAD
            // PSRAD VREG:rw:s32=$XMMr VREG:r:u64=$XMMm;
            return 1147 << 16 | 1967;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSRAD_rynymx::VPSRAD
              // VPSRAD VREG:w:s32=$YMMr VREG:r:s32=$YMMn REG:r:u64=$XMMm;
              return 2029 << 16 | 3904;
            }
            else
            {
              // TEMPLATE.VPSRAD_ronomo::VPSRAD
              // VPSRAD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:u64=$XMMm;
              return 2028 << 16 | 3902;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPSRAx_rynymo::VPSRAQ
                // VPSRAQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn             VREG:r:u64=$XMMm;
                return 2044 << 16 | 3942;
              }
              else
              {
                // TEMPLATE.VPSRAx_rynymo::VPSRAD
                // VPSRAD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn             VREG:r:u32=$XMMm;
                return 2044 << 16 | 3940;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPSRAx_rznzmo::VPSRAQ
                  // VPSRAQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn             VREG:r:u64=$XMMm;
                  return 2045 << 16 | 3946;
                }
                else
                {
                  // TEMPLATE.VPSRAx_rznzmo::VPSRAD
                  // VPSRAD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn             VREG:r:u32=$XMMm;
                  return 2045 << 16 | 3944;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPSRAx_ronomo::VPSRAQ
                  // VPSRAQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn             VREG:r:u64=$XMMm;
                  return 2043 << 16 | 3938;
                }
                else
                {
                  // TEMPLATE.VPSRAx_ronomo::VPSRAD
                  // VPSRAD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn             VREG:r:u32=$XMMm;
                  return 2043 << 16 | 3936;
                }
              }
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSRAD_rqmq::PSRAD
        // PSRAD REG:rw:s32=$MMXr REG:r:s64=$MMXm;
        return 870 << 16 | 1442;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSRAD_romo_2::PSRADmx
            // PSRAD VREG:rw:s32=$XMMr MEM:r:u64=$mem128;
            return 1148 << 16 | 1968;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSRAD_rynymx::VPSRADmx
              // VPSRAD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:u64=$mem128;
              return 2029 << 16 | 3905;
            }
            else
            {
              // TEMPLATE.VPSRAD_ronomo::VPSRADmx
              // VPSRAD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:u64=$mem128;
              return 2028 << 16 | 3903;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPSRAx_rynymo::VPSRAQmx
                // VPSRAQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn             MEM:r:u64=$mem128;
                return 2044 << 16 | 3943;
              }
              else
              {
                // TEMPLATE.VPSRAx_rynymo::VPSRADmx
                // VPSRAD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn             MEM:r:u32=$mem128;
                return 2044 << 16 | 3941;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPSRAx_rznzmo::VPSRAQmx
                  // VPSRAQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn             MEM:r:u64=$mem128;
                  return 2045 << 16 | 3947;
                }
                else
                {
                  // TEMPLATE.VPSRAx_rznzmo::VPSRADmx
                  // VPSRAD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn             MEM:r:u32=$mem128;
                  return 2045 << 16 | 3945;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPSRAx_ronomo::VPSRAQmx
                  // VPSRAQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn             MEM:r:u64=$mem128;
                  return 2043 << 16 | 3939;
                }
                else
                {
                  // TEMPLATE.VPSRAx_ronomo::VPSRADmx
                  // VPSRAD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn             MEM:r:u32=$mem128;
                  return 2043 << 16 | 3937;
                }
              }
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSRAD_rqmq::PSRADmq
        // PSRAD REG:rw:s32=$MMXr MEM:r:s64=$mem64;
        return 870 << 16 | 1443;
      }
    }
  break;
  /* 0f.0xe3 */
  case 483:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PAVGW_romo::PAVGW
            // PAVGW VREG:rw:u16=$XMMr VREG:r:u16=$XMMm;
            return 1046 << 16 | 1772;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPAVGW_rynymy_1::VPAVGW
              // VPAVGW VREG:w:u16=$YMMr VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
              return 1706 << 16 | 3220;
            }
            else
            {
              // TEMPLATE.VPAVGW_ronomo_1::VPAVGW
              // VPAVGW VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
              return 1704 << 16 | 3216;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPAVGW_ronomo_2::VPAVGW
                // VPAVGW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 1705 << 16 | 3218;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPAVGW_rynymy_2::VPAVGW
                // VPAVGW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 1707 << 16 | 3222;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPAVGW_rznzmz::VPAVGW
                // VPAVGW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 1708 << 16 | 3224;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PAVGW_rqmq_1::PAVGW
        // PAVGW REG:rw:s16=$MMXr REG:r:s16=$MMXm;
        return 831 << 16 | 1387;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PAVGW_romo::PAVGWmx
            // PAVGW VREG:rw:u16=$XMMr MEM:r:u16=$mem128;
            return 1046 << 16 | 1773;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPAVGW_rynymy_1::VPAVGWmy
              // VPAVGW VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u16=$mem256;
              return 1706 << 16 | 3221;
            }
            else
            {
              // TEMPLATE.VPAVGW_ronomo_1::VPAVGWmx
              // VPAVGW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem128;
              return 1704 << 16 | 3217;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPAVGW_ronomo_2::VPAVGWmx
                // VPAVGW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 1705 << 16 | 3219;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPAVGW_rynymy_2::VPAVGWmy
                // VPAVGW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 1707 << 16 | 3223;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPAVGW_rznzmz::VPAVGWmz
                // VPAVGW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 1708 << 16 | 3225;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PAVGW_rqmq_2::PAVGWmq
        // PAVGW REG:rw:s16=$MMXr MEM:r:s16=$mem64;
        return 832 << 16 | 1388;
      }
    }
  break;
  /* 0f.0xe4 */
  case 484:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMULHUW_romo::PMULHUW
            // PMULHUW VREG:rw:u16=$XMMr VREG:r:u16=$XMMm;
            return 1112 << 16 | 1912;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMULHUW_rynymy_1::VPMULHUW
              // VPMULHUW VREG:w:u16=$YMMr VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
              return 1932 << 16 | 3720;
            }
            else
            {
              // TEMPLATE.VPMULHUW_ronomo_1::VPMULHUW
              // VPMULHUW VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
              return 1930 << 16 | 3716;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMULHUW_ronomo_2::VPMULHUW
                // VPMULHUW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 1931 << 16 | 3718;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMULHUW_rynymy_2::VPMULHUW
                // VPMULHUW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 1933 << 16 | 3722;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMULHUW_rznzmz::VPMULHUW
                // VPMULHUW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 1934 << 16 | 3724;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMULHUW_rqmq_1::PMULHUW
        // PMULHUW REG:rw:u16=$MMXr REG:r:u16=$MMXm;
        return 854 << 16 | 1419;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMULHUW_romo::PMULHUWmx
            // PMULHUW VREG:rw:u16=$XMMr MEM:r:u16=$mem128;
            return 1112 << 16 | 1913;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMULHUW_rynymy_1::VPMULHUWmy
              // VPMULHUW VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u16=$mem256;
              return 1932 << 16 | 3721;
            }
            else
            {
              // TEMPLATE.VPMULHUW_ronomo_1::VPMULHUWmx
              // VPMULHUW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem128;
              return 1930 << 16 | 3717;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMULHUW_ronomo_2::VPMULHUWmx
                // VPMULHUW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 1931 << 16 | 3719;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMULHUW_rynymy_2::VPMULHUWmy
                // VPMULHUW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 1933 << 16 | 3723;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMULHUW_rznzmz::VPMULHUWmz
                // VPMULHUW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 1934 << 16 | 3725;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMULHUW_rqmq_2::PMULHUWmq
        // PMULHUW REG:rw:u16=$MMXr MEM:r:u16=$mem64;
        return 855 << 16 | 1420;
      }
    }
  break;
  /* 0f.0xe5 */
  case 485:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMULHW_romo::PMULHW
            // PMULHW VREG:rw:s16=$XMMr VREG:r:s16=$XMMm;
            return 1113 << 16 | 1914;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMULHW_rynymy_1::VPMULHW
              // VPMULHW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 1937 << 16 | 3730;
            }
            else
            {
              // TEMPLATE.VPMULHW_ronomo_1::VPMULHW
              // VPMULHW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 1935 << 16 | 3726;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMULHW_ronomo_2::VPMULHW
                // VPMULHW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 1936 << 16 | 3728;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMULHW_rynymy_2::VPMULHW
                // VPMULHW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 1938 << 16 | 3732;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMULHW_rznzmz::VPMULHW
                // VPMULHW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 1939 << 16 | 3734;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMULHW_rqmq_1::PMULHW
        // PMULHW REG:rw:s16=$MMXr REG:r:s16=$MMXm;
        return 856 << 16 | 1421;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMULHW_romo::PMULHWmx
            // PMULHW VREG:rw:s16=$XMMr MEM:r:s16=$mem128;
            return 1113 << 16 | 1915;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMULHW_rynymy_1::VPMULHWmy
              // VPMULHW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 1937 << 16 | 3731;
            }
            else
            {
              // TEMPLATE.VPMULHW_ronomo_1::VPMULHWmx
              // VPMULHW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 1935 << 16 | 3727;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMULHW_ronomo_2::VPMULHWmx
                // VPMULHW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 1936 << 16 | 3729;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMULHW_rynymy_2::VPMULHWmy
                // VPMULHW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 1938 << 16 | 3733;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMULHW_rznzmz::VPMULHWmz
                // VPMULHW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 1939 << 16 | 3735;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMULHW_rqmq_2::PMULHWmq
        // PMULHW REG:rw:s16=$MMXr MEM:r:s16=$mem64;
        return 857 << 16 | 1422;
      }
    }
  break;
  /* 0f.0xe6 */
  case 486:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.CVTPD2DQ::CVTPD2DQ
            // CVTPD2DQ VREG:w:s32=$XMMr VREG:r:f64=$XMMm;
            return 917 << 16 | 1532;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VCVTPD2DQ_romx::VCVTPD2DQ
              // VCVTPD2DQ VREG:w:s32=$XMMr VREG:r:f64=$YMMm;
              return 1290 << 16 | 2280;
            }
            else
            {
              // TEMPLATE.VCVTPD2DQ_romx::VCVTPD2DQ
              // VCVTPD2DQ VREG:w:s32=$XMMr VREG:r:f64=$XMMm;
              return 1290 << 16 | 2279;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x80)
            {
              // TEMPLATE.VCVTPD2DQ_rymz::VCVTPD2DQ
              // VCVTPD2DQ VREG:w:s32=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMm RC=$RC;
              return 1292 << 16 | 2285;
            }
            else
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VCVTPD2DQ_romo::VCVTPD2DQ
                  // VCVTPD2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      VREG:r:f64=$XMMm;
                  return 1289 << 16 | 2277;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VCVTPD2DQ_romy::VCVTPD2DQ
                  // VCVTPD2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      VREG:r:f64=$YMMm;
                  return 1291 << 16 | 2283;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VCVTPD2DQ_rymz::VCVTPD2DQ
                  // VCVTPD2DQ VREG:w:s32=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMm;
                  return 1292 << 16 | 2286;
                  break;
                }
                default: break;
              }
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 4 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CVTDQ2PD::CVTDQ2PD
              // CVTDQ2PD VREG:w:f64=$XMMr VREG:r:s32=$XMMm;
              return 915 << 16 | 1528;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VCVTDQ2PD_rxmx::VCVTDQ2PD
                // VCVTDQ2PD VREG:w:f64=$YMMr VREG:r:s32=$XMMm;
                return 1282 << 16 | 2259;
              }
              else
              {
                // TEMPLATE.VCVTDQ2PD_rxmx::VCVTDQ2PD
                // VCVTDQ2PD VREG:w:f64=$XMMr VREG:r:s32=$XMMm;
                return 1282 << 16 | 2258;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VCVTQQ2PD_rzmz::VCVTQQ2PD
                // VCVTQQ2PD VREG:w:s64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm RC=$RC;
                return 2290 << 16 | 4472;
              }
              else
              {
                if (b & 0x01)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTQQ2PD_rymy::VCVTQQ2PD
                    // VCVTQQ2PD VREG:w:s64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm;
                    return 2289 << 16 | 4470;
                  }
                  else
                  {
                    // TEMPLATE.VCVTDQ2PD_rymo::VCVTDQ2PD
                    // VCVTDQ2PD VREG:w:f64=$YMMr PREG:r:Z=$Kk      VREG:r:s32=$XMMm;
                    return 1283 << 16 | 2262;
                  }
                }
                else
                {
                  if (b & 0x02)
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTQQ2PD_rzmz::VCVTQQ2PD
                      // VCVTQQ2PD VREG:w:s64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
                      return 2290 << 16 | 4473;
                    }
                    else
                    {
                      // TEMPLATE.VCVTDQ2PD_rzmy::VCVTDQ2PD
                      // VCVTDQ2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:s32=$YMMm;
                      return 1284 << 16 | 2264;
                    }
                  }
                  else
                  {
                    if (d & 0x01)
                    {
                      // TEMPLATE.VCVTQQ2PD_romo::VCVTQQ2PD
                      // VCVTQQ2PD VREG:w:s64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm;
                      return 2288 << 16 | 4468;
                    }
                    else
                    {
                      // TEMPLATE.VCVTDQ2PD_romx::VCVTDQ2PD
                      // VCVTDQ2PD VREG:w:f64=$XMMr PREG:r:Z=$Kk      VREG:r:s32=$XMMm;
                      return 1281 << 16 | 2256;
                    }
                  }
                }
              }
              break;
            }
            case 0x03:
            {
              if (c & 0x08)
              {
                // TEMPLATE.VCVTDQ2PD_rzmx::VCVTDQ2PD
                // VCVTDQ2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
                return 3316 << 16 | 6864;
              }
              else
              {
                // TEMPLATE.VCVTDQ2PD_rzmx::VCVTDQ2PD
                // VCVTDQ2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SWZ=$r_i32;
                return 3316 << 16 | 6863;
              }
              break;
            }
            default: break;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CVTTPD2DQ::CVTTPD2DQ
              // CVTTPD2DQ VREG:w:s32=$XMMr VREG:r:f64=$XMMm;
              return 931 << 16 | 1568;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VCVTTPD2DQ_romx::VCVTTPD2DQ
                // VCVTTPD2DQ VREG:w:s32=$XMMr VREG:r:f64=$YMMm;
                return 1319 << 16 | 2392;
              }
              else
              {
                // TEMPLATE.VCVTTPD2DQ_romx::VCVTTPD2DQ
                // VCVTTPD2DQ VREG:w:s32=$XMMr VREG:r:f64=$XMMm;
                return 1319 << 16 | 2391;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x80)
              {
                // TEMPLATE.VCVTTPD2DQ_rymz::VCVTTPD2DQ
                // VCVTTPD2DQ VREG:w:s32=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMm SAE=$SAE;
                return 1321 << 16 | 2397;
              }
              else
              {
                // the following switch contains 3 case.
                switch (b & 0x03)
                {
                  case 0x00:
                  {
                    // TEMPLATE.VCVTTPD2DQ_romo::VCVTTPD2DQ
                    // VCVTTPD2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      VREG:r:f64=$XMMm;
                    return 1318 << 16 | 2389;
                    break;
                  }
                  case 0x01:
                  {
                    // TEMPLATE.VCVTTPD2DQ_romy::VCVTTPD2DQ
                    // VCVTTPD2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      VREG:r:f64=$YMMm;
                    return 1320 << 16 | 2395;
                    break;
                  }
                  case 0x02:
                  {
                    // TEMPLATE.VCVTTPD2DQ_rymz::VCVTTPD2DQ
                    // VCVTTPD2DQ VREG:w:s32=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMm;
                    return 1321 << 16 | 2398;
                    break;
                  }
                  default: break;
                }
              }
              break;
            }
            default: break;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.CVTPD2DQ::CVTPD2DQmx
            // CVTPD2DQ VREG:w:s32=$XMMr MEM:r:f64=$mem128;
            return 917 << 16 | 1533;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VCVTPD2DQ_romx::VCVTPD2DQmy
              // VCVTPD2DQ VREG:w:s32=$XMMr MEM:r:f64=$mem256;
              return 1290 << 16 | 2282;
            }
            else
            {
              // TEMPLATE.VCVTPD2DQ_romx::VCVTPD2DQmx
              // VCVTPD2DQ VREG:w:s32=$XMMr MEM:r:f64=$mem128;
              return 1290 << 16 | 2281;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VCVTPD2DQ_romo::VCVTPD2DQmx
                // VCVTPD2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      MEM:r:f64=$mem128 BCST=$BCST;
                return 1289 << 16 | 2278;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VCVTPD2DQ_romy::VCVTPD2DQmy
                // VCVTPD2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      MEM:r:f64=$mem256 BCST=$BCST;
                return 1291 << 16 | 2284;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VCVTPD2DQ_rymz::VCVTPD2DQmz
                // VCVTPD2DQ VREG:w:s32=$YMMr PREG:r:Z=$Kk      MEM:r:f64=$mem512 BCST=$BCST;
                return 1292 << 16 | 2287;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 4 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CVTDQ2PD::CVTDQ2PDmq
              // CVTDQ2PD VREG:w:f64=$XMMr MEM:r:s32=$mem64;
              return 915 << 16 | 1529;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VCVTDQ2PD_rxmx::VCVTDQ2PDmx
                // VCVTDQ2PD VREG:w:f64=$YMMr MEM:r:s32=$mem128;
                return 1282 << 16 | 2261;
              }
              else
              {
                // TEMPLATE.VCVTDQ2PD_rxmx::VCVTDQ2PDmq
                // VCVTDQ2PD VREG:w:f64=$XMMr MEM:r:s32=$mem64;
                return 1282 << 16 | 2260;
              }
              break;
            }
            case 0x02:
            {
              if (b & 0x01)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VCVTQQ2PD_rymy::VCVTQQ2PDmy
                  // VCVTQQ2PD VREG:w:s64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST;
                  return 2289 << 16 | 4471;
                }
                else
                {
                  // TEMPLATE.VCVTDQ2PD_rymo::VCVTDQ2PDmx
                  // VCVTDQ2PD VREG:w:f64=$YMMr PREG:r:Z=$Kk      MEM:r:s32=$mem128 BCST=$BCST;
                  return 1283 << 16 | 2263;
                }
              }
              else
              {
                if (b & 0x02)
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTQQ2PD_rzmz::VCVTQQ2PDmz
                    // VCVTQQ2PD VREG:w:s64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
                    return 2290 << 16 | 4474;
                  }
                  else
                  {
                    // TEMPLATE.VCVTDQ2PD_rzmy::VCVTDQ2PDmy
                    // VCVTDQ2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      MEM:r:s32=$mem256 BCST=$BCST;
                    return 1284 << 16 | 2265;
                  }
                }
                else
                {
                  if (d & 0x01)
                  {
                    // TEMPLATE.VCVTQQ2PD_romo::VCVTQQ2PDmx
                    // VCVTQQ2PD VREG:w:s64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST;
                    return 2288 << 16 | 4469;
                  }
                  else
                  {
                    // TEMPLATE.VCVTDQ2PD_romx::VCVTDQ2PDmq
                    // VCVTDQ2PD VREG:w:f64=$XMMr PREG:r:Z=$Kk      MEM:r:s32=$mem64 BCST=$BCST;
                    return 1281 << 16 | 2257;
                  }
                }
              }
              break;
            }
            case 0x03:
            {
              // TEMPLATE.VCVTDQ2PD_rzmx::VCVTDQ2PDm
              // VCVTDQ2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_hi32 EVH=$EVH;
              return 3316 << 16 | 6865;
              break;
            }
            default: break;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (c & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.CVTTPD2DQ::CVTTPD2DQmx
              // CVTTPD2DQ VREG:w:s32=$XMMr MEM:r:f64=$mem128;
              return 931 << 16 | 1569;
              break;
            }
            case 0x01:
            {
              if (b & 0x01)
              {
                // TEMPLATE.VCVTTPD2DQ_romx::VCVTTPD2DQmy
                // VCVTTPD2DQ VREG:w:s32=$XMMr MEM:r:f64=$mem256;
                return 1319 << 16 | 2394;
              }
              else
              {
                // TEMPLATE.VCVTTPD2DQ_romx::VCVTTPD2DQmx
                // VCVTTPD2DQ VREG:w:s32=$XMMr MEM:r:f64=$mem128;
                return 1319 << 16 | 2393;
              }
              break;
            }
            case 0x02:
            {
              // the following switch contains 3 case.
              switch (b & 0x03)
              {
                case 0x00:
                {
                  // TEMPLATE.VCVTTPD2DQ_romo::VCVTTPD2DQmx
                  // VCVTTPD2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      MEM:r:f64=$mem128 BCST=$BCST;
                  return 1318 << 16 | 2390;
                  break;
                }
                case 0x01:
                {
                  // TEMPLATE.VCVTTPD2DQ_romy::VCVTTPD2DQmy
                  // VCVTTPD2DQ VREG:w:s32=$XMMr PREG:r:Z=$Kk      MEM:r:f64=$mem256 BCST=$BCST;
                  return 1320 << 16 | 2396;
                  break;
                }
                case 0x02:
                {
                  // TEMPLATE.VCVTTPD2DQ_rymz::VCVTTPD2DQmz
                  // VCVTTPD2DQ VREG:w:s32=$YMMr PREG:r:Z=$Kk      MEM:r:f64=$mem512 BCST=$BCST;
                  return 1321 << 16 | 2399;
                  break;
                }
                default: break;
              }
              break;
            }
            default: break;
          }
        }
      }
    }
  break;
  /* 0f.0xe7 */
  case 487:
    if (b & 0x40)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.MOVNTDQ::MOVNTDQmx
          // MOVNTDQ MEM:w:s32=$mem128 VREG:r:s32=$XMMr;
          return 991 << 16 | 1667;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VMOVNTDQ_mxrx::VMOVNTDQmy
            // VMOVNTDQ MEM:w:s32=$mem256 VREG:r:s32=$YMMr;
            return 1522 << 16 | 2850;
          }
          else
          {
            // TEMPLATE.VMOVNTDQ_mxrx::VMOVNTDQmx
            // VMOVNTDQ MEM:w:s32=$mem128 VREG:r:s32=$XMMr;
            return 1522 << 16 | 2849;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VMOVNTDQ_moro::VMOVNTDQmx
              // VMOVNTDQ MEM:w:u32=$mem128 VREG:r:u32=$XMMr;
              return 1521 << 16 | 2848;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMOVNTDQ_myry::VMOVNTDQmy
              // VMOVNTDQ MEM:w:u32=$mem256 VREG:r:u32=$YMMr;
              return 1523 << 16 | 2851;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMOVNTDQ_mzrz::VMOVNTDQmz
              // VMOVNTDQ MEM:w:u32=$mem512 VREG:r:u32=$ZMMr;
              return 1524 << 16 | 2852;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // TEMPLATE.MOVNTQ::MOVNTQmq
      // MOVNTQ MEM:w:s64=$mem64 REG:r:s64=$MMXr;
      return 803 << 16 | 1344;
    }
  break;
  /* 0f.0xe8 */
  case 488:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBSB_romo::PSUBSB
            // PSUBSB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1164 << 16 | 1986;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBSB_rynymy_1::VPSUBSB
              // VPSUBSB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  VREG:r:s8=$YMMm;
              return 2088 << 16 | 4024;
            }
            else
            {
              // TEMPLATE.VPSUBSB_ronomo_1::VPSUBSB
              // VPSUBSB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  VREG:r:s8=$XMMm;
              return 2086 << 16 | 4020;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBSB_ronomo_2::VPSUBSB
                // VPSUBSB VREG:w:s8=$XMMr  PREG:r:Z=$Kk     VREG:r:s8=$XMMn   VREG:r:s8=$XMMm;
                return 2087 << 16 | 4022;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBSB_rynymy_2::VPSUBSB
                // VPSUBSB VREG:w:s8=$YMMr  PREG:r:Z=$Kk     VREG:r:s8=$YMMn   VREG:r:s8=$YMMm;
                return 2089 << 16 | 4026;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBSB_rznzmz::VPSUBSB
                // VPSUBSB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk     VREG:r:s8=$ZMMn   VREG:r:s8=$ZMMm;
                return 2090 << 16 | 4028;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBSB_rqmq::PSUBSB
        // PSUBSB REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 879 << 16 | 1456;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBSB_romo::PSUBSBmx
            // PSUBSB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1164 << 16 | 1987;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBSB_rynymy_1::VPSUBSBmy
              // VPSUBSB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  MEM:r:s8=$mem256;
              return 2088 << 16 | 4025;
            }
            else
            {
              // TEMPLATE.VPSUBSB_ronomo_1::VPSUBSBmx
              // VPSUBSB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  MEM:r:s8=$mem128;
              return 2086 << 16 | 4021;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBSB_ronomo_2::VPSUBSBmx
                // VPSUBSB VREG:w:s8=$XMMr  PREG:r:Z=$Kk     VREG:r:s8=$XMMn   MEM:r:s8=$mem128;
                return 2087 << 16 | 4023;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBSB_rynymy_2::VPSUBSBmy
                // VPSUBSB VREG:w:s8=$YMMr  PREG:r:Z=$Kk     VREG:r:s8=$YMMn   MEM:r:s8=$mem256;
                return 2089 << 16 | 4027;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBSB_rznzmz::VPSUBSBmz
                // VPSUBSB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk     VREG:r:s8=$ZMMn   MEM:r:s8=$mem512;
                return 2090 << 16 | 4029;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBSB_rqmq::PSUBSBmq
        // PSUBSB REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 879 << 16 | 1457;
      }
    }
  break;
  /* 0f.0xe9 */
  case 489:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBSW_romo::PSUBSW
            // PSUBSW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1165 << 16 | 1988;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBSW_rynymy_1::VPSUBSW
              // VPSUBSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 2093 << 16 | 4034;
            }
            else
            {
              // TEMPLATE.VPSUBSW_ronomo_1::VPSUBSW
              // VPSUBSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 2091 << 16 | 4030;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBSW_ronomo_2::VPSUBSW
                // VPSUBSW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  VREG:r:s16=$XMMm;
                return 2092 << 16 | 4032;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBSW_rynymy_2::VPSUBSW
                // VPSUBSW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  VREG:r:s16=$YMMm;
                return 2094 << 16 | 4036;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBSW_rznzmz::VPSUBSW
                // VPSUBSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  VREG:r:s16=$ZMMm;
                return 2095 << 16 | 4038;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBSW_rqmq::PSUBSW
        // PSUBSW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 880 << 16 | 1458;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBSW_romo::PSUBSWmx
            // PSUBSW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1165 << 16 | 1989;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBSW_rynymy_1::VPSUBSWmy
              // VPSUBSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 2093 << 16 | 4035;
            }
            else
            {
              // TEMPLATE.VPSUBSW_ronomo_1::VPSUBSWmx
              // VPSUBSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 2091 << 16 | 4031;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBSW_ronomo_2::VPSUBSWmx
                // VPSUBSW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  MEM:r:s16=$mem128;
                return 2092 << 16 | 4033;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBSW_rynymy_2::VPSUBSWmy
                // VPSUBSW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  MEM:r:s16=$mem256;
                return 2094 << 16 | 4037;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBSW_rznzmz::VPSUBSWmz
                // VPSUBSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  MEM:r:s16=$mem512;
                return 2095 << 16 | 4039;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBSW_rqmq::PSUBSWmq
        // PSUBSW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 880 << 16 | 1459;
      }
    }
  break;
  /* 0f.0xea */
  case 490:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMINSW_romo::PMINSW
            // PMINSW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1091 << 16 | 1871;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMINSW_rynymy_1::VPMINSW
              // VPMINSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 1835 << 16 | 3516;
            }
            else
            {
              // TEMPLATE.VPMINSW_ronomo_1::VPMINSW
              // VPMINSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 1833 << 16 | 3512;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMINSW_ronomo_2::VPMINSW
                // VPMINSW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  VREG:r:s16=$XMMm;
                return 1834 << 16 | 3514;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMINSW_rynymy_2::VPMINSW
                // VPMINSW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  VREG:r:s16=$YMMm;
                return 1836 << 16 | 3518;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMINSW_rznzmz::VPMINSW
                // VPMINSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  VREG:r:s16=$ZMMm;
                return 1837 << 16 | 3520;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMINSW_rqmq::PMINSW
        // PMINSW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 850 << 16 | 1414;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMINSW_romo::PMINSWmx
            // PMINSW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1091 << 16 | 1872;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMINSW_rynymy_1::VPMINSWmy
              // VPMINSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 1835 << 16 | 3517;
            }
            else
            {
              // TEMPLATE.VPMINSW_ronomo_1::VPMINSWmx
              // VPMINSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 1833 << 16 | 3513;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMINSW_ronomo_2::VPMINSWmx
                // VPMINSW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  MEM:r:s16=$mem128;
                return 1834 << 16 | 3515;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMINSW_rynymy_2::VPMINSWmy
                // VPMINSW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  MEM:r:s16=$mem256;
                return 1836 << 16 | 3519;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMINSW_rznzmz::VPMINSWmz
                // VPMINSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  MEM:r:s16=$mem512;
                return 1837 << 16 | 3521;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMINSW_rqmq::PMINSWmq
        // PMINSW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 850 << 16 | 1415;
      }
    }
  break;
  /* 0f.0xeb */
  case 491:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.POR_romo::POR
            // POR VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1119 << 16 | 1926;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPOR_rynymy::VPOR
              // VPOR REG:w:u256=$YMMr REG:r:u256=$YMMn REG:r:u256=$YMMm;
              return 1959 << 16 | 3774;
            }
            else
            {
              // TEMPLATE.VPOR_ronomo::VPOR
              // VPOR REG:w:u128=$XMMr REG:r:u128=$XMMn REG:r:u128=$XMMm;
              return 1958 << 16 | 3772;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPORQ_rynymy::VPORQ
                // VPORQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
                return 3089 << 16 | 6377;
              }
              else
              {
                // TEMPLATE.VPORD_rynymy::VPORD
                // VPORD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
                return 3086 << 16 | 6371;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPORQ_rznzmz::VPORQ
                  // VPORQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
                  return 3090 << 16 | 6379;
                }
                else
                {
                  // TEMPLATE.VPORD_rznzmz::VPORD
                  // VPORD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
                  return 3087 << 16 | 6373;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPORQ_ronomo::VPORQ
                  // VPORQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
                  return 3088 << 16 | 6375;
                }
                else
                {
                  // TEMPLATE.VPORD_ronomo::VPORD
                  // VPORD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
                  return 3085 << 16 | 6369;
                }
              }
            }
            break;
          }
          case 0x03:
          {
            if (c & 0x08)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPORQ_rznzmx::VPORQ
                // VPORQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm;
                return 3443 << 16 | 7156;
              }
              else
              {
                // TEMPLATE.VPORD_rznzmx::VPORD
                // VPORD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
                return 3442 << 16 | 7153;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPORQ_rznzmx::VPORQ
                // VPORQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
                return 3443 << 16 | 7155;
              }
              else
              {
                // TEMPLATE.VPORD_rznzmx::VPORD
                // VPORD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
                return 3442 << 16 | 7152;
              }
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.POR_rqmq::POR
        // POR REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 859 << 16 | 1425;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.POR_romo::PORmx
            // POR VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1119 << 16 | 1927;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPOR_rynymy::VPORmy
              // VPOR REG:w:u256=$YMMr REG:r:u256=$YMMn MEM:r:u256=$mem256;
              return 1959 << 16 | 3775;
            }
            else
            {
              // TEMPLATE.VPOR_ronomo::VPORmx
              // VPOR REG:w:u128=$XMMr REG:r:u128=$XMMn MEM:r:u128=$mem128;
              return 1958 << 16 | 3773;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPORQ_rynymy::VPORQmy
                // VPORQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
                return 3089 << 16 | 6378;
              }
              else
              {
                // TEMPLATE.VPORD_rynymy::VPORDmy
                // VPORD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
                return 3086 << 16 | 6372;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPORQ_rznzmz::VPORQmz
                  // VPORQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
                  return 3090 << 16 | 6380;
                }
                else
                {
                  // TEMPLATE.VPORD_rznzmz::VPORDmz
                  // VPORD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
                  return 3087 << 16 | 6374;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPORQ_ronomo::VPORQmx
                  // VPORQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
                  return 3088 << 16 | 6376;
                }
                else
                {
                  // TEMPLATE.VPORD_ronomo::VPORDmx
                  // VPORD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
                  return 3085 << 16 | 6370;
                }
              }
            }
            break;
          }
          case 0x03:
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPORQ_rznzmx::VPORQm
              // VPORQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_i64 EVH=$EVH;
              return 3443 << 16 | 7157;
            }
            else
            {
              // TEMPLATE.VPORD_rznzmx::VPORDm
              // VPORD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
              return 3442 << 16 | 7154;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.POR_rqmq::PORmq
        // POR REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 859 << 16 | 1426;
      }
    }
  break;
  /* 0f.0xec */
  case 492:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDSB_romo::PADDSB
            // PADDSB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1032 << 16 | 1744;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDSB_rynymy_1::VPADDSB
              // VPADDSB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  VREG:r:s8=$YMMm;
              return 1652 << 16 | 3112;
            }
            else
            {
              // TEMPLATE.VPADDSB_ronomo_1::VPADDSB
              // VPADDSB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  VREG:r:s8=$XMMm;
              return 1650 << 16 | 3108;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDSB_ronomo_2::VPADDSB
                // VPADDSB VREG:w:s8=$XMMr  PREG:r:Z=$Kk     VREG:r:s8=$XMMn   VREG:r:s8=$XMMm;
                return 1651 << 16 | 3110;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDSB_rynymy_2::VPADDSB
                // VPADDSB VREG:w:s8=$YMMr  PREG:r:Z=$Kk     VREG:r:s8=$YMMn   VREG:r:s8=$YMMm;
                return 1653 << 16 | 3114;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDSB_rznzmz::VPADDSB
                // VPADDSB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk     VREG:r:s8=$ZMMn   VREG:r:s8=$ZMMm;
                return 1654 << 16 | 3116;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDSB_rqmq::PADDSB
        // PADDSB REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 816 << 16 | 1367;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDSB_romo::PADDSBmx
            // PADDSB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1032 << 16 | 1745;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDSB_rynymy_1::VPADDSBmy
              // VPADDSB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  MEM:r:s8=$mem256;
              return 1652 << 16 | 3113;
            }
            else
            {
              // TEMPLATE.VPADDSB_ronomo_1::VPADDSBmx
              // VPADDSB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  MEM:r:s8=$mem128;
              return 1650 << 16 | 3109;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDSB_ronomo_2::VPADDSBmx
                // VPADDSB VREG:w:s8=$XMMr  PREG:r:Z=$Kk     VREG:r:s8=$XMMn   MEM:r:s8=$mem128;
                return 1651 << 16 | 3111;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDSB_rynymy_2::VPADDSBmy
                // VPADDSB VREG:w:s8=$YMMr  PREG:r:Z=$Kk     VREG:r:s8=$YMMn   MEM:r:s8=$mem256;
                return 1653 << 16 | 3115;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDSB_rznzmz::VPADDSBmz
                // VPADDSB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk     VREG:r:s8=$ZMMn   MEM:r:s8=$mem512;
                return 1654 << 16 | 3117;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDSB_rqmq::PADDSBmq
        // PADDSB REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 816 << 16 | 1368;
      }
    }
  break;
  /* 0f.0xed */
  case 493:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDSW_romo::PADDSW
            // PADDSW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1033 << 16 | 1746;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDSW_rynymy_1::VPADDSW
              // VPADDSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 1657 << 16 | 3122;
            }
            else
            {
              // TEMPLATE.VPADDSW_ronomo_1::VPADDSW
              // VPADDSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 1655 << 16 | 3118;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDSW_ronomo_2::VPADDSW
                // VPADDSW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  VREG:r:s16=$XMMm;
                return 1656 << 16 | 3120;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDSW_rynymy_2::VPADDSW
                // VPADDSW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  VREG:r:s16=$YMMm;
                return 1658 << 16 | 3124;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDSW_rznzmz::VPADDSW
                // VPADDSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  VREG:r:s16=$ZMMm;
                return 1659 << 16 | 3126;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDSW_rqmq::PADDSW
        // PADDSW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 817 << 16 | 1369;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDSW_romo::PADDSWmx
            // PADDSW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1033 << 16 | 1747;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDSW_rynymy_1::VPADDSWmy
              // VPADDSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 1657 << 16 | 3123;
            }
            else
            {
              // TEMPLATE.VPADDSW_ronomo_1::VPADDSWmx
              // VPADDSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 1655 << 16 | 3119;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDSW_ronomo_2::VPADDSWmx
                // VPADDSW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  MEM:r:s16=$mem128;
                return 1656 << 16 | 3121;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDSW_rynymy_2::VPADDSWmy
                // VPADDSW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  MEM:r:s16=$mem256;
                return 1658 << 16 | 3125;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDSW_rznzmz::VPADDSWmz
                // VPADDSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  MEM:r:s16=$mem512;
                return 1659 << 16 | 3127;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDSW_rqmq::PADDSWmq
        // PADDSW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 817 << 16 | 1370;
      }
    }
  break;
  /* 0f.0xee */
  case 494:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMAXSW_romo::PMAXSW
            // PMAXSW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1086 << 16 | 1861;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMAXSW_rynymy_1::VPMAXSW
              // VPMAXSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 1807 << 16 | 3448;
            }
            else
            {
              // TEMPLATE.VPMAXSW_ronomo_1::VPMAXSW
              // VPMAXSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 1805 << 16 | 3444;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMAXSW_ronomo_2::VPMAXSW
                // VPMAXSW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  VREG:r:s16=$XMMm;
                return 1806 << 16 | 3446;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMAXSW_rynymy_2::VPMAXSW
                // VPMAXSW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  VREG:r:s16=$YMMm;
                return 1808 << 16 | 3450;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMAXSW_rznzmz::VPMAXSW
                // VPMAXSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  VREG:r:s16=$ZMMm;
                return 1809 << 16 | 3452;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMAXSW_rqmq::PMAXSW
        // PMAXSW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 847 << 16 | 1410;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMAXSW_romo::PMAXSWmx
            // PMAXSW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1086 << 16 | 1862;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMAXSW_rynymy_1::VPMAXSWmy
              // VPMAXSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 1807 << 16 | 3449;
            }
            else
            {
              // TEMPLATE.VPMAXSW_ronomo_1::VPMAXSWmx
              // VPMAXSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 1805 << 16 | 3445;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMAXSW_ronomo_2::VPMAXSWmx
                // VPMAXSW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  MEM:r:s16=$mem128;
                return 1806 << 16 | 3447;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMAXSW_rynymy_2::VPMAXSWmy
                // VPMAXSW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  MEM:r:s16=$mem256;
                return 1808 << 16 | 3451;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMAXSW_rznzmz::VPMAXSWmz
                // VPMAXSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  MEM:r:s16=$mem512;
                return 1809 << 16 | 3453;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMAXSW_rqmq::PMAXSWmq
        // PMAXSW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 847 << 16 | 1411;
      }
    }
  break;
  /* 0f.0xef */
  case 495:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PXOR_romo::PXOR
            // PXOR VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1180 << 16 | 2018;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPXOR_rynymy::VPXOR
              // VPXOR REG:w:u256=$YMMr REG:r:u256=$YMMn REG:r:u256=$YMMm;
              return 2163 << 16 | 4176;
            }
            else
            {
              // TEMPLATE.VPXOR_ronomo::VPXOR
              // VPXOR REG:w:u128=$XMMr REG:r:u128=$XMMn REG:r:u128=$XMMm;
              return 2162 << 16 | 4174;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPXORQ_rynymy::VPXORQ
                // VPXORQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
                return 3095 << 16 | 6389;
              }
              else
              {
                // TEMPLATE.VPXORD_rynymy::VPXORD
                // VPXORD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
                return 3092 << 16 | 6383;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPXORQ_rznzmz::VPXORQ
                  // VPXORQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
                  return 3096 << 16 | 6391;
                }
                else
                {
                  // TEMPLATE.VPXORD_rznzmz::VPXORD
                  // VPXORD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
                  return 3093 << 16 | 6385;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPXORQ_ronomo::VPXORQ
                  // VPXORQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
                  return 3094 << 16 | 6387;
                }
                else
                {
                  // TEMPLATE.VPXORD_ronomo::VPXORD
                  // VPXORD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
                  return 3091 << 16 | 6381;
                }
              }
            }
            break;
          }
          case 0x03:
          {
            if (c & 0x08)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPXORQ_rznzmx::VPXORQ
                // VPXORQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm;
                return 3477 << 16 | 7222;
              }
              else
              {
                // TEMPLATE.VPXORD_rznzmx::VPXORD
                // VPXORD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
                return 3476 << 16 | 7219;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPXORQ_rznzmx::VPXORQ
                // VPXORQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
                return 3477 << 16 | 7221;
              }
              else
              {
                // TEMPLATE.VPXORD_rznzmx::VPXORD
                // VPXORD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
                return 3476 << 16 | 7218;
              }
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PXOR_rqmq::PXOR
        // PXOR REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 892 << 16 | 1482;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PXOR_romo::PXORmx
            // PXOR VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1180 << 16 | 2019;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPXOR_rynymy::VPXORmy
              // VPXOR REG:w:u256=$YMMr REG:r:u256=$YMMn MEM:r:u256=$mem256;
              return 2163 << 16 | 4177;
            }
            else
            {
              // TEMPLATE.VPXOR_ronomo::VPXORmx
              // VPXOR REG:w:u128=$XMMr REG:r:u128=$XMMn MEM:r:u128=$mem128;
              return 2162 << 16 | 4175;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPXORQ_rynymy::VPXORQmy
                // VPXORQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
                return 3095 << 16 | 6390;
              }
              else
              {
                // TEMPLATE.VPXORD_rynymy::VPXORDmy
                // VPXORD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
                return 3092 << 16 | 6384;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPXORQ_rznzmz::VPXORQmz
                  // VPXORQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
                  return 3096 << 16 | 6392;
                }
                else
                {
                  // TEMPLATE.VPXORD_rznzmz::VPXORDmz
                  // VPXORD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
                  return 3093 << 16 | 6386;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPXORQ_ronomo::VPXORQmx
                  // VPXORQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
                  return 3094 << 16 | 6388;
                }
                else
                {
                  // TEMPLATE.VPXORD_ronomo::VPXORDmx
                  // VPXORD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
                  return 3091 << 16 | 6382;
                }
              }
            }
            break;
          }
          case 0x03:
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPXORQ_rznzmx::VPXORQm
              // VPXORQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_i64 EVH=$EVH;
              return 3477 << 16 | 7223;
            }
            else
            {
              // TEMPLATE.VPXORD_rznzmx::VPXORDm
              // VPXORD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
              return 3476 << 16 | 7220;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PXOR_rqmq::PXORmq
        // PXOR REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 892 << 16 | 1483;
      }
    }
  break;
  /* 0f.0xf0 */
  case 496:
    if (c & 0x01)
    {
      if (b & 0x01)
      {
        // TEMPLATE.VLDDQU::VLDDQUmy
        // VLDDQU VREG:w:s32=$YMMr MEM:r:s32=$mem256;
        return 1412 << 16 | 2619;
      }
      else
      {
        // TEMPLATE.VLDDQU::VLDDQUmx
        // VLDDQU VREG:w:s32=$XMMr MEM:r:s32=$mem128;
        return 1412 << 16 | 2618;
      }
    }
    else
    {
      // TEMPLATE.LDDQU::LDDQUmx
      // LDDQU VREG:w:f64=$XMMr MEM:r:s32=$mem128;
      return 956 << 16 | 1615;
    }
  break;
  /* 0f.0xf1 */
  case 497:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSLLW_romo_1::PSLLW
            // PSLLW VREG:rw:u16=$XMMr VREG:r:s32=$XMMm;
            return 1144 << 16 | 1964;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSLLW_rynymx::VPSLLW
              // VPSLLW VREG:w:u16=$YMMr VREG:r:u16=$YMMn REG:r:u64=$XMMm;
              return 2024 << 16 | 3896;
            }
            else
            {
              // TEMPLATE.VPSLLW_ronomo_1::VPSLLW
              // VPSLLW VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u64=$XMMm;
              return 2021 << 16 | 3890;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSLLW_ronomo_2::VPSLLW
                // VPSLLW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn             VREG:r:u16=$XMMm;
                return 2022 << 16 | 3892;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSLLW_rynymo::VPSLLW
                // VPSLLW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn             VREG:r:u16=$XMMm;
                return 2023 << 16 | 3894;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSLLW_rznzmo::VPSLLW
                // VPSLLW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn             VREG:r:u16=$XMMm;
                return 2025 << 16 | 3898;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSLLW_rqmq::PSLLW
        // PSLLW REG:rw:u16=$MMXr REG:r:s64=$MMXm;
        return 868 << 16 | 1439;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSLLW_romo_2::PSLLWmx
            // PSLLW VREG:rw:u16=$XMMr MEM:r:s32=$mem128;
            return 1145 << 16 | 1965;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSLLW_rynymx::VPSLLWmx
              // VPSLLW VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u64=$mem128;
              return 2024 << 16 | 3897;
            }
            else
            {
              // TEMPLATE.VPSLLW_ronomo_1::VPSLLWmx
              // VPSLLW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u64=$mem128;
              return 2021 << 16 | 3891;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSLLW_ronomo_2::VPSLLWmx
                // VPSLLW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn             MEM:r:u16=$mem128;
                return 2022 << 16 | 3893;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSLLW_rynymo::VPSLLWmx
                // VPSLLW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn             MEM:r:u16=$mem128;
                return 2023 << 16 | 3895;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSLLW_rznzmo::VPSLLWmx
                // VPSLLW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn             MEM:r:u16=$mem128;
                return 2025 << 16 | 3899;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSLLW_rqmq::PSLLWmq
        // PSLLW REG:rw:u16=$MMXr MEM:r:s64=$mem64;
        return 868 << 16 | 1440;
      }
    }
  break;
  /* 0f.0xf2 */
  case 498:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSLLD_romo_1::PSLLD
            // PSLLD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1138 << 16 | 1958;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSLLD_rynymx::VPSLLD
              // VPSLLD VREG:w:u32=$YMMr VREG:r:u32=$YMMn REG:r:u64=$XMMm;
              return 2004 << 16 | 3860;
            }
            else
            {
              // TEMPLATE.VPSLLD_ronomo_1::VPSLLD
              // VPSLLD VREG:w:u32=$XMMr VREG:r:u32=$XMMn VREG:r:u64=$XMMm;
              return 2001 << 16 | 3854;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSLLD_ronomo_2::VPSLLD
                // VPSLLD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn             VREG:r:u32=$XMMm;
                return 2002 << 16 | 3856;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSLLD_rynymo::VPSLLD
                // VPSLLD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn             VREG:r:u32=$XMMm;
                return 2003 << 16 | 3858;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSLLD_rznzmo::VPSLLD
                // VPSLLD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn             VREG:r:u32=$XMMm;
                return 2005 << 16 | 3862;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSLLD_rqmq::PSLLD
        // PSLLD REG:rw:u32=$MMXr REG:r:s64=$MMXm;
        return 864 << 16 | 1433;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSLLD_romo_2::PSLLDmx
            // PSLLD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1139 << 16 | 1959;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSLLD_rynymx::VPSLLDmx
              // VPSLLD VREG:w:u32=$YMMr VREG:r:u32=$YMMn MEM:r:u64=$mem128;
              return 2004 << 16 | 3861;
            }
            else
            {
              // TEMPLATE.VPSLLD_ronomo_1::VPSLLDmx
              // VPSLLD VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u64=$mem128;
              return 2001 << 16 | 3855;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSLLD_ronomo_2::VPSLLDmx
                // VPSLLD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn             MEM:r:u32=$mem128;
                return 2002 << 16 | 3857;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSLLD_rynymo::VPSLLDmx
                // VPSLLD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn             MEM:r:u32=$mem128;
                return 2003 << 16 | 3859;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSLLD_rznzmo::VPSLLDmx
                // VPSLLD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn             MEM:r:u32=$mem128;
                return 2005 << 16 | 3863;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSLLD_rqmq::PSLLDmq
        // PSLLD REG:rw:u32=$MMXr MEM:r:s64=$mem64;
        return 864 << 16 | 1434;
      }
    }
  break;
  /* 0f.0xf3 */
  case 499:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSLLQ_romo_1::PSLLQ
            // PSLLQ VREG:rw:u64=$XMMr VREG:r:u64=$XMMm;
            return 1141 << 16 | 1961;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSLLQ_rynymx::VPSLLQ
              // VPSLLQ VREG:w:u64=$YMMr VREG:r:u64=$YMMn REG:r:u64=$XMMm;
              return 2014 << 16 | 3878;
            }
            else
            {
              // TEMPLATE.VPSLLQ_ronomo_1::VPSLLQ
              // VPSLLQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
              return 2011 << 16 | 3872;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSLLQ_ronomo_2::VPSLLQ
                // VPSLLQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn             VREG:r:u64=$XMMm;
                return 2012 << 16 | 3874;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSLLQ_rynymo::VPSLLQ
                // VPSLLQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn             VREG:r:u64=$XMMm;
                return 2013 << 16 | 3876;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSLLQ_rznzmo::VPSLLQ
                // VPSLLQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn             VREG:r:u64=$XMMm;
                return 2015 << 16 | 3880;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSLLQ_rqmq::PSLLQ
        // PSLLQ REG:rw:u64=$MMXr REG:r:s64=$MMXm;
        return 866 << 16 | 1436;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSLLQ_romo_2::PSLLQmx
            // PSLLQ VREG:rw:u64=$XMMr MEM:r:u64=$mem128;
            return 1142 << 16 | 1962;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSLLQ_rynymx::VPSLLQmx
              // VPSLLQ VREG:w:u64=$YMMr VREG:r:u64=$YMMn MEM:r:u64=$mem128;
              return 2014 << 16 | 3879;
            }
            else
            {
              // TEMPLATE.VPSLLQ_ronomo_1::VPSLLQmx
              // VPSLLQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem128;
              return 2011 << 16 | 3873;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSLLQ_ronomo_2::VPSLLQmx
                // VPSLLQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn             MEM:r:u64=$mem128;
                return 2012 << 16 | 3875;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSLLQ_rynymo::VPSLLQmx
                // VPSLLQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn             MEM:r:u64=$mem128;
                return 2013 << 16 | 3877;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSLLQ_rznzmo::VPSLLQmx
                // VPSLLQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn             MEM:r:u64=$mem128;
                return 2015 << 16 | 3881;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSLLQ_rqmq::PSLLQmq
        // PSLLQ REG:rw:u64=$MMXr MEM:r:s64=$mem64;
        return 866 << 16 | 1437;
      }
    }
  break;
  /* 0f.0xf4 */
  case 500:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMULUDQ_romo::PMULUDQ
            // PMULUDQ VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1116 << 16 | 1920;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMULUDQ_rynymy_1::VPMULUDQ
              // VPMULUDQ VREG:w:u64=$YMMr VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
              return 1955 << 16 | 3766;
            }
            else
            {
              // TEMPLATE.VPMULUDQ_ronomo_1::VPMULUDQ
              // VPMULUDQ VREG:w:u64=$XMMr VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
              return 1953 << 16 | 3762;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMULUDQ_ronomo_2::VPMULUDQ
                // VPMULUDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
                return 1954 << 16 | 3764;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMULUDQ_rynymy_2::VPMULUDQ
                // VPMULUDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
                return 1956 << 16 | 3768;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMULUDQ_rznzmz::VPMULUDQ
                // VPMULUDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
                return 1957 << 16 | 3770;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMULUDQ_rqmq::PMULUDQ
        // PMULUDQ REG:rw:u32=$MMXr  REG:r:u32=$MMXm;
        return 1117 << 16 | 1922;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMULUDQ_romo::PMULUDQmx
            // PMULUDQ VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1116 << 16 | 1921;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMULUDQ_rynymy_1::VPMULUDQmy
              // VPMULUDQ VREG:w:u64=$YMMr VREG:r:u32=$YMMn MEM:r:u32=$mem256;
              return 1955 << 16 | 3767;
            }
            else
            {
              // TEMPLATE.VPMULUDQ_ronomo_1::VPMULUDQmx
              // VPMULUDQ VREG:w:u64=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem128;
              return 1953 << 16 | 3763;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMULUDQ_ronomo_2::VPMULUDQmx
                // VPMULUDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
                return 1954 << 16 | 3765;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMULUDQ_rynymy_2::VPMULUDQmy
                // VPMULUDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
                return 1956 << 16 | 3769;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMULUDQ_rznzmz::VPMULUDQmz
                // VPMULUDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
                return 1957 << 16 | 3771;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMULUDQ_rqmq::PMULUDQmq
        // PMULUDQ REG:rw:u32=$MMXr  MEM:r:u32=$mem64;
        return 1117 << 16 | 1923;
      }
    }
  break;
  /* 0f.0xf5 */
  case 501:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMADDWD_romo::PMADDWD
            // PMADDWD VREG:rw:s16=$XMMr VREG:r:s16=$XMMm;
            return 1083 << 16 | 1855;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMADDWD_rynymy_1::VPMADDWD
              // VPMADDWD VREG:w:s32=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 1795 << 16 | 3424;
            }
            else
            {
              // TEMPLATE.VPMADDWD_ronomo_1::VPMADDWD
              // VPMADDWD VREG:w:s32=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 1793 << 16 | 3420;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMADDWD_ronomo_2::VPMADDWD
                // VPMADDWD VREG:w:s32=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  VREG:r:s16=$XMMm;
                return 1794 << 16 | 3422;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMADDWD_rynymy_2::VPMADDWD
                // VPMADDWD VREG:w:s32=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  VREG:r:s16=$YMMm;
                return 1796 << 16 | 3426;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMADDWD_rznzmz::VPMADDWD
                // VPMADDWD VREG:w:s32=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  VREG:r:s16=$ZMMm;
                return 1797 << 16 | 3428;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMADDWD_rqmq::PMADDWD
        // PMADDWD REG:rw:s16=$MMXr REG:r:s16=$MMXm;
        return 846 << 16 | 1408;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMADDWD_romo::PMADDWDmx
            // PMADDWD VREG:rw:s16=$XMMr MEM:r:s16=$mem128;
            return 1083 << 16 | 1856;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMADDWD_rynymy_1::VPMADDWDmy
              // VPMADDWD VREG:w:s32=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 1795 << 16 | 3425;
            }
            else
            {
              // TEMPLATE.VPMADDWD_ronomo_1::VPMADDWDmx
              // VPMADDWD VREG:w:s32=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 1793 << 16 | 3421;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMADDWD_ronomo_2::VPMADDWDmx
                // VPMADDWD VREG:w:s32=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  MEM:r:s16=$mem128;
                return 1794 << 16 | 3423;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMADDWD_rynymy_2::VPMADDWDmy
                // VPMADDWD VREG:w:s32=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  MEM:r:s16=$mem256;
                return 1796 << 16 | 3427;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMADDWD_rznzmz::VPMADDWDmz
                // VPMADDWD VREG:w:s32=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  MEM:r:s16=$mem512;
                return 1797 << 16 | 3429;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMADDWD_rqmq::PMADDWDmq
        // PMADDWD REG:rw:s16=$MMXr MEM:r:s16=$mem64;
        return 846 << 16 | 1409;
      }
    }
  break;
  /* 0f.0xf6 */
  case 502:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSADBW_romo::PSADBW
            // PSADBW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1124 << 16 | 1932;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSADBW_rynymy_1::VPSADBW
              // VPSADBW VREG:w:u16=$YMMr VREG:r:u8=$YMMn VREG:r:u8=$YMMm;
              return 1962 << 16 | 3780;
            }
            else
            {
              // TEMPLATE.VPSADBW_ronomo_1::VPSADBW
              // VPSADBW VREG:w:u16=$XMMr VREG:r:u8=$XMMn VREG:r:u8=$XMMm;
              return 1960 << 16 | 3776;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSADBW_ronomo_2::VPSADBW
                // VPSADBW VREG:w:u16=$XMMr VREG:r:u8=$XMMn VREG:r:u8=$XMMm;
                return 1961 << 16 | 3778;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSADBW_rynymy_2::VPSADBW
                // VPSADBW VREG:w:u16=$YMMr VREG:r:u8=$YMMn VREG:r:u8=$YMMm;
                return 1963 << 16 | 3782;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSADBW_rznzmz::VPSADBW
                // VPSADBW VREG:w:u16=$ZMMr VREG:r:u8=$ZMMn VREG:r:u8=$ZMMm;
                return 1964 << 16 | 3784;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSADBW_rqmq::PSADBW
        // PSADBW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 861 << 16 | 1428;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSADBW_romo::PSADBWmx
            // PSADBW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1124 << 16 | 1933;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSADBW_rynymy_1::VPSADBWmy
              // VPSADBW VREG:w:u16=$YMMr VREG:r:u8=$YMMn MEM:r:u8=$mem256;
              return 1962 << 16 | 3781;
            }
            else
            {
              // TEMPLATE.VPSADBW_ronomo_1::VPSADBWmx
              // VPSADBW VREG:w:u16=$XMMr VREG:r:u8=$XMMn MEM:r:u8=$mem128;
              return 1960 << 16 | 3777;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSADBW_ronomo_2::VPSADBWmx
                // VPSADBW VREG:w:u16=$XMMr VREG:r:u8=$XMMn MEM:r:u8=$mem128;
                return 1961 << 16 | 3779;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSADBW_rynymy_2::VPSADBWmy
                // VPSADBW VREG:w:u16=$YMMr VREG:r:u8=$YMMn MEM:r:u8=$mem256;
                return 1963 << 16 | 3783;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSADBW_rznzmz::VPSADBWmz
                // VPSADBW VREG:w:u16=$ZMMr VREG:r:u8=$ZMMn MEM:r:u8=$mem512;
                return 1964 << 16 | 3785;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSADBW_rqmq::PSADBWmq
        // PSADBW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 861 << 16 | 1429;
      }
    }
  break;
  /* 0f.0xf7 */
  case 503:
    if (b & 0x40)
    {
      if (c & 0x01)
      {
        // TEMPLATE.VMASKMOVDQU::VMASKMOVDQUmx
        // VMASKMOVDQU VREG:r:u8=$XMMr VREG:r:u8=$XMMm MEM:SUPP:w:u8={SEG:r=DS BASE:r=$DIa SZ=128};
        return 1414 << 16 | 2621;
      }
      else
      {
        // TEMPLATE.MASKMOVDQU::MASKMOVDQUmx
        // MASKMOVDQU VREG:r:s32=$XMMr VREG:r:s32=$XMMm MEM:SUPP:w:s32={SEG:r=DS BASE:r=$DIa SZ=128};
        return 959 << 16 | 1618;
      }
    }
    else
    {
      // TEMPLATE.MASKMOVQ::MASKMOVQmq
      // MASKMOVQ REG:r:u8=$MMXr REG:r:s8=$MMXm MEM:SUPP:w:s64={SEG:r=DS BASE:r=$DIa SZ=64};
      return 802 << 16 | 1343;
    }
  break;
  /* 0f.0xf8 */
  case 504:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBB_romo::PSUBB
            // PSUBB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1168 << 16 | 1994;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBB_rynymy_1::VPSUBB
              // VPSUBB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  VREG:r:s8=$YMMm;
              return 2108 << 16 | 4064;
            }
            else
            {
              // TEMPLATE.VPSUBB_ronomo_1::VPSUBB
              // VPSUBB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  VREG:r:s8=$XMMm;
              return 2106 << 16 | 4060;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBB_ronomo_2::VPSUBB
                // VPSUBB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   VREG:r:u8=$XMMm;
                return 2107 << 16 | 4062;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBB_rynymy_2::VPSUBB
                // VPSUBB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   VREG:r:u8=$YMMm;
                return 2109 << 16 | 4066;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBB_rznzmz::VPSUBB
                // VPSUBB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   VREG:r:u8=$ZMMm;
                return 2110 << 16 | 4068;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBB_rqmq::PSUBB
        // PSUBB REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 883 << 16 | 1464;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBB_romo::PSUBBmx
            // PSUBB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1168 << 16 | 1995;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBB_rynymy_1::VPSUBBmy
              // VPSUBB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  MEM:r:s8=$mem256;
              return 2108 << 16 | 4065;
            }
            else
            {
              // TEMPLATE.VPSUBB_ronomo_1::VPSUBBmx
              // VPSUBB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  MEM:r:s8=$mem128;
              return 2106 << 16 | 4061;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBB_ronomo_2::VPSUBBmx
                // VPSUBB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   MEM:r:u8=$mem128;
                return 2107 << 16 | 4063;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBB_rynymy_2::VPSUBBmy
                // VPSUBB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   MEM:r:u8=$mem256;
                return 2109 << 16 | 4067;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBB_rznzmz::VPSUBBmz
                // VPSUBB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   MEM:r:u8=$mem512;
                return 2110 << 16 | 4069;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBB_rqmq::PSUBBmq
        // PSUBB REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 883 << 16 | 1465;
      }
    }
  break;
  /* 0f.0xf9 */
  case 505:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBW_romo::PSUBW
            // PSUBW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1170 << 16 | 1998;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBW_rynymy_1::VPSUBW
              // VPSUBW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 2118 << 16 | 4084;
            }
            else
            {
              // TEMPLATE.VPSUBW_ronomo_1::VPSUBW
              // VPSUBW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 2116 << 16 | 4080;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBW_ronomo_2::VPSUBW
                // VPSUBW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 2117 << 16 | 4082;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBW_rynymy_2::VPSUBW
                // VPSUBW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 2119 << 16 | 4086;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBW_rznzmz::VPSUBW
                // VPSUBW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 2120 << 16 | 4088;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBW_rqmq::PSUBW
        // PSUBW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 885 << 16 | 1468;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBW_romo::PSUBWmx
            // PSUBW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1170 << 16 | 1999;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBW_rynymy_1::VPSUBWmy
              // VPSUBW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 2118 << 16 | 4085;
            }
            else
            {
              // TEMPLATE.VPSUBW_ronomo_1::VPSUBWmx
              // VPSUBW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 2116 << 16 | 4081;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBW_ronomo_2::VPSUBWmx
                // VPSUBW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 2117 << 16 | 4083;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBW_rynymy_2::VPSUBWmy
                // VPSUBW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 2119 << 16 | 4087;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBW_rznzmz::VPSUBWmz
                // VPSUBW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 2120 << 16 | 4089;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBW_rqmq::PSUBWmq
        // PSUBW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 885 << 16 | 1469;
      }
    }
  break;
  /* 0f.0xfa */
  case 506:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBD_romo::PSUBD
            // PSUBD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1169 << 16 | 1996;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBD_rynymy_1::VPSUBD
              // VPSUBD VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 2113 << 16 | 4074;
            }
            else
            {
              // TEMPLATE.VPSUBD_ronomo_1::VPSUBD
              // VPSUBD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 2111 << 16 | 4070;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBD_ronomo_2::VPSUBD
                // VPSUBD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
                return 2112 << 16 | 4072;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBD_rynymy_2::VPSUBD
                // VPSUBD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
                return 2114 << 16 | 4076;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBD_rznzmz::VPSUBD
                // VPSUBD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
                return 2115 << 16 | 4078;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            if (c & 0x08)
            {
              // TEMPLATE.VPSUBD_rznzmx::VPSUBD
              // VPSUBD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
              return 3471 << 16 | 7204;
            }
            else
            {
              // TEMPLATE.VPSUBD_rznzmx::VPSUBD
              // VPSUBD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3471 << 16 | 7203;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBD_rqmq::PSUBD
        // PSUBD REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 884 << 16 | 1466;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBD_romo::PSUBDmx
            // PSUBD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1169 << 16 | 1997;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBD_rynymy_1::VPSUBDmy
              // VPSUBD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
              return 2113 << 16 | 4075;
            }
            else
            {
              // TEMPLATE.VPSUBD_ronomo_1::VPSUBDmx
              // VPSUBD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
              return 2111 << 16 | 4071;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBD_ronomo_2::VPSUBDmx
                // VPSUBD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
                return 2112 << 16 | 4073;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBD_rynymy_2::VPSUBDmy
                // VPSUBD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
                return 2114 << 16 | 4077;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBD_rznzmz::VPSUBDmz
                // VPSUBD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
                return 2115 << 16 | 4079;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            // TEMPLATE.VPSUBD_rznzmx::VPSUBDm
            // VPSUBD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
            return 3471 << 16 | 7205;
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBD_rqmq::PSUBDmq
        // PSUBD REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 884 << 16 | 1467;
      }
    }
  break;
  /* 0f.0xfb */
  case 507:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBQ_romo::PSUBQ
            // PSUBQ VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1162 << 16 | 1982;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBQ_rynymy_1::VPSUBQ
              // VPSUBQ VREG:w:s64=$YMMr VREG:r:s64=$YMMn VREG:r:s64=$YMMm;
              return 2083 << 16 | 4014;
            }
            else
            {
              // TEMPLATE.VPSUBQ_ronomo_1::VPSUBQ
              // VPSUBQ VREG:w:s64=$XMMr VREG:r:s64=$XMMn VREG:r:s64=$XMMm;
              return 2081 << 16 | 4010;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBQ_ronomo_2::VPSUBQ
                // VPSUBQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
                return 2082 << 16 | 4012;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBQ_rynymy_2::VPSUBQ
                // VPSUBQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
                return 2084 << 16 | 4016;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBQ_rznzmz::VPSUBQ
                // VPSUBQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
                return 2085 << 16 | 4018;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBQ_rqmq::PSUBQ
        // PSUBQ REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1163 << 16 | 1984;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSUBQ_romo::PSUBQmx
            // PSUBQ VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1162 << 16 | 1983;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSUBQ_rynymy_1::VPSUBQmy
              // VPSUBQ VREG:w:s64=$YMMr VREG:r:s64=$YMMn MEM:r:s64=$mem256;
              return 2083 << 16 | 4015;
            }
            else
            {
              // TEMPLATE.VPSUBQ_ronomo_1::VPSUBQmx
              // VPSUBQ VREG:w:s64=$XMMr VREG:r:s64=$XMMn MEM:r:s64=$mem128;
              return 2081 << 16 | 4011;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSUBQ_ronomo_2::VPSUBQmx
                // VPSUBQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
                return 2082 << 16 | 4013;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSUBQ_rynymy_2::VPSUBQmy
                // VPSUBQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
                return 2084 << 16 | 4017;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSUBQ_rznzmz::VPSUBQmz
                // VPSUBQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
                return 2085 << 16 | 4019;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSUBQ_rqmq::PSUBQmq
        // PSUBQ REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1163 << 16 | 1985;
      }
    }
  break;
  /* 0f.0xfc */
  case 508:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDB_romo::PADDB
            // PADDB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1036 << 16 | 1752;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDB_rynymy_1::VPADDB
              // VPADDB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  VREG:r:s8=$YMMm;
              return 1672 << 16 | 3152;
            }
            else
            {
              // TEMPLATE.VPADDB_ronomo_1::VPADDB
              // VPADDB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  VREG:r:s8=$XMMm;
              return 1670 << 16 | 3148;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDB_ronomo_2::VPADDB
                // VPADDB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   VREG:r:u8=$XMMm;
                return 1671 << 16 | 3150;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDB_rynymy_2::VPADDB
                // VPADDB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   VREG:r:u8=$YMMm;
                return 1673 << 16 | 3154;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDB_rznzmz::VPADDB
                // VPADDB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   VREG:r:u8=$ZMMm;
                return 1674 << 16 | 3156;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDB_rqmq::PADDB
        // PADDB REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 822 << 16 | 1375;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDB_romo::PADDBmx
            // PADDB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1036 << 16 | 1753;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDB_rynymy_1::VPADDBmy
              // VPADDB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  MEM:r:s8=$mem256;
              return 1672 << 16 | 3153;
            }
            else
            {
              // TEMPLATE.VPADDB_ronomo_1::VPADDBmx
              // VPADDB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  MEM:r:s8=$mem128;
              return 1670 << 16 | 3149;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDB_ronomo_2::VPADDBmx
                // VPADDB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn   MEM:r:u8=$mem128;
                return 1671 << 16 | 3151;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDB_rynymy_2::VPADDBmy
                // VPADDB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn   MEM:r:u8=$mem256;
                return 1673 << 16 | 3155;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDB_rznzmz::VPADDBmz
                // VPADDB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn   MEM:r:u8=$mem512;
                return 1674 << 16 | 3157;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDB_rqmq::PADDBmq
        // PADDB REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 822 << 16 | 1376;
      }
    }
  break;
  /* 0f.0xfd */
  case 509:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDW_romo::PADDW
            // PADDW VREG:rw:s16=$XMMr VREG:r:s16=$XMMm;
            return 1040 << 16 | 1760;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDW_rynymy_1::VPADDW
              // VPADDW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 1687 << 16 | 3182;
            }
            else
            {
              // TEMPLATE.VPADDW_ronomo_1::VPADDW
              // VPADDW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 1685 << 16 | 3178;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDW_ronomo_2::VPADDW
                // VPADDW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 1686 << 16 | 3180;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDW_rynymy_2::VPADDW
                // VPADDW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 1688 << 16 | 3184;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDW_rznzmz::VPADDW
                // VPADDW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 1689 << 16 | 3186;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDW_rqmq::PADDW
        // PADDW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 824 << 16 | 1379;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDW_romo::PADDWmx
            // PADDW VREG:rw:s16=$XMMr MEM:r:s16=$mem128;
            return 1040 << 16 | 1761;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDW_rynymy_1::VPADDWmy
              // VPADDW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 1687 << 16 | 3183;
            }
            else
            {
              // TEMPLATE.VPADDW_ronomo_1::VPADDWmx
              // VPADDW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 1685 << 16 | 3179;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDW_ronomo_2::VPADDWmx
                // VPADDW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
                return 1686 << 16 | 3181;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDW_rynymy_2::VPADDWmy
                // VPADDW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
                return 1688 << 16 | 3185;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDW_rznzmz::VPADDWmz
                // VPADDW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
                return 1689 << 16 | 3187;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDW_rqmq::PADDWmq
        // PADDW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 824 << 16 | 1380;
      }
    }
  break;
  /* 0f.0xfe */
  case 510:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDD_romo::PADDD
            // PADDD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1037 << 16 | 1754;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDD_rynymy_1::VPADDD
              // VPADDD VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 1677 << 16 | 3162;
            }
            else
            {
              // TEMPLATE.VPADDD_ronomo_1::VPADDD
              // VPADDD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 1675 << 16 | 3158;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDD_ronomo_2::VPADDD
                // VPADDD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
                return 1676 << 16 | 3160;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDD_rynymy_2::VPADDD
                // VPADDD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
                return 1678 << 16 | 3164;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDD_rznzmz::VPADDD
                // VPADDD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
                return 1679 << 16 | 3166;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            if (c & 0x08)
            {
              // TEMPLATE.VPADDD_rznzmx::VPADDD
              // VPADDD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
              return 3413 << 16 | 7075;
            }
            else
            {
              // TEMPLATE.VPADDD_rznzmx::VPADDD
              // VPADDD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3413 << 16 | 7074;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDD_rqmq::PADDD
        // PADDD REG:rw:s64=$MMXr REG:r:s64=$MMXm;
        return 823 << 16 | 1377;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PADDD_romo::PADDDmx
            // PADDD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1037 << 16 | 1755;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPADDD_rynymy_1::VPADDDmy
              // VPADDD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
              return 1677 << 16 | 3163;
            }
            else
            {
              // TEMPLATE.VPADDD_ronomo_1::VPADDDmx
              // VPADDD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
              return 1675 << 16 | 3159;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPADDD_ronomo_2::VPADDDmx
                // VPADDD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
                return 1676 << 16 | 3161;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPADDD_rynymy_2::VPADDDmy
                // VPADDD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
                return 1678 << 16 | 3165;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPADDD_rznzmz::VPADDDmz
                // VPADDD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
                return 1679 << 16 | 3167;
                break;
              }
              default: break;
            }
            break;
          }
          case 0x03:
          {
            // TEMPLATE.VPADDD_rznzmx::VPADDDm
            // VPADDD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
            return 3413 << 16 | 7076;
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PADDD_rqmq::PADDDmq
        // PADDD REG:rw:s64=$MMXr MEM:r:s64=$mem64;
        return 823 << 16 | 1378;
      }
    }
  break;
  /* 0f.0xff */
  case 511:
    if (a & 0x01)
    {
      // TEMPLATE.UD0::UD0
      // UD0 REG:r=$GPR32r REG:r=$GPR32m;
      return 543 << 16 | 975;
    }
    else
    {
      // TEMPLATE.UD0::UD0md
      // UD0 REG:r=$GPR32r MEM:r:s32=$mem32;
      return 543 << 16 | 976;
    }
  break;
  /* invalid */
  case 512:
    return 0;
  /* invalid */
  case 513:
    return 0;
  /* invalid */
  case 514:
    return 0;
  /* invalid */
  case 515:
    return 0;
  /* invalid */
  case 516:
    return 0;
  /* invalid */
  case 517:
    return 0;
  /* invalid */
  case 518:
    return 0;
  /* invalid */
  case 519:
    return 0;
  /* invalid */
  case 520:
    return 0;
  /* invalid */
  case 521:
    return 0;
  /* invalid */
  case 522:
    return 0;
  /* invalid */
  case 523:
    return 0;
  /* 0f0f.0x0c */
  case 524:
    if (a & 0x01)
    {
      // TEMPLATE.PI2FW::PI2FW
      // PI2FW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 775 << 16 | 1297;
    }
    else
    {
      // TEMPLATE.PI2FW::PI2FWmq
      // PI2FW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 775 << 16 | 1298;
    }
  break;
  /* 0f0f.0x0d */
  case 525:
    if (a & 0x01)
    {
      // TEMPLATE.PI2FD::PI2FD
      // PI2FD REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 793 << 16 | 1332;
    }
    else
    {
      // TEMPLATE.PI2FD::PI2FDmq
      // PI2FD REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 793 << 16 | 1333;
    }
  break;
  /* invalid */
  case 526:
    return 0;
  /* invalid */
  case 527:
    return 0;
  /* invalid */
  case 528:
    return 0;
  /* invalid */
  case 529:
    return 0;
  /* invalid */
  case 530:
    return 0;
  /* invalid */
  case 531:
    return 0;
  /* invalid */
  case 532:
    return 0;
  /* invalid */
  case 533:
    return 0;
  /* invalid */
  case 534:
    return 0;
  /* invalid */
  case 535:
    return 0;
  /* invalid */
  case 536:
    return 0;
  /* invalid */
  case 537:
    return 0;
  /* invalid */
  case 538:
    return 0;
  /* invalid */
  case 539:
    return 0;
  /* 0f0f.0x1c */
  case 540:
    if (a & 0x01)
    {
      // TEMPLATE.PF2IW::PF2IW
      // PF2IW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 772 << 16 | 1291;
    }
    else
    {
      // TEMPLATE.PF2IW::PF2IWmq
      // PF2IW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 772 << 16 | 1292;
    }
  break;
  /* 0f0f.0x1d */
  case 541:
    if (a & 0x01)
    {
      // TEMPLATE.PF2ID::PF2ID
      // PF2ID REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 779 << 16 | 1304;
    }
    else
    {
      // TEMPLATE.PF2ID::PF2IDmq
      // PF2ID REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 779 << 16 | 1305;
    }
  break;
  /* invalid */
  case 542:
    return 0;
  /* invalid */
  case 543:
    return 0;
  /* invalid */
  case 544:
    return 0;
  /* invalid */
  case 545:
    return 0;
  /* invalid */
  case 546:
    return 0;
  /* invalid */
  case 547:
    return 0;
  /* invalid */
  case 548:
    return 0;
  /* invalid */
  case 549:
    return 0;
  /* invalid */
  case 550:
    return 0;
  /* invalid */
  case 551:
    return 0;
  /* invalid */
  case 552:
    return 0;
  /* invalid */
  case 553:
    return 0;
  /* invalid */
  case 554:
    return 0;
  /* invalid */
  case 555:
    return 0;
  /* invalid */
  case 556:
    return 0;
  /* invalid */
  case 557:
    return 0;
  /* invalid */
  case 558:
    return 0;
  /* invalid */
  case 559:
    return 0;
  /* invalid */
  case 560:
    return 0;
  /* invalid */
  case 561:
    return 0;
  /* invalid */
  case 562:
    return 0;
  /* invalid */
  case 563:
    return 0;
  /* invalid */
  case 564:
    return 0;
  /* invalid */
  case 565:
    return 0;
  /* invalid */
  case 566:
    return 0;
  /* invalid */
  case 567:
    return 0;
  /* invalid */
  case 568:
    return 0;
  /* invalid */
  case 569:
    return 0;
  /* invalid */
  case 570:
    return 0;
  /* invalid */
  case 571:
    return 0;
  /* invalid */
  case 572:
    return 0;
  /* invalid */
  case 573:
    return 0;
  /* invalid */
  case 574:
    return 0;
  /* invalid */
  case 575:
    return 0;
  /* invalid */
  case 576:
    return 0;
  /* invalid */
  case 577:
    return 0;
  /* invalid */
  case 578:
    return 0;
  /* invalid */
  case 579:
    return 0;
  /* invalid */
  case 580:
    return 0;
  /* invalid */
  case 581:
    return 0;
  /* invalid */
  case 582:
    return 0;
  /* invalid */
  case 583:
    return 0;
  /* invalid */
  case 584:
    return 0;
  /* invalid */
  case 585:
    return 0;
  /* invalid */
  case 586:
    return 0;
  /* invalid */
  case 587:
    return 0;
  /* invalid */
  case 588:
    return 0;
  /* invalid */
  case 589:
    return 0;
  /* invalid */
  case 590:
    return 0;
  /* invalid */
  case 591:
    return 0;
  /* invalid */
  case 592:
    return 0;
  /* invalid */
  case 593:
    return 0;
  /* invalid */
  case 594:
    return 0;
  /* invalid */
  case 595:
    return 0;
  /* invalid */
  case 596:
    return 0;
  /* invalid */
  case 597:
    return 0;
  /* invalid */
  case 598:
    return 0;
  /* invalid */
  case 599:
    return 0;
  /* invalid */
  case 600:
    return 0;
  /* invalid */
  case 601:
    return 0;
  /* invalid */
  case 602:
    return 0;
  /* invalid */
  case 603:
    return 0;
  /* invalid */
  case 604:
    return 0;
  /* invalid */
  case 605:
    return 0;
  /* invalid */
  case 606:
    return 0;
  /* invalid */
  case 607:
    return 0;
  /* invalid */
  case 608:
    return 0;
  /* invalid */
  case 609:
    return 0;
  /* invalid */
  case 610:
    return 0;
  /* invalid */
  case 611:
    return 0;
  /* invalid */
  case 612:
    return 0;
  /* invalid */
  case 613:
    return 0;
  /* invalid */
  case 614:
    return 0;
  /* invalid */
  case 615:
    return 0;
  /* invalid */
  case 616:
    return 0;
  /* invalid */
  case 617:
    return 0;
  /* invalid */
  case 618:
    return 0;
  /* invalid */
  case 619:
    return 0;
  /* invalid */
  case 620:
    return 0;
  /* invalid */
  case 621:
    return 0;
  /* invalid */
  case 622:
    return 0;
  /* invalid */
  case 623:
    return 0;
  /* invalid */
  case 624:
    return 0;
  /* invalid */
  case 625:
    return 0;
  /* invalid */
  case 626:
    return 0;
  /* invalid */
  case 627:
    return 0;
  /* invalid */
  case 628:
    return 0;
  /* invalid */
  case 629:
    return 0;
  /* invalid */
  case 630:
    return 0;
  /* invalid */
  case 631:
    return 0;
  /* invalid */
  case 632:
    return 0;
  /* invalid */
  case 633:
    return 0;
  /* invalid */
  case 634:
    return 0;
  /* invalid */
  case 635:
    return 0;
  /* invalid */
  case 636:
    return 0;
  /* invalid */
  case 637:
    return 0;
  /* invalid */
  case 638:
    return 0;
  /* invalid */
  case 639:
    return 0;
  /* invalid */
  case 640:
    return 0;
  /* invalid */
  case 641:
    return 0;
  /* invalid */
  case 642:
    return 0;
  /* invalid */
  case 643:
    return 0;
  /* invalid */
  case 644:
    return 0;
  /* invalid */
  case 645:
    return 0;
  /* invalid */
  case 646:
    return 0;
  /* invalid */
  case 647:
    return 0;
  /* invalid */
  case 648:
    return 0;
  /* invalid */
  case 649:
    return 0;
  /* 0f0f.0x8a */
  case 650:
    if (a & 0x01)
    {
      // TEMPLATE.PFNACC::PFNACC
      // PFNACC REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 773 << 16 | 1293;
    }
    else
    {
      // TEMPLATE.PFNACC::PFNACCmq
      // PFNACC REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 773 << 16 | 1294;
    }
  break;
  /* invalid */
  case 651:
    return 0;
  /* invalid */
  case 652:
    return 0;
  /* invalid */
  case 653:
    return 0;
  /* 0f0f.0x8e */
  case 654:
    if (a & 0x01)
    {
      // TEMPLATE.PFPNACC::PFPNACC
      // PFPNACC REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 774 << 16 | 1295;
    }
    else
    {
      // TEMPLATE.PFPNACC::PFPNACCmq
      // PFPNACC REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 774 << 16 | 1296;
    }
  break;
  /* invalid */
  case 655:
    return 0;
  /* 0f0f.0x90 */
  case 656:
    if (a & 0x01)
    {
      // TEMPLATE.PFCMPGE::PFCMPGE
      // PFCMPGE REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 783 << 16 | 1312;
    }
    else
    {
      // TEMPLATE.PFCMPGE::PFCMPGEmq
      // PFCMPGE REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 783 << 16 | 1313;
    }
  break;
  /* invalid */
  case 657:
    return 0;
  /* invalid */
  case 658:
    return 0;
  /* invalid */
  case 659:
    return 0;
  /* 0f0f.0x94 */
  case 660:
    if (a & 0x01)
    {
      // TEMPLATE.PFMIN::PFMIN
      // PFMIN REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 786 << 16 | 1318;
    }
    else
    {
      // TEMPLATE.PFMIN::PFMINmq
      // PFMIN REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 786 << 16 | 1319;
    }
  break;
  /* invalid */
  case 661:
    return 0;
  /* 0f0f.0x96 */
  case 662:
    if (a & 0x01)
    {
      // TEMPLATE.PFRCP::PFRCP
      // PFRCP REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 788 << 16 | 1322;
    }
    else
    {
      // TEMPLATE.PFRCP::PFRCPmq
      // PFRCP REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 788 << 16 | 1323;
    }
  break;
  /* 0f0f.0x97 */
  case 663:
    if (a & 0x01)
    {
      // TEMPLATE.PFSQRT::PFSQRT
      // PFSQRT REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 844 << 16 | 1404;
    }
    else
    {
      // TEMPLATE.PFSQRT::PFSQRTmq
      // PFSQRT REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 844 << 16 | 1405;
    }
  break;
  /* invalid */
  case 664:
    return 0;
  /* invalid */
  case 665:
    return 0;
  /* 0f0f.0x9a */
  case 666:
    if (a & 0x01)
    {
      // TEMPLATE.PFSUB::PFSUB
      // PFSUB REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 791 << 16 | 1328;
    }
    else
    {
      // TEMPLATE.PFSUB::PFSUBmq
      // PFSUB REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 791 << 16 | 1329;
    }
  break;
  /* invalid */
  case 667:
    return 0;
  /* invalid */
  case 668:
    return 0;
  /* invalid */
  case 669:
    return 0;
  /* 0f0f.0x9e */
  case 670:
    if (a & 0x01)
    {
      // TEMPLATE.PFADD::PFADD
      // PFADD REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 781 << 16 | 1308;
    }
    else
    {
      // TEMPLATE.PFADD::PFADDmq
      // PFADD REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 781 << 16 | 1309;
    }
  break;
  /* invalid */
  case 671:
    return 0;
  /* 0f0f.0xa0 */
  case 672:
    if (a & 0x01)
    {
      // TEMPLATE.PFCMPGT::PFCMPGT
      // PFCMPGT REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 784 << 16 | 1314;
    }
    else
    {
      // TEMPLATE.PFCMPGT::PFCMPGTmq
      // PFCMPGT REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 784 << 16 | 1315;
    }
  break;
  /* invalid */
  case 673:
    return 0;
  /* invalid */
  case 674:
    return 0;
  /* invalid */
  case 675:
    return 0;
  /* 0f0f.0xa4 */
  case 676:
    if (a & 0x01)
    {
      // TEMPLATE.PFMAX::PFMAX
      // PFMAX REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 785 << 16 | 1316;
    }
    else
    {
      // TEMPLATE.PFMAX::PFMAXmq
      // PFMAX REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 785 << 16 | 1317;
    }
  break;
  /* invalid */
  case 677:
    return 0;
  /* 0f0f.0xa6 */
  case 678:
    if (a & 0x01)
    {
      // TEMPLATE.PFCPIT1::PFCPIT1
      // PFCPIT1 REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 843 << 16 | 1402;
    }
    else
    {
      // TEMPLATE.PFCPIT1::PFCPIT1mq
      // PFCPIT1 REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 843 << 16 | 1403;
    }
  break;
  /* 0f0f.0xa7 */
  case 679:
    if (a & 0x01)
    {
      // TEMPLATE.PFRSQIT1::PFRSQIT1
      // PFRSQIT1 REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 790 << 16 | 1326;
    }
    else
    {
      // TEMPLATE.PFRSQIT1::PFRSQIT1mq
      // PFRSQIT1 REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 790 << 16 | 1327;
    }
  break;
  /* invalid */
  case 680:
    return 0;
  /* invalid */
  case 681:
    return 0;
  /* 0f0f.0xaa */
  case 682:
    if (a & 0x01)
    {
      // TEMPLATE.PFSUBR::PFSUBR
      // PFSUBR REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 792 << 16 | 1330;
    }
    else
    {
      // TEMPLATE.PFSUBR::PFSUBRmq
      // PFSUBR REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 792 << 16 | 1331;
    }
  break;
  /* invalid */
  case 683:
    return 0;
  /* invalid */
  case 684:
    return 0;
  /* invalid */
  case 685:
    return 0;
  /* 0f0f.0xae */
  case 686:
    if (a & 0x01)
    {
      // TEMPLATE.PFACC::PFACC
      // PFACC REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 780 << 16 | 1306;
    }
    else
    {
      // TEMPLATE.PFACC::PFACCmq
      // PFACC REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 780 << 16 | 1307;
    }
  break;
  /* invalid */
  case 687:
    return 0;
  /* 0f0f.0xb0 */
  case 688:
    if (a & 0x01)
    {
      // TEMPLATE.PFCMPEQ::PFCMPEQ
      // PFCMPEQ REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 782 << 16 | 1310;
    }
    else
    {
      // TEMPLATE.PFCMPEQ::PFCMPEQmq
      // PFCMPEQ REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 782 << 16 | 1311;
    }
  break;
  /* invalid */
  case 689:
    return 0;
  /* invalid */
  case 690:
    return 0;
  /* invalid */
  case 691:
    return 0;
  /* 0f0f.0xb4 */
  case 692:
    if (a & 0x01)
    {
      // TEMPLATE.PFMUL::PFMUL
      // PFMUL REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 787 << 16 | 1320;
    }
    else
    {
      // TEMPLATE.PFMUL::PFMULmq
      // PFMUL REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 787 << 16 | 1321;
    }
  break;
  /* invalid */
  case 693:
    return 0;
  /* 0f0f.0xb6 */
  case 694:
    if (a & 0x01)
    {
      // TEMPLATE.PFRCPIT2::PFRCPIT2
      // PFRCPIT2 REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 789 << 16 | 1324;
    }
    else
    {
      // TEMPLATE.PFRCPIT2::PFRCPIT2mq
      // PFRCPIT2 REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 789 << 16 | 1325;
    }
  break;
  /* 0f0f.0xb7 */
  case 695:
    if (a & 0x01)
    {
      // TEMPLATE.PMULHRW::PMULHRW
      // PMULHRW REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 794 << 16 | 1334;
    }
    else
    {
      // TEMPLATE.PMULHRW::PMULHRWmq
      // PMULHRW REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 794 << 16 | 1335;
    }
  break;
  /* invalid */
  case 696:
    return 0;
  /* invalid */
  case 697:
    return 0;
  /* invalid */
  case 698:
    return 0;
  /* 0f0f.0xbb */
  case 699:
    if (a & 0x01)
    {
      // TEMPLATE.PSWAPD::PSWAPD
      // PSWAPD REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 776 << 16 | 1299;
    }
    else
    {
      // TEMPLATE.PSWAPD::PSWAPDmq
      // PSWAPD REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 776 << 16 | 1300;
    }
  break;
  /* invalid */
  case 700:
    return 0;
  /* invalid */
  case 701:
    return 0;
  /* invalid */
  case 702:
    return 0;
  /* 0f0f.0xbf */
  case 703:
    if (a & 0x01)
    {
      // TEMPLATE.PAVGUSB::PAVGUSB
      // PAVGUSB REG:rw:s64=$MMXr REG:r:s64=$MMXm;
      return 778 << 16 | 1302;
    }
    else
    {
      // TEMPLATE.PAVGUSB::PAVGUSBmq
      // PAVGUSB REG:rw:s64=$MMXr MEM:r:s64=$mem64;
      return 778 << 16 | 1303;
    }
  break;
  /* invalid */
  case 704:
    return 0;
  /* invalid */
  case 705:
    return 0;
  /* invalid */
  case 706:
    return 0;
  /* invalid */
  case 707:
    return 0;
  /* invalid */
  case 708:
    return 0;
  /* invalid */
  case 709:
    return 0;
  /* invalid */
  case 710:
    return 0;
  /* invalid */
  case 711:
    return 0;
  /* invalid */
  case 712:
    return 0;
  /* invalid */
  case 713:
    return 0;
  /* invalid */
  case 714:
    return 0;
  /* invalid */
  case 715:
    return 0;
  /* invalid */
  case 716:
    return 0;
  /* invalid */
  case 717:
    return 0;
  /* invalid */
  case 718:
    return 0;
  /* invalid */
  case 719:
    return 0;
  /* invalid */
  case 720:
    return 0;
  /* invalid */
  case 721:
    return 0;
  /* invalid */
  case 722:
    return 0;
  /* invalid */
  case 723:
    return 0;
  /* invalid */
  case 724:
    return 0;
  /* invalid */
  case 725:
    return 0;
  /* invalid */
  case 726:
    return 0;
  /* invalid */
  case 727:
    return 0;
  /* invalid */
  case 728:
    return 0;
  /* invalid */
  case 729:
    return 0;
  /* invalid */
  case 730:
    return 0;
  /* invalid */
  case 731:
    return 0;
  /* invalid */
  case 732:
    return 0;
  /* invalid */
  case 733:
    return 0;
  /* invalid */
  case 734:
    return 0;
  /* invalid */
  case 735:
    return 0;
  /* invalid */
  case 736:
    return 0;
  /* invalid */
  case 737:
    return 0;
  /* invalid */
  case 738:
    return 0;
  /* invalid */
  case 739:
    return 0;
  /* invalid */
  case 740:
    return 0;
  /* invalid */
  case 741:
    return 0;
  /* invalid */
  case 742:
    return 0;
  /* invalid */
  case 743:
    return 0;
  /* invalid */
  case 744:
    return 0;
  /* invalid */
  case 745:
    return 0;
  /* invalid */
  case 746:
    return 0;
  /* invalid */
  case 747:
    return 0;
  /* invalid */
  case 748:
    return 0;
  /* invalid */
  case 749:
    return 0;
  /* invalid */
  case 750:
    return 0;
  /* invalid */
  case 751:
    return 0;
  /* invalid */
  case 752:
    return 0;
  /* invalid */
  case 753:
    return 0;
  /* invalid */
  case 754:
    return 0;
  /* invalid */
  case 755:
    return 0;
  /* invalid */
  case 756:
    return 0;
  /* invalid */
  case 757:
    return 0;
  /* invalid */
  case 758:
    return 0;
  /* invalid */
  case 759:
    return 0;
  /* invalid */
  case 760:
    return 0;
  /* invalid */
  case 761:
    return 0;
  /* invalid */
  case 762:
    return 0;
  /* invalid */
  case 763:
    return 0;
  /* invalid */
  case 764:
    return 0;
  /* invalid */
  case 765:
    return 0;
  /* invalid */
  case 766:
    return 0;
  /* invalid */
  case 767:
    return 0;
  /* 0f38.0x00 */
  case 768:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSHUFB_romo::PSHUFB
            // PSHUFB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1125 << 16 | 1934;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSHUFB_rynymy_1::VPSHUFB
              // VPSHUFB VREG:w:u8=$YMMr VREG:r:u8=$YMMn VREG:r:u8=$YMMm;
              return 1967 << 16 | 3790;
            }
            else
            {
              // TEMPLATE.VPSHUFB_ronomo_1::VPSHUFB
              // VPSHUFB VREG:w:u8=$XMMr VREG:r:u8=$XMMn VREG:r:u8=$XMMm;
              return 1965 << 16 | 3786;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSHUFB_ronomo_2::VPSHUFB
                // VPSHUFB VREG:w:u8=$XMMr PREG:r:Z=$Kk    VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
                return 1966 << 16 | 3788;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSHUFB_rynymy_2::VPSHUFB
                // VPSHUFB VREG:w:u8=$YMMr PREG:r:Z=$Kk    VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
                return 1968 << 16 | 3792;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSHUFB_rznzmz::VPSHUFB
                // VPSHUFB VREG:w:u8=$ZMMr PREG:r:Z=$Kk    VREG:r:u8=$ZMMn  VREG:r:u8=$ZMMm;
                return 1969 << 16 | 3794;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSHUFB_rqmq::PSHUFB
        // PSHUFB REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1126 << 16 | 1936;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PSHUFB_romo::PSHUFBmx
            // PSHUFB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1125 << 16 | 1935;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPSHUFB_rynymy_1::VPSHUFBmy
              // VPSHUFB VREG:w:u8=$YMMr VREG:r:u8=$YMMn MEM:r:u8=$mem256;
              return 1967 << 16 | 3791;
            }
            else
            {
              // TEMPLATE.VPSHUFB_ronomo_1::VPSHUFBmx
              // VPSHUFB VREG:w:u8=$XMMr VREG:r:u8=$XMMn MEM:r:u8=$mem128;
              return 1965 << 16 | 3787;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPSHUFB_ronomo_2::VPSHUFBmx
                // VPSHUFB VREG:w:u8=$XMMr PREG:r:Z=$Kk    VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
                return 1966 << 16 | 3789;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPSHUFB_rynymy_2::VPSHUFBmy
                // VPSHUFB VREG:w:u8=$YMMr PREG:r:Z=$Kk    VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
                return 1968 << 16 | 3793;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPSHUFB_rznzmz::VPSHUFBmz
                // VPSHUFB VREG:w:u8=$ZMMr PREG:r:Z=$Kk    VREG:r:u8=$ZMMn  MEM:r:u8=$mem512;
                return 1969 << 16 | 3795;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PSHUFB_rqmq::PSHUFBmq
        // PSHUFB REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1126 << 16 | 1937;
      }
    }
  break;
  /* 0f38.0x01 */
  case 769:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHADDW_rynymy::VPHADDW
            // VPHADDW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
            return 1774 << 16 | 3374;
          }
          else
          {
            // TEMPLATE.VPHADDW_ronomo::VPHADDW
            // VPHADDW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
            return 1773 << 16 | 3372;
          }
        }
        else
        {
          // TEMPLATE.PHADDW_romo::PHADDW
          // PHADDW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1069 << 16 | 1825;
        }
      }
      else
      {
        // TEMPLATE.PHADDW_rqmq::PHADDW
        // PHADDW REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1070 << 16 | 1827;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHADDW_rynymy::VPHADDWmy
            // VPHADDW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
            return 1774 << 16 | 3375;
          }
          else
          {
            // TEMPLATE.VPHADDW_ronomo::VPHADDWmx
            // VPHADDW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
            return 1773 << 16 | 3373;
          }
        }
        else
        {
          // TEMPLATE.PHADDW_romo::PHADDWmx
          // PHADDW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1069 << 16 | 1826;
        }
      }
      else
      {
        // TEMPLATE.PHADDW_rqmq::PHADDWmq
        // PHADDW REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1070 << 16 | 1828;
      }
    }
  break;
  /* 0f38.0x02 */
  case 770:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHADDD_rynymy::VPHADDD
            // VPHADDD VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
            return 1772 << 16 | 3370;
          }
          else
          {
            // TEMPLATE.VPHADDD_ronomo::VPHADDD
            // VPHADDD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
            return 1771 << 16 | 3368;
          }
        }
        else
        {
          // TEMPLATE.PHADDD_romo::PHADDD
          // PHADDD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1067 << 16 | 1821;
        }
      }
      else
      {
        // TEMPLATE.PHADDD_rqmq::PHADDD
        // PHADDD REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1068 << 16 | 1823;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHADDD_rynymy::VPHADDDmy
            // VPHADDD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
            return 1772 << 16 | 3371;
          }
          else
          {
            // TEMPLATE.VPHADDD_ronomo::VPHADDDmx
            // VPHADDD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
            return 1771 << 16 | 3369;
          }
        }
        else
        {
          // TEMPLATE.PHADDD_romo::PHADDDmx
          // PHADDD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1067 << 16 | 1822;
        }
      }
      else
      {
        // TEMPLATE.PHADDD_rqmq::PHADDDmq
        // PHADDD REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1068 << 16 | 1824;
      }
    }
  break;
  /* 0f38.0x03 */
  case 771:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHADDSW_rynymy::VPHADDSW
            // VPHADDSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
            return 1770 << 16 | 3366;
          }
          else
          {
            // TEMPLATE.VPHADDSW_ronomo::VPHADDSW
            // VPHADDSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
            return 1769 << 16 | 3364;
          }
        }
        else
        {
          // TEMPLATE.PHADDSW_romo::PHADDSW
          // PHADDSW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1065 << 16 | 1817;
        }
      }
      else
      {
        // TEMPLATE.PHADDSW_rqmq::PHADDSW
        // PHADDSW REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1066 << 16 | 1819;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHADDSW_rynymy::VPHADDSWmy
            // VPHADDSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
            return 1770 << 16 | 3367;
          }
          else
          {
            // TEMPLATE.VPHADDSW_ronomo::VPHADDSWmx
            // VPHADDSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
            return 1769 << 16 | 3365;
          }
        }
        else
        {
          // TEMPLATE.PHADDSW_romo::PHADDSWmx
          // PHADDSW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1065 << 16 | 1818;
        }
      }
      else
      {
        // TEMPLATE.PHADDSW_rqmq::PHADDSWmq
        // PHADDSW REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1066 << 16 | 1820;
      }
    }
  break;
  /* 0f38.0x04 */
  case 772:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMADDUBSW_romo::PMADDUBSW
            // PMADDUBSW VREG:rw:s8=$XMMr VREG:r:s8=$XMMm;
            return 1081 << 16 | 1851;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMADDUBSW_rynymy_1::VPMADDUBSW
              // VPMADDUBSW VREG:w:s16=$YMMr VREG:r:u8=$YMMn VREG:r:s8=$YMMm;
              return 1790 << 16 | 3414;
            }
            else
            {
              // TEMPLATE.VPMADDUBSW_ronomo_1::VPMADDUBSW
              // VPMADDUBSW VREG:w:s16=$XMMr VREG:r:u8=$XMMn VREG:r:s8=$XMMm;
              return 1788 << 16 | 3410;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMADDUBSW_ronomo_2::VPMADDUBSW
                // VPMADDUBSW VREG:w:s16=$XMMr PREG:r:Z=$Kk    VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
                return 1789 << 16 | 3412;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMADDUBSW_rynymy_2::VPMADDUBSW
                // VPMADDUBSW VREG:w:s16=$YMMr PREG:r:Z=$Kk    VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
                return 1791 << 16 | 3416;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMADDUBSW_rznzmz::VPMADDUBSW
                // VPMADDUBSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk    VREG:r:s16=$ZMMn VREG:r:s16=$ZMMm;
                return 1792 << 16 | 3418;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMADDUBSW_rqmq::PMADDUBSW
        // PMADDUBSW REG:rw:s8=$MMXr  REG:r:s8=$MMXm;
        return 1082 << 16 | 1853;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMADDUBSW_romo::PMADDUBSWmx
            // PMADDUBSW VREG:rw:s8=$XMMr MEM:r:s8=$mem128;
            return 1081 << 16 | 1852;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMADDUBSW_rynymy_1::VPMADDUBSWmy
              // VPMADDUBSW VREG:w:s16=$YMMr VREG:r:u8=$YMMn MEM:r:s8=$mem256;
              return 1790 << 16 | 3415;
            }
            else
            {
              // TEMPLATE.VPMADDUBSW_ronomo_1::VPMADDUBSWmx
              // VPMADDUBSW VREG:w:s16=$XMMr VREG:r:u8=$XMMn MEM:r:s8=$mem128;
              return 1788 << 16 | 3411;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMADDUBSW_ronomo_2::VPMADDUBSWmx
                // VPMADDUBSW VREG:w:s16=$XMMr PREG:r:Z=$Kk    VREG:r:s16=$XMMn MEM:r:s16=$mem128;
                return 1789 << 16 | 3413;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMADDUBSW_rynymy_2::VPMADDUBSWmy
                // VPMADDUBSW VREG:w:s16=$YMMr PREG:r:Z=$Kk    VREG:r:s16=$YMMn MEM:r:s16=$mem256;
                return 1791 << 16 | 3417;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMADDUBSW_rznzmz::VPMADDUBSWmz
                // VPMADDUBSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk    VREG:r:s16=$ZMMn MEM:r:s16=$mem512;
                return 1792 << 16 | 3419;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMADDUBSW_rqmq::PMADDUBSWmq
        // PMADDUBSW REG:rw:s8=$MMXr  MEM:r:s8=$mem64;
        return 1082 << 16 | 1854;
      }
    }
  break;
  /* 0f38.0x05 */
  case 773:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHSUBW_rynymy::VPHSUBW
            // VPHSUBW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
            return 1781 << 16 | 3388;
          }
          else
          {
            // TEMPLATE.VPHSUBW_ronomo::VPHSUBW
            // VPHSUBW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
            return 1780 << 16 | 3386;
          }
        }
        else
        {
          // TEMPLATE.PHSUBW_romo::PHSUBW
          // PHSUBW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1076 << 16 | 1839;
        }
      }
      else
      {
        // TEMPLATE.PHSUBW_rqmq::PHSUBW
        // PHSUBW REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1077 << 16 | 1841;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHSUBW_rynymy::VPHSUBWmy
            // VPHSUBW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
            return 1781 << 16 | 3389;
          }
          else
          {
            // TEMPLATE.VPHSUBW_ronomo::VPHSUBWmx
            // VPHSUBW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
            return 1780 << 16 | 3387;
          }
        }
        else
        {
          // TEMPLATE.PHSUBW_romo::PHSUBWmx
          // PHSUBW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1076 << 16 | 1840;
        }
      }
      else
      {
        // TEMPLATE.PHSUBW_rqmq::PHSUBWmq
        // PHSUBW REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1077 << 16 | 1842;
      }
    }
  break;
  /* 0f38.0x06 */
  case 774:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHSUBD_rynymy::VPHSUBD
            // VPHSUBD VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
            return 1779 << 16 | 3384;
          }
          else
          {
            // TEMPLATE.VPHSUBD_ronomo::VPHSUBD
            // VPHSUBD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
            return 1778 << 16 | 3382;
          }
        }
        else
        {
          // TEMPLATE.PHSUBD_romo::PHSUBD
          // PHSUBD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1074 << 16 | 1835;
        }
      }
      else
      {
        // TEMPLATE.PHSUBD_rqmq::PHSUBD
        // PHSUBD REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1075 << 16 | 1837;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHSUBD_rynymy::VPHSUBDmy
            // VPHSUBD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
            return 1779 << 16 | 3385;
          }
          else
          {
            // TEMPLATE.VPHSUBD_ronomo::VPHSUBDmx
            // VPHSUBD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
            return 1778 << 16 | 3383;
          }
        }
        else
        {
          // TEMPLATE.PHSUBD_romo::PHSUBDmx
          // PHSUBD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1074 << 16 | 1836;
        }
      }
      else
      {
        // TEMPLATE.PHSUBD_rqmq::PHSUBDmq
        // PHSUBD REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1075 << 16 | 1838;
      }
    }
  break;
  /* 0f38.0x07 */
  case 775:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHSUBSW_rynymy::VPHSUBSW
            // VPHSUBSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
            return 1777 << 16 | 3380;
          }
          else
          {
            // TEMPLATE.VPHSUBSW_ronomo::VPHSUBSW
            // VPHSUBSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
            return 1776 << 16 | 3378;
          }
        }
        else
        {
          // TEMPLATE.PHSUBSW_romo::PHSUBSW
          // PHSUBSW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1072 << 16 | 1831;
        }
      }
      else
      {
        // TEMPLATE.PHSUBSW_rqmq::PHSUBSW
        // PHSUBSW REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1073 << 16 | 1833;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPHSUBSW_rynymy::VPHSUBSWmy
            // VPHSUBSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
            return 1777 << 16 | 3381;
          }
          else
          {
            // TEMPLATE.VPHSUBSW_ronomo::VPHSUBSWmx
            // VPHSUBSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
            return 1776 << 16 | 3379;
          }
        }
        else
        {
          // TEMPLATE.PHSUBSW_romo::PHSUBSWmx
          // PHSUBSW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1072 << 16 | 1832;
        }
      }
      else
      {
        // TEMPLATE.PHSUBSW_rqmq::PHSUBSWmq
        // PHSUBSW REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1073 << 16 | 1834;
      }
    }
  break;
  /* 0f38.0x08 */
  case 776:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPSIGNB_rynymy::VPSIGNB
            // VPSIGNB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  VREG:r:s8=$YMMm;
            return 1986 << 16 | 3828;
          }
          else
          {
            // TEMPLATE.VPSIGNB_ronomo::VPSIGNB
            // VPSIGNB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  VREG:r:s8=$XMMm;
            return 1985 << 16 | 3826;
          }
        }
        else
        {
          // TEMPLATE.PSIGNB_romo::PSIGNB
          // PSIGNB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1130 << 16 | 1944;
        }
      }
      else
      {
        // TEMPLATE.PSIGNB_rqmq::PSIGNB
        // PSIGNB REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1131 << 16 | 1946;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPSIGNB_rynymy::VPSIGNBmy
            // VPSIGNB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  MEM:r:s8=$mem256;
            return 1986 << 16 | 3829;
          }
          else
          {
            // TEMPLATE.VPSIGNB_ronomo::VPSIGNBmx
            // VPSIGNB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  MEM:r:s8=$mem128;
            return 1985 << 16 | 3827;
          }
        }
        else
        {
          // TEMPLATE.PSIGNB_romo::PSIGNBmx
          // PSIGNB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1130 << 16 | 1945;
        }
      }
      else
      {
        // TEMPLATE.PSIGNB_rqmq::PSIGNBmq
        // PSIGNB REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1131 << 16 | 1947;
      }
    }
  break;
  /* 0f38.0x09 */
  case 777:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPSIGNW_rynymy::VPSIGNW
            // VPSIGNW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
            return 1990 << 16 | 3836;
          }
          else
          {
            // TEMPLATE.VPSIGNW_ronomo::VPSIGNW
            // VPSIGNW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
            return 1989 << 16 | 3834;
          }
        }
        else
        {
          // TEMPLATE.PSIGNW_romo::PSIGNW
          // PSIGNW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1134 << 16 | 1952;
        }
      }
      else
      {
        // TEMPLATE.PSIGNW_rqmq::PSIGNW
        // PSIGNW REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1135 << 16 | 1954;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPSIGNW_rynymy::VPSIGNWmy
            // VPSIGNW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
            return 1990 << 16 | 3837;
          }
          else
          {
            // TEMPLATE.VPSIGNW_ronomo::VPSIGNWmx
            // VPSIGNW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
            return 1989 << 16 | 3835;
          }
        }
        else
        {
          // TEMPLATE.PSIGNW_romo::PSIGNWmx
          // PSIGNW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1134 << 16 | 1953;
        }
      }
      else
      {
        // TEMPLATE.PSIGNW_rqmq::PSIGNWmq
        // PSIGNW REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1135 << 16 | 1955;
      }
    }
  break;
  /* 0f38.0x0a */
  case 778:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPSIGND_rynymy::VPSIGND
            // VPSIGND VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
            return 1988 << 16 | 3832;
          }
          else
          {
            // TEMPLATE.VPSIGND_ronomo::VPSIGND
            // VPSIGND VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
            return 1987 << 16 | 3830;
          }
        }
        else
        {
          // TEMPLATE.PSIGND_romo::PSIGND
          // PSIGND VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1132 << 16 | 1948;
        }
      }
      else
      {
        // TEMPLATE.PSIGND_rqmq::PSIGND
        // PSIGND REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1133 << 16 | 1950;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPSIGND_rynymy::VPSIGNDmy
            // VPSIGND VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
            return 1988 << 16 | 3833;
          }
          else
          {
            // TEMPLATE.VPSIGND_ronomo::VPSIGNDmx
            // VPSIGND VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
            return 1987 << 16 | 3831;
          }
        }
        else
        {
          // TEMPLATE.PSIGND_romo::PSIGNDmx
          // PSIGND VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1132 << 16 | 1949;
        }
      }
      else
      {
        // TEMPLATE.PSIGND_rqmq::PSIGNDmq
        // PSIGND REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1133 << 16 | 1951;
      }
    }
  break;
  /* 0f38.0x0b */
  case 779:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMULHRSW_romo::PMULHRSW
            // PMULHRSW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1110 << 16 | 1908;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMULHRSW_rynymy_1::VPMULHRSW
              // VPMULHRSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn VREG:r:s16=$YMMm;
              return 1927 << 16 | 3710;
            }
            else
            {
              // TEMPLATE.VPMULHRSW_ronomo_1::VPMULHRSW
              // VPMULHRSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm;
              return 1925 << 16 | 3706;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMULHRSW_ronomo_2::VPMULHRSW
                // VPMULHRSW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  VREG:r:s16=$XMMm;
                return 1926 << 16 | 3708;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMULHRSW_rynymy_2::VPMULHRSW
                // VPMULHRSW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  VREG:r:s16=$YMMm;
                return 1928 << 16 | 3712;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMULHRSW_rznzmz::VPMULHRSW
                // VPMULHRSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  VREG:r:s16=$ZMMm;
                return 1929 << 16 | 3714;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMULHRSW_rqmq::PMULHRSW
        // PMULHRSW REG:rw:s64=$MMXr  REG:r:s64=$MMXm;
        return 1111 << 16 | 1910;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMULHRSW_romo::PMULHRSWmx
            // PMULHRSW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
            return 1110 << 16 | 1909;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMULHRSW_rynymy_1::VPMULHRSWmy
              // VPMULHRSW VREG:w:s16=$YMMr VREG:r:s16=$YMMn MEM:r:s16=$mem256;
              return 1927 << 16 | 3711;
            }
            else
            {
              // TEMPLATE.VPMULHRSW_ronomo_1::VPMULHRSWmx
              // VPMULHRSW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128;
              return 1925 << 16 | 3707;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMULHRSW_ronomo_2::VPMULHRSWmx
                // VPMULHRSW VREG:w:s16=$XMMr PREG:r:Z=$Kk     VREG:r:s16=$XMMn  MEM:r:s16=$mem128;
                return 1926 << 16 | 3709;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMULHRSW_rynymy_2::VPMULHRSWmy
                // VPMULHRSW VREG:w:s16=$YMMr PREG:r:Z=$Kk     VREG:r:s16=$YMMn  MEM:r:s16=$mem256;
                return 1928 << 16 | 3713;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMULHRSW_rznzmz::VPMULHRSWmz
                // VPMULHRSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk     VREG:r:s16=$ZMMn  MEM:r:s16=$mem512;
                return 1929 << 16 | 3715;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PMULHRSW_rqmq::PMULHRSWmq
        // PMULHRSW REG:rw:s64=$MMXr  MEM:r:s64=$mem64;
        return 1111 << 16 | 1911;
      }
    }
  break;
  /* 0f38.0x0c */
  case 780:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMILPS_rxnxmx::VPERMILPS
          // VPERMILPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn  VREG:r:u32=$YMMm;
          return 2737 << 16 | 5600;
        }
        else
        {
          // TEMPLATE.VPERMILPS_rynymy::VPERMILPS
          // VPERMILPS VREG:w:f32=$YMMr PREG:r:Z=$Kk      VREG:r:f32=$YMMn             VREG:r:f32=$YMMm;
          return 2739 << 16 | 5605;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPERMILPS_rznzmz::VPERMILPS
          // VPERMILPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$ZMMn             VREG:r:f32=$ZMMm;
          return 2741 << 16 | 5609;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPERMILPS_rxnxmx::VPERMILPS
            // VPERMILPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn  VREG:r:u32=$XMMm;
            return 2737 << 16 | 5599;
          }
          else
          {
            // TEMPLATE.VPERMILPS_ronomo::VPERMILPS
            // VPERMILPS VREG:w:f32=$XMMr PREG:r:Z=$Kk      VREG:r:f32=$XMMn             VREG:r:f32=$XMMm;
            return 2735 << 16 | 5593;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMILPS_rxnxmx::VPERMILPSmy
          // VPERMILPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn  MEM:r:u32=$mem256;
          return 2737 << 16 | 5602;
        }
        else
        {
          // TEMPLATE.VPERMILPS_rynymy::VPERMILPSmy
          // VPERMILPS VREG:w:f32=$YMMr PREG:r:Z=$Kk      VREG:r:f32=$YMMn             MEM:r:f32=$mem256 BCST=$BCST;
          return 2739 << 16 | 5606;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPERMILPS_rznzmz::VPERMILPSmz
          // VPERMILPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$ZMMn             MEM:r:f32=$mem512 BCST=$BCST;
          return 2741 << 16 | 5610;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPERMILPS_rxnxmx::VPERMILPSmx
            // VPERMILPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn  MEM:r:u32=$mem128;
            return 2737 << 16 | 5601;
          }
          else
          {
            // TEMPLATE.VPERMILPS_ronomo::VPERMILPSmx
            // VPERMILPS VREG:w:f32=$XMMr PREG:r:Z=$Kk      VREG:r:f32=$XMMn             MEM:r:f32=$mem128 BCST=$BCST;
            return 2735 << 16 | 5594;
          }
        }
      }
    }
  break;
  /* 0f38.0x0d */
  case 781:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMILPD_rxnxmx::VPERMILPD
          // VPERMILPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn  VREG:r:u64=$YMMm;
          return 2729 << 16 | 5580;
        }
        else
        {
          // TEMPLATE.VPERMILPD_rynymy::VPERMILPD
          // VPERMILPD VREG:w:f64=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$YMMn             VREG:r:f64=$YMMm;
          return 2731 << 16 | 5585;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPERMILPD_rznzmz::VPERMILPD
          // VPERMILPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMn             VREG:r:f64=$ZMMm;
          return 2733 << 16 | 5589;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPERMILPD_rxnxmx::VPERMILPD
            // VPERMILPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn  VREG:r:u64=$XMMm;
            return 2729 << 16 | 5579;
          }
          else
          {
            // TEMPLATE.VPERMILPD_ronomo::VPERMILPD
            // VPERMILPD VREG:w:f64=$XMMr PREG:r:Z=$Kk      VREG:r:f64=$XMMn             VREG:r:f64=$XMMm;
            return 2727 << 16 | 5573;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMILPD_rxnxmx::VPERMILPDmy
          // VPERMILPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn  MEM:r:u64=$mem256;
          return 2729 << 16 | 5582;
        }
        else
        {
          // TEMPLATE.VPERMILPD_rynymy::VPERMILPDmy
          // VPERMILPD VREG:w:f64=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$YMMn             MEM:r:f64=$mem256 BCST=$BCST;
          return 2731 << 16 | 5586;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPERMILPD_rznzmz::VPERMILPDmz
          // VPERMILPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMn             MEM:r:f64=$mem512 BCST=$BCST;
          return 2733 << 16 | 5590;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPERMILPD_rxnxmx::VPERMILPDmx
            // VPERMILPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn  MEM:r:u64=$mem128;
            return 2729 << 16 | 5581;
          }
          else
          {
            // TEMPLATE.VPERMILPD_ronomo::VPERMILPDmx
            // VPERMILPD VREG:w:f64=$XMMr PREG:r:Z=$Kk      VREG:r:f64=$XMMn             MEM:r:f64=$mem128 BCST=$BCST;
            return 2727 << 16 | 5574;
          }
        }
      }
    }
  break;
  /* 0f38.0x0e */
  case 782:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        // TEMPLATE.VTESTPS::VTESTPS
        // VTESTPS VREG:r:f32=$YMMr VREG:r:f32=$YMMm;
        return 3070 << 16 | 6340;
      }
      else
      {
        // TEMPLATE.VTESTPS::VTESTPS
        // VTESTPS VREG:r:f32=$XMMr VREG:r:f32=$XMMm;
        return 3070 << 16 | 6339;
      }
    }
    else
    {
      if (b & 0x01)
      {
        // TEMPLATE.VTESTPS::VTESTPSmy
        // VTESTPS VREG:r:f32=$YMMr MEM:r:f32=$mem256;
        return 3070 << 16 | 6342;
      }
      else
      {
        // TEMPLATE.VTESTPS::VTESTPSmx
        // VTESTPS VREG:r:f32=$XMMr MEM:r:f32=$mem128;
        return 3070 << 16 | 6341;
      }
    }
  break;
  /* 0f38.0x0f */
  case 783:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        // TEMPLATE.VTESTPD::VTESTPD
        // VTESTPD VREG:r:f64=$YMMr VREG:r:f64=$YMMm;
        return 3069 << 16 | 6336;
      }
      else
      {
        // TEMPLATE.VTESTPD::VTESTPD
        // VTESTPD VREG:r:f64=$XMMr VREG:r:f64=$XMMm;
        return 3069 << 16 | 6335;
      }
    }
    else
    {
      if (b & 0x01)
      {
        // TEMPLATE.VTESTPD::VTESTPDmy
        // VTESTPD VREG:r:f64=$YMMr MEM:r:f64=$mem256;
        return 3069 << 16 | 6338;
      }
      else
      {
        // TEMPLATE.VTESTPD::VTESTPDmx
        // VTESTPD VREG:r:f64=$XMMr MEM:r:f64=$mem128;
        return 3069 << 16 | 6337;
      }
    }
  break;
  /* 0f38.0x10 */
  case 784:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVUSWB_moro::VPMOVUSWB
            // VPMOVUSWB VREG:w:u8=$XMMm  PREG:r:Z=$Kk VREG:r:u16=$XMMr;
            return 2909 << 16 | 5881;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVUSWB_mory_1::VPMOVUSWB
            // VPMOVUSWB VREG:w:u8=$XMMm  PREG:r:Z=$Kk VREG:r:u16=$YMMr;
            return 2910 << 16 | 5882;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVUSWB_myrz_1::VPMOVUSWB
            // VPMOVUSWB VREG:w:u8=$YMMm  PREG:r:Z=$Kk VREG:r:u16=$ZMMr;
            return 2913 << 16 | 5885;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (c & 0x02)
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPSRLVW_ronomo::VPSRLVW
              // VPSRLVW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
              return 2989 << 16 | 6109;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPSRLVW_rynymy::VPSRLVW
              // VPSRLVW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
              return 2990 << 16 | 6111;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPSRLVW_rznzmz::VPSRLVW
              // VPSRLVW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
              return 2991 << 16 | 6113;
              break;
            }
            default: break;
          }
        }
        else
        {
          // TEMPLATE.PBLENDVB::PBLENDVB
          // PBLENDVB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm  VREG:SUPP:r:s32=XMM0;
          return 1047 << 16 | 1774;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVUSWB_mqro::VPMOVUSWBmq
            // VPMOVUSWB MEM:w:u8=$mem64  PREG:r:Z=$Kk VREG:r:u16=$XMMr;
            return 2912 << 16 | 5884;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVUSWB_mory_2::VPMOVUSWBmx
            // VPMOVUSWB MEM:w:u8=$mem128 PREG:r:Z=$Kk VREG:r:u16=$YMMr;
            return 2911 << 16 | 5883;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVUSWB_myrz_2::VPMOVUSWBmy
            // VPMOVUSWB MEM:w:u8=$mem256 PREG:r:Z=$Kk VREG:r:u16=$ZMMr;
            return 2914 << 16 | 5886;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (c & 0x02)
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPSRLVW_ronomo::VPSRLVWmx
              // VPSRLVW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
              return 2989 << 16 | 6110;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPSRLVW_rynymy::VPSRLVWmy
              // VPSRLVW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
              return 2990 << 16 | 6112;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPSRLVW_rznzmz::VPSRLVWmz
              // VPSRLVW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
              return 2991 << 16 | 6114;
              break;
            }
            default: break;
          }
        }
        else
        {
          // TEMPLATE.PBLENDVB::PBLENDVBmx
          // PBLENDVB VREG:rw:s32=$XMMr MEM:r:s32=$mem128 VREG:SUPP:r:s32=XMM0;
          return 1047 << 16 | 1775;
        }
      }
    }
  break;
  /* 0f38.0x11 */
  case 785:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (b & 0x20)
        {
          // TEMPLATE.VPMOVUSDB_mory::VPMOVUSDB
          // VPMOVUSDB VREG:w:u8=$XMMm  PREG:r:Z=$Kk VREG:r:u32=$YMMr;
          return 2827 << 16 | 5799;
        }
        else
        {
          // TEMPLATE.VPSRAVW_rynymy::VPSRAVW
          // VPSRAVW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
          return 2984 << 16 | 6093;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (b & 0x20)
          {
            // TEMPLATE.VPMOVUSDB_morz_1::VPMOVUSDB
            // VPMOVUSDB VREG:w:u8=$XMMm  PREG:r:Z=$Kk VREG:r:u32=$ZMMr;
            return 2828 << 16 | 5800;
          }
          else
          {
            // TEMPLATE.VPSRAVW_rznzmz::VPSRAVW
            // VPSRAVW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
            return 2985 << 16 | 6095;
          }
        }
        else
        {
          if (b & 0x20)
          {
            // TEMPLATE.VPMOVUSDB_moro::VPMOVUSDB
            // VPMOVUSDB VREG:w:u8=$XMMm  PREG:r:Z=$Kk VREG:r:u32=$XMMr;
            return 2826 << 16 | 5798;
          }
          else
          {
            // TEMPLATE.VPSRAVW_ronomo::VPSRAVW
            // VPSRAVW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
            return 2983 << 16 | 6091;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (b & 0x20)
        {
          // TEMPLATE.VPMOVUSDB_mqry::VPMOVUSDBmq
          // VPMOVUSDB MEM:w:u8=$mem64  PREG:r:Z=$Kk VREG:r:u32=$YMMr;
          return 2830 << 16 | 5802;
        }
        else
        {
          // TEMPLATE.VPSRAVW_rynymy::VPSRAVWmy
          // VPSRAVW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
          return 2984 << 16 | 6094;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (b & 0x20)
          {
            // TEMPLATE.VPMOVUSDB_morz_2::VPMOVUSDBmx
            // VPMOVUSDB MEM:w:u8=$mem128 PREG:r:Z=$Kk VREG:r:u32=$ZMMr;
            return 2829 << 16 | 5801;
          }
          else
          {
            // TEMPLATE.VPSRAVW_rznzmz::VPSRAVWmz
            // VPSRAVW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
            return 2985 << 16 | 6096;
          }
        }
        else
        {
          if (b & 0x20)
          {
            // TEMPLATE.VPMOVUSDB_mdro::VPMOVUSDBmd
            // VPMOVUSDB MEM:w:u8=$mem32  PREG:r:Z=$Kk VREG:r:u32=$XMMr;
            return 2825 << 16 | 5797;
          }
          else
          {
            // TEMPLATE.VPSRAVW_ronomo::VPSRAVWmx
            // VPSRAVW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
            return 2983 << 16 | 6092;
          }
        }
      }
    }
  break;
  /* 0f38.0x12 */
  case 786:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (b & 0x20)
        {
          // TEMPLATE.VPMOVUSQB_mory::VPMOVUSQB
          // VPMOVUSQB VREG:w:u8=$XMMm PREG:r:Z=$Kk VREG:r:u64=$YMMr;
          return 2863 << 16 | 5835;
        }
        else
        {
          // TEMPLATE.VPSLLVW_rynymy::VPSLLVW
          // VPSLLVW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
          return 2976 << 16 | 6063;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (b & 0x20)
          {
            // TEMPLATE.VPMOVUSQB_morz::VPMOVUSQB
            // VPMOVUSQB VREG:w:u8=$XMMm PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2864 << 16 | 5836;
          }
          else
          {
            // TEMPLATE.VPSLLVW_rznzmz::VPSLLVW
            // VPSLLVW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
            return 2977 << 16 | 6065;
          }
        }
        else
        {
          if (b & 0x20)
          {
            // TEMPLATE.VPMOVUSQB_moro::VPMOVUSQB
            // VPMOVUSQB VREG:w:u8=$XMMm PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2862 << 16 | 5834;
          }
          else
          {
            // TEMPLATE.VPSLLVW_ronomo::VPSLLVW
            // VPSLLVW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
            return 2975 << 16 | 6061;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (b & 0x20)
        {
          // TEMPLATE.VPMOVUSQB_mdry::VPMOVUSQBmd
          // VPMOVUSQB MEM:w:u8=$mem32 PREG:r:Z=$Kk VREG:r:u64=$YMMr;
          return 2861 << 16 | 5833;
        }
        else
        {
          // TEMPLATE.VPSLLVW_rynymy::VPSLLVWmy
          // VPSLLVW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
          return 2976 << 16 | 6064;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (b & 0x20)
          {
            // TEMPLATE.VPMOVUSQB_mqrz::VPMOVUSQBmq
            // VPMOVUSQB MEM:w:u8=$mem64 PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2865 << 16 | 5837;
          }
          else
          {
            // TEMPLATE.VPSLLVW_rznzmz::VPSLLVWmz
            // VPSLLVW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
            return 2977 << 16 | 6066;
          }
        }
        else
        {
          if (b & 0x20)
          {
            // TEMPLATE.VPMOVUSQB_mwro::VPMOVUSQBmw
            // VPMOVUSQB MEM:w:u8=$mem16 PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2866 << 16 | 5838;
          }
          else
          {
            // TEMPLATE.VPSLLVW_ronomo::VPSLLVWmx
            // VPSLLVW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
            return 2975 << 16 | 6062;
          }
        }
      }
    }
  break;
  /* 0f38.0x13 */
  case 787:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVUSDW_moro::VPMOVUSDW
            // VPMOVUSDW VREG:w:u16=$XMMm  PREG:r:Z=$Kk VREG:r:u32=$XMMr;
            return 2843 << 16 | 5815;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVUSDW_mory_1::VPMOVUSDW
            // VPMOVUSDW VREG:w:u16=$XMMm  PREG:r:Z=$Kk VREG:r:u32=$YMMr;
            return 2844 << 16 | 5816;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVUSDW_myrz_1::VPMOVUSDW
            // VPMOVUSDW VREG:w:u16=$YMMm  PREG:r:Z=$Kk VREG:r:u32=$ZMMr;
            return 2847 << 16 | 5819;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (b & 0x01)
          {
            // TEMPLATE.VCVTPH2PS_rxmx::VCVTPH2PS
            // VCVTPH2PS VREG:w:f32=$YMMr VREG:r:f16=$XMMm;
            return 546 << 16 | 981;
          }
          else
          {
            // TEMPLATE.VCVTPH2PS_rxmx::VCVTPH2PS
            // VCVTPH2PS VREG:w:f32=$XMMr VREG:r:f16=$XMMm;
            return 546 << 16 | 980;
          }
        }
        else
        {
          if (b & 0x80)
          {
            // TEMPLATE.VCVTPH2PS_rzmy::VCVTPH2PS
            // VCVTPH2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f16=$YMMm SAE=$SAE;
            return 2272 << 16 | 4437;
          }
          else
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VCVTPH2PS_romx::VCVTPH2PS
                // VCVTPH2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f16=$XMMm;
                return 2270 << 16 | 4433;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VCVTPH2PS_rymo::VCVTPH2PS
                // VCVTPH2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f16=$XMMm;
                return 2271 << 16 | 4435;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VCVTPH2PS_rzmy::VCVTPH2PS
                // VCVTPH2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f16=$YMMm;
                return 2272 << 16 | 4438;
                break;
              }
              default: break;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (b & 0x20)
        {
          // TEMPLATE.VPMOVUSDW_mory_2::VPMOVUSDWmx
          // VPMOVUSDW MEM:w:u16=$mem128 PREG:r:Z=$Kk VREG:r:u32=$YMMr;
          return 2845 << 16 | 5817;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VCVTPH2PS_rxmx::VCVTPH2PSmx
            // VCVTPH2PS VREG:w:f32=$YMMr MEM:r:f16=$mem128;
            return 546 << 16 | 983;
          }
          else
          {
            // TEMPLATE.VCVTPH2PS_rymo::VCVTPH2PSmx
            // VCVTPH2PS VREG:w:f32=$YMMr PREG:r:Z=$Kk MEM:r:f16=$mem128;
            return 2271 << 16 | 4436;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (b & 0x20)
          {
            // TEMPLATE.VPMOVUSDW_myrz_2::VPMOVUSDWmy
            // VPMOVUSDW MEM:w:u16=$mem256 PREG:r:Z=$Kk VREG:r:u32=$ZMMr;
            return 2848 << 16 | 5820;
          }
          else
          {
            // TEMPLATE.VCVTPH2PS_rzmy::VCVTPH2PSmy
            // VCVTPH2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:f16=$mem256;
            return 2272 << 16 | 4439;
          }
        }
        else
        {
          if (b & 0x20)
          {
            // TEMPLATE.VPMOVUSDW_mqro::VPMOVUSDWmq
            // VPMOVUSDW MEM:w:u16=$mem64  PREG:r:Z=$Kk VREG:r:u32=$XMMr;
            return 2846 << 16 | 5818;
          }
          else
          {
            if (c & 0x01)
            {
              // TEMPLATE.VCVTPH2PS_rxmx::VCVTPH2PSmq
              // VCVTPH2PS VREG:w:f32=$XMMr MEM:r:f16=$mem64;
              return 546 << 16 | 982;
            }
            else
            {
              // TEMPLATE.VCVTPH2PS_romx::VCVTPH2PSmq
              // VCVTPH2PS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:f16=$mem64;
              return 2270 << 16 | 4434;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x14 */
  case 788:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVUSQW_moro::VPMOVUSQW
            // VPMOVUSQW VREG:w:u16=$XMMm  PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2898 << 16 | 5870;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVUSQW_mory::VPMOVUSQW
            // VPMOVUSQW VREG:w:u16=$XMMm  PREG:r:Z=$Kk VREG:r:u64=$YMMr;
            return 2899 << 16 | 5871;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVUSQW_morz_1::VPMOVUSQW
            // VPMOVUSQW VREG:w:u16=$XMMm  PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2900 << 16 | 5872;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (c & 0x02)
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPRORVx_rynymy::VPRORVQ
              // VPRORVQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn             VREG:r:u64=$YMMm;
              return 2937 << 16 | 5953;
            }
            else
            {
              // TEMPLATE.VPRORVx_rynymy::VPRORVD
              // VPRORVD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn             VREG:r:u32=$YMMm;
              return 2937 << 16 | 5951;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPRORVx_rznzmz::VPRORVQ
                // VPRORVQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn             VREG:r:u64=$ZMMm;
                return 2938 << 16 | 5957;
              }
              else
              {
                // TEMPLATE.VPRORVx_rznzmz::VPRORVD
                // VPRORVD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn             VREG:r:u32=$ZMMm;
                return 2938 << 16 | 5955;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPRORVx_ronomo::VPRORVQ
                // VPRORVQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn             VREG:r:u64=$XMMm;
                return 2936 << 16 | 5949;
              }
              else
              {
                // TEMPLATE.VPRORVx_ronomo::VPRORVD
                // VPRORVD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn             VREG:r:u32=$XMMm;
                return 2936 << 16 | 5947;
              }
            }
          }
        }
        else
        {
          // TEMPLATE.BLENDVPS::BLENDVPS
          // BLENDVPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm  VREG:SUPP:r:u32=XMM0;
          return 906 << 16 | 1510;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVUSQW_mdro::VPMOVUSQWmd
            // VPMOVUSQW MEM:w:u16=$mem32  PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2897 << 16 | 5869;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVUSQW_mqry::VPMOVUSQWmq
            // VPMOVUSQW MEM:w:u16=$mem64  PREG:r:Z=$Kk VREG:r:u64=$YMMr;
            return 2902 << 16 | 5874;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVUSQW_morz_2::VPMOVUSQWmx
            // VPMOVUSQW MEM:w:u16=$mem128 PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2901 << 16 | 5873;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (c & 0x02)
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPRORVx_rynymy::VPRORVQmy
              // VPRORVQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn             MEM:r:u64=$mem256 BCST=$BCST;
              return 2937 << 16 | 5954;
            }
            else
            {
              // TEMPLATE.VPRORVx_rynymy::VPRORVDmy
              // VPRORVD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn             MEM:r:u32=$mem256 BCST=$BCST;
              return 2937 << 16 | 5952;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPRORVx_rznzmz::VPRORVQmz
                // VPRORVQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn             MEM:r:u64=$mem512 BCST=$BCST;
                return 2938 << 16 | 5958;
              }
              else
              {
                // TEMPLATE.VPRORVx_rznzmz::VPRORVDmz
                // VPRORVD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn             MEM:r:u32=$mem512 BCST=$BCST;
                return 2938 << 16 | 5956;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPRORVx_ronomo::VPRORVQmx
                // VPRORVQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn             MEM:r:u64=$mem128 BCST=$BCST;
                return 2936 << 16 | 5950;
              }
              else
              {
                // TEMPLATE.VPRORVx_ronomo::VPRORVDmx
                // VPRORVD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn             MEM:r:u32=$mem128 BCST=$BCST;
                return 2936 << 16 | 5948;
              }
            }
          }
        }
        else
        {
          // TEMPLATE.BLENDVPS::BLENDVPSmx
          // BLENDVPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128 VREG:SUPP:r:u32=XMM0;
          return 906 << 16 | 1511;
        }
      }
    }
  break;
  /* 0f38.0x15 */
  case 789:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVUSQD_moro::VPMOVUSQD
            // VPMOVUSQD VREG:w:u32=$XMMm  PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2879 << 16 | 5851;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVUSQD_mory_1::VPMOVUSQD
            // VPMOVUSQD VREG:w:u32=$XMMm  PREG:r:Z=$Kk VREG:r:u64=$YMMr;
            return 2880 << 16 | 5852;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVUSQD_myrz_1::VPMOVUSQD
            // VPMOVUSQD VREG:w:u32=$YMMm  PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2883 << 16 | 5855;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (c & 0x02)
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPROLVx_rynymy::VPROLVQ
              // VPROLVQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn             VREG:r:u64=$YMMm;
              return 2931 << 16 | 5929;
            }
            else
            {
              // TEMPLATE.VPROLVx_rynymy::VPROLVD
              // VPROLVD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn             VREG:r:u32=$YMMm;
              return 2931 << 16 | 5927;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPROLVx_rznzmz::VPROLVQ
                // VPROLVQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn             VREG:r:u64=$ZMMm;
                return 2932 << 16 | 5933;
              }
              else
              {
                // TEMPLATE.VPROLVx_rznzmz::VPROLVD
                // VPROLVD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn             VREG:r:u32=$ZMMm;
                return 2932 << 16 | 5931;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPROLVx_ronomo::VPROLVQ
                // VPROLVQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn             VREG:r:u64=$XMMm;
                return 2930 << 16 | 5925;
              }
              else
              {
                // TEMPLATE.VPROLVx_ronomo::VPROLVD
                // VPROLVD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn             VREG:r:u32=$XMMm;
                return 2930 << 16 | 5923;
              }
            }
          }
        }
        else
        {
          // TEMPLATE.BLENDVPD::BLENDVPD
          // BLENDVPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm  VREG:SUPP:r:u64=XMM0;
          return 905 << 16 | 1508;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVUSQD_mqro::VPMOVUSQDmq
            // VPMOVUSQD MEM:w:u32=$mem64  PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2882 << 16 | 5854;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVUSQD_mory_2::VPMOVUSQDmx
            // VPMOVUSQD MEM:w:u32=$mem128 PREG:r:Z=$Kk VREG:r:u64=$YMMr;
            return 2881 << 16 | 5853;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVUSQD_myrz_2::VPMOVUSQDmy
            // VPMOVUSQD MEM:w:u32=$mem256 PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2884 << 16 | 5856;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (c & 0x02)
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPROLVx_rynymy::VPROLVQmy
              // VPROLVQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn             MEM:r:u64=$mem256 BCST=$BCST;
              return 2931 << 16 | 5930;
            }
            else
            {
              // TEMPLATE.VPROLVx_rynymy::VPROLVDmy
              // VPROLVD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn             MEM:r:u32=$mem256 BCST=$BCST;
              return 2931 << 16 | 5928;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPROLVx_rznzmz::VPROLVQmz
                // VPROLVQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn             MEM:r:u64=$mem512 BCST=$BCST;
                return 2932 << 16 | 5934;
              }
              else
              {
                // TEMPLATE.VPROLVx_rznzmz::VPROLVDmz
                // VPROLVD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn             MEM:r:u32=$mem512 BCST=$BCST;
                return 2932 << 16 | 5932;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPROLVx_ronomo::VPROLVQmx
                // VPROLVQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn             MEM:r:u64=$mem128 BCST=$BCST;
                return 2930 << 16 | 5926;
              }
              else
              {
                // TEMPLATE.VPROLVx_ronomo::VPROLVDmx
                // VPROLVD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn             MEM:r:u32=$mem128 BCST=$BCST;
                return 2930 << 16 | 5924;
              }
            }
          }
        }
        else
        {
          // TEMPLATE.BLENDVPD::BLENDVPDmx
          // BLENDVPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128 VREG:SUPP:r:u64=XMM0;
          return 905 << 16 | 1509;
        }
      }
    }
  break;
  /* 0f38.0x16 */
  case 790:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMPS_rynymy_1::VPERMPS
          // VPERMPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
          return 2747 << 16 | 5621;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMPD_rynymy::VPERMPD
            // VPERMPD VREG:w:f64=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$YMMn             VREG:r:f64=$YMMm;
            return 2744 << 16 | 5615;
          }
          else
          {
            // TEMPLATE.VPERMPS_rynymy_2::VPERMPS
            // VPERMPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
            return 2748 << 16 | 5623;
          }
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMPD_rznzmz::VPERMPD
          // VPERMPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMn             VREG:r:f64=$ZMMm;
          return 2746 << 16 | 5619;
        }
        else
        {
          // TEMPLATE.VPERMPS_rznzmz::VPERMPS
          // VPERMPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
          return 2749 << 16 | 5625;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMPS_rynymy_1::VPERMPSmy
          // VPERMPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
          return 2747 << 16 | 5622;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMPD_rynymy::VPERMPDmy
            // VPERMPD VREG:w:f64=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$YMMn             MEM:r:f64=$mem256 BCST=$BCST;
            return 2744 << 16 | 5616;
          }
          else
          {
            // TEMPLATE.VPERMPS_rynymy_2::VPERMPSmy
            // VPERMPS VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2748 << 16 | 5624;
          }
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMPD_rznzmz::VPERMPDmz
          // VPERMPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMn             MEM:r:f64=$mem512 BCST=$BCST;
          return 2746 << 16 | 5620;
        }
        else
        {
          // TEMPLATE.VPERMPS_rznzmz::VPERMPSmz
          // VPERMPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
          return 2749 << 16 | 5626;
        }
      }
    }
  break;
  /* 0f38.0x17 */
  case 791:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VPTEST::VPTEST
          // VPTEST VREG:r:s32=$YMMr VREG:r:s32=$YMMm;
          return 2121 << 16 | 4091;
        }
        else
        {
          // TEMPLATE.VPTEST::VPTEST
          // VPTEST VREG:r:s32=$XMMr VREG:r:s32=$XMMm;
          return 2121 << 16 | 4090;
        }
      }
      else
      {
        // TEMPLATE.PTEST::PTEST
        // PTEST VREG:r:s32=$XMMr VREG:r:s32=$XMMm;
        return 1171 << 16 | 2000;
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VPTEST::VPTESTmy
          // VPTEST VREG:r:s32=$YMMr MEM:r:s32=$mem256;
          return 2121 << 16 | 4093;
        }
        else
        {
          // TEMPLATE.VPTEST::VPTESTmx
          // VPTEST VREG:r:s32=$XMMr MEM:r:s32=$mem128;
          return 2121 << 16 | 4092;
        }
      }
      else
      {
        // TEMPLATE.PTEST::PTESTmx
        // PTEST VREG:r:s32=$XMMr MEM:r:s32=$mem128;
        return 1171 << 16 | 2001;
      }
    }
  break;
  /* 0f38.0x18 */
  case 792:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VBROADCASTSS_rxmo::VBROADCASTSS
          // VBROADCASTSS    VREG:w:f32=$YMMr VREG:r:f32=$XMMm;
          return 2246 << 16 | 4383;
        }
        else
        {
          // TEMPLATE.VBROADCASTSS_rymx::VBROADCASTSS
          // VBROADCASTSS    VREG:w:f32=$YMMr PREG:r:Z=$Kk                               VREG:r:f32=$XMMm;
          return 2247 << 16 | 4384;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VBROADCASTSS_rzmx::VBROADCASTSS
          // VBROADCASTSS    VREG:w:f32=$ZMMr PREG:r:Z=$Kk                               VREG:r:f32=$XMMm;
          return 2248 << 16 | 4386;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VBROADCASTSS_rxmo::VBROADCASTSS
            // VBROADCASTSS    VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
            return 2246 << 16 | 4382;
          }
          else
          {
            // TEMPLATE.VBROADCASTSS_romx::VBROADCASTSS
            // VBROADCASTSS    VREG:w:f32=$XMMr PREG:r:Z=$Kk                               VREG:r:f32=$XMMm;
            return 2244 << 16 | 4378;
          }
        }
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch ((c & 0x03) - 1)
      {
        case 0x00:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VBROADCASTSS_rxmd::VBROADCASTSSmd
            // VBROADCASTSS    VREG:w:f32=$YMMr MEM:r:f32=$mem32 SBCST:SUPP={FROM=1 TO=8};
            return 2245 << 16 | 4381;
          }
          else
          {
            // TEMPLATE.VBROADCASTSS_rxmd::VBROADCASTSSmd
            // VBROADCASTSS    VREG:w:f32=$XMMr MEM:r:f32=$mem32 SBCST:SUPP={FROM=1 TO=4};
            return 2245 << 16 | 4380;
          }
          break;
        }
        case 0x01:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VBROADCASTSS_romx::VBROADCASTSSmd
              // VBROADCASTSS    VREG:w:f32=$XMMr PREG:r:Z=$Kk                               MEM:r:f32=$mem32 SBCST:SUPP={FROM=1 TO=4};
              return 2244 << 16 | 4379;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VBROADCASTSS_rymx::VBROADCASTSSmd
              // VBROADCASTSS    VREG:w:f32=$YMMr PREG:r:Z=$Kk                               MEM:r:f32=$mem32 SBCST:SUPP={FROM=1 TO=8};
              return 2247 << 16 | 4385;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VBROADCASTSS_rzmx::VBROADCASTSSmd
              // VBROADCASTSS    VREG:w:f32=$ZMMr PREG:r:Z=$Kk                               MEM:r:f32=$mem32 SBCST:SUPP={FROM=1 TO=16};
              return 2248 << 16 | 4387;
              break;
            }
            default: break;
          }
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VBROADCASTSS_rzm0::VBROADCASTSSm
          // VBROADCASTSS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SBCST:SUPP={FROM=1 TO=16} SWZ=$u_f32 EVH=$EVH;
          return 3313 << 16 | 6856;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x19 */
  case 793:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VBROADCASTSD_rymo::VBROADCASTSD
          // VBROADCASTSD    VREG:w:f64=$YMMr VREG:r:f64=$XMMm;
          return 2240 << 16 | 4372;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VBROADCASTSD_rymx::VBROADCASTSD
            // VBROADCASTSD    VREG:w:f64=$YMMr PREG:r:Z=$Kk                               VREG:r:f64=$XMMm;
            return 2242 << 16 | 4374;
          }
          else
          {
            // TEMPLATE.VBROADCASTF32X2_rymx::VBROADCASTF32X2
            // VBROADCASTF32X2 VREG:w:f32=$YMMr PREG:r:Z=$Kk                               VREG:r:f32=$XMMm;
            return 2232 << 16 | 4362;
          }
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VBROADCASTSD_rzmx::VBROADCASTSD
          // VBROADCASTSD    VREG:w:f64=$ZMMr PREG:r:Z=$Kk                               VREG:r:f64=$XMMm;
          return 2243 << 16 | 4376;
        }
        else
        {
          // TEMPLATE.VBROADCASTF32X2_rzmx::VBROADCASTF32X2
          // VBROADCASTF32X2 VREG:w:f32=$ZMMr PREG:r:Z=$Kk                               VREG:r:f32=$XMMm;
          return 2233 << 16 | 4364;
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          // TEMPLATE.VBROADCASTSD_rzm0::VBROADCASTSDm
          // VBROADCASTSD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SBCST:SUPP={FROM=1 TO=8} SWZ=$u_f64 EVH=$EVH;
          return 3312 << 16 | 6855;
        }
        else
        {
          // TEMPLATE.VBROADCASTSD_rymq::VBROADCASTSDmq
          // VBROADCASTSD    VREG:w:f64=$YMMr MEM:r:f64=$mem64 SBCST:SUPP={FROM=1 TO=4};
          return 2241 << 16 | 4373;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VBROADCASTSD_rymx::VBROADCASTSDmq
            // VBROADCASTSD    VREG:w:f64=$YMMr PREG:r:Z=$Kk                               MEM:r:f64=$mem64 SBCST:SUPP={FROM=1 TO=4};
            return 2242 << 16 | 4375;
          }
          else
          {
            // TEMPLATE.VBROADCASTF32X2_rymx::VBROADCASTF32X2mq
            // VBROADCASTF32X2 VREG:w:f32=$YMMr PREG:r:Z=$Kk                               MEM:r:f32=$mem64 SBCST:SUPP={FROM=2 TO=8};
            return 2232 << 16 | 4363;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VBROADCASTSD_rzmx::VBROADCASTSDmq
            // VBROADCASTSD    VREG:w:f64=$ZMMr PREG:r:Z=$Kk                               MEM:r:f64=$mem64 SBCST:SUPP={FROM=1 TO=8};
            return 2243 << 16 | 4377;
          }
          else
          {
            // TEMPLATE.VBROADCASTF32X2_rzmx::VBROADCASTF32X2mq
            // VBROADCASTF32X2 VREG:w:f32=$ZMMr PREG:r:Z=$Kk                               MEM:r:f32=$mem64 SBCST:SUPP={FROM=2 TO=16};
            return 2233 << 16 | 4365;
          }
        }
      }
    }
  break;
  /* 0f38.0x1a */
  case 794:
    if (c & 0x01)
    {
      if (c & 0x02)
      {
        // TEMPLATE.VBROADCASTF32X4_rzm0::VBROADCASTF32X4m
        // VBROADCASTF32X4 VREG:rw:f32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SBCST:SUPP={FROM=4 TO=16} SWZ=$u_f32 EVH=$EVH;
        return 3308 << 16 | 6851;
      }
      else
      {
        // TEMPLATE.VBROADCASTF128::VBROADCASTF128mx
        // VBROADCASTF128  VREG:w:f64=$YMMr MEM:r:f64=$mem128 SBCST:SUPP={FROM=2 TO=4};
        return 2231 << 16 | 4361;
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VBROADCASTF64X2_rymo::VBROADCASTF64X2mx
          // VBROADCASTF64X2 VREG:w:f64=$YMMr PREG:r:Z=$Kk                               MEM:r:f64=$mem128 SBCST:SUPP={FROM=2 TO=4};
          return 2237 << 16 | 4369;
        }
        else
        {
          // TEMPLATE.VBROADCASTF32X4_rymo::VBROADCASTF32X4mx
          // VBROADCASTF32X4 VREG:w:f32=$YMMr PREG:r:Z=$Kk                               MEM:r:f32=$mem128 SBCST:SUPP={FROM=4 TO=8};
          return 2234 << 16 | 4366;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VBROADCASTF64X2_rzmo::VBROADCASTF64X2mx
          // VBROADCASTF64X2 VREG:w:f64=$ZMMr PREG:r:Z=$Kk                               MEM:r:f64=$mem128 SBCST:SUPP={FROM=2 TO=8};
          return 2238 << 16 | 4370;
        }
        else
        {
          // TEMPLATE.VBROADCASTF32X4_rzmo::VBROADCASTF32X4mx
          // VBROADCASTF32X4 VREG:w:f32=$ZMMr PREG:r:Z=$Kk                               MEM:r:f32=$mem128 SBCST:SUPP={FROM=4 TO=16};
          return 2235 << 16 | 4367;
        }
      }
    }
  break;
  /* 0f38.0x1b */
  case 795:
    if (c & 0x01)
    {
      // TEMPLATE.VBROADCASTF64X4_rzm0::VBROADCASTF64X4m
      // VBROADCASTF64X4 VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SBCST:SUPP={FROM=4 TO=8} SWZ=$u_f64 EVH=$EVH;
      return 3309 << 16 | 6852;
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VBROADCASTF64X4_rzmy::VBROADCASTF64X4my
        // VBROADCASTF64X4 VREG:w:f64=$ZMMr PREG:r:Z=$Kk                               MEM:r:f64=$mem256 SBCST:SUPP={FROM=4 TO=8};
        return 2239 << 16 | 4371;
      }
      else
      {
        // TEMPLATE.VBROADCASTF32X8::VBROADCASTF32X8my
        // VBROADCASTF32X8 VREG:w:f32=$ZMMr PREG:r:Z=$Kk                               MEM:r:f32=$mem256 SBCST:SUPP={FROM=8 TO=16};
        return 2236 << 16 | 4368;
      }
    }
  break;
  /* 0f38.0x1c */
  case 796:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PABSB_romo::PABSB
            // PABSB VREG:w:s32=$XMMr VREG:r:s32=$XMMm;
            return 1020 << 16 | 1724;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPABSB_rymy_1::VPABSB
              // VPABSB VREG:w:u8=$YMMr  VREG:r:s8=$YMMm;
              return 1614 << 16 | 3036;
            }
            else
            {
              // TEMPLATE.VPABSB_romo_1::VPABSB
              // VPABSB VREG:w:u8=$XMMr  VREG:r:s8=$XMMm;
              return 1612 << 16 | 3032;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPABSB_romo_2::VPABSB
                // VPABSB VREG:w:s8=$XMMr  PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1613 << 16 | 3034;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPABSB_rymy_2::VPABSB
                // VPABSB VREG:w:s8=$YMMr  PREG:r:Z=$Kk      VREG:r:s8=$YMMm;
                return 1615 << 16 | 3038;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPABSB_rzmz::VPABSB
                // VPABSB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk      VREG:r:s8=$ZMMm;
                return 1616 << 16 | 3040;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PABSB_rqmq::PABSB
        // PABSB REG:w:s64=$MMXr  REG:r:s64=$MMXm;
        return 1021 << 16 | 1726;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PABSB_romo::PABSBmx
            // PABSB VREG:w:s32=$XMMr MEM:r:s32=$mem128;
            return 1020 << 16 | 1725;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPABSB_rymy_1::VPABSBmy
              // VPABSB VREG:w:u8=$YMMr  MEM:r:s8=$mem256;
              return 1614 << 16 | 3037;
            }
            else
            {
              // TEMPLATE.VPABSB_romo_1::VPABSBmx
              // VPABSB VREG:w:u8=$XMMr  MEM:r:s8=$mem128;
              return 1612 << 16 | 3033;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPABSB_romo_2::VPABSBmx
                // VPABSB VREG:w:s8=$XMMr  PREG:r:Z=$Kk      MEM:r:s8=$mem128;
                return 1613 << 16 | 3035;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPABSB_rymy_2::VPABSBmy
                // VPABSB VREG:w:s8=$YMMr  PREG:r:Z=$Kk      MEM:r:s8=$mem256;
                return 1615 << 16 | 3039;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPABSB_rzmz::VPABSBmz
                // VPABSB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk      MEM:r:s8=$mem512;
                return 1616 << 16 | 3041;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PABSB_rqmq::PABSBmq
        // PABSB REG:w:s64=$MMXr  MEM:r:s64=$mem64;
        return 1021 << 16 | 1727;
      }
    }
  break;
  /* 0f38.0x1d */
  case 797:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PABSW_romo::PABSW
            // PABSW VREG:w:s32=$XMMr VREG:r:s32=$XMMm;
            return 1026 << 16 | 1732;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPABSW_rymy_1::VPABSW
              // VPABSW VREG:w:u16=$YMMr VREG:r:s16=$YMMm;
              return 1627 << 16 | 3062;
            }
            else
            {
              // TEMPLATE.VPABSW_romo_1::VPABSW
              // VPABSW VREG:w:u16=$XMMr VREG:r:s16=$XMMm;
              return 1625 << 16 | 3058;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPABSW_romo_2::VPABSW
                // VPABSW VREG:w:s16=$XMMr PREG:r:Z=$Kk      VREG:r:s16=$XMMm;
                return 1626 << 16 | 3060;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPABSW_rymy_2::VPABSW
                // VPABSW VREG:w:s16=$YMMr PREG:r:Z=$Kk      VREG:r:s16=$YMMm;
                return 1628 << 16 | 3064;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPABSW_rzmz::VPABSW
                // VPABSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk      VREG:r:s16=$ZMMm;
                return 1629 << 16 | 3066;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PABSW_rqmq::PABSW
        // PABSW REG:w:s64=$MMXr  REG:r:s64=$MMXm;
        return 1027 << 16 | 1734;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PABSW_romo::PABSWmx
            // PABSW VREG:w:s32=$XMMr MEM:r:s32=$mem128;
            return 1026 << 16 | 1733;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPABSW_rymy_1::VPABSWmy
              // VPABSW VREG:w:u16=$YMMr MEM:r:s16=$mem256;
              return 1627 << 16 | 3063;
            }
            else
            {
              // TEMPLATE.VPABSW_romo_1::VPABSWmx
              // VPABSW VREG:w:u16=$XMMr MEM:r:s16=$mem128;
              return 1625 << 16 | 3059;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPABSW_romo_2::VPABSWmx
                // VPABSW VREG:w:s16=$XMMr PREG:r:Z=$Kk      MEM:r:s16=$mem128;
                return 1626 << 16 | 3061;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPABSW_rymy_2::VPABSWmy
                // VPABSW VREG:w:s16=$YMMr PREG:r:Z=$Kk      MEM:r:s16=$mem256;
                return 1628 << 16 | 3065;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPABSW_rzmz::VPABSWmz
                // VPABSW VREG:w:s16=$ZMMr PREG:r:Z=$Kk      MEM:r:s16=$mem512;
                return 1629 << 16 | 3067;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PABSW_rqmq::PABSWmq
        // PABSW REG:w:s64=$MMXr  MEM:r:s64=$mem64;
        return 1027 << 16 | 1735;
      }
    }
  break;
  /* 0f38.0x1e */
  case 798:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PABSD_romo_1::PABSD
            // PABSD VREG:w:s32=$XMMr VREG:r:s32=$XMMm;
            return 1022 << 16 | 1728;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPABSD_rymy_1::VPABSD
              // VPABSD VREG:w:u32=$YMMr VREG:r:s32=$YMMm;
              return 1619 << 16 | 3046;
            }
            else
            {
              // TEMPLATE.VPABSD_romo_1::VPABSD
              // VPABSD VREG:w:u32=$XMMr VREG:r:s32=$XMMm;
              return 1617 << 16 | 3042;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPABSD_romo_2::VPABSD
                // VPABSD VREG:w:s32=$XMMr PREG:r:Z=$Kk      VREG:r:s32=$XMMm;
                return 1618 << 16 | 3044;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPABSD_rymy_2::VPABSD
                // VPABSD VREG:w:s32=$YMMr PREG:r:Z=$Kk      VREG:r:s32=$YMMm;
                return 1620 << 16 | 3048;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPABSD_rzmz::VPABSD
                // VPABSD VREG:w:s32=$ZMMr PREG:r:Z=$Kk      VREG:r:s32=$ZMMm;
                return 1621 << 16 | 3050;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PABSD_rqmq_1::PABSD
        // PABSD REG:w:s64=$MMXr  REG:r:s64=$MMXm;
        return 1024 << 16 | 1730;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PABSD_romo_2::PABSDmx
            // PABSD VREG:w:s32=$XMMr MEM:r:s32=$mem128;
            return 1023 << 16 | 1729;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPABSD_rymy_1::VPABSDmy
              // VPABSD VREG:w:u32=$YMMr MEM:r:s32=$mem256;
              return 1619 << 16 | 3047;
            }
            else
            {
              // TEMPLATE.VPABSD_romo_1::VPABSDmx
              // VPABSD VREG:w:u32=$XMMr MEM:r:s32=$mem128;
              return 1617 << 16 | 3043;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPABSD_romo_2::VPABSDmx
                // VPABSD VREG:w:s32=$XMMr PREG:r:Z=$Kk      MEM:r:s32=$mem128 BCST=$BCST;
                return 1618 << 16 | 3045;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPABSD_rymy_2::VPABSDmy
                // VPABSD VREG:w:s32=$YMMr PREG:r:Z=$Kk      MEM:r:s32=$mem256 BCST=$BCST;
                return 1620 << 16 | 3049;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPABSD_rzmz::VPABSDmz
                // VPABSD VREG:w:s32=$ZMMr PREG:r:Z=$Kk      MEM:r:s32=$mem512 BCST=$BCST;
                return 1621 << 16 | 3051;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PABSD_rqmq_2::PABSDmq
        // PABSD REG:w:s64=$MMXr  MEM:r:s64=$mem64;
        return 1025 << 16 | 1731;
      }
    }
  break;
  /* 0f38.0x1f */
  case 799:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPABSQ_romo::VPABSQ
          // VPABSQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      VREG:r:s64=$XMMm;
          return 1622 << 16 | 3052;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPABSQ_rymy::VPABSQ
          // VPABSQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      VREG:r:s64=$YMMm;
          return 1623 << 16 | 3054;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPABSQ_rzmz::VPABSQ
          // VPABSQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      VREG:r:s64=$ZMMm;
          return 1624 << 16 | 3056;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPABSQ_romo::VPABSQmx
          // VPABSQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      MEM:r:s64=$mem128 BCST=$BCST;
          return 1622 << 16 | 3053;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPABSQ_rymy::VPABSQmy
          // VPABSQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      MEM:r:s64=$mem256 BCST=$BCST;
          return 1623 << 16 | 3055;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPABSQ_rzmz::VPABSQmz
          // VPABSQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      MEM:r:s64=$mem512 BCST=$BCST;
          return 1624 << 16 | 3057;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x20 */
  case 800:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSWB_moro::VPMOVSWB
            // VPMOVSWB  VREG:w:s8=$XMMm  PREG:r:Z=$Kk VREG:r:s16=$XMMr;
            return 2903 << 16 | 5875;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSWB_mory_1::VPMOVSWB
            // VPMOVSWB  VREG:w:s8=$XMMm  PREG:r:Z=$Kk VREG:r:s16=$YMMr;
            return 2904 << 16 | 5876;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSWB_myrz_1::VPMOVSWB
            // VPMOVSWB  VREG:w:s8=$YMMm  PREG:r:Z=$Kk VREG:r:s16=$ZMMr;
            return 2907 << 16 | 5879;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXBW::PMOVSXBW
            // PMOVSXBW VREG:w:s16=$XMMr VREG:r:s8=$XMMm;
            return 1099 << 16 | 1886;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXBW_rymo_1::VPMOVSXBW
              // VPMOVSXBW VREG:w:s16=$YMMr VREG:r:s8=$XMMm;
              return 1872 << 16 | 3600;
            }
            else
            {
              // TEMPLATE.VPMOVSXBW_romq::VPMOVSXBW
              // VPMOVSXBW VREG:w:s16=$XMMr VREG:r:s8=$XMMm;
              return 1870 << 16 | 3596;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXBW_romx::VPMOVSXBW
                // VPMOVSXBW VREG:w:s16=$XMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1871 << 16 | 3598;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXBW_rymo_2::VPMOVSXBW
                // VPMOVSXBW VREG:w:s16=$YMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1873 << 16 | 3602;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXBW_rzmy::VPMOVSXBW
                // VPMOVSXBW VREG:w:s16=$ZMMr PREG:r:Z=$Kk      VREG:r:s8=$YMMm;
                return 1874 << 16 | 3604;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSWB_mqro::VPMOVSWBmq
            // VPMOVSWB  MEM:w:s8=$mem64  PREG:r:Z=$Kk VREG:r:s16=$XMMr;
            return 2906 << 16 | 5878;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSWB_mory_2::VPMOVSWBmx
            // VPMOVSWB  MEM:w:s8=$mem128 PREG:r:Z=$Kk VREG:r:s16=$YMMr;
            return 2905 << 16 | 5877;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSWB_myrz_2::VPMOVSWBmy
            // VPMOVSWB  MEM:w:s8=$mem256 PREG:r:Z=$Kk VREG:r:s16=$ZMMr;
            return 2908 << 16 | 5880;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXBW::PMOVSXBWmq
            // PMOVSXBW VREG:w:s16=$XMMr MEM:r:s8=$mem64;
            return 1099 << 16 | 1887;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXBW_rymo_1::VPMOVSXBWmx
              // VPMOVSXBW VREG:w:s16=$YMMr MEM:r:s8=$mem128;
              return 1872 << 16 | 3601;
            }
            else
            {
              // TEMPLATE.VPMOVSXBW_romq::VPMOVSXBWmq
              // VPMOVSXBW VREG:w:s16=$XMMr MEM:r:s8=$mem64;
              return 1870 << 16 | 3597;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXBW_romx::VPMOVSXBWmq
                // VPMOVSXBW VREG:w:s16=$XMMr PREG:r:Z=$Kk      MEM:r:s8=$mem64;
                return 1871 << 16 | 3599;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXBW_rymo_2::VPMOVSXBWmx
                // VPMOVSXBW VREG:w:s16=$YMMr PREG:r:Z=$Kk      MEM:r:s8=$mem128;
                return 1873 << 16 | 3603;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXBW_rzmy::VPMOVSXBWmy
                // VPMOVSXBW VREG:w:s16=$ZMMr PREG:r:Z=$Kk      MEM:r:s8=$mem256;
                return 1874 << 16 | 3605;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x21 */
  case 801:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSDB_moro::VPMOVSDB
            // VPMOVSDB  VREG:w:s8=$XMMm  PREG:r:Z=$Kk VREG:r:s32=$XMMr;
            return 2820 << 16 | 5792;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSDB_mory::VPMOVSDB
            // VPMOVSDB  VREG:w:s8=$XMMm  PREG:r:Z=$Kk VREG:r:s32=$YMMr;
            return 2821 << 16 | 5793;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSDB_morz_1::VPMOVSDB
            // VPMOVSDB  VREG:w:s8=$XMMm  PREG:r:Z=$Kk VREG:r:s32=$ZMMr;
            return 2822 << 16 | 5794;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXBD::PMOVSXBD
            // PMOVSXBD VREG:w:s32=$XMMr VREG:r:s8=$XMMm;
            return 1097 << 16 | 1882;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXBD_rymq::VPMOVSXBD
              // VPMOVSXBD VREG:w:s32=$YMMr VREG:r:s8=$XMMm;
              return 1862 << 16 | 3580;
            }
            else
            {
              // TEMPLATE.VPMOVSXBD_romd::VPMOVSXBD
              // VPMOVSXBD VREG:w:s32=$XMMr VREG:r:s8=$XMMm;
              return 1860 << 16 | 3576;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXBD_romx::VPMOVSXBD
                // VPMOVSXBD VREG:w:s32=$XMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1861 << 16 | 3578;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXBD_rymx::VPMOVSXBD
                // VPMOVSXBD VREG:w:s32=$YMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1863 << 16 | 3582;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXBD_rzmo::VPMOVSXBD
                // VPMOVSXBD VREG:w:s32=$ZMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1864 << 16 | 3584;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSDB_mdro::VPMOVSDBmd
            // VPMOVSDB  MEM:w:s8=$mem32  PREG:r:Z=$Kk VREG:r:s32=$XMMr;
            return 2819 << 16 | 5791;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSDB_mqry::VPMOVSDBmq
            // VPMOVSDB  MEM:w:s8=$mem64  PREG:r:Z=$Kk VREG:r:s32=$YMMr;
            return 2824 << 16 | 5796;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSDB_morz_2::VPMOVSDBmx
            // VPMOVSDB  MEM:w:s8=$mem128 PREG:r:Z=$Kk VREG:r:s32=$ZMMr;
            return 2823 << 16 | 5795;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXBD::PMOVSXBDmd
            // PMOVSXBD VREG:w:s32=$XMMr MEM:r:s8=$mem32;
            return 1097 << 16 | 1883;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXBD_rymq::VPMOVSXBDmq
              // VPMOVSXBD VREG:w:s32=$YMMr MEM:r:s8=$mem64;
              return 1862 << 16 | 3581;
            }
            else
            {
              // TEMPLATE.VPMOVSXBD_romd::VPMOVSXBDmd
              // VPMOVSXBD VREG:w:s32=$XMMr MEM:r:s8=$mem32;
              return 1860 << 16 | 3577;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXBD_romx::VPMOVSXBDmd
                // VPMOVSXBD VREG:w:s32=$XMMr PREG:r:Z=$Kk      MEM:r:s8=$mem32;
                return 1861 << 16 | 3579;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXBD_rymx::VPMOVSXBDmq
                // VPMOVSXBD VREG:w:s32=$YMMr PREG:r:Z=$Kk      MEM:r:s8=$mem64;
                return 1863 << 16 | 3583;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXBD_rzmo::VPMOVSXBDmx
                // VPMOVSXBD VREG:w:s32=$ZMMr PREG:r:Z=$Kk      MEM:r:s8=$mem128;
                return 1864 << 16 | 3585;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x22 */
  case 802:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSQB_moro::VPMOVSQB
            // VPMOVSQB  VREG:w:s8=$XMMm PREG:r:Z=$Kk VREG:r:s64=$XMMr;
            return 2856 << 16 | 5828;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSQB_mory::VPMOVSQB
            // VPMOVSQB  VREG:w:s8=$XMMm PREG:r:Z=$Kk VREG:r:s64=$YMMr;
            return 2857 << 16 | 5829;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSQB_morz::VPMOVSQB
            // VPMOVSQB  VREG:w:s8=$XMMm PREG:r:Z=$Kk VREG:r:s64=$ZMMr;
            return 2858 << 16 | 5830;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXBQ::PMOVSXBQ
            // PMOVSXBQ VREG:w:s64=$XMMr VREG:r:s8=$XMMm;
            return 1098 << 16 | 1884;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXBQ_rymd::VPMOVSXBQ
              // VPMOVSXBQ VREG:w:s64=$YMMr VREG:r:s8=$XMMm;
              return 1867 << 16 | 3590;
            }
            else
            {
              // TEMPLATE.VPMOVSXBQ_romw::VPMOVSXBQ
              // VPMOVSXBQ VREG:w:s64=$XMMr VREG:r:s8=$XMMm;
              return 1865 << 16 | 3586;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXBQ_romx::VPMOVSXBQ
                // VPMOVSXBQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1866 << 16 | 3588;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXBQ_rymx::VPMOVSXBQ
                // VPMOVSXBQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1868 << 16 | 3592;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXBQ_rzmx::VPMOVSXBQ
                // VPMOVSXBQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1869 << 16 | 3594;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSQB_mwro::VPMOVSQBmw
            // VPMOVSQB  MEM:w:s8=$mem16 PREG:r:Z=$Kk VREG:r:s64=$XMMr;
            return 2860 << 16 | 5832;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSQB_mdry::VPMOVSQBmd
            // VPMOVSQB  MEM:w:s8=$mem32 PREG:r:Z=$Kk VREG:r:s64=$YMMr;
            return 2855 << 16 | 5827;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSQB_mqrz::VPMOVSQBmq
            // VPMOVSQB  MEM:w:s8=$mem64 PREG:r:Z=$Kk VREG:r:s64=$ZMMr;
            return 2859 << 16 | 5831;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXBQ::PMOVSXBQmw
            // PMOVSXBQ VREG:w:s64=$XMMr MEM:r:s8=$mem16;
            return 1098 << 16 | 1885;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXBQ_rymd::VPMOVSXBQmd
              // VPMOVSXBQ VREG:w:s64=$YMMr MEM:r:s8=$mem32;
              return 1867 << 16 | 3591;
            }
            else
            {
              // TEMPLATE.VPMOVSXBQ_romw::VPMOVSXBQmw
              // VPMOVSXBQ VREG:w:s64=$XMMr MEM:r:s8=$mem16;
              return 1865 << 16 | 3587;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXBQ_romx::VPMOVSXBQmw
                // VPMOVSXBQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      MEM:r:s8=$mem16;
                return 1866 << 16 | 3589;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXBQ_rymx::VPMOVSXBQmd
                // VPMOVSXBQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      MEM:r:s8=$mem32;
                return 1868 << 16 | 3593;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXBQ_rzmx::VPMOVSXBQmq
                // VPMOVSXBQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      MEM:r:s8=$mem64;
                return 1869 << 16 | 3595;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x23 */
  case 803:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSDW_moro::VPMOVSDW
            // VPMOVSDW  VREG:w:s16=$XMMm  PREG:r:Z=$Kk VREG:r:s32=$XMMr;
            return 2837 << 16 | 5809;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSDW_mory_1::VPMOVSDW
            // VPMOVSDW  VREG:w:s16=$XMMm  PREG:r:Z=$Kk VREG:r:s32=$YMMr;
            return 2838 << 16 | 5810;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSDW_myrz_1::VPMOVSDW
            // VPMOVSDW  VREG:w:s16=$YMMm  PREG:r:Z=$Kk VREG:r:s32=$ZMMr;
            return 2841 << 16 | 5813;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXWD::PMOVSXWD
            // PMOVSXWD VREG:w:s32=$XMMr VREG:r:s16=$XMMm;
            return 1101 << 16 | 1890;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXWD_rymo_1::VPMOVSXWD
              // VPMOVSXWD VREG:w:s32=$YMMr VREG:r:s16=$XMMm;
              return 1882 << 16 | 3620;
            }
            else
            {
              // TEMPLATE.VPMOVSXWD_romq::VPMOVSXWD
              // VPMOVSXWD VREG:w:s32=$XMMr VREG:r:s16=$XMMm;
              return 1880 << 16 | 3616;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXWD_romx::VPMOVSXWD
                // VPMOVSXWD VREG:w:s32=$XMMr PREG:r:Z=$Kk      VREG:r:s16=$XMMm;
                return 1881 << 16 | 3618;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXWD_rymo_2::VPMOVSXWD
                // VPMOVSXWD VREG:w:s32=$YMMr PREG:r:Z=$Kk      VREG:r:s16=$XMMm;
                return 1883 << 16 | 3622;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXWD_rzmy::VPMOVSXWD
                // VPMOVSXWD VREG:w:s32=$ZMMr PREG:r:Z=$Kk      VREG:r:s16=$YMMm;
                return 1884 << 16 | 3624;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSDW_mqro::VPMOVSDWmq
            // VPMOVSDW  MEM:w:s16=$mem64  PREG:r:Z=$Kk VREG:r:s32=$XMMr;
            return 2840 << 16 | 5812;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSDW_mory_2::VPMOVSDWmx
            // VPMOVSDW  MEM:w:s16=$mem128 PREG:r:Z=$Kk VREG:r:s32=$YMMr;
            return 2839 << 16 | 5811;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSDW_myrz_2::VPMOVSDWmy
            // VPMOVSDW  MEM:w:s16=$mem256 PREG:r:Z=$Kk VREG:r:s32=$ZMMr;
            return 2842 << 16 | 5814;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXWD::PMOVSXWDmq
            // PMOVSXWD VREG:w:s32=$XMMr MEM:r:s16=$mem64;
            return 1101 << 16 | 1891;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXWD_rymo_1::VPMOVSXWDmx
              // VPMOVSXWD VREG:w:s32=$YMMr MEM:r:s16=$mem128;
              return 1882 << 16 | 3621;
            }
            else
            {
              // TEMPLATE.VPMOVSXWD_romq::VPMOVSXWDmq
              // VPMOVSXWD VREG:w:s32=$XMMr MEM:r:s16=$mem64;
              return 1880 << 16 | 3617;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXWD_romx::VPMOVSXWDmq
                // VPMOVSXWD VREG:w:s32=$XMMr PREG:r:Z=$Kk      MEM:r:s16=$mem64;
                return 1881 << 16 | 3619;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXWD_rymo_2::VPMOVSXWDmx
                // VPMOVSXWD VREG:w:s32=$YMMr PREG:r:Z=$Kk      MEM:r:s16=$mem128;
                return 1883 << 16 | 3623;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXWD_rzmy::VPMOVSXWDmy
                // VPMOVSXWD VREG:w:s32=$ZMMr PREG:r:Z=$Kk      MEM:r:s16=$mem256;
                return 1884 << 16 | 3625;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x24 */
  case 804:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSQW_moro::VPMOVSQW
            // VPMOVSQW  VREG:w:s16=$XMMm  PREG:r:Z=$Kk VREG:r:s64=$XMMr;
            return 2892 << 16 | 5864;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSQW_mory::VPMOVSQW
            // VPMOVSQW  VREG:w:s16=$XMMm  PREG:r:Z=$Kk VREG:r:s64=$YMMr;
            return 2893 << 16 | 5865;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSQW_morz_1::VPMOVSQW
            // VPMOVSQW  VREG:w:s16=$XMMm  PREG:r:Z=$Kk VREG:r:s64=$ZMMr;
            return 2894 << 16 | 5866;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXWQ::PMOVSXWQ
            // PMOVSXWQ VREG:w:s64=$XMMr VREG:r:s16=$XMMm;
            return 1102 << 16 | 1892;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXWQ_rymq::VPMOVSXWQ
              // VPMOVSXWQ VREG:w:s64=$YMMr VREG:r:s16=$XMMm;
              return 1887 << 16 | 3630;
            }
            else
            {
              // TEMPLATE.VPMOVSXWQ_romd::VPMOVSXWQ
              // VPMOVSXWQ VREG:w:s64=$XMMr VREG:r:s16=$XMMm;
              return 1885 << 16 | 3626;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXWQ_romx::VPMOVSXWQ
                // VPMOVSXWQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      VREG:r:s16=$XMMm;
                return 1886 << 16 | 3628;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXWQ_rymx::VPMOVSXWQ
                // VPMOVSXWQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      VREG:r:s16=$XMMm;
                return 1888 << 16 | 3632;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXWQ_rzmo::VPMOVSXWQ
                // VPMOVSXWQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      VREG:r:s16=$XMMm;
                return 1889 << 16 | 3634;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSQW_mdro::VPMOVSQWmd
            // VPMOVSQW  MEM:w:s16=$mem32  PREG:r:Z=$Kk VREG:r:s64=$XMMr;
            return 2891 << 16 | 5863;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSQW_mqry::VPMOVSQWmq
            // VPMOVSQW  MEM:w:s16=$mem64  PREG:r:Z=$Kk VREG:r:s64=$YMMr;
            return 2896 << 16 | 5868;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSQW_morz_2::VPMOVSQWmx
            // VPMOVSQW  MEM:w:s16=$mem128 PREG:r:Z=$Kk VREG:r:s64=$ZMMr;
            return 2895 << 16 | 5867;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXWQ::PMOVSXWQmd
            // PMOVSXWQ VREG:w:s64=$XMMr MEM:r:s16=$mem32;
            return 1102 << 16 | 1893;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXWQ_rymq::VPMOVSXWQmq
              // VPMOVSXWQ VREG:w:s64=$YMMr MEM:r:s16=$mem64;
              return 1887 << 16 | 3631;
            }
            else
            {
              // TEMPLATE.VPMOVSXWQ_romd::VPMOVSXWQmd
              // VPMOVSXWQ VREG:w:s64=$XMMr MEM:r:s16=$mem32;
              return 1885 << 16 | 3627;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXWQ_romx::VPMOVSXWQmd
                // VPMOVSXWQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      MEM:r:s16=$mem32;
                return 1886 << 16 | 3629;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXWQ_rymx::VPMOVSXWQmq
                // VPMOVSXWQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      MEM:r:s16=$mem64;
                return 1888 << 16 | 3633;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXWQ_rzmo::VPMOVSXWQmx
                // VPMOVSXWQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      MEM:r:s16=$mem128;
                return 1889 << 16 | 3635;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x25 */
  case 805:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSQD_moro::VPMOVSQD
            // VPMOVSQD  VREG:w:s32=$XMMm  PREG:r:Z=$Kk VREG:r:s64=$XMMr;
            return 2873 << 16 | 5845;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSQD_mory_1::VPMOVSQD
            // VPMOVSQD  VREG:w:s32=$XMMm  PREG:r:Z=$Kk VREG:r:s64=$YMMr;
            return 2874 << 16 | 5846;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSQD_myrz_1::VPMOVSQD
            // VPMOVSQD  VREG:w:s32=$YMMm  PREG:r:Z=$Kk VREG:r:s64=$ZMMr;
            return 2877 << 16 | 5849;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXDQ::PMOVSXDQ
            // PMOVSXDQ VREG:w:s64=$XMMr VREG:r:s32=$XMMm;
            return 1100 << 16 | 1888;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXDQ_rymo_1::VPMOVSXDQ
              // VPMOVSXDQ VREG:w:s64=$YMMr VREG:r:s32=$XMMm;
              return 1877 << 16 | 3610;
            }
            else
            {
              // TEMPLATE.VPMOVSXDQ_romq::VPMOVSXDQ
              // VPMOVSXDQ VREG:w:s64=$XMMr VREG:r:s32=$XMMm;
              return 1875 << 16 | 3606;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXDQ_romx::VPMOVSXDQ
                // VPMOVSXDQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      VREG:r:s32=$XMMm;
                return 1876 << 16 | 3608;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXDQ_rymo_2::VPMOVSXDQ
                // VPMOVSXDQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      VREG:r:s32=$XMMm;
                return 1878 << 16 | 3612;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXDQ_rzmy::VPMOVSXDQ
                // VPMOVSXDQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      VREG:r:s32=$YMMm;
                return 1879 << 16 | 3614;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVSQD_mqro::VPMOVSQDmq
            // VPMOVSQD  MEM:w:s32=$mem64  PREG:r:Z=$Kk VREG:r:s64=$XMMr;
            return 2876 << 16 | 5848;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVSQD_mory_2::VPMOVSQDmx
            // VPMOVSQD  MEM:w:s32=$mem128 PREG:r:Z=$Kk VREG:r:s64=$YMMr;
            return 2875 << 16 | 5847;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVSQD_myrz_2::VPMOVSQDmy
            // VPMOVSQD  MEM:w:s32=$mem256 PREG:r:Z=$Kk VREG:r:s64=$ZMMr;
            return 2878 << 16 | 5850;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVSXDQ::PMOVSXDQmq
            // PMOVSXDQ VREG:w:s64=$XMMr MEM:r:s32=$mem64;
            return 1100 << 16 | 1889;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVSXDQ_rymo_1::VPMOVSXDQmx
              // VPMOVSXDQ VREG:w:s64=$YMMr MEM:r:s32=$mem128;
              return 1877 << 16 | 3611;
            }
            else
            {
              // TEMPLATE.VPMOVSXDQ_romq::VPMOVSXDQmq
              // VPMOVSXDQ VREG:w:s64=$XMMr MEM:r:s32=$mem64;
              return 1875 << 16 | 3607;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVSXDQ_romx::VPMOVSXDQmq
                // VPMOVSXDQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      MEM:r:s32=$mem64;
                return 1876 << 16 | 3609;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVSXDQ_rymo_2::VPMOVSXDQmx
                // VPMOVSXDQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      MEM:r:s32=$mem128;
                return 1878 << 16 | 3613;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVSXDQ_rzmy::VPMOVSXDQmy
                // VPMOVSXDQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      MEM:r:s32=$mem256;
                return 1879 << 16 | 3615;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x26 */
  case 806:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (b & 0x20)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPTESTNMx_nymy_1::VPTESTNMW
            // VPTESTNMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
            return 3007 << 16 | 6181;
          }
          else
          {
            // TEMPLATE.VPTESTNMx_nymy_1::VPTESTNMB
            // VPTESTNMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
            return 3007 << 16 | 6179;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPTESTMx_nymy_1::VPTESTMW
            // VPTESTMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
            return 3001 << 16 | 6157;
          }
          else
          {
            // TEMPLATE.VPTESTMx_nymy_1::VPTESTMB
            // VPTESTMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
            return 3001 << 16 | 6155;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (b & 0x20)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTNMx_nzmz_1::VPTESTNMW
              // VPTESTNMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$ZMMn VREG:r:u16=$ZMMm;
              return 3009 << 16 | 6189;
            }
            else
            {
              // TEMPLATE.VPTESTNMx_nzmz_1::VPTESTNMB
              // VPTESTNMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$ZMMn  VREG:r:u8=$ZMMm;
              return 3009 << 16 | 6187;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTMx_nzmz_1::VPTESTMW
              // VPTESTMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$ZMMn VREG:r:u16=$ZMMm;
              return 3003 << 16 | 6165;
            }
            else
            {
              // TEMPLATE.VPTESTMx_nzmz_1::VPTESTMB
              // VPTESTMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$ZMMn  VREG:r:u8=$ZMMm;
              return 3003 << 16 | 6163;
            }
          }
        }
        else
        {
          if (b & 0x20)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTNMx_nomo_1::VPTESTNMW
              // VPTESTNMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
              return 3005 << 16 | 6173;
            }
            else
            {
              // TEMPLATE.VPTESTNMx_nomo_1::VPTESTNMB
              // VPTESTNMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
              return 3005 << 16 | 6171;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTMx_nomo_1::VPTESTMW
              // VPTESTMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
              return 2999 << 16 | 6149;
            }
            else
            {
              // TEMPLATE.VPTESTMx_nomo_1::VPTESTMB
              // VPTESTMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
              return 2999 << 16 | 6147;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (b & 0x20)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPTESTNMx_nymy_1::VPTESTNMWmy
            // VPTESTNMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$YMMn MEM:r:u16=$mem256;
            return 3007 << 16 | 6182;
          }
          else
          {
            // TEMPLATE.VPTESTNMx_nymy_1::VPTESTNMBmy
            // VPTESTNMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
            return 3007 << 16 | 6180;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPTESTMx_nymy_1::VPTESTMWmy
            // VPTESTMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$YMMn MEM:r:u16=$mem256;
            return 3001 << 16 | 6158;
          }
          else
          {
            // TEMPLATE.VPTESTMx_nymy_1::VPTESTMBmy
            // VPTESTMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
            return 3001 << 16 | 6156;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (b & 0x20)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTNMx_nzmz_1::VPTESTNMWmz
              // VPTESTNMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$ZMMn MEM:r:u16=$mem512;
              return 3009 << 16 | 6190;
            }
            else
            {
              // TEMPLATE.VPTESTNMx_nzmz_1::VPTESTNMBmz
              // VPTESTNMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$ZMMn  MEM:r:u8=$mem512;
              return 3009 << 16 | 6188;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTMx_nzmz_1::VPTESTMWmz
              // VPTESTMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$ZMMn MEM:r:u16=$mem512;
              return 3003 << 16 | 6166;
            }
            else
            {
              // TEMPLATE.VPTESTMx_nzmz_1::VPTESTMBmz
              // VPTESTMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$ZMMn  MEM:r:u8=$mem512;
              return 3003 << 16 | 6164;
            }
          }
        }
        else
        {
          if (b & 0x20)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTNMx_nomo_1::VPTESTNMWmx
              // VPTESTNMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$XMMn MEM:r:u16=$mem128;
              return 3005 << 16 | 6174;
            }
            else
            {
              // TEMPLATE.VPTESTNMx_nomo_1::VPTESTNMBmx
              // VPTESTNMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
              return 3005 << 16 | 6172;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTMx_nomo_1::VPTESTMWmx
              // VPTESTMW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$XMMn MEM:r:u16=$mem128;
              return 2999 << 16 | 6150;
            }
            else
            {
              // TEMPLATE.VPTESTMx_nomo_1::VPTESTMBmx
              // VPTESTMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
              return 2999 << 16 | 6148;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x27 */
  case 807:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPTESTNMx_nymy_2::VPTESTNMQ
            // VPTESTNMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
            return 3008 << 16 | 6185;
          }
          else
          {
            // TEMPLATE.VPTESTNMx_nymy_2::VPTESTNMD
            // VPTESTNMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
            return 3008 << 16 | 6183;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTNMx_nzmz_2::VPTESTNMQ
              // VPTESTNMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
              return 3010 << 16 | 6193;
            }
            else
            {
              // TEMPLATE.VPTESTNMx_nzmz_2::VPTESTNMD
              // VPTESTNMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
              return 3010 << 16 | 6191;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTNMx_nomo_2::VPTESTNMQ
              // VPTESTNMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
              return 3006 << 16 | 6177;
            }
            else
            {
              // TEMPLATE.VPTESTNMx_nomo_2::VPTESTNMD
              // VPTESTNMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
              return 3006 << 16 | 6175;
            }
          }
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (c & 0x08)
          {
            // TEMPLATE.VPTESTMD::VPTESTMD
            // VPTESTMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm;
            return 3475 << 16 | 7216;
          }
          else
          {
            // TEMPLATE.VPTESTMD::VPTESTMD
            // VPTESTMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm SWZ=$r_i64;
            return 3475 << 16 | 7215;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTMx_nymy_2::VPTESTMQ
              // VPTESTMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
              return 3002 << 16 | 6161;
            }
            else
            {
              // TEMPLATE.VPTESTMx_nymy_2::VPTESTMD
              // VPTESTMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
              return 3002 << 16 | 6159;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPTESTMx_nzmz_2::VPTESTMQ
                // VPTESTMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
                return 3004 << 16 | 6169;
              }
              else
              {
                // TEMPLATE.VPTESTMx_nzmz_2::VPTESTMD
                // VPTESTMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
                return 3004 << 16 | 6167;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPTESTMx_nomo_2::VPTESTMQ
                // VPTESTMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
                return 3000 << 16 | 6153;
              }
              else
              {
                // TEMPLATE.VPTESTMx_nomo_2::VPTESTMD
                // VPTESTMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
                return 3000 << 16 | 6151;
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPTESTNMx_nymy_2::VPTESTNMQmy
            // VPTESTNMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
            return 3008 << 16 | 6186;
          }
          else
          {
            // TEMPLATE.VPTESTNMx_nymy_2::VPTESTNMDmy
            // VPTESTNMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
            return 3008 << 16 | 6184;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTNMx_nzmz_2::VPTESTNMQmz
              // VPTESTNMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
              return 3010 << 16 | 6194;
            }
            else
            {
              // TEMPLATE.VPTESTNMx_nzmz_2::VPTESTNMDmz
              // VPTESTNMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
              return 3010 << 16 | 6192;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTNMx_nomo_2::VPTESTNMQmx
              // VPTESTNMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
              return 3006 << 16 | 6178;
            }
            else
            {
              // TEMPLATE.VPTESTNMx_nomo_2::VPTESTNMDmx
              // VPTESTNMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
              return 3006 << 16 | 6176;
            }
          }
        }
      }
      else
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPTESTMD::VPTESTMDm
          // VPTESTMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3475 << 16 | 7217;
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPTESTMx_nymy_2::VPTESTMQmy
              // VPTESTMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
              return 3002 << 16 | 6162;
            }
            else
            {
              // TEMPLATE.VPTESTMx_nymy_2::VPTESTMDmy
              // VPTESTMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
              return 3002 << 16 | 6160;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPTESTMx_nzmz_2::VPTESTMQmz
                // VPTESTMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
                return 3004 << 16 | 6170;
              }
              else
              {
                // TEMPLATE.VPTESTMx_nzmz_2::VPTESTMDmz
                // VPTESTMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
                return 3004 << 16 | 6168;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPTESTMx_nomo_2::VPTESTMQmx
                // VPTESTMQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
                return 3000 << 16 | 6154;
              }
              else
              {
                // TEMPLATE.VPTESTMx_nomo_2::VPTESTMDmx
                // VPTESTMD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
                return 3000 << 16 | 6152;
              }
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x28 */
  case 808:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPMOVM2x_ry_1::VPMOVM2W
            // VPMOVM2W VREG:w:u16=$YMMr REG:r=$Km;
            return 2803 << 16 | 5766;
          }
          else
          {
            // TEMPLATE.VPMOVM2x_ry_1::VPMOVM2B
            // VPMOVM2B VREG:w:u8=$YMMr  REG:r=$Km;
            return 2803 << 16 | 5765;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMOVM2x_rz_1::VPMOVM2W
              // VPMOVM2W VREG:w:u16=$ZMMr REG:r=$Km;
              return 2805 << 16 | 5770;
            }
            else
            {
              // TEMPLATE.VPMOVM2x_rz_1::VPMOVM2B
              // VPMOVM2B VREG:w:u8=$ZMMr  REG:r=$Km;
              return 2805 << 16 | 5769;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMOVM2x_ro_1::VPMOVM2W
              // VPMOVM2W VREG:w:u16=$XMMr REG:r=$Km;
              return 2801 << 16 | 5762;
            }
            else
            {
              // TEMPLATE.VPMOVM2x_ro_1::VPMOVM2B
              // VPMOVM2B VREG:w:u8=$XMMr  REG:r=$Km;
              return 2801 << 16 | 5761;
            }
          }
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMULDQ::PMULDQ
            // PMULDQ VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1109 << 16 | 1906;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMULDQ_rynymy_1::VPMULDQ
              // VPMULDQ VREG:w:s64=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 1922 << 16 | 3700;
            }
            else
            {
              // TEMPLATE.VPMULDQ_ronomo_1::VPMULDQ
              // VPMULDQ VREG:w:s64=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 1920 << 16 | 3696;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMULDQ_ronomo_2::VPMULDQ
                // VPMULDQ VREG:w:s64=$XMMr PREG:r:Z=$Kk     VREG:r:s64=$XMMn  VREG:r:s64=$XMMm;
                return 1921 << 16 | 3698;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMULDQ_rynymy_2::VPMULDQ
                // VPMULDQ VREG:w:s64=$YMMr PREG:r:Z=$Kk     VREG:r:s64=$YMMn  VREG:r:s64=$YMMm;
                return 1923 << 16 | 3702;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMULDQ_rznzmz::VPMULDQ
                // VPMULDQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk     VREG:r:s64=$ZMMn  VREG:r:s64=$ZMMm;
                return 1924 << 16 | 3704;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMULDQ::PMULDQmx
          // PMULDQ VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1109 << 16 | 1907;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMULDQ_rynymy_1::VPMULDQmy
            // VPMULDQ VREG:w:s64=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
            return 1922 << 16 | 3701;
          }
          else
          {
            // TEMPLATE.VPMULDQ_ronomo_1::VPMULDQmx
            // VPMULDQ VREG:w:s64=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
            return 1920 << 16 | 3697;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPMULDQ_ronomo_2::VPMULDQmx
              // VPMULDQ VREG:w:s64=$XMMr PREG:r:Z=$Kk     VREG:r:s64=$XMMn  MEM:r:s64=$mem128 BCST=$BCST;
              return 1921 << 16 | 3699;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPMULDQ_rynymy_2::VPMULDQmy
              // VPMULDQ VREG:w:s64=$YMMr PREG:r:Z=$Kk     VREG:r:s64=$YMMn  MEM:r:s64=$mem256 BCST=$BCST;
              return 1923 << 16 | 3703;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPMULDQ_rznzmz::VPMULDQmz
              // VPMULDQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk     VREG:r:s64=$ZMMn  MEM:r:s64=$mem512 BCST=$BCST;
              return 1924 << 16 | 3705;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x29 */
  case 809:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPMOVx2M_my_1::VPMOVW2M
            // VPMOVW2M REG:w=$Kr VREG:r:u16=$YMMm;
            return 2809 << 16 | 5778;
          }
          else
          {
            // TEMPLATE.VPMOVx2M_my_1::VPMOVB2M
            // VPMOVB2M REG:w=$Kr VREG:r:u8=$YMMm;
            return 2809 << 16 | 5777;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMOVx2M_mz_1::VPMOVW2M
              // VPMOVW2M REG:w=$Kr VREG:r:u16=$ZMMm;
              return 2811 << 16 | 5782;
            }
            else
            {
              // TEMPLATE.VPMOVx2M_mz_1::VPMOVB2M
              // VPMOVB2M REG:w=$Kr VREG:r:u8=$ZMMm;
              return 2811 << 16 | 5781;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMOVx2M_mo_1::VPMOVW2M
              // VPMOVW2M REG:w=$Kr VREG:r:u16=$XMMm;
              return 2807 << 16 | 5774;
            }
            else
            {
              // TEMPLATE.VPMOVx2M_mo_1::VPMOVB2M
              // VPMOVB2M REG:w=$Kr VREG:r:u8=$XMMm;
              return 2807 << 16 | 5773;
            }
          }
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PCMPEQQ::PCMPEQQ
            // PCMPEQQ VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1049 << 16 | 1778;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPCMPEQQ_rynymy::VPCMPEQQ
              // VPCMPEQQ VREG:w:u64=$YMMr VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
              return 1721 << 16 | 3250;
            }
            else
            {
              // TEMPLATE.VPCMPEQQ_ronomo::VPCMPEQQ
              // VPCMPEQQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
              return 1720 << 16 | 3248;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPCMPEQQ_nomo::VPCMPEQQ
                // VPCMPEQQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
                return 1717 << 16 | 3242;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPCMPEQQ_nymy::VPCMPEQQ
                // VPCMPEQQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
                return 1718 << 16 | 3244;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPCMPEQQ_nzmz::VPCMPEQQ
                // VPCMPEQQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
                return 1719 << 16 | 3246;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PCMPEQQ::PCMPEQQmx
          // PCMPEQQ VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1049 << 16 | 1779;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPCMPEQQ_rynymy::VPCMPEQQmy
            // VPCMPEQQ VREG:w:u64=$YMMr VREG:r:u64=$YMMn MEM:r:u64=$mem256;
            return 1721 << 16 | 3251;
          }
          else
          {
            // TEMPLATE.VPCMPEQQ_ronomo::VPCMPEQQmx
            // VPCMPEQQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem128;
            return 1720 << 16 | 3249;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPCMPEQQ_nomo::VPCMPEQQmx
              // VPCMPEQQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
              return 1717 << 16 | 3243;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPCMPEQQ_nymy::VPCMPEQQmy
              // VPCMPEQQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
              return 1718 << 16 | 3245;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPCMPEQQ_nzmz::VPCMPEQQmz
              // VPCMPEQQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
              return 1719 << 16 | 3247;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x2a */
  case 810:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPBROADCASTMB2Q_ro::VPBROADCASTMB2Q
          // VPBROADCASTMB2Q VREG:w:u64=$XMMr REG:r:u64=$Km;
          return 2655 << 16 | 5411;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPBROADCASTMB2Q_ry::VPBROADCASTMB2Q
          // VPBROADCASTMB2Q VREG:w:u64=$YMMr REG:r:u64=$Km;
          return 2656 << 16 | 5412;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPBROADCASTMB2Q_rz::VPBROADCASTMB2Q
          // VPBROADCASTMB2Q VREG:w:u64=$ZMMr REG:r:u64=$Km;
          return 2657 << 16 | 5413;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.MOVNTDQA::MOVNTDQAmx
          // MOVNTDQA VREG:w:s32=$XMMr MEM:r:s32=$mem128;
          return 992 << 16 | 1668;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VMOVNTDQA_rymy_1::VMOVNTDQAmy
            // VMOVNTDQA VREG:w:s32=$YMMr MEM:r:s32=$mem256;
            return 1527 << 16 | 2855;
          }
          else
          {
            // TEMPLATE.VMOVNTDQA_romo_1::VMOVNTDQAmx
            // VMOVNTDQA VREG:w:s32=$XMMr MEM:r:s32=$mem128;
            return 1525 << 16 | 2853;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VMOVNTDQA_romo_2::VMOVNTDQAmx
              // VMOVNTDQA VREG:w:u32=$XMMr MEM:r:u32=$mem128;
              return 1526 << 16 | 2854;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VMOVNTDQA_rymy_2::VMOVNTDQAmy
              // VMOVNTDQA VREG:w:u32=$YMMr MEM:r:u32=$mem256;
              return 1528 << 16 | 2856;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VMOVNTDQA_rzmz::VMOVNTDQAmz
              // VMOVNTDQA VREG:w:u32=$ZMMr MEM:r:u32=$mem512;
              return 1529 << 16 | 2857;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x2b */
  case 811:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PACKUSDW::PACKUSDW
          // PACKUSDW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1030 << 16 | 1740;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPACKUSDW_rynymy_1::VPACKUSDW
            // VPACKUSDW VREG:w:u16=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
            return 1642 << 16 | 3092;
          }
          else
          {
            // TEMPLATE.VPACKUSDW_ronomo_1::VPACKUSDW
            // VPACKUSDW VREG:w:u16=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
            return 1640 << 16 | 3088;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPACKUSDW_ronomo_2::VPACKUSDW
              // VPACKUSDW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
              return 1641 << 16 | 3090;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPACKUSDW_rynymy_2::VPACKUSDW
              // VPACKUSDW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
              return 1643 << 16 | 3094;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPACKUSDW_rznzmz::VPACKUSDW
              // VPACKUSDW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
              return 1644 << 16 | 3096;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PACKUSDW::PACKUSDWmx
          // PACKUSDW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1030 << 16 | 1741;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPACKUSDW_rynymy_1::VPACKUSDWmy
            // VPACKUSDW VREG:w:u16=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
            return 1642 << 16 | 3093;
          }
          else
          {
            // TEMPLATE.VPACKUSDW_ronomo_1::VPACKUSDWmx
            // VPACKUSDW VREG:w:u16=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
            return 1640 << 16 | 3089;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPACKUSDW_ronomo_2::VPACKUSDWmx
              // VPACKUSDW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
              return 1641 << 16 | 3091;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPACKUSDW_rynymy_2::VPACKUSDWmy
              // VPACKUSDW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
              return 1643 << 16 | 3095;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPACKUSDW_rznzmz::VPACKUSDWmz
              // VPACKUSDW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
              return 1644 << 16 | 3097;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x2c */
  case 812:
    if (a & 0x01)
    {
      if (b & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSCALEFPD_rznzmz::VSCALEFPD
          // VSCALEFPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
          return 3053 << 16 | 6291;
        }
        else
        {
          // TEMPLATE.VSCALEFPS_rznzmz::VSCALEFPS
          // VSCALEFPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
          return 3056 << 16 | 6298;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VSCALEFPD_rynymy::VSCALEFPD
            // VSCALEFPD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
            return 3052 << 16 | 6289;
          }
          else
          {
            // TEMPLATE.VSCALEFPS_rynymy::VSCALEFPS
            // VSCALEFPS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
            return 3055 << 16 | 6296;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VSCALEFPD_rznzmz::VSCALEFPD
              // VSCALEFPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm;
              return 3053 << 16 | 6292;
            }
            else
            {
              // TEMPLATE.VSCALEFPS_rznzmz::VSCALEFPS
              // VSCALEFPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
              return 3056 << 16 | 6299;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VSCALEFPD_ronomo::VSCALEFPD
              // VSCALEFPD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 3051 << 16 | 6287;
            }
            else
            {
              // TEMPLATE.VSCALEFPS_ronomo::VSCALEFPS
              // VSCALEFPS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 3054 << 16 | 6294;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VMASKMOVPS_rxnxmx::VMASKMOVPSmy
          // VMASKMOVPS VREG:w:f32=$YMMr  VREG:r:s32=$YMMn MEM:r:f32=$mem256;
          return 2606 << 16 | 5302;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VSCALEFPD_rynymy::VSCALEFPDmy
            // VSCALEFPD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn MEM:r:f64=$mem256 BCST=$BCST;
            return 3052 << 16 | 6290;
          }
          else
          {
            // TEMPLATE.VSCALEFPS_rynymy::VSCALEFPSmy
            // VSCALEFPS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn MEM:r:f32=$mem256 BCST=$BCST;
            return 3055 << 16 | 6297;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VSCALEFPD_rznzmz::VSCALEFPDmz
            // VSCALEFPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r:f64=$mem512 BCST=$BCST;
            return 3053 << 16 | 6293;
          }
          else
          {
            // TEMPLATE.VSCALEFPS_rznzmz::VSCALEFPSmz
            // VSCALEFPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:f32=$mem512 BCST=$BCST;
            return 3056 << 16 | 6300;
          }
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VMASKMOVPS_rxnxmx::VMASKMOVPSmx
            // VMASKMOVPS VREG:w:f32=$XMMr  VREG:r:s32=$XMMn MEM:r:f32=$mem128;
            return 2606 << 16 | 5301;
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VSCALEFPD_ronomo::VSCALEFPDmx
              // VSCALEFPD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem128 BCST=$BCST;
              return 3051 << 16 | 6288;
            }
            else
            {
              // TEMPLATE.VSCALEFPS_ronomo::VSCALEFPSmx
              // VSCALEFPS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem128 BCST=$BCST;
              return 3054 << 16 | 6295;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x2d */
  case 813:
    if (a & 0x01)
    {
      if (b & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSCALEFSD::VSCALEFSD
          // VSCALEFSD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
          return 3057 << 16 | 6302;
        }
        else
        {
          // TEMPLATE.VSCALEFSS::VSCALEFSS
          // VSCALEFSS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
          return 3058 << 16 | 6305;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSCALEFSD::VSCALEFSD
          // VSCALEFSD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
          return 3057 << 16 | 6301;
        }
        else
        {
          // TEMPLATE.VSCALEFSS::VSCALEFSS
          // VSCALEFSS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
          return 3058 << 16 | 6304;
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VMASKMOVPD_rxnxmx::VMASKMOVPDmy
          // VMASKMOVPD VREG:w:f64=$YMMr  VREG:r:u64=$YMMn MEM:r:f64=$mem256;
          return 2604 << 16 | 5298;
        }
        else
        {
          // TEMPLATE.VMASKMOVPD_rxnxmx::VMASKMOVPDmx
          // VMASKMOVPD VREG:w:f64=$XMMr  VREG:r:u64=$XMMn MEM:r:f64=$mem128;
          return 2604 << 16 | 5297;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSCALEFSD::VSCALEFSDmq
          // VSCALEFSD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 3057 << 16 | 6303;
        }
        else
        {
          // TEMPLATE.VSCALEFSS::VSCALEFSSmd
          // VSCALEFSS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 3058 << 16 | 6306;
        }
      }
    }
  break;
  /* 0f38.0x2e */
  case 814:
    if (b & 0x01)
    {
      // TEMPLATE.VMASKMOVPS_mxnxrx::VMASKMOVPSmy
      // VMASKMOVPS MEM:w:f32=$mem256 VREG:r:s32=$YMMn VREG:r:f32=$YMMr;
      return 2605 << 16 | 5300;
    }
    else
    {
      // TEMPLATE.VMASKMOVPS_mxnxrx::VMASKMOVPSmx
      // VMASKMOVPS MEM:w:f32=$mem128 VREG:r:s32=$XMMn VREG:r:f32=$XMMr;
      return 2605 << 16 | 5299;
    }
  break;
  /* 0f38.0x2f */
  case 815:
    if (b & 0x01)
    {
      // TEMPLATE.VMASKMOVPD_mxnxrx::VMASKMOVPDmy
      // VMASKMOVPD MEM:w:f64=$mem256 VREG:r:u64=$YMMn VREG:r:f64=$YMMr;
      return 2603 << 16 | 5296;
    }
    else
    {
      // TEMPLATE.VMASKMOVPD_mxnxrx::VMASKMOVPDmx
      // VMASKMOVPD MEM:w:f64=$mem128 VREG:r:u64=$XMMn VREG:r:f64=$XMMr;
      return 2603 << 16 | 5295;
    }
  break;
  /* 0f38.0x30 */
  case 816:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVWB_moro::VPMOVWB
            // VPMOVWB   VREG:w:u8=$XMMm  PREG:r:Z=$Kk VREG:r:u16=$XMMr;
            return 2915 << 16 | 5887;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVWB_mory_1::VPMOVWB
            // VPMOVWB   VREG:w:u8=$XMMm  PREG:r:Z=$Kk VREG:r:u16=$YMMr;
            return 2916 << 16 | 5888;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVWB_myrz_1::VPMOVWB
            // VPMOVWB   VREG:w:u8=$YMMm  PREG:r:Z=$Kk VREG:r:u16=$ZMMr;
            return 2919 << 16 | 5891;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXBW::PMOVZXBW
            // PMOVZXBW VREG:w:u16=$XMMr VREG:r:u8=$XMMm;
            return 1105 << 16 | 1898;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXBW_rymo_1::VPMOVZXBW
              // VPMOVZXBW VREG:w:u16=$YMMr VREG:r:u8=$XMMm;
              return 1902 << 16 | 3660;
            }
            else
            {
              // TEMPLATE.VPMOVZXBW_romq::VPMOVZXBW
              // VPMOVZXBW VREG:w:u16=$XMMr VREG:r:u8=$XMMm;
              return 1900 << 16 | 3656;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXBW_romx::VPMOVZXBW
                // VPMOVZXBW VREG:w:s16=$XMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1901 << 16 | 3658;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXBW_rymo_2::VPMOVZXBW
                // VPMOVZXBW VREG:w:s16=$YMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1903 << 16 | 3662;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXBW_rzmy::VPMOVZXBW
                // VPMOVZXBW VREG:w:s16=$ZMMr PREG:r:Z=$Kk      VREG:r:s8=$YMMm;
                return 1904 << 16 | 3664;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVWB_mqro::VPMOVWBmq
            // VPMOVWB   MEM:w:u8=$mem64  PREG:r:Z=$Kk VREG:r:u16=$XMMr;
            return 2918 << 16 | 5890;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVWB_mory_2::VPMOVWBmx
            // VPMOVWB   MEM:w:u8=$mem128 PREG:r:Z=$Kk VREG:r:u16=$YMMr;
            return 2917 << 16 | 5889;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVWB_myrz_2::VPMOVWBmy
            // VPMOVWB   MEM:w:u8=$mem256 PREG:r:Z=$Kk VREG:r:u16=$ZMMr;
            return 2920 << 16 | 5892;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXBW::PMOVZXBWmq
            // PMOVZXBW VREG:w:u16=$XMMr MEM:r:u8=$mem64;
            return 1105 << 16 | 1899;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXBW_rymo_1::VPMOVZXBWmx
              // VPMOVZXBW VREG:w:u16=$YMMr MEM:r:u8=$mem128;
              return 1902 << 16 | 3661;
            }
            else
            {
              // TEMPLATE.VPMOVZXBW_romq::VPMOVZXBWmq
              // VPMOVZXBW VREG:w:u16=$XMMr MEM:r:u8=$mem64;
              return 1900 << 16 | 3657;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXBW_romx::VPMOVZXBWmq
                // VPMOVZXBW VREG:w:s16=$XMMr PREG:r:Z=$Kk      MEM:r:s8=$mem64;
                return 1901 << 16 | 3659;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXBW_rymo_2::VPMOVZXBWmx
                // VPMOVZXBW VREG:w:s16=$YMMr PREG:r:Z=$Kk      MEM:r:s8=$mem128;
                return 1903 << 16 | 3663;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXBW_rzmy::VPMOVZXBWmy
                // VPMOVZXBW VREG:w:s16=$ZMMr PREG:r:Z=$Kk      MEM:r:s8=$mem256;
                return 1904 << 16 | 3665;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x31 */
  case 817:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVDB_moro::VPMOVDB
            // VPMOVDB   VREG:w:u8=$XMMm  PREG:r:Z=$Kk VREG:r:u32=$XMMr;
            return 2814 << 16 | 5786;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVDB_mory::VPMOVDB
            // VPMOVDB   VREG:w:u8=$XMMm  PREG:r:Z=$Kk VREG:r:u32=$YMMr;
            return 2815 << 16 | 5787;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVDB_morz_1::VPMOVDB
            // VPMOVDB   VREG:w:u8=$XMMm  PREG:r:Z=$Kk VREG:r:u32=$ZMMr;
            return 2816 << 16 | 5788;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXBD::PMOVZXBD
            // PMOVZXBD VREG:w:u32=$XMMr VREG:r:u8=$XMMm;
            return 1103 << 16 | 1894;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXBD_rymq::VPMOVZXBD
              // VPMOVZXBD VREG:w:u32=$YMMr VREG:r:u8=$XMMm;
              return 1892 << 16 | 3640;
            }
            else
            {
              // TEMPLATE.VPMOVZXBD_romd::VPMOVZXBD
              // VPMOVZXBD VREG:w:u32=$XMMr VREG:r:u8=$XMMm;
              return 1890 << 16 | 3636;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXBD_romx::VPMOVZXBD
                // VPMOVZXBD VREG:w:s32=$XMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1891 << 16 | 3638;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXBD_rymx::VPMOVZXBD
                // VPMOVZXBD VREG:w:s32=$YMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1893 << 16 | 3642;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXBD_rzmo::VPMOVZXBD
                // VPMOVZXBD VREG:w:s32=$ZMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1894 << 16 | 3644;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVDB_mdro::VPMOVDBmd
            // VPMOVDB   MEM:w:u8=$mem32  PREG:r:Z=$Kk VREG:r:u32=$XMMr;
            return 2813 << 16 | 5785;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVDB_mqry::VPMOVDBmq
            // VPMOVDB   MEM:w:u8=$mem64  PREG:r:Z=$Kk VREG:r:u32=$YMMr;
            return 2818 << 16 | 5790;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVDB_morz_2::VPMOVDBmx
            // VPMOVDB   MEM:w:u8=$mem128 PREG:r:Z=$Kk VREG:r:u32=$ZMMr;
            return 2817 << 16 | 5789;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXBD::PMOVZXBDmd
            // PMOVZXBD VREG:w:u32=$XMMr MEM:r:u8=$mem32;
            return 1103 << 16 | 1895;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXBD_rymq::VPMOVZXBDmq
              // VPMOVZXBD VREG:w:u32=$YMMr MEM:r:u8=$mem64;
              return 1892 << 16 | 3641;
            }
            else
            {
              // TEMPLATE.VPMOVZXBD_romd::VPMOVZXBDmd
              // VPMOVZXBD VREG:w:u32=$XMMr MEM:r:u8=$mem32;
              return 1890 << 16 | 3637;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXBD_romx::VPMOVZXBDmd
                // VPMOVZXBD VREG:w:s32=$XMMr PREG:r:Z=$Kk      MEM:r:s8=$mem32;
                return 1891 << 16 | 3639;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXBD_rymx::VPMOVZXBDmq
                // VPMOVZXBD VREG:w:s32=$YMMr PREG:r:Z=$Kk      MEM:r:s8=$mem64;
                return 1893 << 16 | 3643;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXBD_rzmo::VPMOVZXBDmx
                // VPMOVZXBD VREG:w:s32=$ZMMr PREG:r:Z=$Kk      MEM:r:s8=$mem128;
                return 1894 << 16 | 3645;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x32 */
  case 818:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVQB_moro::VPMOVQB
            // VPMOVQB   VREG:w:u8=$XMMm PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2850 << 16 | 5822;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVQB_mory::VPMOVQB
            // VPMOVQB   VREG:w:u8=$XMMm PREG:r:Z=$Kk VREG:r:u64=$YMMr;
            return 2851 << 16 | 5823;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVQB_morz::VPMOVQB
            // VPMOVQB   VREG:w:u8=$XMMm PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2852 << 16 | 5824;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXBQ::PMOVZXBQ
            // PMOVZXBQ VREG:w:u64=$XMMr VREG:r:u8=$XMMm;
            return 1104 << 16 | 1896;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXBQ_rymd::VPMOVZXBQ
              // VPMOVZXBQ VREG:w:u64=$YMMr VREG:r:u8=$XMMm;
              return 1897 << 16 | 3650;
            }
            else
            {
              // TEMPLATE.VPMOVZXBQ_romw::VPMOVZXBQ
              // VPMOVZXBQ VREG:w:u64=$XMMr VREG:r:u8=$XMMm;
              return 1895 << 16 | 3646;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXBQ_romx::VPMOVZXBQ
                // VPMOVZXBQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1896 << 16 | 3648;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXBQ_rymx::VPMOVZXBQ
                // VPMOVZXBQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1898 << 16 | 3652;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXBQ_rzmx::VPMOVZXBQ
                // VPMOVZXBQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      VREG:r:s8=$XMMm;
                return 1899 << 16 | 3654;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVQB_mwro::VPMOVQBmw
            // VPMOVQB   MEM:w:u8=$mem16 PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2854 << 16 | 5826;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVQB_mdry::VPMOVQBmd
            // VPMOVQB   MEM:w:u8=$mem32 PREG:r:Z=$Kk VREG:r:u64=$YMMr;
            return 2849 << 16 | 5821;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVQB_mqrz::VPMOVQBmq
            // VPMOVQB   MEM:w:u8=$mem64 PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2853 << 16 | 5825;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXBQ::PMOVZXBQmw
            // PMOVZXBQ VREG:w:u64=$XMMr MEM:r:u8=$mem16;
            return 1104 << 16 | 1897;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXBQ_rymd::VPMOVZXBQmd
              // VPMOVZXBQ VREG:w:u64=$YMMr MEM:r:u8=$mem32;
              return 1897 << 16 | 3651;
            }
            else
            {
              // TEMPLATE.VPMOVZXBQ_romw::VPMOVZXBQmw
              // VPMOVZXBQ VREG:w:u64=$XMMr MEM:r:u8=$mem16;
              return 1895 << 16 | 3647;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXBQ_romx::VPMOVZXBQmw
                // VPMOVZXBQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      MEM:r:s8=$mem16;
                return 1896 << 16 | 3649;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXBQ_rymx::VPMOVZXBQmd
                // VPMOVZXBQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      MEM:r:s8=$mem32;
                return 1898 << 16 | 3653;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXBQ_rzmx::VPMOVZXBQmq
                // VPMOVZXBQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      MEM:r:s8=$mem64;
                return 1899 << 16 | 3655;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x33 */
  case 819:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVDW_moro::VPMOVDW
            // VPMOVDW   VREG:w:u16=$XMMm  PREG:r:Z=$Kk VREG:r:u32=$XMMr;
            return 2831 << 16 | 5803;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVDW_mory_1::VPMOVDW
            // VPMOVDW   VREG:w:u16=$XMMm  PREG:r:Z=$Kk VREG:r:u32=$YMMr;
            return 2832 << 16 | 5804;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVDW_myrz_1::VPMOVDW
            // VPMOVDW   VREG:w:u16=$YMMm  PREG:r:Z=$Kk VREG:r:u32=$ZMMr;
            return 2835 << 16 | 5807;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXWD::PMOVZXWD
            // PMOVZXWD VREG:w:u32=$XMMr VREG:r:u16=$XMMm;
            return 1107 << 16 | 1902;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXWD_rymo_1::VPMOVZXWD
              // VPMOVZXWD VREG:w:u32=$YMMr VREG:r:u16=$XMMm;
              return 1912 << 16 | 3680;
            }
            else
            {
              // TEMPLATE.VPMOVZXWD_romq::VPMOVZXWD
              // VPMOVZXWD VREG:w:u32=$XMMr VREG:r:u16=$XMMm;
              return 1910 << 16 | 3676;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXWD_romx::VPMOVZXWD
                // VPMOVZXWD VREG:w:s32=$XMMr PREG:r:Z=$Kk      VREG:r:s16=$XMMm;
                return 1911 << 16 | 3678;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXWD_rymo_2::VPMOVZXWD
                // VPMOVZXWD VREG:w:s32=$YMMr PREG:r:Z=$Kk      VREG:r:s16=$XMMm;
                return 1913 << 16 | 3682;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXWD_rzmy::VPMOVZXWD
                // VPMOVZXWD VREG:w:s32=$ZMMr PREG:r:Z=$Kk      VREG:r:s16=$YMMm;
                return 1914 << 16 | 3684;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVDW_mqro::VPMOVDWmq
            // VPMOVDW   MEM:w:u16=$mem64  PREG:r:Z=$Kk VREG:r:u32=$XMMr;
            return 2834 << 16 | 5806;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVDW_mory_2::VPMOVDWmx
            // VPMOVDW   MEM:w:u16=$mem128 PREG:r:Z=$Kk VREG:r:u32=$YMMr;
            return 2833 << 16 | 5805;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVDW_myrz_2::VPMOVDWmy
            // VPMOVDW   MEM:w:u16=$mem256 PREG:r:Z=$Kk VREG:r:u32=$ZMMr;
            return 2836 << 16 | 5808;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXWD::PMOVZXWDmq
            // PMOVZXWD VREG:w:u32=$XMMr MEM:r:u16=$mem64;
            return 1107 << 16 | 1903;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXWD_rymo_1::VPMOVZXWDmx
              // VPMOVZXWD VREG:w:u32=$YMMr MEM:r:u16=$mem128;
              return 1912 << 16 | 3681;
            }
            else
            {
              // TEMPLATE.VPMOVZXWD_romq::VPMOVZXWDmq
              // VPMOVZXWD VREG:w:u32=$XMMr MEM:r:u16=$mem64;
              return 1910 << 16 | 3677;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXWD_romx::VPMOVZXWDmq
                // VPMOVZXWD VREG:w:s32=$XMMr PREG:r:Z=$Kk      MEM:r:s16=$mem64;
                return 1911 << 16 | 3679;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXWD_rymo_2::VPMOVZXWDmx
                // VPMOVZXWD VREG:w:s32=$YMMr PREG:r:Z=$Kk      MEM:r:s16=$mem128;
                return 1913 << 16 | 3683;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXWD_rzmy::VPMOVZXWDmy
                // VPMOVZXWD VREG:w:s32=$ZMMr PREG:r:Z=$Kk      MEM:r:s16=$mem256;
                return 1914 << 16 | 3685;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x34 */
  case 820:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVQW_moro::VPMOVQW
            // VPMOVQW   VREG:w:u16=$XMMm  PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2886 << 16 | 5858;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVQW_mory::VPMOVQW
            // VPMOVQW   VREG:w:u16=$XMMm  PREG:r:Z=$Kk VREG:r:u64=$YMMr;
            return 2887 << 16 | 5859;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVQW_morz_1::VPMOVQW
            // VPMOVQW   VREG:w:u16=$XMMm  PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2888 << 16 | 5860;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXWQ::PMOVZXWQ
            // PMOVZXWQ VREG:w:u64=$XMMr VREG:r:u16=$XMMm;
            return 1108 << 16 | 1904;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXWQ_rymq::VPMOVZXWQ
              // VPMOVZXWQ VREG:w:u64=$YMMr VREG:r:u16=$XMMm;
              return 1917 << 16 | 3690;
            }
            else
            {
              // TEMPLATE.VPMOVZXWQ_romd::VPMOVZXWQ
              // VPMOVZXWQ VREG:w:u64=$XMMr VREG:r:u16=$XMMm;
              return 1915 << 16 | 3686;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXWQ_romx::VPMOVZXWQ
                // VPMOVZXWQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      VREG:r:s16=$XMMm;
                return 1916 << 16 | 3688;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXWQ_rymx::VPMOVZXWQ
                // VPMOVZXWQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      VREG:r:s16=$XMMm;
                return 1918 << 16 | 3692;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXWQ_rzmo::VPMOVZXWQ
                // VPMOVZXWQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      VREG:r:s16=$XMMm;
                return 1919 << 16 | 3694;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVQW_mdro::VPMOVQWmd
            // VPMOVQW   MEM:w:u16=$mem32  PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2885 << 16 | 5857;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVQW_mqry::VPMOVQWmq
            // VPMOVQW   MEM:w:u16=$mem64  PREG:r:Z=$Kk VREG:r:u64=$YMMr;
            return 2890 << 16 | 5862;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVQW_morz_2::VPMOVQWmx
            // VPMOVQW   MEM:w:u16=$mem128 PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2889 << 16 | 5861;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXWQ::PMOVZXWQmd
            // PMOVZXWQ VREG:w:u64=$XMMr MEM:r:u16=$mem32;
            return 1108 << 16 | 1905;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXWQ_rymq::VPMOVZXWQmq
              // VPMOVZXWQ VREG:w:u64=$YMMr MEM:r:u16=$mem64;
              return 1917 << 16 | 3691;
            }
            else
            {
              // TEMPLATE.VPMOVZXWQ_romd::VPMOVZXWQmd
              // VPMOVZXWQ VREG:w:u64=$XMMr MEM:r:u16=$mem32;
              return 1915 << 16 | 3687;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXWQ_romx::VPMOVZXWQmd
                // VPMOVZXWQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      MEM:r:s16=$mem32;
                return 1916 << 16 | 3689;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXWQ_rymx::VPMOVZXWQmq
                // VPMOVZXWQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      MEM:r:s16=$mem64;
                return 1918 << 16 | 3693;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXWQ_rzmo::VPMOVZXWQmx
                // VPMOVZXWQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      MEM:r:s16=$mem128;
                return 1919 << 16 | 3695;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x35 */
  case 821:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVQD_moro::VPMOVQD
            // VPMOVQD   VREG:w:u32=$XMMm  PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2867 << 16 | 5839;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVQD_mory_1::VPMOVQD
            // VPMOVQD   VREG:w:u32=$XMMm  PREG:r:Z=$Kk VREG:r:u64=$YMMr;
            return 2868 << 16 | 5840;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVQD_myrz_1::VPMOVQD
            // VPMOVQD   VREG:w:u32=$YMMm  PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2871 << 16 | 5843;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXDQ::PMOVZXDQ
            // PMOVZXDQ VREG:w:u64=$XMMr VREG:r:u32=$XMMm;
            return 1106 << 16 | 1900;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXDQ_rymo_1::VPMOVZXDQ
              // VPMOVZXDQ VREG:w:u64=$YMMr VREG:r:u32=$XMMm;
              return 1907 << 16 | 3670;
            }
            else
            {
              // TEMPLATE.VPMOVZXDQ_romq::VPMOVZXDQ
              // VPMOVZXDQ VREG:w:u64=$XMMr VREG:r:u32=$XMMm;
              return 1905 << 16 | 3666;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXDQ_romx::VPMOVZXDQ
                // VPMOVZXDQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      VREG:r:s32=$XMMm;
                return 1906 << 16 | 3668;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXDQ_rymo_2::VPMOVZXDQ
                // VPMOVZXDQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      VREG:r:s32=$XMMm;
                return 1908 << 16 | 3672;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXDQ_rzmy::VPMOVZXDQ
                // VPMOVZXDQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      VREG:r:s32=$YMMm;
                return 1909 << 16 | 3674;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMOVQD_mqro::VPMOVQDmq
            // VPMOVQD   MEM:w:u32=$mem64  PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2870 << 16 | 5842;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMOVQD_mory_2::VPMOVQDmx
            // VPMOVQD   MEM:w:u32=$mem128 PREG:r:Z=$Kk VREG:r:u64=$YMMr;
            return 2869 << 16 | 5841;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMOVQD_myrz_2::VPMOVQDmy
            // VPMOVQD   MEM:w:u32=$mem256 PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2872 << 16 | 5844;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMOVZXDQ::PMOVZXDQmq
            // PMOVZXDQ VREG:w:u64=$XMMr MEM:r:u32=$mem64;
            return 1106 << 16 | 1901;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMOVZXDQ_rymo_1::VPMOVZXDQmx
              // VPMOVZXDQ VREG:w:u64=$YMMr MEM:r:u32=$mem128;
              return 1907 << 16 | 3671;
            }
            else
            {
              // TEMPLATE.VPMOVZXDQ_romq::VPMOVZXDQmq
              // VPMOVZXDQ VREG:w:u64=$XMMr MEM:r:u32=$mem64;
              return 1905 << 16 | 3667;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMOVZXDQ_romx::VPMOVZXDQmq
                // VPMOVZXDQ VREG:w:s64=$XMMr PREG:r:Z=$Kk      MEM:r:s32=$mem64;
                return 1906 << 16 | 3669;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMOVZXDQ_rymo_2::VPMOVZXDQmx
                // VPMOVZXDQ VREG:w:s64=$YMMr PREG:r:Z=$Kk      MEM:r:s32=$mem128;
                return 1908 << 16 | 3673;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMOVZXDQ_rzmy::VPMOVZXDQmy
                // VPMOVZXDQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk      MEM:r:s32=$mem256;
                return 1909 << 16 | 3675;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x36 */
  case 822:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          // TEMPLATE.VPERMD_rznzmz_2::VPERMD
          // VPERMD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
          return 3429 << 16 | 7118;
        }
        else
        {
          // TEMPLATE.VPERMD_rynymy_1::VPERMD
          // VPERMD VREG:w:u32=$YMMr VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
          return 2767 << 16 | 5673;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMQ_rynymy::VPERMQ
            // VPERMQ VREG:w:u64=$YMMr PREG:r:Z=$Kk      VREG:r:u64=$YMMn             VREG:r:u64=$YMMm;
            return 2752 << 16 | 5631;
          }
          else
          {
            // TEMPLATE.VPERMD_rynymy_2::VPERMD
            // VPERMD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
            return 2768 << 16 | 5675;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMQ_rznzmz::VPERMQ
            // VPERMQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk      VREG:r:u64=$ZMMn             VREG:r:u64=$ZMMm;
            return 2754 << 16 | 5635;
          }
          else
          {
            // TEMPLATE.VPERMD_rznzmz_1::VPERMD
            // VPERMD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
            return 2769 << 16 | 5677;
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          // TEMPLATE.VPERMD_rznzmz_2::VPERMDmz
          // VPERMD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:s32=$mem512 SWZ=$n_i32 EVH=$EVH;
          return 3429 << 16 | 7119;
        }
        else
        {
          // TEMPLATE.VPERMD_rynymy_1::VPERMDmy
          // VPERMD VREG:w:u32=$YMMr VREG:r:u32=$YMMn MEM:r:u32=$mem256;
          return 2767 << 16 | 5674;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMQ_rynymy::VPERMQmy
            // VPERMQ VREG:w:u64=$YMMr PREG:r:Z=$Kk      VREG:r:u64=$YMMn             MEM:r:u64=$mem256 BCST=$BCST;
            return 2752 << 16 | 5632;
          }
          else
          {
            // TEMPLATE.VPERMD_rynymy_2::VPERMDmy
            // VPERMD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
            return 2768 << 16 | 5676;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMQ_rznzmz::VPERMQmz
            // VPERMQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk      VREG:r:u64=$ZMMn             MEM:r:u64=$mem512 BCST=$BCST;
            return 2754 << 16 | 5636;
          }
          else
          {
            // TEMPLATE.VPERMD_rznzmz_1::VPERMDmz
            // VPERMD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
            return 2769 << 16 | 5678;
          }
        }
      }
    }
  break;
  /* 0f38.0x37 */
  case 823:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PCMPGTQ::PCMPGTQ
          // PCMPGTQ VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1055 << 16 | 1794;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPCMPGTQ_rynymy::VPCMPGTQ
            // VPCMPGTQ VREG:w:s64=$YMMr VREG:r:s64=$YMMn VREG:r:s64=$YMMm;
            return 1743 << 16 | 3302;
          }
          else
          {
            // TEMPLATE.VPCMPGTQ_ronomo::VPCMPGTQ
            // VPCMPGTQ VREG:w:s32=$XMMr VREG:r:s64=$XMMn VREG:r:s64=$XMMm;
            return 1742 << 16 | 3300;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPCMPGTQ_nomo::VPCMPGTQ
              // VPCMPGTQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s64=$XMMn  VREG:r:s64=$XMMm;
              return 1739 << 16 | 3294;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPCMPGTQ_nymy::VPCMPGTQ
              // VPCMPGTQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s64=$YMMn  VREG:r:s64=$YMMm;
              return 1740 << 16 | 3296;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPCMPGTQ_nzmz::VPCMPGTQ
              // VPCMPGTQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s64=$ZMMn  VREG:r:s64=$ZMMm;
              return 1741 << 16 | 3298;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PCMPGTQ::PCMPGTQmx
          // PCMPGTQ VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1055 << 16 | 1795;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPCMPGTQ_rynymy::VPCMPGTQmy
            // VPCMPGTQ VREG:w:s64=$YMMr VREG:r:s64=$YMMn MEM:r:s64=$mem256;
            return 1743 << 16 | 3303;
          }
          else
          {
            // TEMPLATE.VPCMPGTQ_ronomo::VPCMPGTQmx
            // VPCMPGTQ VREG:w:s32=$XMMr VREG:r:s64=$XMMn MEM:r:s64=$mem128;
            return 1742 << 16 | 3301;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPCMPGTQ_nomo::VPCMPGTQmx
              // VPCMPGTQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s64=$XMMn  MEM:r:s64=$mem128 BCST=$BCST;
              return 1739 << 16 | 3295;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPCMPGTQ_nymy::VPCMPGTQmy
              // VPCMPGTQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s64=$YMMn  MEM:r:s64=$mem256 BCST=$BCST;
              return 1740 << 16 | 3297;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPCMPGTQ_nzmz::VPCMPGTQmz
              // VPCMPGTQ REG:w=$Kr        PREG:r:Z=$Kk     VREG:r:s64=$ZMMn  MEM:r:s64=$mem512 BCST=$BCST;
              return 1741 << 16 | 3299;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x38 */
  case 824:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPMOVM2x_ry_2::VPMOVM2Q
            // VPMOVM2Q VREG:w:u64=$YMMr REG:r=$Km;
            return 2804 << 16 | 5768;
          }
          else
          {
            // TEMPLATE.VPMOVM2x_ry_2::VPMOVM2D
            // VPMOVM2D VREG:w:u32=$YMMr REG:r=$Km;
            return 2804 << 16 | 5767;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMOVM2x_rz_2::VPMOVM2Q
              // VPMOVM2Q VREG:w:u64=$ZMMr REG:r=$Km;
              return 2806 << 16 | 5772;
            }
            else
            {
              // TEMPLATE.VPMOVM2x_rz_2::VPMOVM2D
              // VPMOVM2D VREG:w:u32=$ZMMr REG:r=$Km;
              return 2806 << 16 | 5771;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMOVM2x_ro_2::VPMOVM2Q
              // VPMOVM2Q VREG:w:u64=$XMMr REG:r=$Km;
              return 2802 << 16 | 5764;
            }
            else
            {
              // TEMPLATE.VPMOVM2x_ro_2::VPMOVM2D
              // VPMOVM2D VREG:w:u32=$XMMr REG:r=$Km;
              return 2802 << 16 | 5763;
            }
          }
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMINSB::PMINSB
            // PMINSB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1090 << 16 | 1869;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMINSB_rynymy_1::VPMINSB
              // VPMINSB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  VREG:r:s8=$YMMm;
              return 1830 << 16 | 3506;
            }
            else
            {
              // TEMPLATE.VPMINSB_ronomo_1::VPMINSB
              // VPMINSB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  VREG:r:s8=$XMMm;
              return 1828 << 16 | 3502;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMINSB_ronomo_2::VPMINSB
                // VPMINSB VREG:w:s8=$XMMr  PREG:r:Z=$Kk     VREG:r:s8=$XMMn   VREG:r:s8=$XMMm;
                return 1829 << 16 | 3504;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMINSB_rynymy_2::VPMINSB
                // VPMINSB VREG:w:s8=$YMMr  PREG:r:Z=$Kk     VREG:r:s8=$YMMn   VREG:r:s8=$YMMm;
                return 1831 << 16 | 3508;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMINSB_rznzmz::VPMINSB
                // VPMINSB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk     VREG:r:s8=$ZMMn   VREG:r:s8=$ZMMm;
                return 1832 << 16 | 3510;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMINSB::PMINSBmx
          // PMINSB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1090 << 16 | 1870;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMINSB_rynymy_1::VPMINSBmy
            // VPMINSB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  MEM:r:s8=$mem256;
            return 1830 << 16 | 3507;
          }
          else
          {
            // TEMPLATE.VPMINSB_ronomo_1::VPMINSBmx
            // VPMINSB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  MEM:r:s8=$mem128;
            return 1828 << 16 | 3503;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPMINSB_ronomo_2::VPMINSBmx
              // VPMINSB VREG:w:s8=$XMMr  PREG:r:Z=$Kk     VREG:r:s8=$XMMn   MEM:r:s8=$mem128;
              return 1829 << 16 | 3505;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPMINSB_rynymy_2::VPMINSBmy
              // VPMINSB VREG:w:s8=$YMMr  PREG:r:Z=$Kk     VREG:r:s8=$YMMn   MEM:r:s8=$mem256;
              return 1831 << 16 | 3509;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPMINSB_rznzmz::VPMINSBmz
              // VPMINSB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk     VREG:r:s8=$ZMMn   MEM:r:s8=$mem512;
              return 1832 << 16 | 3511;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x39 */
  case 825:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPMOVx2M_my_2::VPMOVQ2M
            // VPMOVQ2M REG:w=$Kr VREG:r:u64=$YMMm;
            return 2810 << 16 | 5780;
          }
          else
          {
            // TEMPLATE.VPMOVx2M_my_2::VPMOVD2M
            // VPMOVD2M REG:w=$Kr VREG:r:u32=$YMMm;
            return 2810 << 16 | 5779;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMOVx2M_mz_2::VPMOVQ2M
              // VPMOVQ2M REG:w=$Kr VREG:r:u64=$ZMMm;
              return 2812 << 16 | 5784;
            }
            else
            {
              // TEMPLATE.VPMOVx2M_mz_2::VPMOVD2M
              // VPMOVD2M REG:w=$Kr VREG:r:u32=$ZMMm;
              return 2812 << 16 | 5783;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMOVx2M_mo_2::VPMOVQ2M
              // VPMOVQ2M REG:w=$Kr VREG:r:u64=$XMMm;
              return 2808 << 16 | 5776;
            }
            else
            {
              // TEMPLATE.VPMOVx2M_mo_2::VPMOVD2M
              // VPMOVD2M REG:w=$Kr VREG:r:u32=$XMMm;
              return 2808 << 16 | 5775;
            }
          }
        }
      }
      else
      {
        // the following switch contains 4 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMINSD::PMINSD
            // PMINSD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1092 << 16 | 1873;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMINSD_rynymy::VPMINSD
              // VPMINSD VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 1839 << 16 | 3524;
            }
            else
            {
              // TEMPLATE.VPMINSD_ronomo::VPMINSD
              // VPMINSD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 1838 << 16 | 3522;
            }
            break;
          }
          case 0x02:
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMINSx_rynymy::VPMINSQ
                // VPMINSQ VREG:w:s64=$YMMr PREG:r:Z=$Kk     VREG:r:s64=$YMMn  VREG:r:s64=$YMMm;
                return 1841 << 16 | 3532;
              }
              else
              {
                // TEMPLATE.VPMINSx_rynymy::VPMINSD
                // VPMINSD VREG:w:s32=$YMMr PREG:r:Z=$Kk     VREG:r:s32=$YMMn  VREG:r:s32=$YMMm;
                return 1841 << 16 | 3530;
              }
            }
            else
            {
              if (b & 0x02)
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPMINSx_rznzmz::VPMINSQ
                  // VPMINSQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk     VREG:r:s64=$ZMMn  VREG:r:s64=$ZMMm;
                  return 1842 << 16 | 3536;
                }
                else
                {
                  // TEMPLATE.VPMINSx_rznzmz::VPMINSD
                  // VPMINSD VREG:w:s32=$ZMMr PREG:r:Z=$Kk     VREG:r:s32=$ZMMn  VREG:r:s32=$ZMMm;
                  return 1842 << 16 | 3534;
                }
              }
              else
              {
                if (d & 0x01)
                {
                  // TEMPLATE.VPMINSx_ronomo::VPMINSQ
                  // VPMINSQ VREG:w:s64=$XMMr PREG:r:Z=$Kk     VREG:r:s64=$XMMn  VREG:r:s64=$XMMm;
                  return 1840 << 16 | 3528;
                }
                else
                {
                  // TEMPLATE.VPMINSx_ronomo::VPMINSD
                  // VPMINSD VREG:w:s32=$XMMr PREG:r:Z=$Kk     VREG:r:s32=$XMMn  VREG:r:s32=$XMMm;
                  return 1840 << 16 | 3526;
                }
              }
            }
            break;
          }
          case 0x03:
          {
            if (c & 0x08)
            {
              // TEMPLATE.VPMINSD_rznzmx::VPMINSD
              // VPMINSD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
              return 3437 << 16 | 7138;
            }
            else
            {
              // TEMPLATE.VPMINSD_rznzmx::VPMINSD
              // VPMINSD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3437 << 16 | 7137;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      // the following switch contains 4 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMINSD::PMINSDmx
          // PMINSD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1092 << 16 | 1874;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMINSD_rynymy::VPMINSDmy
            // VPMINSD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
            return 1839 << 16 | 3525;
          }
          else
          {
            // TEMPLATE.VPMINSD_ronomo::VPMINSDmx
            // VPMINSD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
            return 1838 << 16 | 3523;
          }
          break;
        }
        case 0x02:
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMINSx_rynymy::VPMINSQmy
              // VPMINSQ VREG:w:s64=$YMMr PREG:r:Z=$Kk     VREG:r:s64=$YMMn  MEM:r:s64=$mem256 BCST=$BCST;
              return 1841 << 16 | 3533;
            }
            else
            {
              // TEMPLATE.VPMINSx_rynymy::VPMINSDmy
              // VPMINSD VREG:w:s32=$YMMr PREG:r:Z=$Kk     VREG:r:s32=$YMMn  MEM:r:s32=$mem256 BCST=$BCST;
              return 1841 << 16 | 3531;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMINSx_rznzmz::VPMINSQmz
                // VPMINSQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk     VREG:r:s64=$ZMMn  MEM:r:s64=$mem512 BCST=$BCST;
                return 1842 << 16 | 3537;
              }
              else
              {
                // TEMPLATE.VPMINSx_rznzmz::VPMINSDmz
                // VPMINSD VREG:w:s32=$ZMMr PREG:r:Z=$Kk     VREG:r:s32=$ZMMn  MEM:r:s32=$mem512 BCST=$BCST;
                return 1842 << 16 | 3535;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMINSx_ronomo::VPMINSQmx
                // VPMINSQ VREG:w:s64=$XMMr PREG:r:Z=$Kk     VREG:r:s64=$XMMn  MEM:r:s64=$mem128 BCST=$BCST;
                return 1840 << 16 | 3529;
              }
              else
              {
                // TEMPLATE.VPMINSx_ronomo::VPMINSDmx
                // VPMINSD VREG:w:s32=$XMMr PREG:r:Z=$Kk     VREG:r:s32=$XMMn  MEM:r:s32=$mem128 BCST=$BCST;
                return 1840 << 16 | 3527;
              }
            }
          }
          break;
        }
        case 0x03:
        {
          // TEMPLATE.VPMINSD_rznzmx::VPMINSDm
          // VPMINSD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3437 << 16 | 7139;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x3a */
  case 826:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPBROADCASTMW2D_ro::VPBROADCASTMW2D
            // VPBROADCASTMW2D VREG:w:u32=$XMMr REG:r:u32=$Km;
            return 2658 << 16 | 5414;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPBROADCASTMW2D_ry::VPBROADCASTMW2D
            // VPBROADCASTMW2D VREG:w:u32=$YMMr REG:r:u32=$Km;
            return 2659 << 16 | 5415;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPBROADCASTMW2D_rz::VPBROADCASTMW2D
            // VPBROADCASTMW2D VREG:w:u32=$ZMMr REG:r:u32=$Km;
            return 2660 << 16 | 5416;
            break;
          }
          default: break;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PMINUW::PMINUW
            // PMINUW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
            return 1094 << 16 | 1877;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPMINUW_rynymy_1::VPMINUW
              // VPMINUW VREG:w:u16=$YMMr VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
              return 1850 << 16 | 3552;
            }
            else
            {
              // TEMPLATE.VPMINUW_ronomo_1::VPMINUW
              // VPMINUW VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
              return 1848 << 16 | 3548;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPMINUW_ronomo_2::VPMINUW
                // VPMINUW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
                return 1849 << 16 | 3550;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPMINUW_rynymy_2::VPMINUW
                // VPMINUW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
                return 1851 << 16 | 3554;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPMINUW_rznzmz::VPMINUW
                // VPMINUW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
                return 1852 << 16 | 3556;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMINUW::PMINUWmx
          // PMINUW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1094 << 16 | 1878;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMINUW_rynymy_1::VPMINUWmy
            // VPMINUW VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u16=$mem256;
            return 1850 << 16 | 3553;
          }
          else
          {
            // TEMPLATE.VPMINUW_ronomo_1::VPMINUWmx
            // VPMINUW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem128;
            return 1848 << 16 | 3549;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPMINUW_ronomo_2::VPMINUWmx
              // VPMINUW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
              return 1849 << 16 | 3551;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPMINUW_rynymy_2::VPMINUWmy
              // VPMINUW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
              return 1851 << 16 | 3555;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPMINUW_rznzmz::VPMINUWmz
              // VPMINUW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
              return 1852 << 16 | 3557;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x3b */
  case 827:
    if (a & 0x01)
    {
      // the following switch contains 4 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMINUD::PMINUD
          // PMINUD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1095 << 16 | 1879;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMINUD_rynymy::VPMINUD
            // VPMINUD VREG:w:u32=$YMMr VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
            return 1854 << 16 | 3560;
          }
          else
          {
            // TEMPLATE.VPMINUD_ronomo::VPMINUD
            // VPMINUD VREG:w:u32=$XMMr VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
            return 1853 << 16 | 3558;
          }
          break;
        }
        case 0x02:
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMINUx_rynymy::VPMINUQ
              // VPMINUQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
              return 1856 << 16 | 3568;
            }
            else
            {
              // TEMPLATE.VPMINUx_rynymy::VPMINUD
              // VPMINUD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
              return 1856 << 16 | 3566;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMINUx_rznzmz::VPMINUQ
                // VPMINUQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
                return 1857 << 16 | 3572;
              }
              else
              {
                // TEMPLATE.VPMINUx_rznzmz::VPMINUD
                // VPMINUD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
                return 1857 << 16 | 3570;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMINUx_ronomo::VPMINUQ
                // VPMINUQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
                return 1855 << 16 | 3564;
              }
              else
              {
                // TEMPLATE.VPMINUx_ronomo::VPMINUD
                // VPMINUD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
                return 1855 << 16 | 3562;
              }
            }
          }
          break;
        }
        case 0x03:
        {
          if (c & 0x08)
          {
            // TEMPLATE.VPMINUD_rznzmx::VPMINUD
            // VPMINUD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
            return 3438 << 16 | 7141;
          }
          else
          {
            // TEMPLATE.VPMINUD_rznzmx::VPMINUD
            // VPMINUD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3438 << 16 | 7140;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 4 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMINUD::PMINUDmx
          // PMINUD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1095 << 16 | 1880;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMINUD_rynymy::VPMINUDmy
            // VPMINUD VREG:w:u32=$YMMr VREG:r:u32=$YMMn MEM:r:u32=$mem256;
            return 1854 << 16 | 3561;
          }
          else
          {
            // TEMPLATE.VPMINUD_ronomo::VPMINUDmx
            // VPMINUD VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem128;
            return 1853 << 16 | 3559;
          }
          break;
        }
        case 0x02:
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMINUx_rynymy::VPMINUQmy
              // VPMINUQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
              return 1856 << 16 | 3569;
            }
            else
            {
              // TEMPLATE.VPMINUx_rynymy::VPMINUDmy
              // VPMINUD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
              return 1856 << 16 | 3567;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMINUx_rznzmz::VPMINUQmz
                // VPMINUQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
                return 1857 << 16 | 3573;
              }
              else
              {
                // TEMPLATE.VPMINUx_rznzmz::VPMINUDmz
                // VPMINUD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
                return 1857 << 16 | 3571;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMINUx_ronomo::VPMINUQmx
                // VPMINUQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
                return 1855 << 16 | 3565;
              }
              else
              {
                // TEMPLATE.VPMINUx_ronomo::VPMINUDmx
                // VPMINUD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
                return 1855 << 16 | 3563;
              }
            }
          }
          break;
        }
        case 0x03:
        {
          // TEMPLATE.VPMINUD_rznzmx::VPMINUDm
          // VPMINUD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3438 << 16 | 7142;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x3c */
  case 828:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMAXSB::PMAXSB
          // PMAXSB VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1084 << 16 | 1857;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMAXSB_rynymy_1::VPMAXSB
            // VPMAXSB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  VREG:r:s8=$YMMm;
            return 1800 << 16 | 3434;
          }
          else
          {
            // TEMPLATE.VPMAXSB_ronomo_1::VPMAXSB
            // VPMAXSB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  VREG:r:s8=$XMMm;
            return 1798 << 16 | 3430;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPMAXSB_ronomo_2::VPMAXSB
              // VPMAXSB VREG:w:s8=$XMMr  PREG:r:Z=$Kk     VREG:r:s8=$XMMn   VREG:r:s8=$XMMm;
              return 1799 << 16 | 3432;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPMAXSB_rynymy_2::VPMAXSB
              // VPMAXSB VREG:w:s8=$YMMr  PREG:r:Z=$Kk     VREG:r:s8=$YMMn   VREG:r:s8=$YMMm;
              return 1801 << 16 | 3436;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPMAXSB_rznzmz::VPMAXSB
              // VPMAXSB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk     VREG:r:s8=$ZMMn   VREG:r:s8=$ZMMm;
              return 1802 << 16 | 3438;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMAXSB::PMAXSBmx
          // PMAXSB VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1084 << 16 | 1858;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMAXSB_rynymy_1::VPMAXSBmy
            // VPMAXSB VREG:w:s8=$YMMr  VREG:r:s8=$YMMn  MEM:r:s8=$mem256;
            return 1800 << 16 | 3435;
          }
          else
          {
            // TEMPLATE.VPMAXSB_ronomo_1::VPMAXSBmx
            // VPMAXSB VREG:w:s8=$XMMr  VREG:r:s8=$XMMn  MEM:r:s8=$mem128;
            return 1798 << 16 | 3431;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPMAXSB_ronomo_2::VPMAXSBmx
              // VPMAXSB VREG:w:s8=$XMMr  PREG:r:Z=$Kk     VREG:r:s8=$XMMn   MEM:r:s8=$mem128;
              return 1799 << 16 | 3433;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPMAXSB_rynymy_2::VPMAXSBmy
              // VPMAXSB VREG:w:s8=$YMMr  PREG:r:Z=$Kk     VREG:r:s8=$YMMn   MEM:r:s8=$mem256;
              return 1801 << 16 | 3437;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPMAXSB_rznzmz::VPMAXSBmz
              // VPMAXSB VREG:w:s8=$ZMMr  PREG:r:Z=$Kk     VREG:r:s8=$ZMMn   MEM:r:s8=$mem512;
              return 1802 << 16 | 3439;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x3d */
  case 829:
    if (a & 0x01)
    {
      // the following switch contains 4 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMAXSD::PMAXSD
          // PMAXSD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1085 << 16 | 1859;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMAXSD_rynymy::VPMAXSD
            // VPMAXSD VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
            return 1804 << 16 | 3442;
          }
          else
          {
            // TEMPLATE.VPMAXSD_ronomo::VPMAXSD
            // VPMAXSD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
            return 1803 << 16 | 3440;
          }
          break;
        }
        case 0x02:
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMAXSx_rynymy::VPMAXSQ
              // VPMAXSQ VREG:w:s64=$YMMr PREG:r:Z=$Kk     VREG:r:s64=$YMMn  VREG:r:s64=$YMMm;
              return 1811 << 16 | 3460;
            }
            else
            {
              // TEMPLATE.VPMAXSx_rynymy::VPMAXSD
              // VPMAXSD VREG:w:s32=$YMMr PREG:r:Z=$Kk     VREG:r:s32=$YMMn  VREG:r:s32=$YMMm;
              return 1811 << 16 | 3458;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMAXSx_rznzmz::VPMAXSQ
                // VPMAXSQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk     VREG:r:s64=$ZMMn  VREG:r:s64=$ZMMm;
                return 1812 << 16 | 3464;
              }
              else
              {
                // TEMPLATE.VPMAXSx_rznzmz::VPMAXSD
                // VPMAXSD VREG:w:s32=$ZMMr PREG:r:Z=$Kk     VREG:r:s32=$ZMMn  VREG:r:s32=$ZMMm;
                return 1812 << 16 | 3462;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMAXSx_ronomo::VPMAXSQ
                // VPMAXSQ VREG:w:s64=$XMMr PREG:r:Z=$Kk     VREG:r:s64=$XMMn  VREG:r:s64=$XMMm;
                return 1810 << 16 | 3456;
              }
              else
              {
                // TEMPLATE.VPMAXSx_ronomo::VPMAXSD
                // VPMAXSD VREG:w:s32=$XMMr PREG:r:Z=$Kk     VREG:r:s32=$XMMn  VREG:r:s32=$XMMm;
                return 1810 << 16 | 3454;
              }
            }
          }
          break;
        }
        case 0x03:
        {
          if (c & 0x08)
          {
            // TEMPLATE.VPMAXSD_rznzmx::VPMAXSD
            // VPMAXSD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
            return 3435 << 16 | 7132;
          }
          else
          {
            // TEMPLATE.VPMAXSD_rznzmx::VPMAXSD
            // VPMAXSD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3435 << 16 | 7131;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 4 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMAXSD::PMAXSDmx
          // PMAXSD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1085 << 16 | 1860;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMAXSD_rynymy::VPMAXSDmy
            // VPMAXSD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
            return 1804 << 16 | 3443;
          }
          else
          {
            // TEMPLATE.VPMAXSD_ronomo::VPMAXSDmx
            // VPMAXSD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
            return 1803 << 16 | 3441;
          }
          break;
        }
        case 0x02:
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMAXSx_rynymy::VPMAXSQmy
              // VPMAXSQ VREG:w:s64=$YMMr PREG:r:Z=$Kk     VREG:r:s64=$YMMn  MEM:r:s64=$mem256 BCST=$BCST;
              return 1811 << 16 | 3461;
            }
            else
            {
              // TEMPLATE.VPMAXSx_rynymy::VPMAXSDmy
              // VPMAXSD VREG:w:s32=$YMMr PREG:r:Z=$Kk     VREG:r:s32=$YMMn  MEM:r:s32=$mem256 BCST=$BCST;
              return 1811 << 16 | 3459;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMAXSx_rznzmz::VPMAXSQmz
                // VPMAXSQ VREG:w:s64=$ZMMr PREG:r:Z=$Kk     VREG:r:s64=$ZMMn  MEM:r:s64=$mem512 BCST=$BCST;
                return 1812 << 16 | 3465;
              }
              else
              {
                // TEMPLATE.VPMAXSx_rznzmz::VPMAXSDmz
                // VPMAXSD VREG:w:s32=$ZMMr PREG:r:Z=$Kk     VREG:r:s32=$ZMMn  MEM:r:s32=$mem512 BCST=$BCST;
                return 1812 << 16 | 3463;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMAXSx_ronomo::VPMAXSQmx
                // VPMAXSQ VREG:w:s64=$XMMr PREG:r:Z=$Kk     VREG:r:s64=$XMMn  MEM:r:s64=$mem128 BCST=$BCST;
                return 1810 << 16 | 3457;
              }
              else
              {
                // TEMPLATE.VPMAXSx_ronomo::VPMAXSDmx
                // VPMAXSD VREG:w:s32=$XMMr PREG:r:Z=$Kk     VREG:r:s32=$XMMn  MEM:r:s32=$mem128 BCST=$BCST;
                return 1810 << 16 | 3455;
              }
            }
          }
          break;
        }
        case 0x03:
        {
          // TEMPLATE.VPMAXSD_rznzmx::VPMAXSDm
          // VPMAXSD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3435 << 16 | 7133;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x3e */
  case 830:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMAXUW::PMAXUW
          // PMAXUW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1088 << 16 | 1865;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMAXUW_rynymy_1::VPMAXUW
            // VPMAXUW VREG:w:u16=$YMMr VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
            return 1820 << 16 | 3480;
          }
          else
          {
            // TEMPLATE.VPMAXUW_ronomo_1::VPMAXUW
            // VPMAXUW VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
            return 1818 << 16 | 3476;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPMAXUW_ronomo_2::VPMAXUW
              // VPMAXUW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
              return 1819 << 16 | 3478;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPMAXUW_rynymy_2::VPMAXUW
              // VPMAXUW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
              return 1821 << 16 | 3482;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPMAXUW_rznzmz::VPMAXUW
              // VPMAXUW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
              return 1822 << 16 | 3484;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMAXUW::PMAXUWmx
          // PMAXUW VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1088 << 16 | 1866;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMAXUW_rynymy_1::VPMAXUWmy
            // VPMAXUW VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u16=$mem256;
            return 1820 << 16 | 3481;
          }
          else
          {
            // TEMPLATE.VPMAXUW_ronomo_1::VPMAXUWmx
            // VPMAXUW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem128;
            return 1818 << 16 | 3477;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPMAXUW_ronomo_2::VPMAXUWmx
              // VPMAXUW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
              return 1819 << 16 | 3479;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPMAXUW_rynymy_2::VPMAXUWmy
              // VPMAXUW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
              return 1821 << 16 | 3483;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPMAXUW_rznzmz::VPMAXUWmz
              // VPMAXUW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
              return 1822 << 16 | 3485;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x3f */
  case 831:
    if (a & 0x01)
    {
      // the following switch contains 4 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMAXUD::PMAXUD
          // PMAXUD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1089 << 16 | 1867;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMAXUD_rynymy::VPMAXUD
            // VPMAXUD VREG:w:u32=$YMMr VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
            return 1824 << 16 | 3488;
          }
          else
          {
            // TEMPLATE.VPMAXUD_ronomo::VPMAXUD
            // VPMAXUD VREG:w:u32=$XMMr VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
            return 1823 << 16 | 3486;
          }
          break;
        }
        case 0x02:
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMAXUx_rynymy::VPMAXUQ
              // VPMAXUQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
              return 1826 << 16 | 3496;
            }
            else
            {
              // TEMPLATE.VPMAXUx_rynymy::VPMAXUD
              // VPMAXUD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
              return 1826 << 16 | 3494;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMAXUx_rznzmz::VPMAXUQ
                // VPMAXUQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
                return 1827 << 16 | 3500;
              }
              else
              {
                // TEMPLATE.VPMAXUx_rznzmz::VPMAXUD
                // VPMAXUD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
                return 1827 << 16 | 3498;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMAXUx_ronomo::VPMAXUQ
                // VPMAXUQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
                return 1825 << 16 | 3492;
              }
              else
              {
                // TEMPLATE.VPMAXUx_ronomo::VPMAXUD
                // VPMAXUD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
                return 1825 << 16 | 3490;
              }
            }
          }
          break;
        }
        case 0x03:
        {
          if (c & 0x08)
          {
            // TEMPLATE.VPMAXUD_rznzmx::VPMAXUD
            // VPMAXUD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
            return 3436 << 16 | 7135;
          }
          else
          {
            // TEMPLATE.VPMAXUD_rznzmx::VPMAXUD
            // VPMAXUD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3436 << 16 | 7134;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 4 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMAXUD::PMAXUDmx
          // PMAXUD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1089 << 16 | 1868;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMAXUD_rynymy::VPMAXUDmy
            // VPMAXUD VREG:w:u32=$YMMr VREG:r:u32=$YMMn MEM:r:u32=$mem256;
            return 1824 << 16 | 3489;
          }
          else
          {
            // TEMPLATE.VPMAXUD_ronomo::VPMAXUDmx
            // VPMAXUD VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem128;
            return 1823 << 16 | 3487;
          }
          break;
        }
        case 0x02:
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMAXUx_rynymy::VPMAXUQmy
              // VPMAXUQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
              return 1826 << 16 | 3497;
            }
            else
            {
              // TEMPLATE.VPMAXUx_rynymy::VPMAXUDmy
              // VPMAXUD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
              return 1826 << 16 | 3495;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMAXUx_rznzmz::VPMAXUQmz
                // VPMAXUQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
                return 1827 << 16 | 3501;
              }
              else
              {
                // TEMPLATE.VPMAXUx_rznzmz::VPMAXUDmz
                // VPMAXUD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
                return 1827 << 16 | 3499;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMAXUx_ronomo::VPMAXUQmx
                // VPMAXUQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
                return 1825 << 16 | 3493;
              }
              else
              {
                // TEMPLATE.VPMAXUx_ronomo::VPMAXUDmx
                // VPMAXUD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
                return 1825 << 16 | 3491;
              }
            }
          }
          break;
        }
        case 0x03:
        {
          // TEMPLATE.VPMAXUD_rznzmx::VPMAXUDm
          // VPMAXUD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3436 << 16 | 7136;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x40 */
  case 832:
    if (a & 0x01)
    {
      // the following switch contains 4 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMULLD::PMULLD
          // PMULLD VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 1115 << 16 | 1918;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMULLD_rynymy_1::VPMULLD
            // VPMULLD VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
            return 1947 << 16 | 3750;
          }
          else
          {
            // TEMPLATE.VPMULLD_ronomo_1::VPMULLD
            // VPMULLD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
            return 1945 << 16 | 3746;
          }
          break;
        }
        case 0x02:
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMULLQ_rynymy::VPMULLQ
              // VPMULLQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
              return 1951 << 16 | 3758;
            }
            else
            {
              // TEMPLATE.VPMULLD_rynymy_2::VPMULLD
              // VPMULLD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
              return 1948 << 16 | 3752;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMULLQ_rznzmz::VPMULLQ
                // VPMULLQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
                return 1952 << 16 | 3760;
              }
              else
              {
                // TEMPLATE.VPMULLD_rznzmz::VPMULLD
                // VPMULLD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
                return 1949 << 16 | 3754;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMULLQ_ronomo::VPMULLQ
                // VPMULLQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
                return 1950 << 16 | 3756;
              }
              else
              {
                // TEMPLATE.VPMULLD_ronomo_2::VPMULLD
                // VPMULLD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
                return 1946 << 16 | 3748;
              }
            }
          }
          break;
        }
        case 0x03:
        {
          if (c & 0x08)
          {
            // TEMPLATE.VPMULLD_rznzmx::VPMULLD
            // VPMULLD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
            return 3441 << 16 | 7150;
          }
          else
          {
            // TEMPLATE.VPMULLD_rznzmx::VPMULLD
            // VPMULLD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3441 << 16 | 7149;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 4 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PMULLD::PMULLDmx
          // PMULLD VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 1115 << 16 | 1919;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPMULLD_rynymy_1::VPMULLDmy
            // VPMULLD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
            return 1947 << 16 | 3751;
          }
          else
          {
            // TEMPLATE.VPMULLD_ronomo_1::VPMULLDmx
            // VPMULLD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
            return 1945 << 16 | 3747;
          }
          break;
        }
        case 0x02:
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPMULLQ_rynymy::VPMULLQmy
              // VPMULLQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
              return 1951 << 16 | 3759;
            }
            else
            {
              // TEMPLATE.VPMULLD_rynymy_2::VPMULLDmy
              // VPMULLD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
              return 1948 << 16 | 3753;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMULLQ_rznzmz::VPMULLQmz
                // VPMULLQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
                return 1952 << 16 | 3761;
              }
              else
              {
                // TEMPLATE.VPMULLD_rznzmz::VPMULLDmz
                // VPMULLD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
                return 1949 << 16 | 3755;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VPMULLQ_ronomo::VPMULLQmx
                // VPMULLQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
                return 1950 << 16 | 3757;
              }
              else
              {
                // TEMPLATE.VPMULLD_ronomo_2::VPMULLDmx
                // VPMULLD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
                return 1946 << 16 | 3749;
              }
            }
          }
          break;
        }
        case 0x03:
        {
          // TEMPLATE.VPMULLD_rznzmx::VPMULLDm
          // VPMULLD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3441 << 16 | 7151;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x41 */
  case 833:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // TEMPLATE.VPHMINPOSUW::VPHMINPOSUW
        // VPHMINPOSUW VREG:w:u16=$XMMr VREG:r:u16=$XMMm;
        return 1775 << 16 | 3376;
      }
      else
      {
        // TEMPLATE.PHMINPOSUW::PHMINPOSUW
        // PHMINPOSUW VREG:w:s32=$XMMr VREG:r:s32=$XMMm;
        return 1071 << 16 | 1829;
      }
    }
    else
    {
      if (c & 0x01)
      {
        // TEMPLATE.VPHMINPOSUW::VPHMINPOSUWmx
        // VPHMINPOSUW VREG:w:u16=$XMMr MEM:r:u16=$mem128;
        return 1775 << 16 | 3377;
      }
      else
      {
        // TEMPLATE.PHMINPOSUW::PHMINPOSUWmx
        // PHMINPOSUW VREG:w:s32=$XMMr MEM:r:s32=$mem128;
        return 1071 << 16 | 1830;
      }
    }
  break;
  /* 0f38.0x42 */
  case 834:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGETEXPPD_rzmx::VGETEXPPD
            // VGETEXPPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE;
            return 3370 << 16 | 6998;
          }
          else
          {
            // TEMPLATE.VGETEXPPS_rzmx::VGETEXPPS
            // VGETEXPPS VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE;
            return 3371 << 16 | 7001;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGETEXPPD_rzmx::VGETEXPPD
            // VGETEXPPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SWZ=$r_i64;
            return 3370 << 16 | 6997;
          }
          else
          {
            // TEMPLATE.VGETEXPPS_rzmx::VGETEXPPS
            // VGETEXPPS VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3371 << 16 | 7000;
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGETEXPPD_rzmz::VGETEXPPD
            // VGETEXPPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE;
            return 2575 << 16 | 5231;
          }
          else
          {
            // TEMPLATE.VGETEXPPS_rzmz::VGETEXPPS
            // VGETEXPPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE;
            return 2578 << 16 | 5238;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VGETEXPPD_rymy::VGETEXPPD
              // VGETEXPPD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm;
              return 2574 << 16 | 5229;
            }
            else
            {
              // TEMPLATE.VGETEXPPS_rymy::VGETEXPPS
              // VGETEXPPS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm;
              return 2577 << 16 | 5236;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VGETEXPPD_rzmz::VGETEXPPD
                // VGETEXPPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
                return 2575 << 16 | 5232;
              }
              else
              {
                // TEMPLATE.VGETEXPPS_rzmz::VGETEXPPS
                // VGETEXPPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm;
                return 2578 << 16 | 5239;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VGETEXPPD_romo::VGETEXPPD
                // VGETEXPPD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm;
                return 2573 << 16 | 5227;
              }
              else
              {
                // TEMPLATE.VGETEXPPS_romo::VGETEXPPS
                // VGETEXPPS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
                return 2576 << 16 | 5234;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGETEXPPD_rzmx::VGETEXPPDm
          // VGETEXPPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
          return 3370 << 16 | 6999;
        }
        else
        {
          // TEMPLATE.VGETEXPPS_rzmx::VGETEXPPSm
          // VGETEXPPS VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
          return 3371 << 16 | 7002;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGETEXPPD_rymy::VGETEXPPDmy
            // VGETEXPPD VREG:w:f64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST;
            return 2574 << 16 | 5230;
          }
          else
          {
            // TEMPLATE.VGETEXPPS_rymy::VGETEXPPSmy
            // VGETEXPPS VREG:w:f32=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST;
            return 2577 << 16 | 5237;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VGETEXPPD_rzmz::VGETEXPPDmz
              // VGETEXPPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
              return 2575 << 16 | 5233;
            }
            else
            {
              // TEMPLATE.VGETEXPPS_rzmz::VGETEXPPSmz
              // VGETEXPPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST;
              return 2578 << 16 | 5240;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VGETEXPPD_romo::VGETEXPPDmx
              // VGETEXPPD VREG:w:f64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST;
              return 2573 << 16 | 5228;
            }
            else
            {
              // TEMPLATE.VGETEXPPS_romo::VGETEXPPSmx
              // VGETEXPPS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST;
              return 2576 << 16 | 5235;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x43 */
  case 835:
    if (a & 0x01)
    {
      if (b & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGETEXPSD::VGETEXPSD
          // VGETEXPSD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm SAE=$SAE;
          return 2579 << 16 | 5242;
        }
        else
        {
          // TEMPLATE.VGETEXPSS::VGETEXPSS
          // VGETEXPSS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE;
          return 2580 << 16 | 5245;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGETEXPSD::VGETEXPSD
          // VGETEXPSD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
          return 2579 << 16 | 5241;
        }
        else
        {
          // TEMPLATE.VGETEXPSS::VGETEXPSS
          // VGETEXPSS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
          return 2580 << 16 | 5244;
        }
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VGETEXPSD::VGETEXPSDmq
        // VGETEXPSD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem64;
        return 2579 << 16 | 5243;
      }
      else
      {
        // TEMPLATE.VGETEXPSS::VGETEXPSSmd
        // VGETEXPSS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem32;
        return 2580 << 16 | 5246;
      }
    }
  break;
  /* 0f38.0x44 */
  case 836:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPLZCNTx_rymy::VPLZCNTQ
          // VPLZCNTQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMm;
          return 2791 << 16 | 5735;
        }
        else
        {
          // TEMPLATE.VPLZCNTx_rymy::VPLZCNTD
          // VPLZCNTD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMm;
          return 2791 << 16 | 5733;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPLZCNTx_rzmz::VPLZCNTQ
            // VPLZCNTQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMm;
            return 2792 << 16 | 5739;
          }
          else
          {
            // TEMPLATE.VPLZCNTx_rzmz::VPLZCNTD
            // VPLZCNTD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMm;
            return 2792 << 16 | 5737;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPLZCNTx_romo::VPLZCNTQ
            // VPLZCNTQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMm;
            return 2790 << 16 | 5731;
          }
          else
          {
            // TEMPLATE.VPLZCNTx_romo::VPLZCNTD
            // VPLZCNTD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMm;
            return 2790 << 16 | 5729;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPLZCNTx_rymy::VPLZCNTQmy
          // VPLZCNTQ VREG:w:u64=$YMMr PREG:r:Z=$Kk MEM:r:u64=$mem256 BCST=$BCST;
          return 2791 << 16 | 5736;
        }
        else
        {
          // TEMPLATE.VPLZCNTx_rymy::VPLZCNTDmy
          // VPLZCNTD VREG:w:u32=$YMMr PREG:r:Z=$Kk MEM:r:u32=$mem256 BCST=$BCST;
          return 2791 << 16 | 5734;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPLZCNTx_rzmz::VPLZCNTQmz
            // VPLZCNTQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk MEM:r:u64=$mem512 BCST=$BCST;
            return 2792 << 16 | 5740;
          }
          else
          {
            // TEMPLATE.VPLZCNTx_rzmz::VPLZCNTDmz
            // VPLZCNTD VREG:w:u32=$ZMMr PREG:r:Z=$Kk MEM:r:u32=$mem512 BCST=$BCST;
            return 2792 << 16 | 5738;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPLZCNTx_romo::VPLZCNTQmx
            // VPLZCNTQ VREG:w:u64=$XMMr PREG:r:Z=$Kk MEM:r:u64=$mem128 BCST=$BCST;
            return 2790 << 16 | 5732;
          }
          else
          {
            // TEMPLATE.VPLZCNTx_romo::VPLZCNTDmx
            // VPLZCNTD VREG:w:u32=$XMMr PREG:r:Z=$Kk MEM:r:u32=$mem128 BCST=$BCST;
            return 2790 << 16 | 5730;
          }
        }
      }
    }
  break;
  /* 0f38.0x45 */
  case 837:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            // TEMPLATE.VPSRLVD::VPSRLVD
            // VPSRLVD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm;
            return 3470 << 16 | 7201;
          }
          else
          {
            // TEMPLATE.VPSRLVD::VPSRLVD
            // VPSRLVD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm SWZ=$r_i32;
            return 3470 << 16 | 7200;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRLVx_rxnxmx::VPSRLVQ
              // VPSRLVQ VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 2993 << 16 | 6124;
            }
            else
            {
              // TEMPLATE.VPSRLVx_rxnxmx::VPSRLVD
              // VPSRLVD VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 2993 << 16 | 6120;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRLVx_rxnxmx::VPSRLVQ
              // VPSRLVQ VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 2993 << 16 | 6123;
            }
            else
            {
              // TEMPLATE.VPSRLVx_rxnxmx::VPSRLVD
              // VPSRLVD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 2993 << 16 | 6119;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSRLVx_rynymy::VPSRLVQ
            // VPSRLVQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
            return 2994 << 16 | 6129;
          }
          else
          {
            // TEMPLATE.VPSRLVx_rynymy::VPSRLVD
            // VPSRLVD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
            return 2994 << 16 | 6127;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRLVx_rznzmz::VPSRLVQ
              // VPSRLVQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
              return 2995 << 16 | 6133;
            }
            else
            {
              // TEMPLATE.VPSRLVx_rznzmz::VPSRLVD
              // VPSRLVD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
              return 2995 << 16 | 6131;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRLVx_ronomo::VPSRLVQ
              // VPSRLVQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
              return 2992 << 16 | 6117;
            }
            else
            {
              // TEMPLATE.VPSRLVx_ronomo::VPSRLVD
              // VPSRLVD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
              return 2992 << 16 | 6115;
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          // TEMPLATE.VPSRLVD::VPSRLVDm
          // VPSRLVD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3470 << 16 | 7202;
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRLVx_rxnxmx::VPSRLVQmy
              // VPSRLVQ VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
              return 2993 << 16 | 6126;
            }
            else
            {
              // TEMPLATE.VPSRLVx_rxnxmx::VPSRLVDmy
              // VPSRLVD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
              return 2993 << 16 | 6122;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRLVx_rxnxmx::VPSRLVQmx
              // VPSRLVQ VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
              return 2993 << 16 | 6125;
            }
            else
            {
              // TEMPLATE.VPSRLVx_rxnxmx::VPSRLVDmx
              // VPSRLVD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
              return 2993 << 16 | 6121;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSRLVx_rynymy::VPSRLVQmy
            // VPSRLVQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
            return 2994 << 16 | 6130;
          }
          else
          {
            // TEMPLATE.VPSRLVx_rynymy::VPSRLVDmy
            // VPSRLVD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
            return 2994 << 16 | 6128;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRLVx_rznzmz::VPSRLVQmz
              // VPSRLVQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
              return 2995 << 16 | 6134;
            }
            else
            {
              // TEMPLATE.VPSRLVx_rznzmz::VPSRLVDmz
              // VPSRLVD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
              return 2995 << 16 | 6132;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRLVx_ronomo::VPSRLVQmx
              // VPSRLVQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
              return 2992 << 16 | 6118;
            }
            else
            {
              // TEMPLATE.VPSRLVx_ronomo::VPSRLVDmx
              // VPSRLVD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
              return 2992 << 16 | 6116;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x46 */
  case 838:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            // TEMPLATE.VPSRAVD_rznzmx::VPSRAVD
            // VPSRAVD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm;
            return 3468 << 16 | 7195;
          }
          else
          {
            // TEMPLATE.VPSRAVD_rznzmx::VPSRAVD
            // VPSRAVD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm SWZ=$r_i32;
            return 3468 << 16 | 7194;
          }
        }
        else
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPSRAVD_rxnxmx::VPSRAVD
            // VPSRAVD VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
            return 2982 << 16 | 6088;
          }
          else
          {
            // TEMPLATE.VPSRAVD_rxnxmx::VPSRAVD
            // VPSRAVD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
            return 2982 << 16 | 6087;
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSRAVx_rynymy::VPSRAVQ
            // VPSRAVQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
            return 2987 << 16 | 6103;
          }
          else
          {
            // TEMPLATE.VPSRAVx_rynymy::VPSRAVD
            // VPSRAVD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
            return 2987 << 16 | 6101;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRAVx_rznzmz::VPSRAVQ
              // VPSRAVQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
              return 2988 << 16 | 6107;
            }
            else
            {
              // TEMPLATE.VPSRAVx_rznzmz::VPSRAVD
              // VPSRAVD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
              return 2988 << 16 | 6105;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRAVx_ronomo::VPSRAVQ
              // VPSRAVQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
              return 2986 << 16 | 6099;
            }
            else
            {
              // TEMPLATE.VPSRAVx_ronomo::VPSRAVD
              // VPSRAVD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
              return 2986 << 16 | 6097;
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          // TEMPLATE.VPSRAVD_rznzmx::VPSRAVDm
          // VPSRAVD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3468 << 16 | 7196;
        }
        else
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPSRAVD_rxnxmx::VPSRAVDmy
            // VPSRAVD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
            return 2982 << 16 | 6090;
          }
          else
          {
            // TEMPLATE.VPSRAVD_rxnxmx::VPSRAVDmx
            // VPSRAVD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
            return 2982 << 16 | 6089;
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSRAVx_rynymy::VPSRAVQmy
            // VPSRAVQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
            return 2987 << 16 | 6104;
          }
          else
          {
            // TEMPLATE.VPSRAVx_rynymy::VPSRAVDmy
            // VPSRAVD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
            return 2987 << 16 | 6102;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRAVx_rznzmz::VPSRAVQmz
              // VPSRAVQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
              return 2988 << 16 | 6108;
            }
            else
            {
              // TEMPLATE.VPSRAVx_rznzmz::VPSRAVDmz
              // VPSRAVD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
              return 2988 << 16 | 6106;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSRAVx_ronomo::VPSRAVQmx
              // VPSRAVQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
              return 2986 << 16 | 6100;
            }
            else
            {
              // TEMPLATE.VPSRAVx_ronomo::VPSRAVDmx
              // VPSRAVD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
              return 2986 << 16 | 6098;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x47 */
  case 839:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            // TEMPLATE.VPSLLVD::VPSLLVD
            // VPSLLVD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm;
            return 3466 << 16 | 7189;
          }
          else
          {
            // TEMPLATE.VPSLLVD::VPSLLVD
            // VPSLLVD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm SWZ=$r_i32;
            return 3466 << 16 | 7188;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSLLVx_rxnxmx::VPSLLVQ
              // VPSLLVQ VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 2979 << 16 | 6076;
            }
            else
            {
              // TEMPLATE.VPSLLVx_rxnxmx::VPSLLVD
              // VPSLLVD VREG:w:s32=$YMMr VREG:r:s32=$YMMn VREG:r:s32=$YMMm;
              return 2979 << 16 | 6072;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSLLVx_rxnxmx::VPSLLVQ
              // VPSLLVQ VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 2979 << 16 | 6075;
            }
            else
            {
              // TEMPLATE.VPSLLVx_rxnxmx::VPSLLVD
              // VPSLLVD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm;
              return 2979 << 16 | 6071;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSLLVx_rynymy::VPSLLVQ
            // VPSLLVQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  VREG:r:u64=$YMMm;
            return 2980 << 16 | 6081;
          }
          else
          {
            // TEMPLATE.VPSLLVx_rynymy::VPSLLVD
            // VPSLLVD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  VREG:r:u32=$YMMm;
            return 2980 << 16 | 6079;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSLLVx_rznzmz::VPSLLVQ
              // VPSLLVQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  VREG:r:u64=$ZMMm;
              return 2981 << 16 | 6085;
            }
            else
            {
              // TEMPLATE.VPSLLVx_rznzmz::VPSLLVD
              // VPSLLVD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  VREG:r:u32=$ZMMm;
              return 2981 << 16 | 6083;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSLLVx_ronomo::VPSLLVQ
              // VPSLLVQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
              return 2978 << 16 | 6069;
            }
            else
            {
              // TEMPLATE.VPSLLVx_ronomo::VPSLLVD
              // VPSLLVD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
              return 2978 << 16 | 6067;
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          // TEMPLATE.VPSLLVD::VPSLLVDm
          // VPSLLVD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3466 << 16 | 7190;
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSLLVx_rxnxmx::VPSLLVQmy
              // VPSLLVQ VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
              return 2979 << 16 | 6078;
            }
            else
            {
              // TEMPLATE.VPSLLVx_rxnxmx::VPSLLVDmy
              // VPSLLVD VREG:w:s32=$YMMr VREG:r:s32=$YMMn MEM:r:s32=$mem256;
              return 2979 << 16 | 6074;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSLLVx_rxnxmx::VPSLLVQmx
              // VPSLLVQ VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
              return 2979 << 16 | 6077;
            }
            else
            {
              // TEMPLATE.VPSLLVx_rxnxmx::VPSLLVDmx
              // VPSLLVD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128;
              return 2979 << 16 | 6073;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSLLVx_rynymy::VPSLLVQmy
            // VPSLLVQ VREG:w:u64=$YMMr PREG:r:Z=$Kk     VREG:r:u64=$YMMn  MEM:r:u64=$mem256 BCST=$BCST;
            return 2980 << 16 | 6082;
          }
          else
          {
            // TEMPLATE.VPSLLVx_rynymy::VPSLLVDmy
            // VPSLLVD VREG:w:u32=$YMMr PREG:r:Z=$Kk     VREG:r:u32=$YMMn  MEM:r:u32=$mem256 BCST=$BCST;
            return 2980 << 16 | 6080;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSLLVx_rznzmz::VPSLLVQmz
              // VPSLLVQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk     VREG:r:u64=$ZMMn  MEM:r:u64=$mem512 BCST=$BCST;
              return 2981 << 16 | 6086;
            }
            else
            {
              // TEMPLATE.VPSLLVx_rznzmz::VPSLLVDmz
              // VPSLLVD VREG:w:u32=$ZMMr PREG:r:Z=$Kk     VREG:r:u32=$ZMMn  MEM:r:u32=$mem512 BCST=$BCST;
              return 2981 << 16 | 6084;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPSLLVx_ronomo::VPSLLVQmx
              // VPSLLVQ VREG:w:u64=$XMMr PREG:r:Z=$Kk     VREG:r:u64=$XMMn  MEM:r:u64=$mem128 BCST=$BCST;
              return 2978 << 16 | 6070;
            }
            else
            {
              // TEMPLATE.VPSLLVx_ronomo::VPSLLVDmx
              // VPSLLVD VREG:w:u32=$XMMr PREG:r:Z=$Kk     VREG:r:u32=$XMMn  MEM:r:u32=$mem128 BCST=$BCST;
              return 2978 << 16 | 6068;
            }
          }
        }
      }
    }
  break;
  /* invalid */
  case 840:
    return 0;
  /* invalid */
  case 841:
    return 0;
  /* invalid */
  case 842:
    return 0;
  /* invalid */
  case 843:
    return 0;
  /* 0f38.0x4c */
  case 844:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VRCP14PD_rymy::VRCP14PD
          // VRCP14PD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm;
          return 3020 << 16 | 6217;
        }
        else
        {
          // TEMPLATE.VRCP14PS_rymy::VRCP14PS
          // VRCP14PS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm;
          return 3023 << 16 | 6223;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRCP14PD_rzmz::VRCP14PD
            // VRCP14PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
            return 3021 << 16 | 6219;
          }
          else
          {
            // TEMPLATE.VRCP14PS_rzmz::VRCP14PS
            // VRCP14PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm;
            return 3024 << 16 | 6225;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRCP14PD_romo::VRCP14PD
            // VRCP14PD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm;
            return 3019 << 16 | 6215;
          }
          else
          {
            // TEMPLATE.VRCP14PS_romo::VRCP14PS
            // VRCP14PS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
            return 3022 << 16 | 6221;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VRCP14PD_rymy::VRCP14PDmy
          // VRCP14PD VREG:w:f64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST;
          return 3020 << 16 | 6218;
        }
        else
        {
          // TEMPLATE.VRCP14PS_rymy::VRCP14PSmy
          // VRCP14PS VREG:w:f32=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST;
          return 3023 << 16 | 6224;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRCP14PD_rzmz::VRCP14PDmz
            // VRCP14PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
            return 3021 << 16 | 6220;
          }
          else
          {
            // TEMPLATE.VRCP14PS_rzmz::VRCP14PSmz
            // VRCP14PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST;
            return 3024 << 16 | 6226;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRCP14PD_romo::VRCP14PDmx
            // VRCP14PD VREG:w:f64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST;
            return 3019 << 16 | 6216;
          }
          else
          {
            // TEMPLATE.VRCP14PS_romo::VRCP14PSmx
            // VRCP14PS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST;
            return 3022 << 16 | 6222;
          }
        }
      }
    }
  break;
  /* 0f38.0x4d */
  case 845:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VRCP14SD::VRCP14SD
        // VRCP14SD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
        return 3025 << 16 | 6227;
      }
      else
      {
        // TEMPLATE.VRCP14SS::VRCP14SS
        // VRCP14SS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
        return 3026 << 16 | 6229;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VRCP14SD::VRCP14SDmq
        // VRCP14SD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem64;
        return 3025 << 16 | 6228;
      }
      else
      {
        // TEMPLATE.VRCP14SS::VRCP14SSmd
        // VRCP14SS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem32;
        return 3026 << 16 | 6230;
      }
    }
  break;
  /* 0f38.0x4e */
  case 846:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VRSQRT14PD_rymy::VRSQRT14PD
          // VRSQRT14PD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm;
          return 3044 << 16 | 6273;
        }
        else
        {
          // TEMPLATE.VRSQRT14PS_rymy::VRSQRT14PS
          // VRSQRT14PS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm;
          return 3047 << 16 | 6279;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRSQRT14PD_rzmz::VRSQRT14PD
            // VRSQRT14PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
            return 3045 << 16 | 6275;
          }
          else
          {
            // TEMPLATE.VRSQRT14PS_rzmz::VRSQRT14PS
            // VRSQRT14PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm;
            return 3048 << 16 | 6281;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRSQRT14PD_romo::VRSQRT14PD
            // VRSQRT14PD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm;
            return 3043 << 16 | 6271;
          }
          else
          {
            // TEMPLATE.VRSQRT14PS_romo::VRSQRT14PS
            // VRSQRT14PS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
            return 3046 << 16 | 6277;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VRSQRT14PD_rymy::VRSQRT14PDmy
          // VRSQRT14PD VREG:w:f64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST;
          return 3044 << 16 | 6274;
        }
        else
        {
          // TEMPLATE.VRSQRT14PS_rymy::VRSQRT14PSmy
          // VRSQRT14PS VREG:w:f32=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST;
          return 3047 << 16 | 6280;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRSQRT14PD_rzmz::VRSQRT14PDmz
            // VRSQRT14PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
            return 3045 << 16 | 6276;
          }
          else
          {
            // TEMPLATE.VRSQRT14PS_rzmz::VRSQRT14PSmz
            // VRSQRT14PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST;
            return 3048 << 16 | 6282;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRSQRT14PD_romo::VRSQRT14PDmx
            // VRSQRT14PD VREG:w:f64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST;
            return 3043 << 16 | 6272;
          }
          else
          {
            // TEMPLATE.VRSQRT14PS_romo::VRSQRT14PSmx
            // VRSQRT14PS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST;
            return 3046 << 16 | 6278;
          }
        }
      }
    }
  break;
  /* 0f38.0x4f */
  case 847:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VRSQRT14SD::VRSQRT14SD
        // VRSQRT14SD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
        return 3049 << 16 | 6283;
      }
      else
      {
        // TEMPLATE.VRSQRT14SS::VRSQRT14SS
        // VRSQRT14SS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
        return 3050 << 16 | 6285;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VRSQRT14SD::VRSQRT14SDmq
        // VRSQRT14SD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem64;
        return 3049 << 16 | 6284;
      }
      else
      {
        // TEMPLATE.VRSQRT14SS::VRSQRT14SSmd
        // VRSQRT14SS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem32;
        return 3050 << 16 | 6286;
      }
    }
  break;
  /* 0f38.0x50 */
  case 848:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VADDNPD::VADDNPD
            // VADDNPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
            return 3299 << 16 | 6829;
          }
          else
          {
            // TEMPLATE.VADDNPS::VADDNPS
            // VADDNPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
            return 3300 << 16 | 6832;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VADDNPD::VADDNPD
            // VADDNPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
            return 3299 << 16 | 6828;
          }
          else
          {
            // TEMPLATE.VADDNPS::VADDNPS
            // VADDNPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3300 << 16 | 6831;
          }
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPDPBUSD_ronomo::VPDPBUSD
            // VPDPBUSD VREG:rw:s32=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn VREG:r:u32=$XMMm;
            return 2697 << 16 | 5501;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPDPBUSD_rynymy::VPDPBUSD
            // VPDPBUSD VREG:rw:s32=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn VREG:r:u32=$YMMm;
            return 2698 << 16 | 5503;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPDPBUSD_rznzmz::VPDPBUSD
            // VPDPBUSD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn VREG:r:u32=$ZMMm;
            return 2699 << 16 | 5505;
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VADDNPD::VADDNPDm
          // VADDNPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
          return 3299 << 16 | 6830;
        }
        else
        {
          // TEMPLATE.VADDNPS::VADDNPSm
          // VADDNPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
          return 3300 << 16 | 6833;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPDPBUSD_ronomo::VPDPBUSDmx
            // VPDPBUSD VREG:rw:s32=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
            return 2697 << 16 | 5502;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPDPBUSD_rynymy::VPDPBUSDmy
            // VPDPBUSD VREG:rw:s32=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
            return 2698 << 16 | 5504;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPDPBUSD_rznzmz::VPDPBUSDmz
            // VPDPBUSD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
            return 2699 << 16 | 5506;
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x51 */
  case 849:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          // TEMPLATE.VGMAXABSPS::VGMAXABSPS
          // VGMAXABSPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SAE=$SAE;
          return 3374 << 16 | 7010;
        }
        else
        {
          // TEMPLATE.VGMAXABSPS::VGMAXABSPS
          // VGMAXABSPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
          return 3374 << 16 | 7009;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPDPBUSDS_ronomo::VPDPBUSDS
            // VPDPBUSDS VREG:rw:s32=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn VREG:r:u32=$XMMm;
            return 2700 << 16 | 5507;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPDPBUSDS_rynymy::VPDPBUSDS
            // VPDPBUSDS VREG:rw:s32=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn VREG:r:u32=$YMMm;
            return 2701 << 16 | 5509;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPDPBUSDS_rznzmz::VPDPBUSDS
            // VPDPBUSDS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn VREG:r:u32=$ZMMm;
            return 2702 << 16 | 5511;
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        // TEMPLATE.VGMAXABSPS::VGMAXABSPSm
        // VGMAXABSPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
        return 3374 << 16 | 7011;
      }
      else
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPDPBUSDS_ronomo::VPDPBUSDSmx
            // VPDPBUSDS VREG:rw:s32=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
            return 2700 << 16 | 5508;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPDPBUSDS_rynymy::VPDPBUSDSmy
            // VPDPBUSDS VREG:rw:s32=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
            return 2701 << 16 | 5510;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPDPBUSDS_rznzmz::VPDPBUSDSmz
            // VPDPBUSDS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
            return 2702 << 16 | 5512;
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0x52 */
  case 850:
    if (a & 0x01)
    {
      if (b & 0x20)
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VDPBF16PS_ronomo::VDPBF16PS
            // VDPBF16PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
            return 2334 << 16 | 4609;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VDPBF16PS_rynymy::VDPBF16PS
            // VDPBF16PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
            return 2335 << 16 | 4611;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VDPBF16PS_rznzmz::VDPBF16PS
            // VDPBF16PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
            return 2336 << 16 | 4613;
            break;
          }
          default: break;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VGMINPD::VGMINPD
              // VGMINPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SAE=$SAE;
              return 3377 << 16 | 7019;
            }
            else
            {
              // TEMPLATE.VGMINPS::VGMINPS
              // VGMINPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3378 << 16 | 7022;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VGMINPD::VGMINPD
              // VGMINPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3377 << 16 | 7018;
            }
            else
            {
              // TEMPLATE.VGMINPS::VGMINPS
              // VGMINPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3378 << 16 | 7021;
            }
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPDPWSSD_ronomo::VPDPWSSD
              // VPDPWSSD VREG:rw:s32=$XMMr PREG:r:Z=$Kk VREG:r:s16=$XMMn VREG:r:u32=$XMMm;
              return 2703 << 16 | 5513;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPDPWSSD_rynymy::VPDPWSSD
              // VPDPWSSD VREG:rw:s32=$YMMr PREG:r:Z=$Kk VREG:r:s16=$YMMn VREG:r:u32=$YMMm;
              return 2704 << 16 | 5515;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPDPWSSD_rznzmz::VPDPWSSD
              // VPDPWSSD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s16=$ZMMn VREG:r:u32=$ZMMm;
              return 2705 << 16 | 5517;
              break;
            }
            default: break;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // TEMPLATE.VP4DPWSSD::VP4DPWSSDmx
        // VP4DPWSSD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s16=$ZMMn MEM:r:u32=$mem128;
        return 3402 << 16 | 7061;
      }
      else
      {
        if (b & 0x20)
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VDPBF16PS_ronomo::VDPBF16PSmx
              // VDPBF16PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
              return 2334 << 16 | 4610;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VDPBF16PS_rynymy::VDPBF16PSmy
              // VDPBF16PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
              return 2335 << 16 | 4612;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VDPBF16PS_rznzmz::VDPBF16PSmz
              // VDPBF16PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
              return 2336 << 16 | 4614;
              break;
            }
            default: break;
          }
        }
        else
        {
          if (c & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VGMINPD::VGMINPDm
              // VGMINPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
              return 3377 << 16 | 7020;
            }
            else
            {
              // TEMPLATE.VGMINPS::VGMINPSm
              // VGMINPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
              return 3378 << 16 | 7023;
            }
          }
          else
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPDPWSSD_ronomo::VPDPWSSDmx
                // VPDPWSSD VREG:rw:s32=$XMMr PREG:r:Z=$Kk VREG:r:s16=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
                return 2703 << 16 | 5514;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPDPWSSD_rynymy::VPDPWSSDmy
                // VPDPWSSD VREG:rw:s32=$YMMr PREG:r:Z=$Kk VREG:r:s16=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
                return 2704 << 16 | 5516;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPDPWSSD_rznzmz::VPDPWSSDmz
                // VPDPWSSD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s16=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
                return 2705 << 16 | 5518;
                break;
              }
              default: break;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x53 */
  case 851:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGMAXPD::VGMAXPD
            // VGMAXPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SAE=$SAE;
            return 3375 << 16 | 7013;
          }
          else
          {
            // TEMPLATE.VGMAXPS::VGMAXPS
            // VGMAXPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
            return 3376 << 16 | 7016;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGMAXPD::VGMAXPD
            // VGMAXPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
            return 3375 << 16 | 7012;
          }
          else
          {
            // TEMPLATE.VGMAXPS::VGMAXPS
            // VGMAXPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3376 << 16 | 7015;
          }
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPDPWSSDS_ronomo::VPDPWSSDS
            // VPDPWSSDS VREG:rw:s32=$XMMr PREG:r:Z=$Kk VREG:r:s16=$XMMn VREG:r:u32=$XMMm;
            return 2706 << 16 | 5519;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPDPWSSDS_rynymy::VPDPWSSDS
            // VPDPWSSDS VREG:rw:s32=$YMMr PREG:r:Z=$Kk VREG:r:s16=$YMMn VREG:r:u32=$YMMm;
            return 2707 << 16 | 5521;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPDPWSSDS_rznzmz::VPDPWSSDS
            // VPDPWSSDS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s16=$ZMMn VREG:r:u32=$ZMMm;
            return 2708 << 16 | 5523;
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // TEMPLATE.VP4DPWSSDS::VP4DPWSSDSmx
        // VP4DPWSSDS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s16=$ZMMn MEM:r:u32=$mem128;
        return 3403 << 16 | 7062;
      }
      else
      {
        if (c & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGMAXPD::VGMAXPDm
            // VGMAXPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
            return 3375 << 16 | 7014;
          }
          else
          {
            // TEMPLATE.VGMAXPS::VGMAXPSm
            // VGMAXPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
            return 3376 << 16 | 7017;
          }
        }
        else
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPDPWSSDS_ronomo::VPDPWSSDSmx
              // VPDPWSSDS VREG:rw:s32=$XMMr PREG:r:Z=$Kk VREG:r:s16=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
              return 2706 << 16 | 5520;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPDPWSSDS_rynymy::VPDPWSSDSmy
              // VPDPWSSDS VREG:rw:s32=$YMMr PREG:r:Z=$Kk VREG:r:s16=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
              return 2707 << 16 | 5522;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPDPWSSDS_rznzmz::VPDPWSSDSmz
              // VPDPWSSDS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s16=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
              return 2708 << 16 | 5524;
              break;
            }
            default: break;
          }
        }
      }
    }
  break;
  /* 0f38.0x54 */
  case 852:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPOPCNTx_rymy_1::VPOPCNTW
          // VPOPCNTW VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMm;
          return 2926 << 16 | 5909;
        }
        else
        {
          // TEMPLATE.VPOPCNTx_rymy_1::VPOPCNTB
          // VPOPCNTB VREG:w:u8=$YMMr  PREG:r:Z=$Kk VREG:r:u8=$YMMm;
          return 2926 << 16 | 5907;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPOPCNTx_rzmz_1::VPOPCNTW
            // VPOPCNTW VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMm;
            return 2928 << 16 | 5917;
          }
          else
          {
            // TEMPLATE.VPOPCNTx_rzmz_1::VPOPCNTB
            // VPOPCNTB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk VREG:r:u8=$ZMMm;
            return 2928 << 16 | 5915;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPOPCNTx_romo_1::VPOPCNTW
            // VPOPCNTW VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMm;
            return 2924 << 16 | 5901;
          }
          else
          {
            // TEMPLATE.VPOPCNTx_romo_1::VPOPCNTB
            // VPOPCNTB VREG:w:u8=$XMMr  PREG:r:Z=$Kk VREG:r:u8=$XMMm;
            return 2924 << 16 | 5899;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPOPCNTx_rymy_1::VPOPCNTWmy
          // VPOPCNTW VREG:w:u16=$YMMr PREG:r:Z=$Kk MEM:r:u16=$mem256;
          return 2926 << 16 | 5910;
        }
        else
        {
          // TEMPLATE.VPOPCNTx_rymy_1::VPOPCNTBmy
          // VPOPCNTB VREG:w:u8=$YMMr  PREG:r:Z=$Kk MEM:r:u8=$mem256;
          return 2926 << 16 | 5908;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPOPCNTx_rzmz_1::VPOPCNTWmz
            // VPOPCNTW VREG:w:u16=$ZMMr PREG:r:Z=$Kk MEM:r:u16=$mem512;
            return 2928 << 16 | 5918;
          }
          else
          {
            // TEMPLATE.VPOPCNTx_rzmz_1::VPOPCNTBmz
            // VPOPCNTB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk MEM:r:u8=$mem512;
            return 2928 << 16 | 5916;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPOPCNTx_romo_1::VPOPCNTWmx
            // VPOPCNTW VREG:w:u16=$XMMr PREG:r:Z=$Kk MEM:r:u16=$mem128;
            return 2924 << 16 | 5902;
          }
          else
          {
            // TEMPLATE.VPOPCNTx_romo_1::VPOPCNTBmx
            // VPOPCNTB VREG:w:u8=$XMMr  PREG:r:Z=$Kk MEM:r:u8=$mem128;
            return 2924 << 16 | 5900;
          }
        }
      }
    }
  break;
  /* 0f38.0x55 */
  case 853:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFIXUPNANPD::VFIXUPNANPD
            // VFIXUPNANPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SAE=$SAE;
            return 3329 << 16 | 6903;
          }
          else
          {
            // TEMPLATE.VFIXUPNANPS::VFIXUPNANPS
            // VFIXUPNANPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SAE=$SAE;
            return 3330 << 16 | 6906;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFIXUPNANPD::VFIXUPNANPD
            // VFIXUPNANPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
            return 3329 << 16 | 6902;
          }
          else
          {
            // TEMPLATE.VFIXUPNANPS::VFIXUPNANPS
            // VFIXUPNANPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3330 << 16 | 6905;
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPOPCNTx_rymy_2::VPOPCNTQ
            // VPOPCNTQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMm;
            return 2927 << 16 | 5913;
          }
          else
          {
            // TEMPLATE.VPOPCNTx_rymy_2::VPOPCNTD
            // VPOPCNTD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMm;
            return 2927 << 16 | 5911;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPOPCNTx_rzmz_2::VPOPCNTQ
              // VPOPCNTQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMm;
              return 2929 << 16 | 5921;
            }
            else
            {
              // TEMPLATE.VPOPCNTx_rzmz_2::VPOPCNTD
              // VPOPCNTD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMm;
              return 2929 << 16 | 5919;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPOPCNTx_romo_2::VPOPCNTQ
              // VPOPCNTQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMm;
              return 2925 << 16 | 5905;
            }
            else
            {
              // TEMPLATE.VPOPCNTx_romo_2::VPOPCNTD
              // VPOPCNTD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMm;
              return 2925 << 16 | 5903;
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFIXUPNANPD::VFIXUPNANPDm
          // VFIXUPNANPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_i64 EVH=$EVH;
          return 3329 << 16 | 6904;
        }
        else
        {
          // TEMPLATE.VFIXUPNANPS::VFIXUPNANPSm
          // VFIXUPNANPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3330 << 16 | 6907;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPOPCNTx_rymy_2::VPOPCNTQmy
            // VPOPCNTQ VREG:w:u64=$YMMr PREG:r:Z=$Kk MEM:r:u64=$mem256 BCST=$BCST;
            return 2927 << 16 | 5914;
          }
          else
          {
            // TEMPLATE.VPOPCNTx_rymy_2::VPOPCNTDmy
            // VPOPCNTD VREG:w:u32=$YMMr PREG:r:Z=$Kk MEM:r:u32=$mem256 BCST=$BCST;
            return 2927 << 16 | 5912;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPOPCNTx_rzmz_2::VPOPCNTQmz
              // VPOPCNTQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk MEM:r:u64=$mem512 BCST=$BCST;
              return 2929 << 16 | 5922;
            }
            else
            {
              // TEMPLATE.VPOPCNTx_rzmz_2::VPOPCNTDmz
              // VPOPCNTD VREG:w:u32=$ZMMr PREG:r:Z=$Kk MEM:r:u32=$mem512 BCST=$BCST;
              return 2929 << 16 | 5920;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPOPCNTx_romo_2::VPOPCNTQmx
              // VPOPCNTQ VREG:w:u64=$XMMr PREG:r:Z=$Kk MEM:r:u64=$mem128 BCST=$BCST;
              return 2925 << 16 | 5906;
            }
            else
            {
              // TEMPLATE.VPOPCNTx_romo_2::VPOPCNTDmx
              // VPOPCNTD VREG:w:u32=$XMMr PREG:r:Z=$Kk MEM:r:u32=$mem128 BCST=$BCST;
              return 2925 << 16 | 5904;
            }
          }
        }
      }
    }
  break;
  /* invalid */
  case 854:
    return 0;
  /* invalid */
  case 855:
    return 0;
  /* 0f38.0x58 */
  case 856:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPBROADCASTD_rxmd::VPBROADCASTD
          // VPBROADCASTD    VREG:w:u32=$YMMr  REG:r:u32=$XMMm;
          return 2638 << 16 | 5372;
        }
        else
        {
          // TEMPLATE.VPBROADCASTD_rymx::VPBROADCASTD
          // VPBROADCASTD    VREG:w:u32=$YMMr  PREG:r:Z=$Kk                                VREG:r:u32=$XMMm;
          return 2639 << 16 | 5375;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPBROADCASTD_rzmx::VPBROADCASTD
          // VPBROADCASTD    VREG:w:u32=$ZMMr  PREG:r:Z=$Kk                                VREG:r:u32=$XMMm;
          return 2640 << 16 | 5377;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPBROADCASTD_rxmd::VPBROADCASTD
            // VPBROADCASTD    VREG:w:u32=$XMMr  REG:r:u32=$XMMm;
            return 2638 << 16 | 5371;
          }
          else
          {
            // TEMPLATE.VPBROADCASTD_romx::VPBROADCASTD
            // VPBROADCASTD    VREG:w:u32=$XMMr  PREG:r:Z=$Kk                                VREG:r:u32=$XMMm;
            return 2637 << 16 | 5369;
          }
        }
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch ((c & 0x03) - 1)
      {
        case 0x00:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPBROADCASTD_rxmd::VPBROADCASTDmd
            // VPBROADCASTD    VREG:w:u32=$YMMr  MEM:r:u32=$mem32 SBCST:SUPP={FROM=1 TO=8};
            return 2638 << 16 | 5374;
          }
          else
          {
            // TEMPLATE.VPBROADCASTD_rxmd::VPBROADCASTDmd
            // VPBROADCASTD    VREG:w:u32=$XMMr  MEM:r:u32=$mem32 SBCST:SUPP={FROM=1 TO=4};
            return 2638 << 16 | 5373;
          }
          break;
        }
        case 0x01:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPBROADCASTD_romx::VPBROADCASTDmd
              // VPBROADCASTD    VREG:w:u32=$XMMr  PREG:r:Z=$Kk                                MEM:r:u32=$mem32 SBCST:SUPP={FROM=1 TO=4};
              return 2637 << 16 | 5370;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPBROADCASTD_rymx::VPBROADCASTDmd
              // VPBROADCASTD    VREG:w:u32=$YMMr  PREG:r:Z=$Kk                                MEM:r:u32=$mem32 SBCST:SUPP={FROM=1 TO=8};
              return 2639 << 16 | 5376;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPBROADCASTD_rzmx::VPBROADCASTDmd
              // VPBROADCASTD    VREG:w:u32=$ZMMr  PREG:r:Z=$Kk                                MEM:r:u32=$mem32 SBCST:SUPP={FROM=1 TO=16};
              return 2640 << 16 | 5378;
              break;
            }
            default: break;
          }
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPBROADCASTD_rzm0::VPBROADCASTDm
          // VPBROADCASTD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SBCST:SUPP={FROM=1 TO=16} SWZ=$u_i32 EVH=$EVH;
          return 3422 << 16 | 7101;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x59 */
  case 857:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPBROADCASTQ_rxmq::VPBROADCASTQ
          // VPBROADCASTQ    VREG:w:u64=$YMMr  REG:r:u64=$XMMm;
          return 2642 << 16 | 5382;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPBROADCASTQ_rymx::VPBROADCASTQ
            // VPBROADCASTQ    VREG:w:u64=$YMMr  PREG:r:Z=$Kk                                VREG:r:u64=$XMMm;
            return 2643 << 16 | 5385;
          }
          else
          {
            // TEMPLATE.VBROADCASTI32X2_rymx::VBROADCASTI32X2
            // VBROADCASTI32X2 VREG:w:u32=$YMMr  PREG:r:Z=$Kk                                VREG:r:u32=$XMMm;
            return 2622 << 16 | 5346;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPBROADCASTQ_rzmx::VPBROADCASTQ
            // VPBROADCASTQ    VREG:w:u64=$ZMMr  PREG:r:Z=$Kk                                VREG:r:u64=$XMMm;
            return 2644 << 16 | 5387;
          }
          else
          {
            // TEMPLATE.VBROADCASTI32X2_rzmx::VBROADCASTI32X2
            // VBROADCASTI32X2 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk                                VREG:r:u32=$XMMm;
            return 2623 << 16 | 5348;
          }
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPBROADCASTQ_rxmq::VPBROADCASTQ
            // VPBROADCASTQ    VREG:w:u64=$XMMr  REG:r:u64=$XMMm;
            return 2642 << 16 | 5381;
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPBROADCASTQ_romx::VPBROADCASTQ
              // VPBROADCASTQ    VREG:w:u64=$XMMr  PREG:r:Z=$Kk                                VREG:r:u64=$XMMm;
              return 2641 << 16 | 5379;
            }
            else
            {
              // TEMPLATE.VBROADCASTI32X2_romx::VBROADCASTI32X2
              // VBROADCASTI32X2 VREG:w:u32=$XMMr  PREG:r:Z=$Kk                                VREG:r:u32=$XMMm;
              return 2621 << 16 | 5344;
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          // TEMPLATE.VPBROADCASTQ_rzm0::VPBROADCASTQm
          // VPBROADCASTQ VREG:rw:s64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SBCST:SUPP={FROM=1 TO=8} SWZ=$u_f64 EVH=$EVH;
          return 3423 << 16 | 7102;
        }
        else
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPBROADCASTQ_rxmq::VPBROADCASTQmq
            // VPBROADCASTQ    VREG:w:u64=$YMMr  MEM:r:u64=$mem64 SBCST:SUPP={FROM=1 TO=4};
            return 2642 << 16 | 5384;
          }
          else
          {
            // TEMPLATE.VPBROADCASTQ_rxmq::VPBROADCASTQmq
            // VPBROADCASTQ    VREG:w:u64=$XMMr  MEM:r:u64=$mem64 SBCST:SUPP={FROM=1 TO=2};
            return 2642 << 16 | 5383;
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPBROADCASTQ_rymx::VPBROADCASTQmq
            // VPBROADCASTQ    VREG:w:u64=$YMMr  PREG:r:Z=$Kk                                MEM:r:u64=$mem64 SBCST:SUPP={FROM=1 TO=4};
            return 2643 << 16 | 5386;
          }
          else
          {
            // TEMPLATE.VBROADCASTI32X2_rymx::VBROADCASTI32X2mq
            // VBROADCASTI32X2 VREG:w:u32=$YMMr  PREG:r:Z=$Kk                                MEM:r:u32=$mem64 SBCST:SUPP={FROM=2 TO=8};
            return 2622 << 16 | 5347;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPBROADCASTQ_rzmx::VPBROADCASTQmq
              // VPBROADCASTQ    VREG:w:u64=$ZMMr  PREG:r:Z=$Kk                                MEM:r:u64=$mem64 SBCST:SUPP={FROM=1 TO=8};
              return 2644 << 16 | 5388;
            }
            else
            {
              // TEMPLATE.VBROADCASTI32X2_rzmx::VBROADCASTI32X2mq
              // VBROADCASTI32X2 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk                                MEM:r:u32=$mem64 SBCST:SUPP={FROM=2 TO=16};
              return 2623 << 16 | 5349;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPBROADCASTQ_romx::VPBROADCASTQmq
              // VPBROADCASTQ    VREG:w:u64=$XMMr  PREG:r:Z=$Kk                                MEM:r:u64=$mem64 SBCST:SUPP={FROM=1 TO=2};
              return 2641 << 16 | 5380;
            }
            else
            {
              // TEMPLATE.VBROADCASTI32X2_romx::VBROADCASTI32X2mq
              // VBROADCASTI32X2 VREG:w:u32=$XMMr  PREG:r:Z=$Kk                                MEM:r:u32=$mem64 SBCST:SUPP={FROM=2 TO=4};
              return 2621 << 16 | 5345;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x5a */
  case 858:
    if (c & 0x01)
    {
      if (c & 0x02)
      {
        // TEMPLATE.VBROADCASTI32X4_rzm0::VBROADCASTI32X4m
        // VBROADCASTI32X4 VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SBCST:SUPP={FROM=4 TO=16} SWZ=$u_i32 EVH=$EVH;
        return 3310 << 16 | 6853;
      }
      else
      {
        // TEMPLATE.VBROADCASTI128::VBROADCASTI128mx
        // VBROADCASTI128  VREG:w:u128=$YMMr MEM:r:u128=$mem128 SBCST:SUPP={FROM=2 TO=4};
        return 2620 << 16 | 5343;
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VBROADCASTI64X2_rymo::VBROADCASTI64X2mx
          // VBROADCASTI64X2 VREG:w:u64=$YMMr  PREG:r:Z=$Kk                                MEM:r:u64=$mem128 SBCST:SUPP={FROM=2 TO=4};
          return 2627 << 16 | 5353;
        }
        else
        {
          // TEMPLATE.VBROADCASTI32X4_rymo::VBROADCASTI32X4mx
          // VBROADCASTI32X4 VREG:w:u32=$YMMr  PREG:r:Z=$Kk                                MEM:r:u32=$mem128 SBCST:SUPP={FROM=4 TO=8};
          return 2624 << 16 | 5350;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VBROADCASTI64X2_rzmo::VBROADCASTI64X2mx
          // VBROADCASTI64X2 VREG:w:u64=$ZMMr  PREG:r:Z=$Kk                                MEM:r:u64=$mem128 SBCST:SUPP={FROM=2 TO=8};
          return 2628 << 16 | 5354;
        }
        else
        {
          // TEMPLATE.VBROADCASTI32X4_rzmo::VBROADCASTI32X4mx
          // VBROADCASTI32X4 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk                                MEM:r:u32=$mem128 SBCST:SUPP={FROM=4 TO=16};
          return 2625 << 16 | 5351;
        }
      }
    }
  break;
  /* 0f38.0x5b */
  case 859:
    if (c & 0x01)
    {
      // TEMPLATE.VBROADCASTI64X4_rzm0::VBROADCASTI64X4m
      // VBROADCASTI64X4 VREG:rw:s64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SBCST:SUPP={FROM=4 TO=8} SWZ=$u_f64 EVH=$EVH;
      return 3311 << 16 | 6854;
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VBROADCASTI64X4_rzmy::VBROADCASTI64X4my
        // VBROADCASTI64X4 VREG:w:u64=$ZMMr  PREG:r:Z=$Kk                                MEM:r:u64=$mem256 SBCST:SUPP={FROM=4 TO=8};
        return 2629 << 16 | 5355;
      }
      else
      {
        // TEMPLATE.VBROADCASTI32X8::VBROADCASTI32X8my
        // VBROADCASTI32X8 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk                                MEM:r:u32=$mem256 SBCST:SUPP={FROM=8 TO=16};
        return 2626 << 16 | 5352;
      }
    }
  break;
  /* 0f38.0x5c */
  case 860:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VPADCD::VPADCD
        // VPADCD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm;
        return 3412 << 16 | 7072;
      }
      else
      {
        // TEMPLATE.VPADCD::VPADCD
        // VPADCD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm SWZ=$r_i32;
        return 3412 << 16 | 7071;
      }
    }
    else
    {
      // TEMPLATE.VPADCD::VPADCDm
      // VPADCD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
      return 3412 << 16 | 7073;
    }
  break;
  /* 0f38.0x5d */
  case 861:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VPADDSETCD::VPADDSETCD
        // VPADDSETCD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm;
        return 3414 << 16 | 7078;
      }
      else
      {
        // TEMPLATE.VPADDSETCD::VPADDSETCD
        // VPADDSETCD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm SWZ=$r_i32;
        return 3414 << 16 | 7077;
      }
    }
    else
    {
      // TEMPLATE.VPADDSETCD::VPADDSETCDm
      // VPADDSETCD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
      return 3414 << 16 | 7079;
    }
  break;
  /* 0f38.0x5e */
  case 862:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VPSBBD::VPSBBD
        // VPSBBD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm;
        return 3460 << 16 | 7175;
      }
      else
      {
        // TEMPLATE.VPSBBD::VPSBBD
        // VPSBBD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm SWZ=$r_i32;
        return 3460 << 16 | 7174;
      }
    }
    else
    {
      // TEMPLATE.VPSBBD::VPSBBDm
      // VPSBBD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
      return 3460 << 16 | 7176;
    }
  break;
  /* 0f38.0x5f */
  case 863:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VPSUBSETBD::VPSUBSETBD
        // VPSUBSETBD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm;
        return 3474 << 16 | 7213;
      }
      else
      {
        // TEMPLATE.VPSUBSETBD::VPSUBSETBD
        // VPSUBSETBD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm SWZ=$r_i32;
        return 3474 << 16 | 7212;
      }
    }
    else
    {
      // TEMPLATE.VPSUBSETBD::VPSUBSETBDm
      // VPSUBSETBD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
      return 3474 << 16 | 7214;
    }
  break;
  /* invalid */
  case 864:
    return 0;
  /* invalid */
  case 865:
    return 0;
  /* 0f38.0x62 */
  case 866:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPEXPANDx_rymy::VPEXPANDW
          // VPEXPANDW VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMm;
          return 2780 << 16 | 5703;
        }
        else
        {
          // TEMPLATE.VPEXPANDx_rymy::VPEXPANDB
          // VPEXPANDB VREG:w:u8=$YMMr  PREG:r:Z=$Kk VREG:r:u8=$YMMm;
          return 2780 << 16 | 5701;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPEXPANDx_rzmz::VPEXPANDW
            // VPEXPANDW VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMm;
            return 2781 << 16 | 5707;
          }
          else
          {
            // TEMPLATE.VPEXPANDx_rzmz::VPEXPANDB
            // VPEXPANDB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk VREG:r:u8=$ZMMm;
            return 2781 << 16 | 5705;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPEXPANDx_romo::VPEXPANDW
            // VPEXPANDW VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMm;
            return 2779 << 16 | 5699;
          }
          else
          {
            // TEMPLATE.VPEXPANDx_romo::VPEXPANDB
            // VPEXPANDB VREG:w:u8=$XMMr  PREG:r:Z=$Kk VREG:r:u8=$XMMm;
            return 2779 << 16 | 5697;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPEXPANDx_rymy::VPEXPANDWmy
          // VPEXPANDW VREG:w:u16=$YMMr PREG:r:Z=$Kk MEM:r:u16=$mem256;
          return 2780 << 16 | 5704;
        }
        else
        {
          // TEMPLATE.VPEXPANDx_rymy::VPEXPANDBmy
          // VPEXPANDB VREG:w:u8=$YMMr  PREG:r:Z=$Kk MEM:r:u8=$mem256;
          return 2780 << 16 | 5702;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPEXPANDx_rzmz::VPEXPANDWmz
            // VPEXPANDW VREG:w:u16=$ZMMr PREG:r:Z=$Kk MEM:r:u16=$mem512;
            return 2781 << 16 | 5708;
          }
          else
          {
            // TEMPLATE.VPEXPANDx_rzmz::VPEXPANDBmz
            // VPEXPANDB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk MEM:r:u8=$mem512;
            return 2781 << 16 | 5706;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPEXPANDx_romo::VPEXPANDWmx
            // VPEXPANDW VREG:w:u16=$XMMr PREG:r:Z=$Kk MEM:r:u16=$mem128;
            return 2779 << 16 | 5700;
          }
          else
          {
            // TEMPLATE.VPEXPANDx_romo::VPEXPANDBmx
            // VPEXPANDB VREG:w:u8=$XMMr  PREG:r:Z=$Kk MEM:r:u8=$mem128;
            return 2779 << 16 | 5698;
          }
        }
      }
    }
  break;
  /* 0f38.0x63 */
  case 867:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCOMPRESSx_myry::VPCOMPRESSW
          // VPCOMPRESSW VREG:w:u16=$YMMm  PREG:r:Z=$Kk VREG:r:u16=$YMMr;
          return 2686 << 16 | 5471;
        }
        else
        {
          // TEMPLATE.VPCOMPRESSx_myry::VPCOMPRESSB
          // VPCOMPRESSB VREG:w:u8=$YMMm   PREG:r:Z=$Kk VREG:r:u8=$YMMr;
          return 2686 << 16 | 5469;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCOMPRESSx_mzrz::VPCOMPRESSW
            // VPCOMPRESSW VREG:w:u16=$ZMMm  PREG:r:Z=$Kk VREG:r:u16=$ZMMr;
            return 2687 << 16 | 5475;
          }
          else
          {
            // TEMPLATE.VPCOMPRESSx_mzrz::VPCOMPRESSB
            // VPCOMPRESSB VREG:w:u8=$ZMMm   PREG:r:Z=$Kk VREG:r:u8=$ZMMr;
            return 2687 << 16 | 5473;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCOMPRESSx_moro::VPCOMPRESSW
            // VPCOMPRESSW VREG:w:u16=$XMMm  PREG:r:Z=$Kk VREG:r:u16=$XMMr;
            return 2685 << 16 | 5467;
          }
          else
          {
            // TEMPLATE.VPCOMPRESSx_moro::VPCOMPRESSB
            // VPCOMPRESSB VREG:w:u8=$XMMm   PREG:r:Z=$Kk VREG:r:u8=$XMMr;
            return 2685 << 16 | 5465;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCOMPRESSx_myry::VPCOMPRESSWmy
          // VPCOMPRESSW MEM:w:u16=$mem256 PREG:r:Z=$Kk VREG:r:u16=$YMMr;
          return 2686 << 16 | 5472;
        }
        else
        {
          // TEMPLATE.VPCOMPRESSx_myry::VPCOMPRESSBmy
          // VPCOMPRESSB MEM:w:u8=$mem256  PREG:r:Z=$Kk VREG:r:u8=$YMMr;
          return 2686 << 16 | 5470;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCOMPRESSx_mzrz::VPCOMPRESSWmz
            // VPCOMPRESSW MEM:w:u16=$mem512 PREG:r:Z=$Kk VREG:r:u16=$ZMMr;
            return 2687 << 16 | 5476;
          }
          else
          {
            // TEMPLATE.VPCOMPRESSx_mzrz::VPCOMPRESSBmz
            // VPCOMPRESSB MEM:w:u8=$mem512  PREG:r:Z=$Kk VREG:r:u8=$ZMMr;
            return 2687 << 16 | 5474;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCOMPRESSx_moro::VPCOMPRESSWmx
            // VPCOMPRESSW MEM:w:u16=$mem128 PREG:r:Z=$Kk VREG:r:u16=$XMMr;
            return 2685 << 16 | 5468;
          }
          else
          {
            // TEMPLATE.VPCOMPRESSx_moro::VPCOMPRESSBmx
            // VPCOMPRESSB MEM:w:u8=$mem128  PREG:r:Z=$Kk VREG:r:u8=$XMMr;
            return 2685 << 16 | 5466;
          }
        }
      }
    }
  break;
  /* 0f38.0x64 */
  case 868:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPBLENDMQ::VPBLENDMQ
            // VPBLENDMQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm;
            return 3421 << 16 | 7099;
          }
          else
          {
            // TEMPLATE.VPBLENDMD::VPBLENDMD
            // VPBLENDMD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
            return 3420 << 16 | 7096;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPBLENDMQ::VPBLENDMQ
            // VPBLENDMQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
            return 3421 << 16 | 7098;
          }
          else
          {
            // TEMPLATE.VPBLENDMD::VPBLENDMD
            // VPBLENDMD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3420 << 16 | 7095;
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPBLENDMx_rynymy_2::VPBLENDMQ
            // VPBLENDMQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
            return 2618 << 16 | 5337;
          }
          else
          {
            // TEMPLATE.VPBLENDMx_rynymy_2::VPBLENDMD
            // VPBLENDMD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
            return 2618 << 16 | 5335;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPBLENDMx_rznzmz_2::VPBLENDMQ
              // VPBLENDMQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
              return 2619 << 16 | 5341;
            }
            else
            {
              // TEMPLATE.VPBLENDMx_rznzmz_2::VPBLENDMD
              // VPBLENDMD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
              return 2619 << 16 | 5339;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPBLENDMx_ronomo_2::VPBLENDMQ
              // VPBLENDMQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
              return 2617 << 16 | 5333;
            }
            else
            {
              // TEMPLATE.VPBLENDMx_ronomo_2::VPBLENDMD
              // VPBLENDMD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
              return 2617 << 16 | 5331;
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPBLENDMQ::VPBLENDMQm
          // VPBLENDMQ VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_i64 EVH=$EVH;
          return 3421 << 16 | 7100;
        }
        else
        {
          // TEMPLATE.VPBLENDMD::VPBLENDMDm
          // VPBLENDMD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3420 << 16 | 7097;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPBLENDMx_rynymy_2::VPBLENDMQmy
            // VPBLENDMQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
            return 2618 << 16 | 5338;
          }
          else
          {
            // TEMPLATE.VPBLENDMx_rynymy_2::VPBLENDMDmy
            // VPBLENDMD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
            return 2618 << 16 | 5336;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPBLENDMx_rznzmz_2::VPBLENDMQmz
              // VPBLENDMQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
              return 2619 << 16 | 5342;
            }
            else
            {
              // TEMPLATE.VPBLENDMx_rznzmz_2::VPBLENDMDmz
              // VPBLENDMD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
              return 2619 << 16 | 5340;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPBLENDMx_ronomo_2::VPBLENDMQmx
              // VPBLENDMQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
              return 2617 << 16 | 5334;
            }
            else
            {
              // TEMPLATE.VPBLENDMx_ronomo_2::VPBLENDMDmx
              // VPBLENDMD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
              return 2617 << 16 | 5332;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x65 */
  case 869:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VBLENDMPD::VBLENDMPD
            // VBLENDMPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
            return 3306 << 16 | 6846;
          }
          else
          {
            // TEMPLATE.VBLENDMPS::VBLENDMPS
            // VBLENDMPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
            return 3307 << 16 | 6849;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VBLENDMPD::VBLENDMPD
            // VBLENDMPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
            return 3306 << 16 | 6845;
          }
          else
          {
            // TEMPLATE.VBLENDMPS::VBLENDMPS
            // VBLENDMPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3307 << 16 | 6848;
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VBLENDMPx_rynymy::VBLENDMPD
            // VBLENDMPD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
            return 2229 << 16 | 4353;
          }
          else
          {
            // TEMPLATE.VBLENDMPx_rynymy::VBLENDMPS
            // VBLENDMPS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
            return 2229 << 16 | 4355;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VBLENDMPx_rznzmz::VBLENDMPD
              // VBLENDMPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm;
              return 2230 << 16 | 4357;
            }
            else
            {
              // TEMPLATE.VBLENDMPx_rznzmz::VBLENDMPS
              // VBLENDMPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
              return 2230 << 16 | 4359;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VBLENDMPx_ronomo::VBLENDMPD
              // VBLENDMPD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2228 << 16 | 4349;
            }
            else
            {
              // TEMPLATE.VBLENDMPx_ronomo::VBLENDMPS
              // VBLENDMPS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2228 << 16 | 4351;
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VBLENDMPD::VBLENDMPDm
          // VBLENDMPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
          return 3306 << 16 | 6847;
        }
        else
        {
          // TEMPLATE.VBLENDMPS::VBLENDMPSm
          // VBLENDMPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
          return 3307 << 16 | 6850;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VBLENDMPx_rynymy::VBLENDMPDmy
            // VBLENDMPD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn MEM:r:f64=$mem256 BCST=$BCST;
            return 2229 << 16 | 4354;
          }
          else
          {
            // TEMPLATE.VBLENDMPx_rynymy::VBLENDMPSmy
            // VBLENDMPS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn MEM:r:f32=$mem256 BCST=$BCST;
            return 2229 << 16 | 4356;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VBLENDMPx_rznzmz::VBLENDMPDmz
              // VBLENDMPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r:f64=$mem512 BCST=$BCST;
              return 2230 << 16 | 4358;
            }
            else
            {
              // TEMPLATE.VBLENDMPx_rznzmz::VBLENDMPSmz
              // VBLENDMPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:f32=$mem512 BCST=$BCST;
              return 2230 << 16 | 4360;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VBLENDMPx_ronomo::VBLENDMPDmx
              // VBLENDMPD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem128 BCST=$BCST;
              return 2228 << 16 | 4350;
            }
            else
            {
              // TEMPLATE.VBLENDMPx_ronomo::VBLENDMPSmx
              // VBLENDMPS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem128 BCST=$BCST;
              return 2228 << 16 | 4352;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x66 */
  case 870:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPBLENDMx_rynymy_1::VPBLENDMW
          // VPBLENDMW VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
          return 2615 << 16 | 5325;
        }
        else
        {
          // TEMPLATE.VPBLENDMx_rynymy_1::VPBLENDMB
          // VPBLENDMB VREG:w:u8=$YMMr  PREG:r:Z=$Kk VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
          return 2615 << 16 | 5323;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPBLENDMx_rznzmz_1::VPBLENDMW
            // VPBLENDMW VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn VREG:r:u16=$ZMMm;
            return 2616 << 16 | 5329;
          }
          else
          {
            // TEMPLATE.VPBLENDMx_rznzmz_1::VPBLENDMB
            // VPBLENDMB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk VREG:r:u8=$ZMMn  VREG:r:u8=$ZMMm;
            return 2616 << 16 | 5327;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPBLENDMx_ronomo_1::VPBLENDMW
            // VPBLENDMW VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
            return 2614 << 16 | 5321;
          }
          else
          {
            // TEMPLATE.VPBLENDMx_ronomo_1::VPBLENDMB
            // VPBLENDMB VREG:w:u8=$XMMr  PREG:r:Z=$Kk VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
            return 2614 << 16 | 5319;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPBLENDMx_rynymy_1::VPBLENDMWmy
          // VPBLENDMW VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn MEM:r:u16=$mem256;
          return 2615 << 16 | 5326;
        }
        else
        {
          // TEMPLATE.VPBLENDMx_rynymy_1::VPBLENDMBmy
          // VPBLENDMB VREG:w:u8=$YMMr  PREG:r:Z=$Kk VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
          return 2615 << 16 | 5324;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPBLENDMx_rznzmz_1::VPBLENDMWmz
            // VPBLENDMW VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn MEM:r:u16=$mem512;
            return 2616 << 16 | 5330;
          }
          else
          {
            // TEMPLATE.VPBLENDMx_rznzmz_1::VPBLENDMBmz
            // VPBLENDMB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk VREG:r:u8=$ZMMn  MEM:r:u8=$mem512;
            return 2616 << 16 | 5328;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPBLENDMx_ronomo_1::VPBLENDMWmx
            // VPBLENDMW VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn MEM:r:u16=$mem128;
            return 2614 << 16 | 5322;
          }
          else
          {
            // TEMPLATE.VPBLENDMx_ronomo_1::VPBLENDMBmx
            // VPBLENDMB VREG:w:u8=$XMMr  PREG:r:Z=$Kk VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
            return 2614 << 16 | 5320;
          }
        }
      }
    }
  break;
  /* invalid */
  case 871:
    return 0;
  /* 0f38.0x68 */
  case 872:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VP2INTERSECTQ_nymy::VP2INTERSECTQ
          // VP2INTERSECTQ REG:w=$Kr VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
          return 2611 << 16 | 5311;
        }
        else
        {
          // TEMPLATE.VP2INTERSECTD_nymy::VP2INTERSECTD
          // VP2INTERSECTD REG:w=$Kr VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
          return 2608 << 16 | 5305;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VP2INTERSECTQ_nzmz::VP2INTERSECTQ
            // VP2INTERSECTQ REG:w=$Kr VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
            return 2612 << 16 | 5313;
          }
          else
          {
            // TEMPLATE.VP2INTERSECTD_nzmz::VP2INTERSECTD
            // VP2INTERSECTD REG:w=$Kr VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
            return 2609 << 16 | 5307;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VP2INTERSECTQ_nomo::VP2INTERSECTQ
            // VP2INTERSECTQ REG:w=$Kr VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
            return 2610 << 16 | 5309;
          }
          else
          {
            // TEMPLATE.VP2INTERSECTD_nomo::VP2INTERSECTD
            // VP2INTERSECTD REG:w=$Kr VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
            return 2607 << 16 | 5303;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VP2INTERSECTQ_nymy::VP2INTERSECTQmy
          // VP2INTERSECTQ REG:w=$Kr VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
          return 2611 << 16 | 5312;
        }
        else
        {
          // TEMPLATE.VP2INTERSECTD_nymy::VP2INTERSECTDmy
          // VP2INTERSECTD REG:w=$Kr VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
          return 2608 << 16 | 5306;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VP2INTERSECTQ_nzmz::VP2INTERSECTQmz
            // VP2INTERSECTQ REG:w=$Kr VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
            return 2612 << 16 | 5314;
          }
          else
          {
            // TEMPLATE.VP2INTERSECTD_nzmz::VP2INTERSECTDmz
            // VP2INTERSECTD REG:w=$Kr VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
            return 2609 << 16 | 5308;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VP2INTERSECTQ_nomo::VP2INTERSECTQmx
            // VP2INTERSECTQ REG:w=$Kr VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
            return 2610 << 16 | 5310;
          }
          else
          {
            // TEMPLATE.VP2INTERSECTD_nomo::VP2INTERSECTDmx
            // VP2INTERSECTD REG:w=$Kr VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
            return 2607 << 16 | 5304;
          }
        }
      }
    }
  break;
  /* invalid */
  case 873:
    return 0;
  /* invalid */
  case 874:
    return 0;
  /* invalid */
  case 875:
    return 0;
  /* 0f38.0x6c */
  case 876:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VPSUBRD::VPSUBRD
        // VPSUBRD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
        return 3472 << 16 | 7207;
      }
      else
      {
        // TEMPLATE.VPSUBRD::VPSUBRD
        // VPSUBRD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
        return 3472 << 16 | 7206;
      }
    }
    else
    {
      // TEMPLATE.VPSUBRD::VPSUBRDm
      // VPSUBRD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
      return 3472 << 16 | 7208;
    }
  break;
  /* 0f38.0x6d */
  case 877:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSUBRPD::VSUBRPD
          // VSUBRPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
          return 3507 << 16 | 7284;
        }
        else
        {
          // TEMPLATE.VSUBRPS::VSUBRPS
          // VSUBRPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
          return 3508 << 16 | 7287;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSUBRPD::VSUBRPD
          // VSUBRPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
          return 3507 << 16 | 7283;
        }
        else
        {
          // TEMPLATE.VSUBRPS::VSUBRPS
          // VSUBRPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
          return 3508 << 16 | 7286;
        }
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VSUBRPD::VSUBRPDm
        // VSUBRPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
        return 3507 << 16 | 7285;
      }
      else
      {
        // TEMPLATE.VSUBRPS::VSUBRPSm
        // VSUBRPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
        return 3508 << 16 | 7288;
      }
    }
  break;
  /* 0f38.0x6e */
  case 878:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VPSBBRD::VPSBBRD
        // VPSBBRD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm;
        return 3461 << 16 | 7178;
      }
      else
      {
        // TEMPLATE.VPSBBRD::VPSBBRD
        // VPSBBRD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm SWZ=$r_i32;
        return 3461 << 16 | 7177;
      }
    }
    else
    {
      // TEMPLATE.VPSBBRD::VPSBBRDm
      // VPSBBRD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
      return 3461 << 16 | 7179;
    }
  break;
  /* 0f38.0x6f */
  case 879:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VPSUBRSETBD::VPSUBRSETBD
        // VPSUBRSETBD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm;
        return 3473 << 16 | 7210;
      }
      else
      {
        // TEMPLATE.VPSUBRSETBD::VPSUBRSETBD
        // VPSUBRSETBD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn VREG:r:s32=$ZMMm SWZ=$r_i32;
        return 3473 << 16 | 7209;
      }
    }
    else
    {
      // TEMPLATE.VPSUBRSETBD::VPSUBRSETBDm
      // VPSUBRSETBD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk REG:w=$Kn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
      return 3473 << 16 | 7211;
    }
  break;
  /* 0f38.0x70 */
  case 880:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPSHLDVW_ronomo::VPSHLDVW
          // VPSHLDVW VREG:rw:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
          return 2954 << 16 | 6001;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPSHLDVW_rynymy::VPSHLDVW
          // VPSHLDVW VREG:rw:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
          return 2955 << 16 | 6003;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPSHLDVW_rznzmz::VPSHLDVW
          // VPSHLDVW VREG:rw:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn VREG:r:u16=$ZMMm;
          return 2956 << 16 | 6005;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPSHLDVW_ronomo::VPSHLDVWmx
          // VPSHLDVW VREG:rw:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn MEM:r:u16=$mem128;
          return 2954 << 16 | 6002;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPSHLDVW_rynymy::VPSHLDVWmy
          // VPSHLDVW VREG:rw:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn MEM:r:u16=$mem256;
          return 2955 << 16 | 6004;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPSHLDVW_rznzmz::VPSHLDVWmz
          // VPSHLDVW VREG:rw:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn MEM:r:u16=$mem512;
          return 2956 << 16 | 6006;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x71 */
  case 881:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPSHLDVx_rynymy::VPSHLDVQ
          // VPSHLDVQ VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
          return 2958 << 16 | 6013;
        }
        else
        {
          // TEMPLATE.VPSHLDVx_rynymy::VPSHLDVD
          // VPSHLDVD VREG:rw:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
          return 2958 << 16 | 6011;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHLDVx_rznzmz::VPSHLDVQ
            // VPSHLDVQ VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
            return 2959 << 16 | 6017;
          }
          else
          {
            // TEMPLATE.VPSHLDVx_rznzmz::VPSHLDVD
            // VPSHLDVD VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
            return 2959 << 16 | 6015;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHLDVx_ronomo::VPSHLDVQ
            // VPSHLDVQ VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
            return 2957 << 16 | 6009;
          }
          else
          {
            // TEMPLATE.VPSHLDVx_ronomo::VPSHLDVD
            // VPSHLDVD VREG:rw:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
            return 2957 << 16 | 6007;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPSHLDVx_rynymy::VPSHLDVQmy
          // VPSHLDVQ VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
          return 2958 << 16 | 6014;
        }
        else
        {
          // TEMPLATE.VPSHLDVx_rynymy::VPSHLDVDmy
          // VPSHLDVD VREG:rw:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
          return 2958 << 16 | 6012;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHLDVx_rznzmz::VPSHLDVQmz
            // VPSHLDVQ VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
            return 2959 << 16 | 6018;
          }
          else
          {
            // TEMPLATE.VPSHLDVx_rznzmz::VPSHLDVDmz
            // VPSHLDVD VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
            return 2959 << 16 | 6016;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHLDVx_ronomo::VPSHLDVQmx
            // VPSHLDVQ VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
            return 2957 << 16 | 6010;
          }
          else
          {
            // TEMPLATE.VPSHLDVx_ronomo::VPSHLDVDmx
            // VPSHLDVD VREG:rw:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
            return 2957 << 16 | 6008;
          }
        }
      }
    }
  break;
  /* 0f38.0x72 */
  case 882:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (b & 0x10)
        {
          // TEMPLATE.VCVTNE2PS2BF16_rynymy::VCVTNE2PS2BF16
          // VCVTNE2PS2BF16 VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
          return 2256 << 16 | 4402;
        }
        else
        {
          if (b & 0x20)
          {
            // TEMPLATE.VCVTNEPS2BF16_romy::VCVTNEPS2BF16
            // VCVTNEPS2BF16 VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm;
            return 2259 << 16 | 4408;
          }
          else
          {
            // TEMPLATE.VPSHRDVW_rynymy::VPSHRDVW
            // VPSHRDVW VREG:rw:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
            return 2967 << 16 | 6039;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (b & 0x10)
          {
            // TEMPLATE.VCVTNE2PS2BF16_rznzmz::VCVTNE2PS2BF16
            // VCVTNE2PS2BF16 VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
            return 2257 << 16 | 4404;
          }
          else
          {
            if (b & 0x20)
            {
              // TEMPLATE.VCVTNEPS2BF16_rymz::VCVTNEPS2BF16
              // VCVTNEPS2BF16 VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm;
              return 2260 << 16 | 4410;
            }
            else
            {
              // TEMPLATE.VPSHRDVW_rznzmz::VPSHRDVW
              // VPSHRDVW VREG:rw:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn VREG:r:u16=$ZMMm;
              return 2968 << 16 | 6041;
            }
          }
        }
        else
        {
          if (b & 0x10)
          {
            // TEMPLATE.VCVTNE2PS2BF16_ronomo::VCVTNE2PS2BF16
            // VCVTNE2PS2BF16 VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2255 << 16 | 4400;
          }
          else
          {
            if (b & 0x20)
            {
              // TEMPLATE.VCVTNEPS2BF16_romo::VCVTNEPS2BF16
              // VCVTNEPS2BF16 VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
              return 2258 << 16 | 4406;
            }
            else
            {
              // TEMPLATE.VPSHRDVW_ronomo::VPSHRDVW
              // VPSHRDVW VREG:rw:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
              return 2966 << 16 | 6037;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (b & 0x10)
        {
          // TEMPLATE.VCVTNE2PS2BF16_rynymy::VCVTNE2PS2BF16my
          // VCVTNE2PS2BF16 VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn MEM:r:f32=$mem256 BCST=$BCST;
          return 2256 << 16 | 4403;
        }
        else
        {
          if (b & 0x20)
          {
            // TEMPLATE.VCVTNEPS2BF16_romy::VCVTNEPS2BF16my
            // VCVTNEPS2BF16 VREG:w:u16=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST;
            return 2259 << 16 | 4409;
          }
          else
          {
            // TEMPLATE.VPSHRDVW_rynymy::VPSHRDVWmy
            // VPSHRDVW VREG:rw:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn MEM:r:u16=$mem256;
            return 2967 << 16 | 6040;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (b & 0x10)
          {
            // TEMPLATE.VCVTNE2PS2BF16_rznzmz::VCVTNE2PS2BF16mz
            // VCVTNE2PS2BF16 VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:f32=$mem512 BCST=$BCST;
            return 2257 << 16 | 4405;
          }
          else
          {
            if (b & 0x20)
            {
              // TEMPLATE.VCVTNEPS2BF16_rymz::VCVTNEPS2BF16mz
              // VCVTNEPS2BF16 VREG:w:u16=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST;
              return 2260 << 16 | 4411;
            }
            else
            {
              // TEMPLATE.VPSHRDVW_rznzmz::VPSHRDVWmz
              // VPSHRDVW VREG:rw:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn MEM:r:u16=$mem512;
              return 2968 << 16 | 6042;
            }
          }
        }
        else
        {
          if (b & 0x10)
          {
            // TEMPLATE.VCVTNE2PS2BF16_ronomo::VCVTNE2PS2BF16mx
            // VCVTNE2PS2BF16 VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem128 BCST=$BCST;
            return 2255 << 16 | 4401;
          }
          else
          {
            if (b & 0x20)
            {
              // TEMPLATE.VCVTNEPS2BF16_romo::VCVTNEPS2BF16mx
              // VCVTNEPS2BF16 VREG:w:u16=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST;
              return 2258 << 16 | 4407;
            }
            else
            {
              // TEMPLATE.VPSHRDVW_ronomo::VPSHRDVWmx
              // VPSHRDVW VREG:rw:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn MEM:r:u16=$mem128;
              return 2966 << 16 | 6038;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x73 */
  case 883:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPSHRDVx_rynymy::VPSHRDVQ
          // VPSHRDVQ VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
          return 2970 << 16 | 6049;
        }
        else
        {
          // TEMPLATE.VPSHRDVx_rynymy::VPSHRDVD
          // VPSHRDVD VREG:rw:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
          return 2970 << 16 | 6047;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHRDVx_rznzmz::VPSHRDVQ
            // VPSHRDVQ VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
            return 2971 << 16 | 6053;
          }
          else
          {
            // TEMPLATE.VPSHRDVx_rznzmz::VPSHRDVD
            // VPSHRDVD VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
            return 2971 << 16 | 6051;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHRDVx_ronomo::VPSHRDVQ
            // VPSHRDVQ VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
            return 2969 << 16 | 6045;
          }
          else
          {
            // TEMPLATE.VPSHRDVx_ronomo::VPSHRDVD
            // VPSHRDVD VREG:rw:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
            return 2969 << 16 | 6043;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPSHRDVx_rynymy::VPSHRDVQmy
          // VPSHRDVQ VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
          return 2970 << 16 | 6050;
        }
        else
        {
          // TEMPLATE.VPSHRDVx_rynymy::VPSHRDVDmy
          // VPSHRDVD VREG:rw:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
          return 2970 << 16 | 6048;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHRDVx_rznzmz::VPSHRDVQmz
            // VPSHRDVQ VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
            return 2971 << 16 | 6054;
          }
          else
          {
            // TEMPLATE.VPSHRDVx_rznzmz::VPSHRDVDmz
            // VPSHRDVD VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
            return 2971 << 16 | 6052;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHRDVx_ronomo::VPSHRDVQmx
            // VPSHRDVQ VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
            return 2969 << 16 | 6046;
          }
          else
          {
            // TEMPLATE.VPSHRDVx_ronomo::VPSHRDVDmx
            // VPSHRDVD VREG:rw:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
            return 2969 << 16 | 6044;
          }
        }
      }
    }
  break;
  /* 0f38.0x74 */
  case 884:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VPCMPLTD::VPCMPLTD
        // VPCMPLTD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm;
        return 3427 << 16 | 7113;
      }
      else
      {
        // TEMPLATE.VPCMPLTD::VPCMPLTD
        // VPCMPLTD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm SWZ=$r_i64;
        return 3427 << 16 | 7112;
      }
    }
    else
    {
      // TEMPLATE.VPCMPLTD::VPCMPLTDm
      // VPCMPLTD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
      return 3427 << 16 | 7114;
    }
  break;
  /* 0f38.0x75 */
  case 885:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMI2W_rynymy::VPERMI2W
          // VPERMI2W  VREG:rw:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
          return 2721 << 16 | 5555;
        }
        else
        {
          // TEMPLATE.VPERMI2B_rynymy::VPERMI2B
          // VPERMI2B VREG:rw:u8=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn VREG:r:u8=$YMMm;
          return 2715 << 16 | 5537;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2W_rznzmz::VPERMI2W
            // VPERMI2W  VREG:rw:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn VREG:r:u16=$ZMMm;
            return 2722 << 16 | 5557;
          }
          else
          {
            // TEMPLATE.VPERMI2B_rznzmz::VPERMI2B
            // VPERMI2B VREG:rw:u8=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn VREG:r:u8=$ZMMm;
            return 2716 << 16 | 5539;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2W_ronomo::VPERMI2W
            // VPERMI2W  VREG:rw:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
            return 2720 << 16 | 5553;
          }
          else
          {
            // TEMPLATE.VPERMI2B_ronomo::VPERMI2B
            // VPERMI2B VREG:rw:u8=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn VREG:r:u8=$XMMm;
            return 2714 << 16 | 5535;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMI2W_rynymy::VPERMI2Wmy
          // VPERMI2W  VREG:rw:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn MEM:r:u16=$mem256;
          return 2721 << 16 | 5556;
        }
        else
        {
          // TEMPLATE.VPERMI2B_rynymy::VPERMI2Bmy
          // VPERMI2B VREG:rw:u8=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn MEM:r:u8=$mem256;
          return 2715 << 16 | 5538;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2W_rznzmz::VPERMI2Wmz
            // VPERMI2W  VREG:rw:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn MEM:r:u16=$mem512;
            return 2722 << 16 | 5558;
          }
          else
          {
            // TEMPLATE.VPERMI2B_rznzmz::VPERMI2Bmz
            // VPERMI2B VREG:rw:u8=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn MEM:r:u8=$mem512;
            return 2716 << 16 | 5540;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2W_ronomo::VPERMI2Wmx
            // VPERMI2W  VREG:rw:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn MEM:r:u16=$mem128;
            return 2720 << 16 | 5554;
          }
          else
          {
            // TEMPLATE.VPERMI2B_ronomo::VPERMI2Bmx
            // VPERMI2B VREG:rw:u8=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn MEM:r:u8=$mem128;
            return 2714 << 16 | 5536;
          }
        }
      }
    }
  break;
  /* 0f38.0x76 */
  case 886:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMI2x_rynymy::VPERMI2Q
          // VPERMI2Q  VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
          return 2724 << 16 | 5565;
        }
        else
        {
          // TEMPLATE.VPERMI2x_rynymy::VPERMI2D
          // VPERMI2D  VREG:rw:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
          return 2724 << 16 | 5563;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2x_rznzmz::VPERMI2Q
            // VPERMI2Q  VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
            return 2725 << 16 | 5569;
          }
          else
          {
            // TEMPLATE.VPERMI2x_rznzmz::VPERMI2D
            // VPERMI2D  VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
            return 2725 << 16 | 5567;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2x_ronomo::VPERMI2Q
            // VPERMI2Q  VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
            return 2723 << 16 | 5561;
          }
          else
          {
            // TEMPLATE.VPERMI2x_ronomo::VPERMI2D
            // VPERMI2D  VREG:rw:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
            return 2723 << 16 | 5559;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMI2x_rynymy::VPERMI2Qmy
          // VPERMI2Q  VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
          return 2724 << 16 | 5566;
        }
        else
        {
          // TEMPLATE.VPERMI2x_rynymy::VPERMI2Dmy
          // VPERMI2D  VREG:rw:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
          return 2724 << 16 | 5564;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2x_rznzmz::VPERMI2Qmz
            // VPERMI2Q  VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
            return 2725 << 16 | 5570;
          }
          else
          {
            // TEMPLATE.VPERMI2x_rznzmz::VPERMI2Dmz
            // VPERMI2D  VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
            return 2725 << 16 | 5568;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2x_ronomo::VPERMI2Qmx
            // VPERMI2Q  VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
            return 2723 << 16 | 5562;
          }
          else
          {
            // TEMPLATE.VPERMI2x_ronomo::VPERMI2Dmx
            // VPERMI2D  VREG:rw:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
            return 2723 << 16 | 5560;
          }
        }
      }
    }
  break;
  /* 0f38.0x77 */
  case 887:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMI2Px_rynymy::VPERMI2PD
          // VPERMI2PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
          return 2718 << 16 | 5545;
        }
        else
        {
          // TEMPLATE.VPERMI2Px_rynymy::VPERMI2PS
          // VPERMI2PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
          return 2718 << 16 | 5547;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2Px_rznzmz::VPERMI2PD
            // VPERMI2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm;
            return 2719 << 16 | 5549;
          }
          else
          {
            // TEMPLATE.VPERMI2Px_rznzmz::VPERMI2PS
            // VPERMI2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
            return 2719 << 16 | 5551;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2Px_ronomo::VPERMI2PD
            // VPERMI2PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2717 << 16 | 5541;
          }
          else
          {
            // TEMPLATE.VPERMI2Px_ronomo::VPERMI2PS
            // VPERMI2PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2717 << 16 | 5543;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMI2Px_rynymy::VPERMI2PDmy
          // VPERMI2PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn MEM:r:f64=$mem256 BCST=$BCST;
          return 2718 << 16 | 5546;
        }
        else
        {
          // TEMPLATE.VPERMI2Px_rynymy::VPERMI2PSmy
          // VPERMI2PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn MEM:r:f32=$mem256 BCST=$BCST;
          return 2718 << 16 | 5548;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2Px_rznzmz::VPERMI2PDmz
            // VPERMI2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r:f64=$mem512 BCST=$BCST;
            return 2719 << 16 | 5550;
          }
          else
          {
            // TEMPLATE.VPERMI2Px_rznzmz::VPERMI2PSmz
            // VPERMI2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:f32=$mem512 BCST=$BCST;
            return 2719 << 16 | 5552;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMI2Px_ronomo::VPERMI2PDmx
            // VPERMI2PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem128 BCST=$BCST;
            return 2717 << 16 | 5542;
          }
          else
          {
            // TEMPLATE.VPERMI2Px_ronomo::VPERMI2PSmx
            // VPERMI2PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem128 BCST=$BCST;
            return 2717 << 16 | 5544;
          }
        }
      }
    }
  break;
  /* 0f38.0x78 */
  case 888:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPBROADCASTB_rxmb::VPBROADCASTB
          // VPBROADCASTB    VREG:w:u8=$YMMr   REG:r:u8=$XMMm;
          return 2632 << 16 | 5360;
        }
        else
        {
          // TEMPLATE.VPBROADCASTB_rymx::VPBROADCASTB
          // VPBROADCASTB    VREG:w:u8=$YMMr   PREG:r:Z=$Kk                                VREG:r:u8=$XMMm;
          return 2634 << 16 | 5364;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPBROADCASTB_rzmx::VPBROADCASTB
          // VPBROADCASTB    VREG:w:u8=$ZMMr   PREG:r:Z=$Kk                                VREG:r:u8=$XMMm;
          return 2636 << 16 | 5367;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPBROADCASTB_rxmb::VPBROADCASTB
            // VPBROADCASTB    VREG:w:u8=$XMMr   REG:r:u8=$XMMm;
            return 2632 << 16 | 5359;
          }
          else
          {
            // TEMPLATE.VPBROADCASTB_romx::VPBROADCASTB
            // VPBROADCASTB    VREG:w:u8=$XMMr   PREG:r:Z=$Kk                                VREG:r:u8=$XMMm;
            return 2631 << 16 | 5357;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPBROADCASTB_rxmb::VPBROADCASTBmb
          // VPBROADCASTB    VREG:w:u8=$YMMr   MEM:r:u8=$mem8 SBCST:SUPP={FROM=1 TO=32};
          return 2632 << 16 | 5362;
        }
        else
        {
          // TEMPLATE.VPBROADCASTB_rymx::VPBROADCASTBmb
          // VPBROADCASTB    VREG:w:u8=$YMMr   PREG:r:Z=$Kk                                MEM:r:u8=$mem8 SBCST:SUPP={FROM=1 TO=32};
          return 2634 << 16 | 5365;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPBROADCASTB_rzmx::VPBROADCASTBmb
          // VPBROADCASTB    VREG:w:u8=$ZMMr   PREG:r:Z=$Kk                                MEM:r:u8=$mem8 SBCST:SUPP={FROM=1 TO=64};
          return 2636 << 16 | 5368;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPBROADCASTB_rxmb::VPBROADCASTBmb
            // VPBROADCASTB    VREG:w:u8=$XMMr   MEM:r:u8=$mem8 SBCST:SUPP={FROM=1 TO=16};
            return 2632 << 16 | 5361;
          }
          else
          {
            // TEMPLATE.VPBROADCASTB_romx::VPBROADCASTBmb
            // VPBROADCASTB    VREG:w:u8=$XMMr   PREG:r:Z=$Kk                                MEM:r:u8=$mem8 SBCST:SUPP={FROM=1 TO=16};
            return 2631 << 16 | 5358;
          }
        }
      }
    }
  break;
  /* 0f38.0x79 */
  case 889:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPBROADCASTW_rxmw::VPBROADCASTW
          // VPBROADCASTW    VREG:w:u16=$YMMr  REG:r:u16=$XMMm;
          return 2647 << 16 | 5393;
        }
        else
        {
          // TEMPLATE.VPBROADCASTW_rymx::VPBROADCASTW
          // VPBROADCASTW    VREG:w:u16=$YMMr  PREG:r:Z=$Kk                                VREG:r:u16=$XMMm;
          return 2649 << 16 | 5397;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPBROADCASTW_rzmx::VPBROADCASTW
          // VPBROADCASTW    VREG:w:u16=$ZMMr  PREG:r:Z=$Kk                                VREG:r:u16=$XMMm;
          return 2651 << 16 | 5400;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPBROADCASTW_rxmw::VPBROADCASTW
            // VPBROADCASTW    VREG:w:u16=$XMMr  REG:r:u16=$XMMm;
            return 2647 << 16 | 5392;
          }
          else
          {
            // TEMPLATE.VPBROADCASTW_romx::VPBROADCASTW
            // VPBROADCASTW    VREG:w:u16=$XMMr  PREG:r:Z=$Kk                                VREG:r:u16=$XMMm;
            return 2646 << 16 | 5390;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPBROADCASTW_rxmw::VPBROADCASTWmw
          // VPBROADCASTW    VREG:w:u16=$YMMr  MEM:r:u16=$mem16 SBCST:SUPP={FROM=1 TO=16};
          return 2647 << 16 | 5395;
        }
        else
        {
          // TEMPLATE.VPBROADCASTW_rymx::VPBROADCASTWmw
          // VPBROADCASTW    VREG:w:u16=$YMMr  PREG:r:Z=$Kk                                MEM:r:u16=$mem16 SBCST:SUPP={FROM=1 TO=16};
          return 2649 << 16 | 5398;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPBROADCASTW_rzmx::VPBROADCASTWmw
          // VPBROADCASTW    VREG:w:u16=$ZMMr  PREG:r:Z=$Kk                                MEM:r:u16=$mem16 SBCST:SUPP={FROM=1 TO=32};
          return 2651 << 16 | 5401;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPBROADCASTW_rxmw::VPBROADCASTWmw
            // VPBROADCASTW    VREG:w:u16=$XMMr  MEM:r:u16=$mem16 SBCST:SUPP={FROM=1 TO=8};
            return 2647 << 16 | 5394;
          }
          else
          {
            // TEMPLATE.VPBROADCASTW_romx::VPBROADCASTWmw
            // VPBROADCASTW    VREG:w:u16=$XMMr  PREG:r:Z=$Kk                                MEM:r:u16=$mem16 SBCST:SUPP={FROM=1 TO=8};
            return 2646 << 16 | 5391;
          }
        }
      }
    }
  break;
  /* 0f38.0x7a */
  case 890:
    // the following switch contains 3 case.
    switch (b & 0x03)
    {
      case 0x00:
      {
        // TEMPLATE.VPBROADCASTB_romd::VPBROADCASTB
        // VPBROADCASTB    VREG:w:u8=$XMMr   PREG:r:Z=$Kk                                REG:r:u8=$GPR32m;
        return 2630 << 16 | 5356;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.VPBROADCASTB_rymd::VPBROADCASTB
        // VPBROADCASTB    VREG:w:u8=$YMMr   PREG:r:Z=$Kk                                REG:r:u8=$GPR32m;
        return 2633 << 16 | 5363;
        break;
      }
      case 0x02:
      {
        // TEMPLATE.VPBROADCASTB_rzmd::VPBROADCASTB
        // VPBROADCASTB    VREG:w:u8=$ZMMr   PREG:r:Z=$Kk                                REG:r:u8=$GPR32m;
        return 2635 << 16 | 5366;
        break;
      }
      default: break;
    }
  break;
  /* 0f38.0x7b */
  case 891:
    // the following switch contains 3 case.
    switch (b & 0x03)
    {
      case 0x00:
      {
        // TEMPLATE.VPBROADCASTW_romd::VPBROADCASTW
        // VPBROADCASTW    VREG:w:u16=$XMMr  PREG:r:Z=$Kk                                REG:r:u16=$GPR32m;
        return 2645 << 16 | 5389;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.VPBROADCASTW_rymd::VPBROADCASTW
        // VPBROADCASTW    VREG:w:u16=$YMMr  PREG:r:Z=$Kk                                REG:r:u16=$GPR32m;
        return 2648 << 16 | 5396;
        break;
      }
      case 0x02:
      {
        // TEMPLATE.VPBROADCASTW_rzmd::VPBROADCASTW
        // VPBROADCASTW    VREG:w:u16=$ZMMr  PREG:r:Z=$Kk                                REG:r:u16=$GPR32m;
        return 2650 << 16 | 5399;
        break;
      }
      default: break;
    }
  break;
  /* 0f38.0x7c */
  case 892:
    if (b & 0x01)
    {
      if (d & 0x01)
      {
        if (c & 0x80)
        {
          // TEMPLATE.VPBROADCASTx_rymx::VPBROADCASTQ
          // VPBROADCASTQ    VREG:w:u64=$YMMr  PREG:r:Z=$Kk                                REG:r:u64=$GPR64m;
          return 2653 << 16 | 5407;
        }
        else
        {
          // TEMPLATE.VPBROADCASTx_rymx::VPBROADCASTD
          // VPBROADCASTD    VREG:w:u32=$YMMr  PREG:r:Z=$Kk                                REG:r:u32=$GPR32m;
          return 2653 << 16 | 5406;
        }
      }
      else
      {
        // TEMPLATE.VPBROADCASTx_rymx::VPBROADCASTD
        // VPBROADCASTD    VREG:w:u32=$YMMr  PREG:r:Z=$Kk                                REG:r:u32=$GPR32m;
        return 2653 << 16 | 5405;
      }
    }
    else
    {
      if (b & 0x02)
      {
        if (d & 0x01)
        {
          if (c & 0x80)
          {
            // TEMPLATE.VPBROADCASTx_rzmx::VPBROADCASTQ
            // VPBROADCASTQ    VREG:w:u64=$ZMMr  PREG:r:Z=$Kk                                REG:r:u64=$GPR64m;
            return 2654 << 16 | 5410;
          }
          else
          {
            // TEMPLATE.VPBROADCASTx_rzmx::VPBROADCASTD
            // VPBROADCASTD    VREG:w:u32=$ZMMr  PREG:r:Z=$Kk                                REG:r:u32=$GPR32m;
            return 2654 << 16 | 5409;
          }
        }
        else
        {
          // TEMPLATE.VPBROADCASTx_rzmx::VPBROADCASTD
          // VPBROADCASTD    VREG:w:u32=$ZMMr  PREG:r:Z=$Kk                                REG:r:u32=$GPR32m;
          return 2654 << 16 | 5408;
        }
      }
      else
      {
        if (d & 0x01)
        {
          if (c & 0x80)
          {
            // TEMPLATE.VPBROADCASTx_romx::VPBROADCASTQ
            // VPBROADCASTQ    VREG:w:u64=$XMMr  PREG:r:Z=$Kk                                REG:r:u64=$GPR64m;
            return 2652 << 16 | 5404;
          }
          else
          {
            // TEMPLATE.VPBROADCASTx_romx::VPBROADCASTD
            // VPBROADCASTD    VREG:w:u32=$XMMr  PREG:r:Z=$Kk                                REG:r:u32=$GPR32m;
            return 2652 << 16 | 5403;
          }
        }
        else
        {
          // TEMPLATE.VPBROADCASTx_romx::VPBROADCASTD
          // VPBROADCASTD    VREG:w:u32=$XMMr  PREG:r:Z=$Kk                                REG:r:u32=$GPR32m;
          return 2652 << 16 | 5402;
        }
      }
    }
  break;
  /* 0f38.0x7d */
  case 893:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMT2W_rynymy::VPERMT2W
          // VPERMT2W  VREG:rw:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn VREG:r:u16=$YMMm;
          return 2762 << 16 | 5657;
        }
        else
        {
          // TEMPLATE.VPERMT2B_rynymy::VPERMT2B
          // VPERMT2B VREG:rw:u8=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn VREG:r:u8=$YMMm;
          return 2756 << 16 | 5639;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2W_rznzmz::VPERMT2W
            // VPERMT2W  VREG:rw:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn VREG:r:u16=$ZMMm;
            return 2763 << 16 | 5659;
          }
          else
          {
            // TEMPLATE.VPERMT2B_rznzmz::VPERMT2B
            // VPERMT2B VREG:rw:u8=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn VREG:r:u8=$ZMMm;
            return 2757 << 16 | 5641;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2W_ronomo::VPERMT2W
            // VPERMT2W  VREG:rw:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn VREG:r:u16=$XMMm;
            return 2761 << 16 | 5655;
          }
          else
          {
            // TEMPLATE.VPERMT2B_ronomo::VPERMT2B
            // VPERMT2B VREG:rw:u8=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn VREG:r:u8=$XMMm;
            return 2755 << 16 | 5637;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMT2W_rynymy::VPERMT2Wmy
          // VPERMT2W  VREG:rw:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn MEM:r:u16=$mem256;
          return 2762 << 16 | 5658;
        }
        else
        {
          // TEMPLATE.VPERMT2B_rynymy::VPERMT2Bmy
          // VPERMT2B VREG:rw:u8=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn MEM:r:u8=$mem256;
          return 2756 << 16 | 5640;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2W_rznzmz::VPERMT2Wmz
            // VPERMT2W  VREG:rw:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn MEM:r:u16=$mem512;
            return 2763 << 16 | 5660;
          }
          else
          {
            // TEMPLATE.VPERMT2B_rznzmz::VPERMT2Bmz
            // VPERMT2B VREG:rw:u8=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn MEM:r:u8=$mem512;
            return 2757 << 16 | 5642;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2W_ronomo::VPERMT2Wmx
            // VPERMT2W  VREG:rw:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn MEM:r:u16=$mem128;
            return 2761 << 16 | 5656;
          }
          else
          {
            // TEMPLATE.VPERMT2B_ronomo::VPERMT2Bmx
            // VPERMT2B VREG:rw:u8=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn MEM:r:u8=$mem128;
            return 2755 << 16 | 5638;
          }
        }
      }
    }
  break;
  /* 0f38.0x7e */
  case 894:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMT2x_rynymy::VPERMT2Q
          // VPERMT2Q  VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
          return 2765 << 16 | 5667;
        }
        else
        {
          // TEMPLATE.VPERMT2x_rynymy::VPERMT2D
          // VPERMT2D  VREG:rw:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm;
          return 2765 << 16 | 5665;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2x_rznzmz::VPERMT2Q
            // VPERMT2Q  VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
            return 2766 << 16 | 5671;
          }
          else
          {
            // TEMPLATE.VPERMT2x_rznzmz::VPERMT2D
            // VPERMT2D  VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm;
            return 2766 << 16 | 5669;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2x_ronomo::VPERMT2Q
            // VPERMT2Q  VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
            return 2764 << 16 | 5663;
          }
          else
          {
            // TEMPLATE.VPERMT2x_ronomo::VPERMT2D
            // VPERMT2D  VREG:rw:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm;
            return 2764 << 16 | 5661;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMT2x_rynymy::VPERMT2Qmy
          // VPERMT2Q  VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
          return 2765 << 16 | 5668;
        }
        else
        {
          // TEMPLATE.VPERMT2x_rynymy::VPERMT2Dmy
          // VPERMT2D  VREG:rw:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST;
          return 2765 << 16 | 5666;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2x_rznzmz::VPERMT2Qmz
            // VPERMT2Q  VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
            return 2766 << 16 | 5672;
          }
          else
          {
            // TEMPLATE.VPERMT2x_rznzmz::VPERMT2Dmz
            // VPERMT2D  VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST;
            return 2766 << 16 | 5670;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2x_ronomo::VPERMT2Qmx
            // VPERMT2Q  VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
            return 2764 << 16 | 5664;
          }
          else
          {
            // TEMPLATE.VPERMT2x_ronomo::VPERMT2Dmx
            // VPERMT2D  VREG:rw:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST;
            return 2764 << 16 | 5662;
          }
        }
      }
    }
  break;
  /* 0f38.0x7f */
  case 895:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMT2Px_rynymy::VPERMT2PD
          // VPERMT2PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
          return 2759 << 16 | 5647;
        }
        else
        {
          // TEMPLATE.VPERMT2Px_rynymy::VPERMT2PS
          // VPERMT2PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
          return 2759 << 16 | 5649;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2Px_rznzmz::VPERMT2PD
            // VPERMT2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm;
            return 2760 << 16 | 5651;
          }
          else
          {
            // TEMPLATE.VPERMT2Px_rznzmz::VPERMT2PS
            // VPERMT2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
            return 2760 << 16 | 5653;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2Px_ronomo::VPERMT2PD
            // VPERMT2PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2758 << 16 | 5643;
          }
          else
          {
            // TEMPLATE.VPERMT2Px_ronomo::VPERMT2PS
            // VPERMT2PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2758 << 16 | 5645;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMT2Px_rynymy::VPERMT2PDmy
          // VPERMT2PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn MEM:r:f64=$mem256 BCST=$BCST;
          return 2759 << 16 | 5648;
        }
        else
        {
          // TEMPLATE.VPERMT2Px_rynymy::VPERMT2PSmy
          // VPERMT2PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn MEM:r:f32=$mem256 BCST=$BCST;
          return 2759 << 16 | 5650;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2Px_rznzmz::VPERMT2PDmz
            // VPERMT2PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r:f64=$mem512 BCST=$BCST;
            return 2760 << 16 | 5652;
          }
          else
          {
            // TEMPLATE.VPERMT2Px_rznzmz::VPERMT2PSmz
            // VPERMT2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:f32=$mem512 BCST=$BCST;
            return 2760 << 16 | 5654;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMT2Px_ronomo::VPERMT2PDmx
            // VPERMT2PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem128 BCST=$BCST;
            return 2758 << 16 | 5644;
          }
          else
          {
            // TEMPLATE.VPERMT2Px_ronomo::VPERMT2PSmx
            // VPERMT2PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem128 BCST=$BCST;
            return 2758 << 16 | 5646;
          }
        }
      }
    }
  break;
  /* 0f38.0x80 */
  case 896:
    if (c & 0x80)
    {
      // TEMPLATE.INVEPT::INVEPTmx
      // INVEPT REG:r=$GPR64r MEM:r:s32=$mem128;
      return 722 << 16 | 1218;
    }
    else
    {
      // TEMPLATE.INVEPT::INVEPTmx
      // INVEPT REG:r=$GPR32r MEM:r:s32=$mem128;
      return 722 << 16 | 1219;
    }
  break;
  /* 0f38.0x81 */
  case 897:
    if (c & 0x80)
    {
      // TEMPLATE.INVVPID::INVVPIDmx
      // INVVPID REG:r=$GPR64r MEM:r:s32=$mem128;
      return 724 << 16 | 1222;
    }
    else
    {
      // TEMPLATE.INVVPID::INVVPIDmx
      // INVVPID REG:r=$GPR32r MEM:r:s32=$mem128;
      return 724 << 16 | 1223;
    }
  break;
  /* 0f38.0x82 */
  case 898:
    if (c & 0x80)
    {
      // TEMPLATE.INVPCID::INVPCIDmx
      // INVPCID REG:r=$GPR64r MEM:r:s32=$mem128;
      return 723 << 16 | 1220;
    }
    else
    {
      // TEMPLATE.INVPCID::INVPCIDmx
      // INVPCID REG:r=$GPR32r MEM:r:s32=$mem128;
      return 723 << 16 | 1221;
    }
  break;
  /* 0f38.0x83 */
  case 899:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPMULTISHIFTQB_ronomo::VPMULTISHIFTQB
          // VPMULTISHIFTQB VREG:w:u8=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn VREG:r:u64=$XMMm;
          return 2921 << 16 | 5893;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPMULTISHIFTQB_rynymy::VPMULTISHIFTQB
          // VPMULTISHIFTQB VREG:w:u8=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn VREG:r:u64=$YMMm;
          return 2922 << 16 | 5895;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPMULTISHIFTQB_rznzmz::VPMULTISHIFTQB
          // VPMULTISHIFTQB VREG:w:u8=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn VREG:r:u64=$ZMMm;
          return 2923 << 16 | 5897;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPMULTISHIFTQB_ronomo::VPMULTISHIFTQBmx
          // VPMULTISHIFTQB VREG:w:u8=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
          return 2921 << 16 | 5894;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPMULTISHIFTQB_rynymy::VPMULTISHIFTQBmy
          // VPMULTISHIFTQB VREG:w:u8=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
          return 2922 << 16 | 5896;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPMULTISHIFTQB_rznzmz::VPMULTISHIFTQBmz
          // VPMULTISHIFTQB VREG:w:u8=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
          return 2923 << 16 | 5898;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x84 */
  case 900:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VSCALEPS::VSCALEPS
        // VSCALEPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
        return 3490 << 16 | 7261;
      }
      else
      {
        // TEMPLATE.VSCALEPS::VSCALEPS
        // VSCALEPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
        return 3490 << 16 | 7260;
      }
    }
    else
    {
      // TEMPLATE.VSCALEPS::VSCALEPSm
      // VSCALEPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
      return 3490 << 16 | 7262;
    }
  break;
  /* invalid */
  case 901:
    return 0;
  /* 0f38.0x86 */
  case 902:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VPMULHUD::VPMULHUD
        // VPMULHUD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
        return 3440 << 16 | 7147;
      }
      else
      {
        // TEMPLATE.VPMULHUD::VPMULHUD
        // VPMULHUD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
        return 3440 << 16 | 7146;
      }
    }
    else
    {
      // TEMPLATE.VPMULHUD::VPMULHUDm
      // VPMULHUD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
      return 3440 << 16 | 7148;
    }
  break;
  /* 0f38.0x87 */
  case 903:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VPMULHD::VPMULHD
        // VPMULHD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
        return 3439 << 16 | 7144;
      }
      else
      {
        // TEMPLATE.VPMULHD::VPMULHD
        // VPMULHD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
        return 3439 << 16 | 7143;
      }
    }
    else
    {
      // TEMPLATE.VPMULHD::VPMULHDm
      // VPMULHD VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
      return 3439 << 16 | 7145;
    }
  break;
  /* 0f38.0x88 */
  case 904:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VEXPANDPD_rymy::VEXPANDPD
          // VEXPANDPD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm;
          return 2338 << 16 | 4617;
        }
        else
        {
          // TEMPLATE.VEXPANDPS_rymy::VEXPANDPS
          // VEXPANDPS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm;
          return 2341 << 16 | 4623;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VEXPANDPD_rzmz::VEXPANDPD
            // VEXPANDPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
            return 2339 << 16 | 4619;
          }
          else
          {
            // TEMPLATE.VEXPANDPS_rzmz::VEXPANDPS
            // VEXPANDPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm;
            return 2342 << 16 | 4625;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VEXPANDPD_romo::VEXPANDPD
            // VEXPANDPD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm;
            return 2337 << 16 | 4615;
          }
          else
          {
            // TEMPLATE.VEXPANDPS_romo::VEXPANDPS
            // VEXPANDPS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm;
            return 2340 << 16 | 4621;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VEXPANDPD_rymy::VEXPANDPDmy
          // VEXPANDPD VREG:w:f64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256;
          return 2338 << 16 | 4618;
        }
        else
        {
          // TEMPLATE.VEXPANDPS_rymy::VEXPANDPSmy
          // VEXPANDPS VREG:w:f32=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem256;
          return 2341 << 16 | 4624;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VEXPANDPD_rzmz::VEXPANDPDmz
            // VEXPANDPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512;
            return 2339 << 16 | 4620;
          }
          else
          {
            // TEMPLATE.VEXPANDPS_rzmz::VEXPANDPSmz
            // VEXPANDPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512;
            return 2342 << 16 | 4626;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VEXPANDPD_romo::VEXPANDPDmx
            // VEXPANDPD VREG:w:f64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128;
            return 2337 << 16 | 4616;
          }
          else
          {
            // TEMPLATE.VEXPANDPS_romo::VEXPANDPSmx
            // VEXPANDPS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem128;
            return 2340 << 16 | 4622;
          }
        }
      }
    }
  break;
  /* 0f38.0x89 */
  case 905:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPEXPANDQ_rymy::VPEXPANDQ
          // VPEXPANDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMm;
          return 2777 << 16 | 5693;
        }
        else
        {
          // TEMPLATE.VPEXPANDD_rymy::VPEXPANDD
          // VPEXPANDD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMm;
          return 2774 << 16 | 5687;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPEXPANDQ_rzmz::VPEXPANDQ
            // VPEXPANDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMm;
            return 2778 << 16 | 5695;
          }
          else
          {
            // TEMPLATE.VPEXPANDD_rzmz::VPEXPANDD
            // VPEXPANDD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMm;
            return 2775 << 16 | 5689;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPEXPANDQ_romo::VPEXPANDQ
            // VPEXPANDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMm;
            return 2776 << 16 | 5691;
          }
          else
          {
            // TEMPLATE.VPEXPANDD_romo::VPEXPANDD
            // VPEXPANDD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMm;
            return 2773 << 16 | 5685;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPEXPANDQ_rymy::VPEXPANDQmy
          // VPEXPANDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk MEM:r:u64=$mem256;
          return 2777 << 16 | 5694;
        }
        else
        {
          // TEMPLATE.VPEXPANDD_rymy::VPEXPANDDmy
          // VPEXPANDD VREG:w:u32=$YMMr PREG:r:Z=$Kk MEM:r:u32=$mem256;
          return 2774 << 16 | 5688;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPEXPANDQ_rzmz::VPEXPANDQmz
            // VPEXPANDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk MEM:r:u64=$mem512;
            return 2778 << 16 | 5696;
          }
          else
          {
            // TEMPLATE.VPEXPANDD_rzmz::VPEXPANDDmz
            // VPEXPANDD VREG:w:u32=$ZMMr PREG:r:Z=$Kk MEM:r:u32=$mem512;
            return 2775 << 16 | 5690;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPEXPANDQ_romo::VPEXPANDQmx
            // VPEXPANDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk MEM:r:u64=$mem128;
            return 2776 << 16 | 5692;
          }
          else
          {
            // TEMPLATE.VPEXPANDD_romo::VPEXPANDDmx
            // VPEXPANDD VREG:w:u32=$XMMr PREG:r:Z=$Kk MEM:r:u32=$mem128;
            return 2773 << 16 | 5686;
          }
        }
      }
    }
  break;
  /* 0f38.0x8a */
  case 906:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VCOMPRESSPD_myry::VCOMPRESSPD
          // VCOMPRESSPD VREG:w:f64=$YMMm  PREG:r:Z=$Kk VREG:r:f64=$YMMr;
          return 2250 << 16 | 4390;
        }
        else
        {
          // TEMPLATE.VCOMPRESSPS_myry::VCOMPRESSPS
          // VCOMPRESSPS VREG:w:f32=$YMMm  PREG:r:Z=$Kk VREG:r:f32=$YMMr;
          return 2253 << 16 | 4396;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VCOMPRESSPD_mzrz::VCOMPRESSPD
            // VCOMPRESSPD VREG:w:f64=$ZMMm  PREG:r:Z=$Kk VREG:r:f64=$ZMMr;
            return 2251 << 16 | 4392;
          }
          else
          {
            // TEMPLATE.VCOMPRESSPS_mzrz::VCOMPRESSPS
            // VCOMPRESSPS VREG:w:f32=$ZMMm  PREG:r:Z=$Kk VREG:r:f32=$ZMMr;
            return 2254 << 16 | 4398;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VCOMPRESSPD_moro::VCOMPRESSPD
            // VCOMPRESSPD VREG:w:f64=$XMMm  PREG:r:Z=$Kk VREG:r:f64=$XMMr;
            return 2249 << 16 | 4388;
          }
          else
          {
            // TEMPLATE.VCOMPRESSPS_moro::VCOMPRESSPS
            // VCOMPRESSPS VREG:w:f32=$XMMm  PREG:r:Z=$Kk VREG:r:f32=$XMMr;
            return 2252 << 16 | 4394;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VCOMPRESSPD_myry::VCOMPRESSPDmy
          // VCOMPRESSPD MEM:w:f64=$mem256 PREG:r:Z=$Kk VREG:r:f64=$YMMr;
          return 2250 << 16 | 4391;
        }
        else
        {
          // TEMPLATE.VCOMPRESSPS_myry::VCOMPRESSPSmy
          // VCOMPRESSPS MEM:w:f32=$mem256 PREG:r:Z=$Kk VREG:r:f32=$YMMr;
          return 2253 << 16 | 4397;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VCOMPRESSPD_mzrz::VCOMPRESSPDmz
            // VCOMPRESSPD MEM:w:f64=$mem512 PREG:r:Z=$Kk VREG:r:f64=$ZMMr;
            return 2251 << 16 | 4393;
          }
          else
          {
            // TEMPLATE.VCOMPRESSPS_mzrz::VCOMPRESSPSmz
            // VCOMPRESSPS MEM:w:f32=$mem512 PREG:r:Z=$Kk VREG:r:f32=$ZMMr;
            return 2254 << 16 | 4399;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VCOMPRESSPD_moro::VCOMPRESSPDmx
            // VCOMPRESSPD MEM:w:f64=$mem128 PREG:r:Z=$Kk VREG:r:f64=$XMMr;
            return 2249 << 16 | 4389;
          }
          else
          {
            // TEMPLATE.VCOMPRESSPS_moro::VCOMPRESSPSmx
            // VCOMPRESSPS MEM:w:f32=$mem128 PREG:r:Z=$Kk VREG:r:f32=$XMMr;
            return 2252 << 16 | 4395;
          }
        }
      }
    }
  break;
  /* 0f38.0x8b */
  case 907:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCOMPRESSQ_myry::VPCOMPRESSQ
          // VPCOMPRESSQ VREG:w:u64=$YMMm  PREG:r:Z=$Kk VREG:r:u64=$YMMr;
          return 2692 << 16 | 5485;
        }
        else
        {
          // TEMPLATE.VPCOMPRESSD_myry::VPCOMPRESSD
          // VPCOMPRESSD VREG:w:u32=$YMMm  PREG:r:Z=$Kk VREG:r:u32=$YMMr;
          return 2689 << 16 | 5479;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCOMPRESSQ_mzrz::VPCOMPRESSQ
            // VPCOMPRESSQ VREG:w:u64=$ZMMm  PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2693 << 16 | 5487;
          }
          else
          {
            // TEMPLATE.VPCOMPRESSD_mzrz::VPCOMPRESSD
            // VPCOMPRESSD VREG:w:u32=$ZMMm  PREG:r:Z=$Kk VREG:r:u32=$ZMMr;
            return 2690 << 16 | 5481;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCOMPRESSQ_moro::VPCOMPRESSQ
            // VPCOMPRESSQ VREG:w:u64=$XMMm  PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2691 << 16 | 5483;
          }
          else
          {
            // TEMPLATE.VPCOMPRESSD_moro::VPCOMPRESSD
            // VPCOMPRESSD VREG:w:u32=$XMMm  PREG:r:Z=$Kk VREG:r:u32=$XMMr;
            return 2688 << 16 | 5477;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCOMPRESSQ_myry::VPCOMPRESSQmy
          // VPCOMPRESSQ MEM:w:u64=$mem256 PREG:r:Z=$Kk VREG:r:u64=$YMMr;
          return 2692 << 16 | 5486;
        }
        else
        {
          // TEMPLATE.VPCOMPRESSD_myry::VPCOMPRESSDmy
          // VPCOMPRESSD MEM:w:u32=$mem256 PREG:r:Z=$Kk VREG:r:u32=$YMMr;
          return 2689 << 16 | 5480;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCOMPRESSQ_mzrz::VPCOMPRESSQmz
            // VPCOMPRESSQ MEM:w:u64=$mem512 PREG:r:Z=$Kk VREG:r:u64=$ZMMr;
            return 2693 << 16 | 5488;
          }
          else
          {
            // TEMPLATE.VPCOMPRESSD_mzrz::VPCOMPRESSDmz
            // VPCOMPRESSD MEM:w:u32=$mem512 PREG:r:Z=$Kk VREG:r:u32=$ZMMr;
            return 2690 << 16 | 5482;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCOMPRESSQ_moro::VPCOMPRESSQmx
            // VPCOMPRESSQ MEM:w:u64=$mem128 PREG:r:Z=$Kk VREG:r:u64=$XMMr;
            return 2691 << 16 | 5484;
          }
          else
          {
            // TEMPLATE.VPCOMPRESSD_moro::VPCOMPRESSDmx
            // VPCOMPRESSD MEM:w:u32=$mem128 PREG:r:Z=$Kk VREG:r:u32=$XMMr;
            return 2688 << 16 | 5478;
          }
        }
      }
    }
  break;
  /* 0f38.0x8c */
  case 908:
    if (b & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPMASKMOVx_rxnxmx::VPMASKMOVQmy
        // VPMASKMOVQ VREG:w:u64=$YMMr  VREG:r:u64=$YMMn MEM:r:u64=$mem256;
        return 2800 << 16 | 5760;
      }
      else
      {
        // TEMPLATE.VPMASKMOVx_rxnxmx::VPMASKMOVDmy
        // VPMASKMOVD VREG:w:u32=$YMMr  VREG:r:u32=$YMMn MEM:r:u32=$mem256;
        return 2800 << 16 | 5758;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPMASKMOVx_rxnxmx::VPMASKMOVQmx
        // VPMASKMOVQ VREG:w:u64=$XMMr  VREG:r:u64=$XMMn MEM:r:u64=$mem128;
        return 2800 << 16 | 5759;
      }
      else
      {
        // TEMPLATE.VPMASKMOVx_rxnxmx::VPMASKMOVDmx
        // VPMASKMOVD VREG:w:u32=$XMMr  VREG:r:u32=$XMMn MEM:r:u32=$mem128;
        return 2800 << 16 | 5757;
      }
    }
  break;
  /* 0f38.0x8d */
  case 909:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMW_rynymy::VPERMW
          // VPERMW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  VREG:r:u16=$YMMm;
          return 2771 << 16 | 5681;
        }
        else
        {
          // TEMPLATE.VPERMB_rynymy::VPERMB
          // VPERMB VREG:w:u8=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn VREG:r:u8=$YMMm;
          return 2712 << 16 | 5531;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMW_rznzmz::VPERMW
            // VPERMW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  VREG:r:u16=$ZMMm;
            return 2772 << 16 | 5683;
          }
          else
          {
            // TEMPLATE.VPERMB_rznzmz::VPERMB
            // VPERMB VREG:w:u8=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn VREG:r:u8=$ZMMm;
            return 2713 << 16 | 5533;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMW_ronomo::VPERMW
            // VPERMW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
            return 2770 << 16 | 5679;
          }
          else
          {
            // TEMPLATE.VPERMB_ronomo::VPERMB
            // VPERMB VREG:w:u8=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn VREG:r:u8=$XMMm;
            return 2711 << 16 | 5529;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMW_rynymy::VPERMWmy
          // VPERMW VREG:w:u16=$YMMr PREG:r:Z=$Kk     VREG:r:u16=$YMMn  MEM:r:u16=$mem256;
          return 2771 << 16 | 5682;
        }
        else
        {
          // TEMPLATE.VPERMB_rynymy::VPERMBmy
          // VPERMB VREG:w:u8=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn MEM:r:u8=$mem256;
          return 2712 << 16 | 5532;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMW_rznzmz::VPERMWmz
            // VPERMW VREG:w:u16=$ZMMr PREG:r:Z=$Kk     VREG:r:u16=$ZMMn  MEM:r:u16=$mem512;
            return 2772 << 16 | 5684;
          }
          else
          {
            // TEMPLATE.VPERMB_rznzmz::VPERMBmz
            // VPERMB VREG:w:u8=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn MEM:r:u8=$mem512;
            return 2713 << 16 | 5534;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPERMW_ronomo::VPERMWmx
            // VPERMW VREG:w:u16=$XMMr PREG:r:Z=$Kk     VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
            return 2770 << 16 | 5680;
          }
          else
          {
            // TEMPLATE.VPERMB_ronomo::VPERMBmx
            // VPERMB VREG:w:u8=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn MEM:r:u8=$mem128;
            return 2711 << 16 | 5530;
          }
        }
      }
    }
  break;
  /* 0f38.0x8e */
  case 910:
    if (b & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPMASKMOVx_mxnxrx::VPMASKMOVQmy
        // VPMASKMOVQ MEM:w:u64=$mem256 VREG:r:u64=$YMMn VREG:r:u64=$YMMr;
        return 2799 << 16 | 5756;
      }
      else
      {
        // TEMPLATE.VPMASKMOVx_mxnxrx::VPMASKMOVDmy
        // VPMASKMOVD MEM:w:u32=$mem256 VREG:r:u32=$YMMn VREG:r:u32=$YMMr;
        return 2799 << 16 | 5754;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPMASKMOVx_mxnxrx::VPMASKMOVQmx
        // VPMASKMOVQ MEM:w:u64=$mem128 VREG:r:u64=$XMMn VREG:r:u64=$XMMr;
        return 2799 << 16 | 5755;
      }
      else
      {
        // TEMPLATE.VPMASKMOVx_mxnxrx::VPMASKMOVDmx
        // VPMASKMOVD MEM:w:u32=$mem128 VREG:r:u32=$XMMn VREG:r:u32=$XMMr;
        return 2799 << 16 | 5753;
      }
    }
  break;
  /* 0f38.0x8f */
  case 911:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPSHUFBITQMB_nomo::VPSHUFBITQMB
          // VPSHUFBITQMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u8=$XMMm;
          return 2972 << 16 | 6055;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPSHUFBITQMB_nymy::VPSHUFBITQMB
          // VPSHUFBITQMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u8=$YMMm;
          return 2973 << 16 | 6057;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPSHUFBITQMB_nzmz::VPSHUFBITQMB
          // VPSHUFBITQMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u8=$ZMMm;
          return 2974 << 16 | 6059;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPSHUFBITQMB_nomo::VPSHUFBITQMBmx
          // VPSHUFBITQMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u8=$mem128;
          return 2972 << 16 | 6056;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPSHUFBITQMB_nymy::VPSHUFBITQMBmy
          // VPSHUFBITQMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u8=$mem256;
          return 2973 << 16 | 6058;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPSHUFBITQMB_nzmz::VPSHUFBITQMBmz
          // VPSHUFBITQMB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u8=$mem512;
          return 2974 << 16 | 6060;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0x90 */
  case 912:
    if (c & 0x01)
    {
      if (c & 0x02)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPGATHERDQ::VPGATHERDQm
          // VPGATHERDQ VREG:rw:s64=$ZMMr PREG:rw:Z=$Kk MEM:r=$vmz SBCST:SUPP={FROM=1 TO=8} SWZ=$u_i64 EVH=$EVH;
          return 3432 << 16 | 7124;
        }
        else
        {
          // TEMPLATE.VPGATHERDD::VPGATHERDDm
          // VPGATHERDD VREG:rw:s32=$ZMMr PREG:rw:Z=$Kk MEM:r=$vmz SBCST:SUPP={FROM=1 TO=16} SWZ=$u_i32 EVH=$EVH;
          return 3431 << 16 | 7123;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPGATHERDx_rxmxnx::VPGATHERDQmq
            // VPGATHERDQ VREG:crw:u64=$YMMr MEM:r:u64=$vmx64 VREG:rw:s64=$YMMn;
            return 2783 << 16 | 5714;
          }
          else
          {
            // TEMPLATE.VPGATHERDx_rxmxnx::VPGATHERDDmd
            // VPGATHERDD VREG:crw:u32=$YMMr MEM:r:u32=$vmy32 VREG:rw:s32=$YMMn;
            return 2783 << 16 | 5712;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPGATHERDx_rxmxnx::VPGATHERDQmq
            // VPGATHERDQ VREG:crw:u64=$XMMr MEM:r:u64=$vmx64 VREG:rw:s64=$XMMn;
            return 2783 << 16 | 5713;
          }
          else
          {
            // TEMPLATE.VPGATHERDx_rxmxnx::VPGATHERDDmd
            // VPGATHERDD VREG:crw:u32=$XMMr MEM:r:u32=$vmx32 VREG:rw:s32=$XMMn;
            return 2783 << 16 | 5711;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPGATHERDx_rymx::VPGATHERDQmq
          // VPGATHERDQ VREG:w:u64=$YMMr   PREG:rw=$Kk      MEM:r:u64=$vmx64;
          return 2784 << 16 | 5716;
        }
        else
        {
          // TEMPLATE.VPGATHERDx_rymx::VPGATHERDDmd
          // VPGATHERDD VREG:w:u32=$YMMr   PREG:rw=$Kk      MEM:r:u32=$vmy32;
          return 2784 << 16 | 5715;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPGATHERDx_rzmx::VPGATHERDQmq
            // VPGATHERDQ VREG:w:u64=$ZMMr   PREG:rw=$Kk      MEM:r:u64=$vmy64;
            return 2785 << 16 | 5718;
          }
          else
          {
            // TEMPLATE.VPGATHERDx_rzmx::VPGATHERDDmd
            // VPGATHERDD VREG:w:u32=$ZMMr   PREG:rw=$Kk      MEM:r:u32=$vmz32;
            return 2785 << 16 | 5717;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPGATHERDx_romx::VPGATHERDQmq
            // VPGATHERDQ VREG:w:u64=$XMMr   PREG:rw=$Kk      MEM:r:u64=$vmx64;
            return 2782 << 16 | 5710;
          }
          else
          {
            // TEMPLATE.VPGATHERDx_romx::VPGATHERDDmd
            // VPGATHERDD VREG:w:u32=$XMMr   PREG:rw=$Kk      MEM:r:u32=$vmx32;
            return 2782 << 16 | 5709;
          }
        }
      }
    }
  break;
  /* 0f38.0x91 */
  case 913:
    if (b & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPGATHERQx_rxmxnx::VPGATHERQQmq
          // VPGATHERQQ VREG:crw:u64=$YMMr MEM:r:u64=$vmy64 VREG:rw:s64=$YMMn;
          return 2789 << 16 | 5728;
        }
        else
        {
          // TEMPLATE.VPGATHERQx_rxmxnx::VPGATHERQDmd
          // VPGATHERQD VREG:crw:u32=$XMMr MEM:r:u32=$vmy32 VREG:rw:s32=$XMMn;
          return 2789 << 16 | 5726;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPGATHERQx_rxmx_1::VPGATHERQQmq
          // VPGATHERQQ VREG:w:u64=$YMMr   PREG:rw=$Kk      MEM:r:u64=$vmy64;
          return 2787 << 16 | 5722;
        }
        else
        {
          // TEMPLATE.VPGATHERQx_rxmx_1::VPGATHERQDmd
          // VPGATHERQD VREG:w:u32=$XMMr   PREG:rw=$Kk      MEM:r:u32=$vmy32;
          return 2787 << 16 | 5721;
        }
      }
    }
    else
    {
      if (b & 0x02)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPGATHERQx_rxmx_2::VPGATHERQQmq
          // VPGATHERQQ VREG:w:u64=$ZMMr   PREG:rw=$Kk      MEM:r:u64=$vmz64;
          return 2788 << 16 | 5724;
        }
        else
        {
          // TEMPLATE.VPGATHERQx_rxmx_2::VPGATHERQDmd
          // VPGATHERQD VREG:w:u32=$YMMr   PREG:rw=$Kk      MEM:r:u32=$vmz32;
          return 2788 << 16 | 5723;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPGATHERQx_rxmxnx::VPGATHERQQmq
            // VPGATHERQQ VREG:crw:u64=$XMMr MEM:r:u64=$vmx64 VREG:rw:s64=$XMMn;
            return 2789 << 16 | 5727;
          }
          else
          {
            // TEMPLATE.VPGATHERQx_rxmxnx::VPGATHERQDmd
            // VPGATHERQD VREG:crw:u32=$XMMr MEM:r:u32=$vmx32 VREG:rw:s32=$XMMn;
            return 2789 << 16 | 5725;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPGATHERQx_romx::VPGATHERQQmq
            // VPGATHERQQ VREG:w:u64=$XMMr   PREG:rw=$Kk      MEM:r:u64=$vmx64;
            return 2786 << 16 | 5720;
          }
          else
          {
            // TEMPLATE.VPGATHERQx_romx::VPGATHERQDmd
            // VPGATHERQD VREG:w:u32=$XMMr   PREG:rw=$Kk      MEM:r:u32=$vmx32;
            return 2786 << 16 | 5719;
          }
        }
      }
    }
  break;
  /* 0f38.0x92 */
  case 914:
    if (c & 0x01)
    {
      if (c & 0x02)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGATHERDPD::VGATHERDPDm
          // VGATHERDPD VREG:rw:f64=$ZMMr PREG:rw:Z=$Kk MEM:r=$vmz SBCST:SUPP={FROM=1 TO=8} SWZ=$u_f64 EVH=$EVH;
          return 3356 << 16 | 6983;
        }
        else
        {
          // TEMPLATE.VGATHERDPS::VGATHERDPSm
          // VGATHERDPS VREG:rw:f32=$ZMMr PREG:rw:Z=$Kk MEM:r=$vmz SBCST:SUPP={FROM=1 TO=16} SWZ=$u_f32 EVH=$EVH;
          return 3357 << 16 | 6984;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGATHERDPx_rxmxnx::VGATHERDPDmq
            // VGATHERDPD VREG:crw:f64=$YMMr MEM:r:f64=$vmx64 VREG:rw:s64=$YMMn;
            return 2566 << 16 | 5210;
          }
          else
          {
            // TEMPLATE.VGATHERDPx_rxmxnx::VGATHERDPSmd
            // VGATHERDPS VREG:crw:f32=$YMMr MEM:r:f32=$vmy32 VREG:rw:s32=$YMMn;
            return 2566 << 16 | 5212;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGATHERDPx_rxmxnx::VGATHERDPDmq
            // VGATHERDPD VREG:crw:f64=$XMMr MEM:r:f64=$vmx64 VREG:rw:s64=$XMMn;
            return 2566 << 16 | 5209;
          }
          else
          {
            // TEMPLATE.VGATHERDPx_rxmxnx::VGATHERDPSmd
            // VGATHERDPS VREG:crw:f32=$XMMr MEM:r:f32=$vmx32 VREG:rw:s32=$XMMn;
            return 2566 << 16 | 5211;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGATHERDPx_rymx::VGATHERDPDmq
          // VGATHERDPD VREG:w:f64=$YMMr   PREG:rw=$Kk      MEM:r:f64=$vmx64;
          return 2567 << 16 | 5213;
        }
        else
        {
          // TEMPLATE.VGATHERDPx_rymx::VGATHERDPSmd
          // VGATHERDPS VREG:w:f32=$YMMr   PREG:rw=$Kk      MEM:r:f32=$vmy32;
          return 2567 << 16 | 5214;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGATHERDPx_rzmx::VGATHERDPDmq
            // VGATHERDPD VREG:w:f64=$ZMMr   PREG:rw=$Kk      MEM:r:f64=$vmy64;
            return 2568 << 16 | 5215;
          }
          else
          {
            // TEMPLATE.VGATHERDPx_rzmx::VGATHERDPSmd
            // VGATHERDPS VREG:w:f32=$ZMMr   PREG:rw=$Kk      MEM:r:f32=$vmz32;
            return 2568 << 16 | 5216;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGATHERDPx_romx::VGATHERDPDmq
            // VGATHERDPD VREG:w:f64=$XMMr   PREG:rw=$Kk      MEM:r:f64=$vmx64;
            return 2565 << 16 | 5207;
          }
          else
          {
            // TEMPLATE.VGATHERDPx_romx::VGATHERDPSmd
            // VGATHERDPS VREG:w:f32=$XMMr   PREG:rw=$Kk      MEM:r:f32=$vmx32;
            return 2565 << 16 | 5208;
          }
        }
      }
    }
  break;
  /* 0f38.0x93 */
  case 915:
    if (b & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGATHERQPx_rxmxnx::VGATHERQPDmq
          // VGATHERQPD VREG:crw:f64=$YMMr MEM:r:f64=$vmy64 VREG:rw:s64=$YMMn;
          return 2572 << 16 | 5224;
        }
        else
        {
          // TEMPLATE.VGATHERQPx_rxmxnx::VGATHERQPSmd
          // VGATHERQPS VREG:crw:f32=$XMMr MEM:r:f32=$vmy32 VREG:rw:s32=$XMMn;
          return 2572 << 16 | 5226;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGATHERQPx_rxmx_1::VGATHERQPDmq
          // VGATHERQPD VREG:w:f64=$YMMr   PREG:rw=$Kk      MEM:r:f64=$vmy64;
          return 2570 << 16 | 5219;
        }
        else
        {
          // TEMPLATE.VGATHERQPx_rxmx_1::VGATHERQPSmd
          // VGATHERQPS VREG:w:f32=$XMMr   PREG:rw=$Kk      MEM:r:f32=$vmy32;
          return 2570 << 16 | 5220;
        }
      }
    }
    else
    {
      if (b & 0x02)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGATHERQPx_rxmx_2::VGATHERQPDmq
          // VGATHERQPD VREG:w:f64=$ZMMr   PREG:rw=$Kk      MEM:r:f64=$vmz64;
          return 2571 << 16 | 5221;
        }
        else
        {
          // TEMPLATE.VGATHERQPx_rxmx_2::VGATHERQPSmd
          // VGATHERQPS VREG:w:f32=$YMMr   PREG:rw=$Kk      MEM:r:f32=$vmz32;
          return 2571 << 16 | 5222;
        }
      }
      else
      {
        if (c & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGATHERQPx_rxmxnx::VGATHERQPDmq
            // VGATHERQPD VREG:crw:f64=$XMMr MEM:r:f64=$vmx64 VREG:rw:s64=$XMMn;
            return 2572 << 16 | 5223;
          }
          else
          {
            // TEMPLATE.VGATHERQPx_rxmxnx::VGATHERQPSmd
            // VGATHERQPS VREG:crw:f32=$XMMr MEM:r:f32=$vmx32 VREG:rw:s32=$XMMn;
            return 2572 << 16 | 5225;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGATHERQPx_romx::VGATHERQPDmq
            // VGATHERQPD VREG:w:f64=$XMMr   PREG:rw=$Kk      MEM:r:f64=$vmx64;
            return 2569 << 16 | 5217;
          }
          else
          {
            // TEMPLATE.VGATHERQPx_romx::VGATHERQPSmd
            // VGATHERQPS VREG:w:f32=$XMMr   PREG:rw=$Kk      MEM:r:f32=$vmx32;
            return 2569 << 16 | 5218;
          }
        }
      }
    }
  break;
  /* invalid */
  case 916:
    return 0;
  /* invalid */
  case 917:
    return 0;
  /* 0f38.0x96 */
  case 918:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB132PD_rxnxmx::VFMADDSUB132PD
            // VFMADDSUB132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
            return 2366 << 16 | 4678;
          }
          else
          {
            // TEMPLATE.VFMADDSUB132PS_rxnxmx::VFMADDSUB132PS
            // VFMADDSUB132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
            return 2378 << 16 | 4711;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB132PD_rxnxmx::VFMADDSUB132PD
            // VFMADDSUB132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2366 << 16 | 4677;
          }
          else
          {
            // TEMPLATE.VFMADDSUB132PS_rxnxmx::VFMADDSUB132PS
            // VFMADDSUB132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2378 << 16 | 4710;
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB132PD_rznzmz::VFMADDSUB132PD
            // VFMADDSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2368 << 16 | 4683;
          }
          else
          {
            // TEMPLATE.VFMADDSUB132PS_rznzmz::VFMADDSUB132PS
            // VFMADDSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2380 << 16 | 4716;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADDSUB132PD_rynymy::VFMADDSUB132PD
              // VFMADDSUB132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2367 << 16 | 4681;
            }
            else
            {
              // TEMPLATE.VFMADDSUB132PS_rynymy::VFMADDSUB132PS
              // VFMADDSUB132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2379 << 16 | 4714;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADDSUB132PD_rznzmz::VFMADDSUB132PD
                // VFMADDSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2368 << 16 | 4684;
              }
              else
              {
                // TEMPLATE.VFMADDSUB132PS_rznzmz::VFMADDSUB132PS
                // VFMADDSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2380 << 16 | 4717;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADDSUB132PD_ronomo::VFMADDSUB132PD
                // VFMADDSUB132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2365 << 16 | 4675;
              }
              else
              {
                // TEMPLATE.VFMADDSUB132PS_ronomo::VFMADDSUB132PS
                // VFMADDSUB132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2377 << 16 | 4708;
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB132PD_rxnxmx::VFMADDSUB132PDmy
            // VFMADDSUB132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
            return 2366 << 16 | 4680;
          }
          else
          {
            // TEMPLATE.VFMADDSUB132PS_rxnxmx::VFMADDSUB132PSmy
            // VFMADDSUB132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
            return 2378 << 16 | 4713;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB132PD_rynymy::VFMADDSUB132PDmy
            // VFMADDSUB132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2367 << 16 | 4682;
          }
          else
          {
            // TEMPLATE.VFMADDSUB132PS_rynymy::VFMADDSUB132PSmy
            // VFMADDSUB132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2379 << 16 | 4715;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB132PD_rznzmz::VFMADDSUB132PDmz
            // VFMADDSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
            return 2368 << 16 | 4685;
          }
          else
          {
            // TEMPLATE.VFMADDSUB132PS_rznzmz::VFMADDSUB132PSmz
            // VFMADDSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
            return 2380 << 16 | 4718;
          }
        }
        else
        {
          if (c & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADDSUB132PD_rxnxmx::VFMADDSUB132PDmx
              // VFMADDSUB132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2366 << 16 | 4679;
            }
            else
            {
              // TEMPLATE.VFMADDSUB132PS_rxnxmx::VFMADDSUB132PSmx
              // VFMADDSUB132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2378 << 16 | 4712;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADDSUB132PD_ronomo::VFMADDSUB132PDmx
              // VFMADDSUB132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2365 << 16 | 4676;
            }
            else
            {
              // TEMPLATE.VFMADDSUB132PS_ronomo::VFMADDSUB132PSmx
              // VFMADDSUB132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2377 << 16 | 4709;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x97 */
  case 919:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD132PD_rxnxmx::VFMSUBADD132PD
            // VFMSUBADD132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
            return 2426 << 16 | 4840;
          }
          else
          {
            // TEMPLATE.VFMSUBADD132PS_rxnxmx::VFMSUBADD132PS
            // VFMSUBADD132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
            return 2438 << 16 | 4873;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD132PD_rxnxmx::VFMSUBADD132PD
            // VFMSUBADD132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2426 << 16 | 4839;
          }
          else
          {
            // TEMPLATE.VFMSUBADD132PS_rxnxmx::VFMSUBADD132PS
            // VFMSUBADD132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2438 << 16 | 4872;
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD132PD_rznzmz::VFMSUBADD132PD
            // VFMSUBADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2428 << 16 | 4845;
          }
          else
          {
            // TEMPLATE.VFMSUBADD132PS_rznzmz::VFMSUBADD132PS
            // VFMSUBADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2440 << 16 | 4878;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUBADD132PD_rynymy::VFMSUBADD132PD
              // VFMSUBADD132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2427 << 16 | 4843;
            }
            else
            {
              // TEMPLATE.VFMSUBADD132PS_rynymy::VFMSUBADD132PS
              // VFMSUBADD132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2439 << 16 | 4876;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUBADD132PD_rznzmz::VFMSUBADD132PD
                // VFMSUBADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2428 << 16 | 4846;
              }
              else
              {
                // TEMPLATE.VFMSUBADD132PS_rznzmz::VFMSUBADD132PS
                // VFMSUBADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2440 << 16 | 4879;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUBADD132PD_ronomo::VFMSUBADD132PD
                // VFMSUBADD132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2425 << 16 | 4837;
              }
              else
              {
                // TEMPLATE.VFMSUBADD132PS_ronomo::VFMSUBADD132PS
                // VFMSUBADD132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2437 << 16 | 4870;
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD132PD_rxnxmx::VFMSUBADD132PDmy
            // VFMSUBADD132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
            return 2426 << 16 | 4842;
          }
          else
          {
            // TEMPLATE.VFMSUBADD132PS_rxnxmx::VFMSUBADD132PSmy
            // VFMSUBADD132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
            return 2438 << 16 | 4875;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD132PD_rynymy::VFMSUBADD132PDmy
            // VFMSUBADD132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2427 << 16 | 4844;
          }
          else
          {
            // TEMPLATE.VFMSUBADD132PS_rynymy::VFMSUBADD132PSmy
            // VFMSUBADD132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2439 << 16 | 4877;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD132PD_rznzmz::VFMSUBADD132PDmz
            // VFMSUBADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
            return 2428 << 16 | 4847;
          }
          else
          {
            // TEMPLATE.VFMSUBADD132PS_rznzmz::VFMSUBADD132PSmz
            // VFMSUBADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
            return 2440 << 16 | 4880;
          }
        }
        else
        {
          if (c & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUBADD132PD_rxnxmx::VFMSUBADD132PDmx
              // VFMSUBADD132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2426 << 16 | 4841;
            }
            else
            {
              // TEMPLATE.VFMSUBADD132PS_rxnxmx::VFMSUBADD132PSmx
              // VFMSUBADD132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2438 << 16 | 4874;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUBADD132PD_ronomo::VFMSUBADD132PDmx
              // VFMSUBADD132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2425 << 16 | 4838;
            }
            else
            {
              // TEMPLATE.VFMSUBADD132PS_ronomo::VFMSUBADD132PSmx
              // VFMSUBADD132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2437 << 16 | 4871;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x98 */
  case 920:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD132PD_rznzmx::VFMADD132PD
              // VFMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3331 << 16 | 6909;
            }
            else
            {
              // TEMPLATE.VFMADD132PS_rznzmx::VFMADD132PS
              // VFMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3332 << 16 | 6912;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD132PD_rznzmx::VFMADD132PD
              // VFMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3331 << 16 | 6908;
            }
            else
            {
              // TEMPLATE.VFMADD132PS_rznzmx::VFMADD132PS
              // VFMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3332 << 16 | 6911;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD132PD_rxnxmx::VFMADD132PD
              // VFMADD132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2390 << 16 | 4744;
            }
            else
            {
              // TEMPLATE.VFMADD132PS_rxnxmx::VFMADD132PS
              // VFMADD132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2402 << 16 | 4777;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD132PD_rxnxmx::VFMADD132PD
              // VFMADD132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2390 << 16 | 4743;
            }
            else
            {
              // TEMPLATE.VFMADD132PS_rxnxmx::VFMADD132PS
              // VFMADD132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2402 << 16 | 4776;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD132PD_rznzmz::VFMADD132PD
            // VFMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2392 << 16 | 4749;
          }
          else
          {
            // TEMPLATE.VFMADD132PS_rznzmz::VFMADD132PS
            // VFMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2404 << 16 | 4782;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD132PD_rynymy::VFMADD132PD
              // VFMADD132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2391 << 16 | 4747;
            }
            else
            {
              // TEMPLATE.VFMADD132PS_rynymy::VFMADD132PS
              // VFMADD132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2403 << 16 | 4780;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADD132PD_rznzmz::VFMADD132PD
                // VFMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2392 << 16 | 4750;
              }
              else
              {
                // TEMPLATE.VFMADD132PS_rznzmz::VFMADD132PS
                // VFMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2404 << 16 | 4783;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADD132PD_ronomo::VFMADD132PD
                // VFMADD132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2389 << 16 | 4741;
              }
              else
              {
                // TEMPLATE.VFMADD132PS_ronomo::VFMADD132PS
                // VFMADD132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2401 << 16 | 4774;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD132PD_rznzmx::VFMADD132PDm
            // VFMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
            return 3331 << 16 | 6910;
          }
          else
          {
            // TEMPLATE.VFMADD132PS_rznzmx::VFMADD132PSm
            // VFMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
            return 3332 << 16 | 6913;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD132PD_rxnxmx::VFMADD132PDmy
              // VFMADD132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2390 << 16 | 4746;
            }
            else
            {
              // TEMPLATE.VFMADD132PS_rxnxmx::VFMADD132PSmy
              // VFMADD132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2402 << 16 | 4779;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD132PD_rxnxmx::VFMADD132PDmx
              // VFMADD132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2390 << 16 | 4745;
            }
            else
            {
              // TEMPLATE.VFMADD132PS_rxnxmx::VFMADD132PSmx
              // VFMADD132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2402 << 16 | 4778;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD132PD_rynymy::VFMADD132PDmy
            // VFMADD132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2391 << 16 | 4748;
          }
          else
          {
            // TEMPLATE.VFMADD132PS_rynymy::VFMADD132PSmy
            // VFMADD132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2403 << 16 | 4781;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD132PD_rznzmz::VFMADD132PDmz
              // VFMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
              return 2392 << 16 | 4751;
            }
            else
            {
              // TEMPLATE.VFMADD132PS_rznzmz::VFMADD132PSmz
              // VFMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
              return 2404 << 16 | 4784;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD132PD_ronomo::VFMADD132PDmx
              // VFMADD132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2389 << 16 | 4742;
            }
            else
            {
              // TEMPLATE.VFMADD132PS_ronomo::VFMADD132PSmx
              // VFMADD132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2401 << 16 | 4775;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x99 */
  case 921:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADD132SD_ronqmq::VFMADD132SD
          // VFMADD132SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2414 << 16 | 4810;
        }
        else
        {
          // TEMPLATE.VFMADD132SS_rondmd::VFMADD132SS
          // VFMADD132SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2419 << 16 | 4822;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD132SD_ronomx::VFMADD132SD
            // VFMADD132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2413 << 16 | 4808;
          }
          else
          {
            // TEMPLATE.VFMADD132SS_ronomx::VFMADD132SS
            // VFMADD132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2420 << 16 | 4825;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD132SD_ronomx::VFMADD132SD
            // VFMADD132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2413 << 16 | 4807;
          }
          else
          {
            // TEMPLATE.VFMADD132SS_ronomx::VFMADD132SS
            // VFMADD132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2420 << 16 | 4824;
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADD132SD_ronqmq::VFMADD132SDmq
          // VFMADD132SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2414 << 16 | 4811;
        }
        else
        {
          // TEMPLATE.VFMADD132SS_rondmd::VFMADD132SSmd
          // VFMADD132SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2419 << 16 | 4823;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADD132SD_ronomx::VFMADD132SDmq
          // VFMADD132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2413 << 16 | 4809;
        }
        else
        {
          // TEMPLATE.VFMADD132SS_ronomx::VFMADD132SSmd
          // VFMADD132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2420 << 16 | 4826;
        }
      }
    }
  break;
  /* 0f38.0x9a */
  case 922:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB132PD_rznzmx::VFMSUB132PD
              // VFMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3338 << 16 | 6930;
            }
            else
            {
              // TEMPLATE.VFMSUB132PS_rznzmx::VFMSUB132PS
              // VFMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3339 << 16 | 6933;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB132PD_rznzmx::VFMSUB132PD
              // VFMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3338 << 16 | 6929;
            }
            else
            {
              // TEMPLATE.VFMSUB132PS_rznzmx::VFMSUB132PS
              // VFMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3339 << 16 | 6932;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB132PD_rxnxmx::VFMSUB132PD
              // VFMSUB132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2450 << 16 | 4906;
            }
            else
            {
              // TEMPLATE.VFMSUB132PS_rxnxmx::VFMSUB132PS
              // VFMSUB132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2462 << 16 | 4939;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB132PD_rxnxmx::VFMSUB132PD
              // VFMSUB132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2450 << 16 | 4905;
            }
            else
            {
              // TEMPLATE.VFMSUB132PS_rxnxmx::VFMSUB132PS
              // VFMSUB132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2462 << 16 | 4938;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB132PD_rznzmz::VFMSUB132PD
            // VFMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2452 << 16 | 4911;
          }
          else
          {
            // TEMPLATE.VFMSUB132PS_rznzmz::VFMSUB132PS
            // VFMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2464 << 16 | 4944;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB132PD_rynymy::VFMSUB132PD
              // VFMSUB132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2451 << 16 | 4909;
            }
            else
            {
              // TEMPLATE.VFMSUB132PS_rynymy::VFMSUB132PS
              // VFMSUB132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2463 << 16 | 4942;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB132PD_rznzmz::VFMSUB132PD
                // VFMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2452 << 16 | 4912;
              }
              else
              {
                // TEMPLATE.VFMSUB132PS_rznzmz::VFMSUB132PS
                // VFMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2464 << 16 | 4945;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB132PD_ronomo::VFMSUB132PD
                // VFMSUB132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2449 << 16 | 4903;
              }
              else
              {
                // TEMPLATE.VFMSUB132PS_ronomo::VFMSUB132PS
                // VFMSUB132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2461 << 16 | 4936;
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // TEMPLATE.V4FMADDPS::V4FMADDPSmx
        // V4FMADDPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:f32=$mem128;
        return 3295 << 16 | 6824;
      }
      else
      {
        if (c & 0x01)
        {
          if (c & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB132PD_rznzmx::VFMSUB132PDm
              // VFMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
              return 3338 << 16 | 6931;
            }
            else
            {
              // TEMPLATE.VFMSUB132PS_rznzmx::VFMSUB132PSm
              // VFMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
              return 3339 << 16 | 6934;
            }
          }
          else
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB132PD_rxnxmx::VFMSUB132PDmy
                // VFMSUB132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
                return 2450 << 16 | 4908;
              }
              else
              {
                // TEMPLATE.VFMSUB132PS_rxnxmx::VFMSUB132PSmy
                // VFMSUB132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
                return 2462 << 16 | 4941;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB132PD_rxnxmx::VFMSUB132PDmx
                // VFMSUB132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
                return 2450 << 16 | 4907;
              }
              else
              {
                // TEMPLATE.VFMSUB132PS_rxnxmx::VFMSUB132PSmx
                // VFMSUB132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
                return 2462 << 16 | 4940;
              }
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB132PD_rynymy::VFMSUB132PDmy
              // VFMSUB132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
              return 2451 << 16 | 4910;
            }
            else
            {
              // TEMPLATE.VFMSUB132PS_rynymy::VFMSUB132PSmy
              // VFMSUB132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
              return 2463 << 16 | 4943;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB132PD_rznzmz::VFMSUB132PDmz
                // VFMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                return 2452 << 16 | 4913;
              }
              else
              {
                // TEMPLATE.VFMSUB132PS_rznzmz::VFMSUB132PSmz
                // VFMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                return 2464 << 16 | 4946;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB132PD_ronomo::VFMSUB132PDmx
                // VFMSUB132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                return 2449 << 16 | 4904;
              }
              else
              {
                // TEMPLATE.VFMSUB132PS_ronomo::VFMSUB132PSmx
                // VFMSUB132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                return 2461 << 16 | 4937;
              }
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x9b */
  case 923:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUB132SD_ronqmq::VFMSUB132SD
          // VFMSUB132SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2474 << 16 | 4972;
        }
        else
        {
          // TEMPLATE.VFMSUB132SS_rondmd::VFMSUB132SS
          // VFMSUB132SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2479 << 16 | 4984;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB132SD_ronomx::VFMSUB132SD
            // VFMSUB132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2473 << 16 | 4970;
          }
          else
          {
            // TEMPLATE.VFMSUB132SS_ronomx::VFMSUB132SS
            // VFMSUB132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2480 << 16 | 4987;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB132SD_ronomx::VFMSUB132SD
            // VFMSUB132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2473 << 16 | 4969;
          }
          else
          {
            // TEMPLATE.VFMSUB132SS_ronomx::VFMSUB132SS
            // VFMSUB132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2480 << 16 | 4986;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // TEMPLATE.V4FMADDSS::V4FMADDSSmx
        // V4FMADDSS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem128;
        return 3296 << 16 | 6825;
      }
      else
      {
        if (c & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB132SD_ronqmq::VFMSUB132SDmq
            // VFMSUB132SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 2474 << 16 | 4973;
          }
          else
          {
            // TEMPLATE.VFMSUB132SS_rondmd::VFMSUB132SSmd
            // VFMSUB132SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
            return 2479 << 16 | 4985;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB132SD_ronomx::VFMSUB132SDmq
            // VFMSUB132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 2473 << 16 | 4971;
          }
          else
          {
            // TEMPLATE.VFMSUB132SS_ronomx::VFMSUB132SSmd
            // VFMSUB132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
            return 2480 << 16 | 4988;
          }
        }
      }
    }
  break;
  /* 0f38.0x9c */
  case 924:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD132PD_rznzmx::VFNMADD132PD
              // VFNMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3344 << 16 | 6948;
            }
            else
            {
              // TEMPLATE.VFNMADD132PS_rznzmx::VFNMADD132PS
              // VFNMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3345 << 16 | 6951;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD132PD_rznzmx::VFNMADD132PD
              // VFNMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3344 << 16 | 6947;
            }
            else
            {
              // TEMPLATE.VFNMADD132PS_rznzmx::VFNMADD132PS
              // VFNMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3345 << 16 | 6950;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD132PD_rxnxmx::VFNMADD132PD
              // VFNMADD132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2486 << 16 | 5002;
            }
            else
            {
              // TEMPLATE.VFNMADD132PS_rxnxmx::VFNMADD132PS
              // VFNMADD132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2498 << 16 | 5035;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD132PD_rxnxmx::VFNMADD132PD
              // VFNMADD132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2486 << 16 | 5001;
            }
            else
            {
              // TEMPLATE.VFNMADD132PS_rxnxmx::VFNMADD132PS
              // VFNMADD132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2498 << 16 | 5034;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD132PD_rznzmz::VFNMADD132PD
            // VFNMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2488 << 16 | 5007;
          }
          else
          {
            // TEMPLATE.VFNMADD132PS_rznzmz::VFNMADD132PS
            // VFNMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2500 << 16 | 5040;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD132PD_rynymy::VFNMADD132PD
              // VFNMADD132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2487 << 16 | 5005;
            }
            else
            {
              // TEMPLATE.VFNMADD132PS_rynymy::VFNMADD132PS
              // VFNMADD132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2499 << 16 | 5038;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMADD132PD_rznzmz::VFNMADD132PD
                // VFNMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2488 << 16 | 5008;
              }
              else
              {
                // TEMPLATE.VFNMADD132PS_rznzmz::VFNMADD132PS
                // VFNMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2500 << 16 | 5041;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMADD132PD_ronomo::VFNMADD132PD
                // VFNMADD132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2485 << 16 | 4999;
              }
              else
              {
                // TEMPLATE.VFNMADD132PS_ronomo::VFNMADD132PS
                // VFNMADD132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2497 << 16 | 5032;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD132PD_rznzmx::VFNMADD132PDm
            // VFNMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
            return 3344 << 16 | 6949;
          }
          else
          {
            // TEMPLATE.VFNMADD132PS_rznzmx::VFNMADD132PSm
            // VFNMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
            return 3345 << 16 | 6952;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD132PD_rxnxmx::VFNMADD132PDmy
              // VFNMADD132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2486 << 16 | 5004;
            }
            else
            {
              // TEMPLATE.VFNMADD132PS_rxnxmx::VFNMADD132PSmy
              // VFNMADD132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2498 << 16 | 5037;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD132PD_rxnxmx::VFNMADD132PDmx
              // VFNMADD132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2486 << 16 | 5003;
            }
            else
            {
              // TEMPLATE.VFNMADD132PS_rxnxmx::VFNMADD132PSmx
              // VFNMADD132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2498 << 16 | 5036;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD132PD_rynymy::VFNMADD132PDmy
            // VFNMADD132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2487 << 16 | 5006;
          }
          else
          {
            // TEMPLATE.VFNMADD132PS_rynymy::VFNMADD132PSmy
            // VFNMADD132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2499 << 16 | 5039;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD132PD_rznzmz::VFNMADD132PDmz
              // VFNMADD132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
              return 2488 << 16 | 5009;
            }
            else
            {
              // TEMPLATE.VFNMADD132PS_rznzmz::VFNMADD132PSmz
              // VFNMADD132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
              return 2500 << 16 | 5042;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD132PD_ronomo::VFNMADD132PDmx
              // VFNMADD132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2485 << 16 | 5000;
            }
            else
            {
              // TEMPLATE.VFNMADD132PS_ronomo::VFNMADD132PSmx
              // VFNMADD132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2497 << 16 | 5033;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x9d */
  case 925:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADD132SD_ronqmq::VFNMADD132SD
          // VFNMADD132SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2510 << 16 | 5068;
        }
        else
        {
          // TEMPLATE.VFNMADD132SS_rondmd::VFNMADD132SS
          // VFNMADD132SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2515 << 16 | 5080;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD132SD_ronomx::VFNMADD132SD
            // VFNMADD132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2509 << 16 | 5066;
          }
          else
          {
            // TEMPLATE.VFNMADD132SS_ronomx::VFNMADD132SS
            // VFNMADD132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2516 << 16 | 5083;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD132SD_ronomx::VFNMADD132SD
            // VFNMADD132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2509 << 16 | 5065;
          }
          else
          {
            // TEMPLATE.VFNMADD132SS_ronomx::VFNMADD132SS
            // VFNMADD132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2516 << 16 | 5082;
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADD132SD_ronqmq::VFNMADD132SDmq
          // VFNMADD132SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2510 << 16 | 5069;
        }
        else
        {
          // TEMPLATE.VFNMADD132SS_rondmd::VFNMADD132SSmd
          // VFNMADD132SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2515 << 16 | 5081;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADD132SD_ronomx::VFNMADD132SDmq
          // VFNMADD132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2509 << 16 | 5067;
        }
        else
        {
          // TEMPLATE.VFNMADD132SS_ronomx::VFNMADD132SSmd
          // VFNMADD132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2516 << 16 | 5084;
        }
      }
    }
  break;
  /* 0f38.0x9e */
  case 926:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB132PD_rznzmx::VFNMSUB132PD
              // VFNMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3350 << 16 | 6966;
            }
            else
            {
              // TEMPLATE.VFNMSUB132PS_rznzmx::VFNMSUB132PS
              // VFNMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3351 << 16 | 6969;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB132PD_rznzmx::VFNMSUB132PD
              // VFNMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3350 << 16 | 6965;
            }
            else
            {
              // TEMPLATE.VFNMSUB132PS_rznzmx::VFNMSUB132PS
              // VFNMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3351 << 16 | 6968;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB132PD_rxnxmx::VFNMSUB132PD
              // VFNMSUB132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2522 << 16 | 5098;
            }
            else
            {
              // TEMPLATE.VFNMSUB132PS_rxnxmx::VFNMSUB132PS
              // VFNMSUB132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2534 << 16 | 5131;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB132PD_rxnxmx::VFNMSUB132PD
              // VFNMSUB132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2522 << 16 | 5097;
            }
            else
            {
              // TEMPLATE.VFNMSUB132PS_rxnxmx::VFNMSUB132PS
              // VFNMSUB132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2534 << 16 | 5130;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB132PD_rznzmz::VFNMSUB132PD
            // VFNMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2524 << 16 | 5103;
          }
          else
          {
            // TEMPLATE.VFNMSUB132PS_rznzmz::VFNMSUB132PS
            // VFNMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2536 << 16 | 5136;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB132PD_rynymy::VFNMSUB132PD
              // VFNMSUB132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2523 << 16 | 5101;
            }
            else
            {
              // TEMPLATE.VFNMSUB132PS_rynymy::VFNMSUB132PS
              // VFNMSUB132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2535 << 16 | 5134;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMSUB132PD_rznzmz::VFNMSUB132PD
                // VFNMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2524 << 16 | 5104;
              }
              else
              {
                // TEMPLATE.VFNMSUB132PS_rznzmz::VFNMSUB132PS
                // VFNMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2536 << 16 | 5137;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMSUB132PD_ronomo::VFNMSUB132PD
                // VFNMSUB132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2521 << 16 | 5095;
              }
              else
              {
                // TEMPLATE.VFNMSUB132PS_ronomo::VFNMSUB132PS
                // VFNMSUB132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2533 << 16 | 5128;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB132PD_rznzmx::VFNMSUB132PDm
            // VFNMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
            return 3350 << 16 | 6967;
          }
          else
          {
            // TEMPLATE.VFNMSUB132PS_rznzmx::VFNMSUB132PSm
            // VFNMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
            return 3351 << 16 | 6970;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB132PD_rxnxmx::VFNMSUB132PDmy
              // VFNMSUB132PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2522 << 16 | 5100;
            }
            else
            {
              // TEMPLATE.VFNMSUB132PS_rxnxmx::VFNMSUB132PSmy
              // VFNMSUB132PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2534 << 16 | 5133;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB132PD_rxnxmx::VFNMSUB132PDmx
              // VFNMSUB132PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2522 << 16 | 5099;
            }
            else
            {
              // TEMPLATE.VFNMSUB132PS_rxnxmx::VFNMSUB132PSmx
              // VFNMSUB132PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2534 << 16 | 5132;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB132PD_rynymy::VFNMSUB132PDmy
            // VFNMSUB132PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2523 << 16 | 5102;
          }
          else
          {
            // TEMPLATE.VFNMSUB132PS_rynymy::VFNMSUB132PSmy
            // VFNMSUB132PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2535 << 16 | 5135;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB132PD_rznzmz::VFNMSUB132PDmz
              // VFNMSUB132PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
              return 2524 << 16 | 5105;
            }
            else
            {
              // TEMPLATE.VFNMSUB132PS_rznzmz::VFNMSUB132PSmz
              // VFNMSUB132PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
              return 2536 << 16 | 5138;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB132PD_ronomo::VFNMSUB132PDmx
              // VFNMSUB132PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2521 << 16 | 5096;
            }
            else
            {
              // TEMPLATE.VFNMSUB132PS_ronomo::VFNMSUB132PSmx
              // VFNMSUB132PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2533 << 16 | 5129;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0x9f */
  case 927:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUB132SD_ronqmq::VFNMSUB132SD
          // VFNMSUB132SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2546 << 16 | 5164;
        }
        else
        {
          // TEMPLATE.VFNMSUB132SS_rondmd::VFNMSUB132SS
          // VFNMSUB132SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2551 << 16 | 5176;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB132SD_ronomx::VFNMSUB132SD
            // VFNMSUB132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2545 << 16 | 5162;
          }
          else
          {
            // TEMPLATE.VFNMSUB132SS_ronomx::VFNMSUB132SS
            // VFNMSUB132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2552 << 16 | 5179;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB132SD_ronomx::VFNMSUB132SD
            // VFNMSUB132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2545 << 16 | 5161;
          }
          else
          {
            // TEMPLATE.VFNMSUB132SS_ronomx::VFNMSUB132SS
            // VFNMSUB132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2552 << 16 | 5178;
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUB132SD_ronqmq::VFNMSUB132SDmq
          // VFNMSUB132SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2546 << 16 | 5165;
        }
        else
        {
          // TEMPLATE.VFNMSUB132SS_rondmd::VFNMSUB132SSmd
          // VFNMSUB132SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2551 << 16 | 5177;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUB132SD_ronomx::VFNMSUB132SDmq
          // VFNMSUB132SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2545 << 16 | 5163;
        }
        else
        {
          // TEMPLATE.VFNMSUB132SS_ronomx::VFNMSUB132SSmd
          // VFNMSUB132SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2552 << 16 | 5180;
        }
      }
    }
  break;
  /* 0f38.0xa0 */
  case 928:
    if (c & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSCATTERDQ::VPSCATTERDQm
        // VPSCATTERDQ MEM:w=$vmz SBCST:SUPP={FROM=1 TO=8} PREG:rw:Z=$Kk VREG:r:s64=$ZMMr SWZ=$d_i64 EVH=$EVH;
        return 3463 << 16 | 7181;
      }
      else
      {
        // TEMPLATE.VPSCATTERDD::VPSCATTERDDm
        // VPSCATTERDD MEM:w=$vmz SBCST:SUPP={FROM=1 TO=16} PREG:rw:Z=$Kk VREG:r:s32=$ZMMr SWZ=$d_i32 EVH=$EVH;
        return 3462 << 16 | 7180;
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPSCATTERDx_mxry::VPSCATTERDQmq
          // VPSCATTERDQ MEM:w:u64=$vmx64 PREG:rw=$Kk VREG:r:u64=$YMMr;
          return 2943 << 16 | 5974;
        }
        else
        {
          // TEMPLATE.VPSCATTERDx_mxry::VPSCATTERDDmd
          // VPSCATTERDD MEM:w:u32=$vmy32 PREG:rw=$Kk VREG:r:u32=$YMMr;
          return 2943 << 16 | 5973;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSCATTERDx_mxrz::VPSCATTERDQmq
            // VPSCATTERDQ MEM:w:u64=$vmy64 PREG:rw=$Kk VREG:r:u64=$ZMMr;
            return 2944 << 16 | 5976;
          }
          else
          {
            // TEMPLATE.VPSCATTERDx_mxrz::VPSCATTERDDmd
            // VPSCATTERDD MEM:w:u32=$vmz32 PREG:rw=$Kk VREG:r:u32=$ZMMr;
            return 2944 << 16 | 5975;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSCATTERDx_mxro::VPSCATTERDQmq
            // VPSCATTERDQ MEM:w:u64=$vmx64 PREG:rw=$Kk VREG:r:u64=$XMMr;
            return 2942 << 16 | 5972;
          }
          else
          {
            // TEMPLATE.VPSCATTERDx_mxro::VPSCATTERDDmd
            // VPSCATTERDD MEM:w:u32=$vmx32 PREG:rw=$Kk VREG:r:u32=$XMMr;
            return 2942 << 16 | 5971;
          }
        }
      }
    }
  break;
  /* 0f38.0xa1 */
  case 929:
    if (b & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSCATTERQx_mxrx_1::VPSCATTERQQmq
        // VPSCATTERQQ MEM:w:u64=$vmy64 PREG:rw=$Kk VREG:r:u64=$YMMr;
        return 2946 << 16 | 5980;
      }
      else
      {
        // TEMPLATE.VPSCATTERQx_mxrx_1::VPSCATTERQDmd
        // VPSCATTERQD MEM:w:u32=$vmy32 PREG:rw=$Kk VREG:r:u32=$XMMr;
        return 2946 << 16 | 5979;
      }
    }
    else
    {
      if (b & 0x02)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPSCATTERQx_mxrx_2::VPSCATTERQQmq
          // VPSCATTERQQ MEM:w:u64=$vmz64 PREG:rw=$Kk VREG:r:u64=$ZMMr;
          return 2947 << 16 | 5982;
        }
        else
        {
          // TEMPLATE.VPSCATTERQx_mxrx_2::VPSCATTERQDmd
          // VPSCATTERQD MEM:w:u32=$vmz32 PREG:rw=$Kk VREG:r:u32=$YMMr;
          return 2947 << 16 | 5981;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPSCATTERQx_mxro::VPSCATTERQQmq
          // VPSCATTERQQ MEM:w:u64=$vmx64 PREG:rw=$Kk VREG:r:u64=$XMMr;
          return 2945 << 16 | 5978;
        }
        else
        {
          // TEMPLATE.VPSCATTERQx_mxro::VPSCATTERQDmd
          // VPSCATTERQD MEM:w:u32=$vmx32 PREG:rw=$Kk VREG:r:u32=$XMMr;
          return 2945 << 16 | 5977;
        }
      }
    }
  break;
  /* 0f38.0xa2 */
  case 930:
    if (c & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VSCATTERDPD::VSCATTERDPDm
        // VSCATTERDPD MEM:w=$vmz SBCST:SUPP={FROM=1 TO=8} PREG:rw:Z=$Kk VREG:r:f64=$ZMMr SWZ=$d_f64 EVH=$EVH;
        return 3491 << 16 | 7263;
      }
      else
      {
        // TEMPLATE.VSCATTERDPS::VSCATTERDPSm
        // VSCATTERDPS MEM:w=$vmz SBCST:SUPP={FROM=1 TO=16} PREG:rw:Z=$Kk VREG:r:f32=$ZMMr SWZ=$d_f32 EVH=$EVH;
        return 3492 << 16 | 7264;
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSCATTERDPx_mxry::VSCATTERDPDmq
          // VSCATTERDPD MEM:w:f64=$vmx64 PREG:rw=$Kk VREG:r:f64=$YMMr;
          return 3060 << 16 | 6309;
        }
        else
        {
          // TEMPLATE.VSCATTERDPx_mxry::VSCATTERDPSmd
          // VSCATTERDPS MEM:w:f32=$vmy32 PREG:rw=$Kk VREG:r:f32=$YMMr;
          return 3060 << 16 | 6310;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VSCATTERDPx_mxrz::VSCATTERDPDmq
            // VSCATTERDPD MEM:w:f64=$vmy64 PREG:rw=$Kk VREG:r:f64=$ZMMr;
            return 3061 << 16 | 6311;
          }
          else
          {
            // TEMPLATE.VSCATTERDPx_mxrz::VSCATTERDPSmd
            // VSCATTERDPS MEM:w:f32=$vmz32 PREG:rw=$Kk VREG:r:f32=$ZMMr;
            return 3061 << 16 | 6312;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VSCATTERDPx_mxro::VSCATTERDPDmq
            // VSCATTERDPD MEM:w:f64=$vmx64 PREG:rw=$Kk VREG:r:f64=$XMMr;
            return 3059 << 16 | 6307;
          }
          else
          {
            // TEMPLATE.VSCATTERDPx_mxro::VSCATTERDPSmd
            // VSCATTERDPS MEM:w:f32=$vmx32 PREG:rw=$Kk VREG:r:f32=$XMMr;
            return 3059 << 16 | 6308;
          }
        }
      }
    }
  break;
  /* 0f38.0xa3 */
  case 931:
    if (b & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VSCATTERQPx_mxrx_1::VSCATTERQPDmq
        // VSCATTERQPD MEM:w:f64=$vmy64 PREG:rw=$Kk VREG:r:f64=$YMMr;
        return 3063 << 16 | 6315;
      }
      else
      {
        // TEMPLATE.VSCATTERQPx_mxrx_1::VSCATTERQPSmd
        // VSCATTERQPS MEM:w:f32=$vmy32 PREG:rw=$Kk VREG:r:f32=$XMMr;
        return 3063 << 16 | 6316;
      }
    }
    else
    {
      if (b & 0x02)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSCATTERQPx_mxrx_2::VSCATTERQPDmq
          // VSCATTERQPD MEM:w:f64=$vmz64 PREG:rw=$Kk VREG:r:f64=$ZMMr;
          return 3064 << 16 | 6317;
        }
        else
        {
          // TEMPLATE.VSCATTERQPx_mxrx_2::VSCATTERQPSmd
          // VSCATTERQPS MEM:w:f32=$vmz32 PREG:rw=$Kk VREG:r:f32=$YMMr;
          return 3064 << 16 | 6318;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSCATTERQPx_mxro::VSCATTERQPDmq
          // VSCATTERQPD MEM:w:f64=$vmx64 PREG:rw=$Kk VREG:r:f64=$XMMr;
          return 3062 << 16 | 6313;
        }
        else
        {
          // TEMPLATE.VSCATTERQPx_mxro::VSCATTERQPSmd
          // VSCATTERQPS MEM:w:f32=$vmx32 PREG:rw=$Kk VREG:r:f32=$XMMr;
          return 3062 << 16 | 6314;
        }
      }
    }
  break;
  /* 0f38.0xa4 */
  case 932:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VFMADD233PS::VFMADD233PS
        // VFMADD233PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
        return 3337 << 16 | 6927;
      }
      else
      {
        // TEMPLATE.VFMADD233PS::VFMADD233PS
        // VFMADD233PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
        return 3337 << 16 | 6926;
      }
    }
    else
    {
      // TEMPLATE.VFMADD233PS::VFMADD233PSm
      // VFMADD233PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_mf32 EVH=$EVH;
      return 3337 << 16 | 6928;
    }
  break;
  /* invalid */
  case 933:
    return 0;
  /* 0f38.0xa6 */
  case 934:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB213PD_rxnxmx::VFMADDSUB213PD
            // VFMADDSUB213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
            return 2370 << 16 | 4689;
          }
          else
          {
            // TEMPLATE.VFMADDSUB213PS_rxnxmx::VFMADDSUB213PS
            // VFMADDSUB213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
            return 2382 << 16 | 4722;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB213PD_rxnxmx::VFMADDSUB213PD
            // VFMADDSUB213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2370 << 16 | 4688;
          }
          else
          {
            // TEMPLATE.VFMADDSUB213PS_rxnxmx::VFMADDSUB213PS
            // VFMADDSUB213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2382 << 16 | 4721;
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB213PD_rznzmz::VFMADDSUB213PD
            // VFMADDSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2372 << 16 | 4694;
          }
          else
          {
            // TEMPLATE.VFMADDSUB213PS_rznzmz::VFMADDSUB213PS
            // VFMADDSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2384 << 16 | 4727;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADDSUB213PD_rynymy::VFMADDSUB213PD
              // VFMADDSUB213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2371 << 16 | 4692;
            }
            else
            {
              // TEMPLATE.VFMADDSUB213PS_rynymy::VFMADDSUB213PS
              // VFMADDSUB213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2383 << 16 | 4725;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADDSUB213PD_rznzmz::VFMADDSUB213PD
                // VFMADDSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2372 << 16 | 4695;
              }
              else
              {
                // TEMPLATE.VFMADDSUB213PS_rznzmz::VFMADDSUB213PS
                // VFMADDSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2384 << 16 | 4728;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADDSUB213PD_ronomo::VFMADDSUB213PD
                // VFMADDSUB213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2369 << 16 | 4686;
              }
              else
              {
                // TEMPLATE.VFMADDSUB213PS_ronomo::VFMADDSUB213PS
                // VFMADDSUB213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2381 << 16 | 4719;
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB213PD_rxnxmx::VFMADDSUB213PDmy
            // VFMADDSUB213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
            return 2370 << 16 | 4691;
          }
          else
          {
            // TEMPLATE.VFMADDSUB213PS_rxnxmx::VFMADDSUB213PSmy
            // VFMADDSUB213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
            return 2382 << 16 | 4724;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB213PD_rynymy::VFMADDSUB213PDmy
            // VFMADDSUB213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2371 << 16 | 4693;
          }
          else
          {
            // TEMPLATE.VFMADDSUB213PS_rynymy::VFMADDSUB213PSmy
            // VFMADDSUB213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2383 << 16 | 4726;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB213PD_rznzmz::VFMADDSUB213PDmz
            // VFMADDSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
            return 2372 << 16 | 4696;
          }
          else
          {
            // TEMPLATE.VFMADDSUB213PS_rznzmz::VFMADDSUB213PSmz
            // VFMADDSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
            return 2384 << 16 | 4729;
          }
        }
        else
        {
          if (c & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADDSUB213PD_rxnxmx::VFMADDSUB213PDmx
              // VFMADDSUB213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2370 << 16 | 4690;
            }
            else
            {
              // TEMPLATE.VFMADDSUB213PS_rxnxmx::VFMADDSUB213PSmx
              // VFMADDSUB213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2382 << 16 | 4723;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADDSUB213PD_ronomo::VFMADDSUB213PDmx
              // VFMADDSUB213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2369 << 16 | 4687;
            }
            else
            {
              // TEMPLATE.VFMADDSUB213PS_ronomo::VFMADDSUB213PSmx
              // VFMADDSUB213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2381 << 16 | 4720;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xa7 */
  case 935:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD213PD_rxnxmx::VFMSUBADD213PD
            // VFMSUBADD213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
            return 2430 << 16 | 4851;
          }
          else
          {
            // TEMPLATE.VFMSUBADD213PS_rxnxmx::VFMSUBADD213PS
            // VFMSUBADD213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
            return 2442 << 16 | 4884;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD213PD_rxnxmx::VFMSUBADD213PD
            // VFMSUBADD213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2430 << 16 | 4850;
          }
          else
          {
            // TEMPLATE.VFMSUBADD213PS_rxnxmx::VFMSUBADD213PS
            // VFMSUBADD213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2442 << 16 | 4883;
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD213PD_rznzmz::VFMSUBADD213PD
            // VFMSUBADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2432 << 16 | 4856;
          }
          else
          {
            // TEMPLATE.VFMSUBADD213PS_rznzmz::VFMSUBADD213PS
            // VFMSUBADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2444 << 16 | 4889;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUBADD213PD_rynymy::VFMSUBADD213PD
              // VFMSUBADD213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2431 << 16 | 4854;
            }
            else
            {
              // TEMPLATE.VFMSUBADD213PS_rynymy::VFMSUBADD213PS
              // VFMSUBADD213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2443 << 16 | 4887;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUBADD213PD_rznzmz::VFMSUBADD213PD
                // VFMSUBADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2432 << 16 | 4857;
              }
              else
              {
                // TEMPLATE.VFMSUBADD213PS_rznzmz::VFMSUBADD213PS
                // VFMSUBADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2444 << 16 | 4890;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUBADD213PD_ronomo::VFMSUBADD213PD
                // VFMSUBADD213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2429 << 16 | 4848;
              }
              else
              {
                // TEMPLATE.VFMSUBADD213PS_ronomo::VFMSUBADD213PS
                // VFMSUBADD213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2441 << 16 | 4881;
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD213PD_rxnxmx::VFMSUBADD213PDmy
            // VFMSUBADD213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
            return 2430 << 16 | 4853;
          }
          else
          {
            // TEMPLATE.VFMSUBADD213PS_rxnxmx::VFMSUBADD213PSmy
            // VFMSUBADD213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
            return 2442 << 16 | 4886;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD213PD_rynymy::VFMSUBADD213PDmy
            // VFMSUBADD213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2431 << 16 | 4855;
          }
          else
          {
            // TEMPLATE.VFMSUBADD213PS_rynymy::VFMSUBADD213PSmy
            // VFMSUBADD213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2443 << 16 | 4888;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD213PD_rznzmz::VFMSUBADD213PDmz
            // VFMSUBADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
            return 2432 << 16 | 4858;
          }
          else
          {
            // TEMPLATE.VFMSUBADD213PS_rznzmz::VFMSUBADD213PSmz
            // VFMSUBADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
            return 2444 << 16 | 4891;
          }
        }
        else
        {
          if (c & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUBADD213PD_rxnxmx::VFMSUBADD213PDmx
              // VFMSUBADD213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2430 << 16 | 4852;
            }
            else
            {
              // TEMPLATE.VFMSUBADD213PS_rxnxmx::VFMSUBADD213PSmx
              // VFMSUBADD213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2442 << 16 | 4885;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUBADD213PD_ronomo::VFMSUBADD213PDmx
              // VFMSUBADD213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2429 << 16 | 4849;
            }
            else
            {
              // TEMPLATE.VFMSUBADD213PS_ronomo::VFMSUBADD213PSmx
              // VFMSUBADD213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2441 << 16 | 4882;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xa8 */
  case 936:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD213PD_rznzmx::VFMADD213PD
              // VFMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3333 << 16 | 6915;
            }
            else
            {
              // TEMPLATE.VFMADD213PS_rznzmx::VFMADD213PS
              // VFMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3334 << 16 | 6918;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD213PD_rznzmx::VFMADD213PD
              // VFMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3333 << 16 | 6914;
            }
            else
            {
              // TEMPLATE.VFMADD213PS_rznzmx::VFMADD213PS
              // VFMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3334 << 16 | 6917;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD213PD_rxnxmx::VFMADD213PD
              // VFMADD213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2394 << 16 | 4755;
            }
            else
            {
              // TEMPLATE.VFMADD213PS_rxnxmx::VFMADD213PS
              // VFMADD213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2406 << 16 | 4788;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD213PD_rxnxmx::VFMADD213PD
              // VFMADD213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2394 << 16 | 4754;
            }
            else
            {
              // TEMPLATE.VFMADD213PS_rxnxmx::VFMADD213PS
              // VFMADD213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2406 << 16 | 4787;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD213PD_rznzmz::VFMADD213PD
            // VFMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2396 << 16 | 4760;
          }
          else
          {
            // TEMPLATE.VFMADD213PS_rznzmz::VFMADD213PS
            // VFMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2408 << 16 | 4793;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD213PD_rynymy::VFMADD213PD
              // VFMADD213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2395 << 16 | 4758;
            }
            else
            {
              // TEMPLATE.VFMADD213PS_rynymy::VFMADD213PS
              // VFMADD213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2407 << 16 | 4791;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADD213PD_rznzmz::VFMADD213PD
                // VFMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2396 << 16 | 4761;
              }
              else
              {
                // TEMPLATE.VFMADD213PS_rznzmz::VFMADD213PS
                // VFMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2408 << 16 | 4794;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADD213PD_ronomo::VFMADD213PD
                // VFMADD213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2393 << 16 | 4752;
              }
              else
              {
                // TEMPLATE.VFMADD213PS_ronomo::VFMADD213PS
                // VFMADD213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2405 << 16 | 4785;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD213PD_rznzmx::VFMADD213PDm
            // VFMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
            return 3333 << 16 | 6916;
          }
          else
          {
            // TEMPLATE.VFMADD213PS_rznzmx::VFMADD213PSm
            // VFMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
            return 3334 << 16 | 6919;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD213PD_rxnxmx::VFMADD213PDmy
              // VFMADD213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2394 << 16 | 4757;
            }
            else
            {
              // TEMPLATE.VFMADD213PS_rxnxmx::VFMADD213PSmy
              // VFMADD213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2406 << 16 | 4790;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD213PD_rxnxmx::VFMADD213PDmx
              // VFMADD213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2394 << 16 | 4756;
            }
            else
            {
              // TEMPLATE.VFMADD213PS_rxnxmx::VFMADD213PSmx
              // VFMADD213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2406 << 16 | 4789;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD213PD_rynymy::VFMADD213PDmy
            // VFMADD213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2395 << 16 | 4759;
          }
          else
          {
            // TEMPLATE.VFMADD213PS_rynymy::VFMADD213PSmy
            // VFMADD213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2407 << 16 | 4792;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD213PD_rznzmz::VFMADD213PDmz
              // VFMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
              return 2396 << 16 | 4762;
            }
            else
            {
              // TEMPLATE.VFMADD213PS_rznzmz::VFMADD213PSmz
              // VFMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
              return 2408 << 16 | 4795;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD213PD_ronomo::VFMADD213PDmx
              // VFMADD213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2393 << 16 | 4753;
            }
            else
            {
              // TEMPLATE.VFMADD213PS_ronomo::VFMADD213PSmx
              // VFMADD213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2405 << 16 | 4786;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xa9 */
  case 937:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADD213SD_ronqmq::VFMADD213SD
          // VFMADD213SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2416 << 16 | 4815;
        }
        else
        {
          // TEMPLATE.VFMADD213SS_rondmd::VFMADD213SS
          // VFMADD213SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2421 << 16 | 4827;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD213SD_ronomx::VFMADD213SD
            // VFMADD213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2415 << 16 | 4813;
          }
          else
          {
            // TEMPLATE.VFMADD213SS_ronomx::VFMADD213SS
            // VFMADD213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2422 << 16 | 4830;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD213SD_ronomx::VFMADD213SD
            // VFMADD213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2415 << 16 | 4812;
          }
          else
          {
            // TEMPLATE.VFMADD213SS_ronomx::VFMADD213SS
            // VFMADD213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2422 << 16 | 4829;
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADD213SD_ronqmq::VFMADD213SDmq
          // VFMADD213SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2416 << 16 | 4816;
        }
        else
        {
          // TEMPLATE.VFMADD213SS_rondmd::VFMADD213SSmd
          // VFMADD213SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2421 << 16 | 4828;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADD213SD_ronomx::VFMADD213SDmq
          // VFMADD213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2415 << 16 | 4814;
        }
        else
        {
          // TEMPLATE.VFMADD213SS_ronomx::VFMADD213SSmd
          // VFMADD213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2422 << 16 | 4831;
        }
      }
    }
  break;
  /* 0f38.0xaa */
  case 938:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB213PD_rznzmx::VFMSUB213PD
              // VFMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3340 << 16 | 6936;
            }
            else
            {
              // TEMPLATE.VFMSUB213PS_rznzmx::VFMSUB213PS
              // VFMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3341 << 16 | 6939;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB213PD_rznzmx::VFMSUB213PD
              // VFMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3340 << 16 | 6935;
            }
            else
            {
              // TEMPLATE.VFMSUB213PS_rznzmx::VFMSUB213PS
              // VFMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3341 << 16 | 6938;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB213PD_rxnxmx::VFMSUB213PD
              // VFMSUB213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2454 << 16 | 4917;
            }
            else
            {
              // TEMPLATE.VFMSUB213PS_rxnxmx::VFMSUB213PS
              // VFMSUB213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2466 << 16 | 4950;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB213PD_rxnxmx::VFMSUB213PD
              // VFMSUB213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2454 << 16 | 4916;
            }
            else
            {
              // TEMPLATE.VFMSUB213PS_rxnxmx::VFMSUB213PS
              // VFMSUB213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2466 << 16 | 4949;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB213PD_rznzmz::VFMSUB213PD
            // VFMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2456 << 16 | 4922;
          }
          else
          {
            // TEMPLATE.VFMSUB213PS_rznzmz::VFMSUB213PS
            // VFMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2468 << 16 | 4955;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB213PD_rynymy::VFMSUB213PD
              // VFMSUB213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2455 << 16 | 4920;
            }
            else
            {
              // TEMPLATE.VFMSUB213PS_rynymy::VFMSUB213PS
              // VFMSUB213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2467 << 16 | 4953;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB213PD_rznzmz::VFMSUB213PD
                // VFMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2456 << 16 | 4923;
              }
              else
              {
                // TEMPLATE.VFMSUB213PS_rznzmz::VFMSUB213PS
                // VFMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2468 << 16 | 4956;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB213PD_ronomo::VFMSUB213PD
                // VFMSUB213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2453 << 16 | 4914;
              }
              else
              {
                // TEMPLATE.VFMSUB213PS_ronomo::VFMSUB213PS
                // VFMSUB213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2465 << 16 | 4947;
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // TEMPLATE.V4FNMADDPS::V4FNMADDPSmx
        // V4FNMADDPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:f32=$mem128;
        return 3297 << 16 | 6826;
      }
      else
      {
        if (c & 0x01)
        {
          if (c & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB213PD_rznzmx::VFMSUB213PDm
              // VFMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
              return 3340 << 16 | 6937;
            }
            else
            {
              // TEMPLATE.VFMSUB213PS_rznzmx::VFMSUB213PSm
              // VFMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
              return 3341 << 16 | 6940;
            }
          }
          else
          {
            if (b & 0x01)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB213PD_rxnxmx::VFMSUB213PDmy
                // VFMSUB213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
                return 2454 << 16 | 4919;
              }
              else
              {
                // TEMPLATE.VFMSUB213PS_rxnxmx::VFMSUB213PSmy
                // VFMSUB213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
                return 2466 << 16 | 4952;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB213PD_rxnxmx::VFMSUB213PDmx
                // VFMSUB213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
                return 2454 << 16 | 4918;
              }
              else
              {
                // TEMPLATE.VFMSUB213PS_rxnxmx::VFMSUB213PSmx
                // VFMSUB213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
                return 2466 << 16 | 4951;
              }
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB213PD_rynymy::VFMSUB213PDmy
              // VFMSUB213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
              return 2455 << 16 | 4921;
            }
            else
            {
              // TEMPLATE.VFMSUB213PS_rynymy::VFMSUB213PSmy
              // VFMSUB213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
              return 2467 << 16 | 4954;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB213PD_rznzmz::VFMSUB213PDmz
                // VFMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
                return 2456 << 16 | 4924;
              }
              else
              {
                // TEMPLATE.VFMSUB213PS_rznzmz::VFMSUB213PSmz
                // VFMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
                return 2468 << 16 | 4957;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB213PD_ronomo::VFMSUB213PDmx
                // VFMSUB213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
                return 2453 << 16 | 4915;
              }
              else
              {
                // TEMPLATE.VFMSUB213PS_ronomo::VFMSUB213PSmx
                // VFMSUB213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
                return 2465 << 16 | 4948;
              }
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xab */
  case 939:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUB213SD_ronqmq::VFMSUB213SD
          // VFMSUB213SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2476 << 16 | 4977;
        }
        else
        {
          // TEMPLATE.VFMSUB213SS_rondmd::VFMSUB213SS
          // VFMSUB213SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2481 << 16 | 4989;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB213SD_ronomx::VFMSUB213SD
            // VFMSUB213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2475 << 16 | 4975;
          }
          else
          {
            // TEMPLATE.VFMSUB213SS_ronomx::VFMSUB213SS
            // VFMSUB213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2482 << 16 | 4992;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB213SD_ronomx::VFMSUB213SD
            // VFMSUB213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2475 << 16 | 4974;
          }
          else
          {
            // TEMPLATE.VFMSUB213SS_ronomx::VFMSUB213SS
            // VFMSUB213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2482 << 16 | 4991;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // TEMPLATE.V4FNMADDSS::V4FNMADDSSmx
        // V4FNMADDSS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem128;
        return 3298 << 16 | 6827;
      }
      else
      {
        if (c & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB213SD_ronqmq::VFMSUB213SDmq
            // VFMSUB213SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 2476 << 16 | 4978;
          }
          else
          {
            // TEMPLATE.VFMSUB213SS_rondmd::VFMSUB213SSmd
            // VFMSUB213SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
            return 2481 << 16 | 4990;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB213SD_ronomx::VFMSUB213SDmq
            // VFMSUB213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 2475 << 16 | 4976;
          }
          else
          {
            // TEMPLATE.VFMSUB213SS_ronomx::VFMSUB213SSmd
            // VFMSUB213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
            return 2482 << 16 | 4993;
          }
        }
      }
    }
  break;
  /* 0f38.0xac */
  case 940:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD213PD_rznzmx::VFNMADD213PD
              // VFNMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3346 << 16 | 6954;
            }
            else
            {
              // TEMPLATE.VFNMADD213PS_rznzmx::VFNMADD213PS
              // VFNMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3347 << 16 | 6957;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD213PD_rznzmx::VFNMADD213PD
              // VFNMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3346 << 16 | 6953;
            }
            else
            {
              // TEMPLATE.VFNMADD213PS_rznzmx::VFNMADD213PS
              // VFNMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3347 << 16 | 6956;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD213PD_rxnxmx::VFNMADD213PD
              // VFNMADD213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2490 << 16 | 5013;
            }
            else
            {
              // TEMPLATE.VFNMADD213PS_rxnxmx::VFNMADD213PS
              // VFNMADD213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2502 << 16 | 5046;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD213PD_rxnxmx::VFNMADD213PD
              // VFNMADD213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2490 << 16 | 5012;
            }
            else
            {
              // TEMPLATE.VFNMADD213PS_rxnxmx::VFNMADD213PS
              // VFNMADD213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2502 << 16 | 5045;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD213PD_rznzmz::VFNMADD213PD
            // VFNMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2492 << 16 | 5018;
          }
          else
          {
            // TEMPLATE.VFNMADD213PS_rznzmz::VFNMADD213PS
            // VFNMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2504 << 16 | 5051;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD213PD_rynymy::VFNMADD213PD
              // VFNMADD213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2491 << 16 | 5016;
            }
            else
            {
              // TEMPLATE.VFNMADD213PS_rynymy::VFNMADD213PS
              // VFNMADD213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2503 << 16 | 5049;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMADD213PD_rznzmz::VFNMADD213PD
                // VFNMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2492 << 16 | 5019;
              }
              else
              {
                // TEMPLATE.VFNMADD213PS_rznzmz::VFNMADD213PS
                // VFNMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2504 << 16 | 5052;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMADD213PD_ronomo::VFNMADD213PD
                // VFNMADD213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2489 << 16 | 5010;
              }
              else
              {
                // TEMPLATE.VFNMADD213PS_ronomo::VFNMADD213PS
                // VFNMADD213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2501 << 16 | 5043;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD213PD_rznzmx::VFNMADD213PDm
            // VFNMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
            return 3346 << 16 | 6955;
          }
          else
          {
            // TEMPLATE.VFNMADD213PS_rznzmx::VFNMADD213PSm
            // VFNMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
            return 3347 << 16 | 6958;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD213PD_rxnxmx::VFNMADD213PDmy
              // VFNMADD213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2490 << 16 | 5015;
            }
            else
            {
              // TEMPLATE.VFNMADD213PS_rxnxmx::VFNMADD213PSmy
              // VFNMADD213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2502 << 16 | 5048;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD213PD_rxnxmx::VFNMADD213PDmx
              // VFNMADD213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2490 << 16 | 5014;
            }
            else
            {
              // TEMPLATE.VFNMADD213PS_rxnxmx::VFNMADD213PSmx
              // VFNMADD213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2502 << 16 | 5047;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD213PD_rynymy::VFNMADD213PDmy
            // VFNMADD213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2491 << 16 | 5017;
          }
          else
          {
            // TEMPLATE.VFNMADD213PS_rynymy::VFNMADD213PSmy
            // VFNMADD213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2503 << 16 | 5050;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD213PD_rznzmz::VFNMADD213PDmz
              // VFNMADD213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
              return 2492 << 16 | 5020;
            }
            else
            {
              // TEMPLATE.VFNMADD213PS_rznzmz::VFNMADD213PSmz
              // VFNMADD213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
              return 2504 << 16 | 5053;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD213PD_ronomo::VFNMADD213PDmx
              // VFNMADD213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2489 << 16 | 5011;
            }
            else
            {
              // TEMPLATE.VFNMADD213PS_ronomo::VFNMADD213PSmx
              // VFNMADD213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2501 << 16 | 5044;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xad */
  case 941:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADD213SD_ronqmq::VFNMADD213SD
          // VFNMADD213SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2512 << 16 | 5073;
        }
        else
        {
          // TEMPLATE.VFNMADD213SS_rondmd::VFNMADD213SS
          // VFNMADD213SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2517 << 16 | 5085;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD213SD_ronomx::VFNMADD213SD
            // VFNMADD213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2511 << 16 | 5071;
          }
          else
          {
            // TEMPLATE.VFNMADD213SS_ronomx::VFNMADD213SS
            // VFNMADD213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2518 << 16 | 5088;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD213SD_ronomx::VFNMADD213SD
            // VFNMADD213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2511 << 16 | 5070;
          }
          else
          {
            // TEMPLATE.VFNMADD213SS_ronomx::VFNMADD213SS
            // VFNMADD213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2518 << 16 | 5087;
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADD213SD_ronqmq::VFNMADD213SDmq
          // VFNMADD213SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2512 << 16 | 5074;
        }
        else
        {
          // TEMPLATE.VFNMADD213SS_rondmd::VFNMADD213SSmd
          // VFNMADD213SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2517 << 16 | 5086;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADD213SD_ronomx::VFNMADD213SDmq
          // VFNMADD213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2511 << 16 | 5072;
        }
        else
        {
          // TEMPLATE.VFNMADD213SS_ronomx::VFNMADD213SSmd
          // VFNMADD213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2518 << 16 | 5089;
        }
      }
    }
  break;
  /* 0f38.0xae */
  case 942:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB213PD_rznzmx::VFNMSUB213PD
              // VFNMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3352 << 16 | 6972;
            }
            else
            {
              // TEMPLATE.VFNMSUB213PS_rznzmx::VFNMSUB213PS
              // VFNMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3353 << 16 | 6975;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB213PD_rznzmx::VFNMSUB213PD
              // VFNMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3352 << 16 | 6971;
            }
            else
            {
              // TEMPLATE.VFNMSUB213PS_rznzmx::VFNMSUB213PS
              // VFNMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3353 << 16 | 6974;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB213PD_rxnxmx::VFNMSUB213PD
              // VFNMSUB213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2526 << 16 | 5109;
            }
            else
            {
              // TEMPLATE.VFNMSUB213PS_rxnxmx::VFNMSUB213PS
              // VFNMSUB213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2538 << 16 | 5142;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB213PD_rxnxmx::VFNMSUB213PD
              // VFNMSUB213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2526 << 16 | 5108;
            }
            else
            {
              // TEMPLATE.VFNMSUB213PS_rxnxmx::VFNMSUB213PS
              // VFNMSUB213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2538 << 16 | 5141;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB213PD_rznzmz::VFNMSUB213PD
            // VFNMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2528 << 16 | 5114;
          }
          else
          {
            // TEMPLATE.VFNMSUB213PS_rznzmz::VFNMSUB213PS
            // VFNMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2540 << 16 | 5147;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB213PD_rynymy::VFNMSUB213PD
              // VFNMSUB213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2527 << 16 | 5112;
            }
            else
            {
              // TEMPLATE.VFNMSUB213PS_rynymy::VFNMSUB213PS
              // VFNMSUB213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2539 << 16 | 5145;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMSUB213PD_rznzmz::VFNMSUB213PD
                // VFNMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2528 << 16 | 5115;
              }
              else
              {
                // TEMPLATE.VFNMSUB213PS_rznzmz::VFNMSUB213PS
                // VFNMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2540 << 16 | 5148;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMSUB213PD_ronomo::VFNMSUB213PD
                // VFNMSUB213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2525 << 16 | 5106;
              }
              else
              {
                // TEMPLATE.VFNMSUB213PS_ronomo::VFNMSUB213PS
                // VFNMSUB213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2537 << 16 | 5139;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB213PD_rznzmx::VFNMSUB213PDm
            // VFNMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
            return 3352 << 16 | 6973;
          }
          else
          {
            // TEMPLATE.VFNMSUB213PS_rznzmx::VFNMSUB213PSm
            // VFNMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
            return 3353 << 16 | 6976;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB213PD_rxnxmx::VFNMSUB213PDmy
              // VFNMSUB213PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2526 << 16 | 5111;
            }
            else
            {
              // TEMPLATE.VFNMSUB213PS_rxnxmx::VFNMSUB213PSmy
              // VFNMSUB213PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2538 << 16 | 5144;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB213PD_rxnxmx::VFNMSUB213PDmx
              // VFNMSUB213PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2526 << 16 | 5110;
            }
            else
            {
              // TEMPLATE.VFNMSUB213PS_rxnxmx::VFNMSUB213PSmx
              // VFNMSUB213PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2538 << 16 | 5143;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB213PD_rynymy::VFNMSUB213PDmy
            // VFNMSUB213PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2527 << 16 | 5113;
          }
          else
          {
            // TEMPLATE.VFNMSUB213PS_rynymy::VFNMSUB213PSmy
            // VFNMSUB213PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2539 << 16 | 5146;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB213PD_rznzmz::VFNMSUB213PDmz
              // VFNMSUB213PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
              return 2528 << 16 | 5116;
            }
            else
            {
              // TEMPLATE.VFNMSUB213PS_rznzmz::VFNMSUB213PSmz
              // VFNMSUB213PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
              return 2540 << 16 | 5149;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB213PD_ronomo::VFNMSUB213PDmx
              // VFNMSUB213PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2525 << 16 | 5107;
            }
            else
            {
              // TEMPLATE.VFNMSUB213PS_ronomo::VFNMSUB213PSmx
              // VFNMSUB213PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2537 << 16 | 5140;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xaf */
  case 943:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUB213SD_ronqmq::VFNMSUB213SD
          // VFNMSUB213SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2548 << 16 | 5169;
        }
        else
        {
          // TEMPLATE.VFNMSUB213SS_rondmd::VFNMSUB213SS
          // VFNMSUB213SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2553 << 16 | 5181;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB213SD_ronomx::VFNMSUB213SD
            // VFNMSUB213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2547 << 16 | 5167;
          }
          else
          {
            // TEMPLATE.VFNMSUB213SS_ronomx::VFNMSUB213SS
            // VFNMSUB213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2554 << 16 | 5184;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB213SD_ronomx::VFNMSUB213SD
            // VFNMSUB213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2547 << 16 | 5166;
          }
          else
          {
            // TEMPLATE.VFNMSUB213SS_ronomx::VFNMSUB213SS
            // VFNMSUB213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2554 << 16 | 5183;
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUB213SD_ronqmq::VFNMSUB213SDmq
          // VFNMSUB213SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2548 << 16 | 5170;
        }
        else
        {
          // TEMPLATE.VFNMSUB213SS_rondmd::VFNMSUB213SSmd
          // VFNMSUB213SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2553 << 16 | 5182;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUB213SD_ronomx::VFNMSUB213SDmq
          // VFNMSUB213SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2547 << 16 | 5168;
        }
        else
        {
          // TEMPLATE.VFNMSUB213SS_ronomx::VFNMSUB213SSmd
          // VFNMSUB213SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2554 << 16 | 5185;
        }
      }
    }
  break;
  /* invalid */
  case 944:
    return 0;
  /* invalid */
  case 945:
    return 0;
  /* invalid */
  case 946:
    return 0;
  /* invalid */
  case 947:
    return 0;
  /* 0f38.0xb4 */
  case 948:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          // TEMPLATE.VPMADD233D::VPMADD233D
          // VPMADD233D VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
          return 3434 << 16 | 7129;
        }
        else
        {
          // TEMPLATE.VPMADD233D::VPMADD233D
          // VPMADD233D VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
          return 3434 << 16 | 7128;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMADD52LUQ_ronomo::VPMADD52LUQ
            // VPMADD52LUQ VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
            return 2796 << 16 | 5747;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMADD52LUQ_rynymy::VPMADD52LUQ
            // VPMADD52LUQ VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
            return 2797 << 16 | 5749;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMADD52LUQ_rznzmz::VPMADD52LUQ
            // VPMADD52LUQ VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
            return 2798 << 16 | 5751;
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        // TEMPLATE.VPMADD233D::VPMADD233Dm
        // VPMADD233D VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_mi32 EVH=$EVH;
        return 3434 << 16 | 7130;
      }
      else
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMADD52LUQ_ronomo::VPMADD52LUQmx
            // VPMADD52LUQ VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
            return 2796 << 16 | 5748;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMADD52LUQ_rynymy::VPMADD52LUQmy
            // VPMADD52LUQ VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
            return 2797 << 16 | 5750;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMADD52LUQ_rznzmz::VPMADD52LUQmz
            // VPMADD52LUQ VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
            return 2798 << 16 | 5752;
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0xb5 */
  case 949:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          // TEMPLATE.VPMADD231D::VPMADD231D
          // VPMADD231D VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
          return 3433 << 16 | 7126;
        }
        else
        {
          // TEMPLATE.VPMADD231D::VPMADD231D
          // VPMADD231D VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
          return 3433 << 16 | 7125;
        }
      }
      else
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMADD52HUQ_ronomo::VPMADD52HUQ
            // VPMADD52HUQ VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm;
            return 2793 << 16 | 5741;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMADD52HUQ_rynymy::VPMADD52HUQ
            // VPMADD52HUQ VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm;
            return 2794 << 16 | 5743;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMADD52HUQ_rznzmz::VPMADD52HUQ
            // VPMADD52HUQ VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm;
            return 2795 << 16 | 5745;
            break;
          }
          default: break;
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        // TEMPLATE.VPMADD231D::VPMADD231Dm
        // VPMADD231D VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
        return 3433 << 16 | 7127;
      }
      else
      {
        // the following switch contains 3 case.
        switch (b & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.VPMADD52HUQ_ronomo::VPMADD52HUQmx
            // VPMADD52HUQ VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST;
            return 2793 << 16 | 5742;
            break;
          }
          case 0x01:
          {
            // TEMPLATE.VPMADD52HUQ_rynymy::VPMADD52HUQmy
            // VPMADD52HUQ VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST;
            return 2794 << 16 | 5744;
            break;
          }
          case 0x02:
          {
            // TEMPLATE.VPMADD52HUQ_rznzmz::VPMADD52HUQmz
            // VPMADD52HUQ VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST;
            return 2795 << 16 | 5746;
            break;
          }
          default: break;
        }
      }
    }
  break;
  /* 0f38.0xb6 */
  case 950:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB231PD_rxnxmx::VFMADDSUB231PD
            // VFMADDSUB231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
            return 2374 << 16 | 4700;
          }
          else
          {
            // TEMPLATE.VFMADDSUB231PS_rxnxmx::VFMADDSUB231PS
            // VFMADDSUB231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
            return 2386 << 16 | 4733;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB231PD_rxnxmx::VFMADDSUB231PD
            // VFMADDSUB231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2374 << 16 | 4699;
          }
          else
          {
            // TEMPLATE.VFMADDSUB231PS_rxnxmx::VFMADDSUB231PS
            // VFMADDSUB231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2386 << 16 | 4732;
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB231PD_rznzmz::VFMADDSUB231PD
            // VFMADDSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2376 << 16 | 4705;
          }
          else
          {
            // TEMPLATE.VFMADDSUB231PS_rznzmz::VFMADDSUB231PS
            // VFMADDSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2388 << 16 | 4738;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADDSUB231PD_rynymy::VFMADDSUB231PD
              // VFMADDSUB231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2375 << 16 | 4703;
            }
            else
            {
              // TEMPLATE.VFMADDSUB231PS_rynymy::VFMADDSUB231PS
              // VFMADDSUB231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2387 << 16 | 4736;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADDSUB231PD_rznzmz::VFMADDSUB231PD
                // VFMADDSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2376 << 16 | 4706;
              }
              else
              {
                // TEMPLATE.VFMADDSUB231PS_rznzmz::VFMADDSUB231PS
                // VFMADDSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2388 << 16 | 4739;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADDSUB231PD_ronomo::VFMADDSUB231PD
                // VFMADDSUB231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2373 << 16 | 4697;
              }
              else
              {
                // TEMPLATE.VFMADDSUB231PS_ronomo::VFMADDSUB231PS
                // VFMADDSUB231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2385 << 16 | 4730;
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB231PD_rxnxmx::VFMADDSUB231PDmy
            // VFMADDSUB231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
            return 2374 << 16 | 4702;
          }
          else
          {
            // TEMPLATE.VFMADDSUB231PS_rxnxmx::VFMADDSUB231PSmy
            // VFMADDSUB231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
            return 2386 << 16 | 4735;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB231PD_rynymy::VFMADDSUB231PDmy
            // VFMADDSUB231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2375 << 16 | 4704;
          }
          else
          {
            // TEMPLATE.VFMADDSUB231PS_rynymy::VFMADDSUB231PSmy
            // VFMADDSUB231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2387 << 16 | 4737;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADDSUB231PD_rznzmz::VFMADDSUB231PDmz
            // VFMADDSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
            return 2376 << 16 | 4707;
          }
          else
          {
            // TEMPLATE.VFMADDSUB231PS_rznzmz::VFMADDSUB231PSmz
            // VFMADDSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
            return 2388 << 16 | 4740;
          }
        }
        else
        {
          if (c & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADDSUB231PD_rxnxmx::VFMADDSUB231PDmx
              // VFMADDSUB231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2374 << 16 | 4701;
            }
            else
            {
              // TEMPLATE.VFMADDSUB231PS_rxnxmx::VFMADDSUB231PSmx
              // VFMADDSUB231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2386 << 16 | 4734;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADDSUB231PD_ronomo::VFMADDSUB231PDmx
              // VFMADDSUB231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2373 << 16 | 4698;
            }
            else
            {
              // TEMPLATE.VFMADDSUB231PS_ronomo::VFMADDSUB231PSmx
              // VFMADDSUB231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2385 << 16 | 4731;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xb7 */
  case 951:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD231PD_rxnxmx::VFMSUBADD231PD
            // VFMSUBADD231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
            return 2434 << 16 | 4862;
          }
          else
          {
            // TEMPLATE.VFMSUBADD231PS_rxnxmx::VFMSUBADD231PS
            // VFMSUBADD231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
            return 2446 << 16 | 4895;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD231PD_rxnxmx::VFMSUBADD231PD
            // VFMSUBADD231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2434 << 16 | 4861;
          }
          else
          {
            // TEMPLATE.VFMSUBADD231PS_rxnxmx::VFMSUBADD231PS
            // VFMSUBADD231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2446 << 16 | 4894;
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD231PD_rznzmz::VFMSUBADD231PD
            // VFMSUBADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2436 << 16 | 4867;
          }
          else
          {
            // TEMPLATE.VFMSUBADD231PS_rznzmz::VFMSUBADD231PS
            // VFMSUBADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2448 << 16 | 4900;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUBADD231PD_rynymy::VFMSUBADD231PD
              // VFMSUBADD231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2435 << 16 | 4865;
            }
            else
            {
              // TEMPLATE.VFMSUBADD231PS_rynymy::VFMSUBADD231PS
              // VFMSUBADD231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2447 << 16 | 4898;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUBADD231PD_rznzmz::VFMSUBADD231PD
                // VFMSUBADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2436 << 16 | 4868;
              }
              else
              {
                // TEMPLATE.VFMSUBADD231PS_rznzmz::VFMSUBADD231PS
                // VFMSUBADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2448 << 16 | 4901;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUBADD231PD_ronomo::VFMSUBADD231PD
                // VFMSUBADD231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2433 << 16 | 4859;
              }
              else
              {
                // TEMPLATE.VFMSUBADD231PS_ronomo::VFMSUBADD231PS
                // VFMSUBADD231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2445 << 16 | 4892;
              }
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD231PD_rxnxmx::VFMSUBADD231PDmy
            // VFMSUBADD231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
            return 2434 << 16 | 4864;
          }
          else
          {
            // TEMPLATE.VFMSUBADD231PS_rxnxmx::VFMSUBADD231PSmy
            // VFMSUBADD231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
            return 2446 << 16 | 4897;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD231PD_rynymy::VFMSUBADD231PDmy
            // VFMSUBADD231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2435 << 16 | 4866;
          }
          else
          {
            // TEMPLATE.VFMSUBADD231PS_rynymy::VFMSUBADD231PSmy
            // VFMSUBADD231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2447 << 16 | 4899;
          }
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUBADD231PD_rznzmz::VFMSUBADD231PDmz
            // VFMSUBADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
            return 2436 << 16 | 4869;
          }
          else
          {
            // TEMPLATE.VFMSUBADD231PS_rznzmz::VFMSUBADD231PSmz
            // VFMSUBADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
            return 2448 << 16 | 4902;
          }
        }
        else
        {
          if (c & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUBADD231PD_rxnxmx::VFMSUBADD231PDmx
              // VFMSUBADD231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2434 << 16 | 4863;
            }
            else
            {
              // TEMPLATE.VFMSUBADD231PS_rxnxmx::VFMSUBADD231PSmx
              // VFMSUBADD231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2446 << 16 | 4896;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUBADD231PD_ronomo::VFMSUBADD231PDmx
              // VFMSUBADD231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2433 << 16 | 4860;
            }
            else
            {
              // TEMPLATE.VFMSUBADD231PS_ronomo::VFMSUBADD231PSmx
              // VFMSUBADD231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2445 << 16 | 4893;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xb8 */
  case 952:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD231PD_rznzmx::VFMADD231PD
              // VFMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3335 << 16 | 6921;
            }
            else
            {
              // TEMPLATE.VFMADD231PS_rznzmx::VFMADD231PS
              // VFMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3336 << 16 | 6924;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD231PD_rznzmx::VFMADD231PD
              // VFMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3335 << 16 | 6920;
            }
            else
            {
              // TEMPLATE.VFMADD231PS_rznzmx::VFMADD231PS
              // VFMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3336 << 16 | 6923;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD231PD_rxnxmx::VFMADD231PD
              // VFMADD231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2398 << 16 | 4766;
            }
            else
            {
              // TEMPLATE.VFMADD231PS_rxnxmx::VFMADD231PS
              // VFMADD231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2410 << 16 | 4799;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD231PD_rxnxmx::VFMADD231PD
              // VFMADD231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2398 << 16 | 4765;
            }
            else
            {
              // TEMPLATE.VFMADD231PS_rxnxmx::VFMADD231PS
              // VFMADD231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2410 << 16 | 4798;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD231PD_rznzmz::VFMADD231PD
            // VFMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2400 << 16 | 4771;
          }
          else
          {
            // TEMPLATE.VFMADD231PS_rznzmz::VFMADD231PS
            // VFMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2412 << 16 | 4804;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD231PD_rynymy::VFMADD231PD
              // VFMADD231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2399 << 16 | 4769;
            }
            else
            {
              // TEMPLATE.VFMADD231PS_rynymy::VFMADD231PS
              // VFMADD231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2411 << 16 | 4802;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADD231PD_rznzmz::VFMADD231PD
                // VFMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2400 << 16 | 4772;
              }
              else
              {
                // TEMPLATE.VFMADD231PS_rznzmz::VFMADD231PS
                // VFMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2412 << 16 | 4805;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMADD231PD_ronomo::VFMADD231PD
                // VFMADD231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2397 << 16 | 4763;
              }
              else
              {
                // TEMPLATE.VFMADD231PS_ronomo::VFMADD231PS
                // VFMADD231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2409 << 16 | 4796;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD231PD_rznzmx::VFMADD231PDm
            // VFMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
            return 3335 << 16 | 6922;
          }
          else
          {
            // TEMPLATE.VFMADD231PS_rznzmx::VFMADD231PSm
            // VFMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
            return 3336 << 16 | 6925;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD231PD_rxnxmx::VFMADD231PDmy
              // VFMADD231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2398 << 16 | 4768;
            }
            else
            {
              // TEMPLATE.VFMADD231PS_rxnxmx::VFMADD231PSmy
              // VFMADD231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2410 << 16 | 4801;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD231PD_rxnxmx::VFMADD231PDmx
              // VFMADD231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2398 << 16 | 4767;
            }
            else
            {
              // TEMPLATE.VFMADD231PS_rxnxmx::VFMADD231PSmx
              // VFMADD231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2410 << 16 | 4800;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD231PD_rynymy::VFMADD231PDmy
            // VFMADD231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2399 << 16 | 4770;
          }
          else
          {
            // TEMPLATE.VFMADD231PS_rynymy::VFMADD231PSmy
            // VFMADD231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2411 << 16 | 4803;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD231PD_rznzmz::VFMADD231PDmz
              // VFMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
              return 2400 << 16 | 4773;
            }
            else
            {
              // TEMPLATE.VFMADD231PS_rznzmz::VFMADD231PSmz
              // VFMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
              return 2412 << 16 | 4806;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMADD231PD_ronomo::VFMADD231PDmx
              // VFMADD231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2397 << 16 | 4764;
            }
            else
            {
              // TEMPLATE.VFMADD231PS_ronomo::VFMADD231PSmx
              // VFMADD231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2409 << 16 | 4797;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xb9 */
  case 953:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADD231SD_ronqmq::VFMADD231SD
          // VFMADD231SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2418 << 16 | 4820;
        }
        else
        {
          // TEMPLATE.VFMADD231SS_rondmd::VFMADD231SS
          // VFMADD231SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2423 << 16 | 4832;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD231SD_ronomx::VFMADD231SD
            // VFMADD231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2417 << 16 | 4818;
          }
          else
          {
            // TEMPLATE.VFMADD231SS_ronomx::VFMADD231SS
            // VFMADD231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2424 << 16 | 4835;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMADD231SD_ronomx::VFMADD231SD
            // VFMADD231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2417 << 16 | 4817;
          }
          else
          {
            // TEMPLATE.VFMADD231SS_ronomx::VFMADD231SS
            // VFMADD231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2424 << 16 | 4834;
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADD231SD_ronqmq::VFMADD231SDmq
          // VFMADD231SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2418 << 16 | 4821;
        }
        else
        {
          // TEMPLATE.VFMADD231SS_rondmd::VFMADD231SSmd
          // VFMADD231SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2423 << 16 | 4833;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADD231SD_ronomx::VFMADD231SDmq
          // VFMADD231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2417 << 16 | 4819;
        }
        else
        {
          // TEMPLATE.VFMADD231SS_ronomx::VFMADD231SSmd
          // VFMADD231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2424 << 16 | 4836;
        }
      }
    }
  break;
  /* 0f38.0xba */
  case 954:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB231PD_rznzmx::VFMSUB231PD
              // VFMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3342 << 16 | 6942;
            }
            else
            {
              // TEMPLATE.VFMSUB231PS_rznzmx::VFMSUB231PS
              // VFMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3343 << 16 | 6945;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB231PD_rznzmx::VFMSUB231PD
              // VFMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3342 << 16 | 6941;
            }
            else
            {
              // TEMPLATE.VFMSUB231PS_rznzmx::VFMSUB231PS
              // VFMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3343 << 16 | 6944;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB231PD_rxnxmx::VFMSUB231PD
              // VFMSUB231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2458 << 16 | 4928;
            }
            else
            {
              // TEMPLATE.VFMSUB231PS_rxnxmx::VFMSUB231PS
              // VFMSUB231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2470 << 16 | 4961;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB231PD_rxnxmx::VFMSUB231PD
              // VFMSUB231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2458 << 16 | 4927;
            }
            else
            {
              // TEMPLATE.VFMSUB231PS_rxnxmx::VFMSUB231PS
              // VFMSUB231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2470 << 16 | 4960;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB231PD_rznzmz::VFMSUB231PD
            // VFMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2460 << 16 | 4933;
          }
          else
          {
            // TEMPLATE.VFMSUB231PS_rznzmz::VFMSUB231PS
            // VFMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2472 << 16 | 4966;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB231PD_rynymy::VFMSUB231PD
              // VFMSUB231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2459 << 16 | 4931;
            }
            else
            {
              // TEMPLATE.VFMSUB231PS_rynymy::VFMSUB231PS
              // VFMSUB231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2471 << 16 | 4964;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB231PD_rznzmz::VFMSUB231PD
                // VFMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2460 << 16 | 4934;
              }
              else
              {
                // TEMPLATE.VFMSUB231PS_rznzmz::VFMSUB231PS
                // VFMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2472 << 16 | 4967;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFMSUB231PD_ronomo::VFMSUB231PD
                // VFMSUB231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2457 << 16 | 4925;
              }
              else
              {
                // TEMPLATE.VFMSUB231PS_ronomo::VFMSUB231PS
                // VFMSUB231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2469 << 16 | 4958;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB231PD_rznzmx::VFMSUB231PDm
            // VFMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
            return 3342 << 16 | 6943;
          }
          else
          {
            // TEMPLATE.VFMSUB231PS_rznzmx::VFMSUB231PSm
            // VFMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
            return 3343 << 16 | 6946;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB231PD_rxnxmx::VFMSUB231PDmy
              // VFMSUB231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2458 << 16 | 4930;
            }
            else
            {
              // TEMPLATE.VFMSUB231PS_rxnxmx::VFMSUB231PSmy
              // VFMSUB231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2470 << 16 | 4963;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB231PD_rxnxmx::VFMSUB231PDmx
              // VFMSUB231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2458 << 16 | 4929;
            }
            else
            {
              // TEMPLATE.VFMSUB231PS_rxnxmx::VFMSUB231PSmx
              // VFMSUB231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2470 << 16 | 4962;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB231PD_rynymy::VFMSUB231PDmy
            // VFMSUB231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2459 << 16 | 4932;
          }
          else
          {
            // TEMPLATE.VFMSUB231PS_rynymy::VFMSUB231PSmy
            // VFMSUB231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2471 << 16 | 4965;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB231PD_rznzmz::VFMSUB231PDmz
              // VFMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
              return 2460 << 16 | 4935;
            }
            else
            {
              // TEMPLATE.VFMSUB231PS_rznzmz::VFMSUB231PSmz
              // VFMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
              return 2472 << 16 | 4968;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFMSUB231PD_ronomo::VFMSUB231PDmx
              // VFMSUB231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2457 << 16 | 4926;
            }
            else
            {
              // TEMPLATE.VFMSUB231PS_ronomo::VFMSUB231PSmx
              // VFMSUB231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2469 << 16 | 4959;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xbb */
  case 955:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUB231SD_ronqmq::VFMSUB231SD
          // VFMSUB231SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2478 << 16 | 4982;
        }
        else
        {
          // TEMPLATE.VFMSUB231SS_rondmd::VFMSUB231SS
          // VFMSUB231SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2483 << 16 | 4994;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB231SD_ronomx::VFMSUB231SD
            // VFMSUB231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2477 << 16 | 4980;
          }
          else
          {
            // TEMPLATE.VFMSUB231SS_ronomx::VFMSUB231SS
            // VFMSUB231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2484 << 16 | 4997;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFMSUB231SD_ronomx::VFMSUB231SD
            // VFMSUB231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2477 << 16 | 4979;
          }
          else
          {
            // TEMPLATE.VFMSUB231SS_ronomx::VFMSUB231SS
            // VFMSUB231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2484 << 16 | 4996;
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUB231SD_ronqmq::VFMSUB231SDmq
          // VFMSUB231SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2478 << 16 | 4983;
        }
        else
        {
          // TEMPLATE.VFMSUB231SS_rondmd::VFMSUB231SSmd
          // VFMSUB231SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2483 << 16 | 4995;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUB231SD_ronomx::VFMSUB231SDmq
          // VFMSUB231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2477 << 16 | 4981;
        }
        else
        {
          // TEMPLATE.VFMSUB231SS_ronomx::VFMSUB231SSmd
          // VFMSUB231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2484 << 16 | 4998;
        }
      }
    }
  break;
  /* 0f38.0xbc */
  case 956:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD231PD_rznzmx::VFNMADD231PD
              // VFNMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3348 << 16 | 6960;
            }
            else
            {
              // TEMPLATE.VFNMADD231PS_rznzmx::VFNMADD231PS
              // VFNMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3349 << 16 | 6963;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD231PD_rznzmx::VFNMADD231PD
              // VFNMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3348 << 16 | 6959;
            }
            else
            {
              // TEMPLATE.VFNMADD231PS_rznzmx::VFNMADD231PS
              // VFNMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3349 << 16 | 6962;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD231PD_rxnxmx::VFNMADD231PD
              // VFNMADD231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2494 << 16 | 5024;
            }
            else
            {
              // TEMPLATE.VFNMADD231PS_rxnxmx::VFNMADD231PS
              // VFNMADD231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2506 << 16 | 5057;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD231PD_rxnxmx::VFNMADD231PD
              // VFNMADD231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2494 << 16 | 5023;
            }
            else
            {
              // TEMPLATE.VFNMADD231PS_rxnxmx::VFNMADD231PS
              // VFNMADD231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2506 << 16 | 5056;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD231PD_rznzmz::VFNMADD231PD
            // VFNMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2496 << 16 | 5029;
          }
          else
          {
            // TEMPLATE.VFNMADD231PS_rznzmz::VFNMADD231PS
            // VFNMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2508 << 16 | 5062;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD231PD_rynymy::VFNMADD231PD
              // VFNMADD231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2495 << 16 | 5027;
            }
            else
            {
              // TEMPLATE.VFNMADD231PS_rynymy::VFNMADD231PS
              // VFNMADD231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2507 << 16 | 5060;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMADD231PD_rznzmz::VFNMADD231PD
                // VFNMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2496 << 16 | 5030;
              }
              else
              {
                // TEMPLATE.VFNMADD231PS_rznzmz::VFNMADD231PS
                // VFNMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2508 << 16 | 5063;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMADD231PD_ronomo::VFNMADD231PD
                // VFNMADD231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2493 << 16 | 5021;
              }
              else
              {
                // TEMPLATE.VFNMADD231PS_ronomo::VFNMADD231PS
                // VFNMADD231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2505 << 16 | 5054;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD231PD_rznzmx::VFNMADD231PDm
            // VFNMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
            return 3348 << 16 | 6961;
          }
          else
          {
            // TEMPLATE.VFNMADD231PS_rznzmx::VFNMADD231PSm
            // VFNMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
            return 3349 << 16 | 6964;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD231PD_rxnxmx::VFNMADD231PDmy
              // VFNMADD231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2494 << 16 | 5026;
            }
            else
            {
              // TEMPLATE.VFNMADD231PS_rxnxmx::VFNMADD231PSmy
              // VFNMADD231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2506 << 16 | 5059;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD231PD_rxnxmx::VFNMADD231PDmx
              // VFNMADD231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2494 << 16 | 5025;
            }
            else
            {
              // TEMPLATE.VFNMADD231PS_rxnxmx::VFNMADD231PSmx
              // VFNMADD231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2506 << 16 | 5058;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD231PD_rynymy::VFNMADD231PDmy
            // VFNMADD231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2495 << 16 | 5028;
          }
          else
          {
            // TEMPLATE.VFNMADD231PS_rynymy::VFNMADD231PSmy
            // VFNMADD231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2507 << 16 | 5061;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD231PD_rznzmz::VFNMADD231PDmz
              // VFNMADD231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
              return 2496 << 16 | 5031;
            }
            else
            {
              // TEMPLATE.VFNMADD231PS_rznzmz::VFNMADD231PSmz
              // VFNMADD231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
              return 2508 << 16 | 5064;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMADD231PD_ronomo::VFNMADD231PDmx
              // VFNMADD231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2493 << 16 | 5022;
            }
            else
            {
              // TEMPLATE.VFNMADD231PS_ronomo::VFNMADD231PSmx
              // VFNMADD231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2505 << 16 | 5055;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xbd */
  case 957:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADD231SD_ronqmq::VFNMADD231SD
          // VFNMADD231SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2514 << 16 | 5078;
        }
        else
        {
          // TEMPLATE.VFNMADD231SS_rondmd::VFNMADD231SS
          // VFNMADD231SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2519 << 16 | 5090;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD231SD_ronomx::VFNMADD231SD
            // VFNMADD231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2513 << 16 | 5076;
          }
          else
          {
            // TEMPLATE.VFNMADD231SS_ronomx::VFNMADD231SS
            // VFNMADD231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2520 << 16 | 5093;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMADD231SD_ronomx::VFNMADD231SD
            // VFNMADD231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2513 << 16 | 5075;
          }
          else
          {
            // TEMPLATE.VFNMADD231SS_ronomx::VFNMADD231SS
            // VFNMADD231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2520 << 16 | 5092;
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADD231SD_ronqmq::VFNMADD231SDmq
          // VFNMADD231SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2514 << 16 | 5079;
        }
        else
        {
          // TEMPLATE.VFNMADD231SS_rondmd::VFNMADD231SSmd
          // VFNMADD231SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2519 << 16 | 5091;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADD231SD_ronomx::VFNMADD231SDmq
          // VFNMADD231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2513 << 16 | 5077;
        }
        else
        {
          // TEMPLATE.VFNMADD231SS_ronomx::VFNMADD231SSmd
          // VFNMADD231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2520 << 16 | 5094;
        }
      }
    }
  break;
  /* 0f38.0xbe */
  case 958:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (c & 0x08)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB231PD_rznzmx::VFNMSUB231PD
              // VFNMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm RC=$RC;
              return 3354 << 16 | 6978;
            }
            else
            {
              // TEMPLATE.VFNMSUB231PS_rznzmx::VFNMSUB231PS
              // VFNMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
              return 3355 << 16 | 6981;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB231PD_rznzmx::VFNMSUB231PD
              // VFNMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SWZ=$r_i64;
              return 3354 << 16 | 6977;
            }
            else
            {
              // TEMPLATE.VFNMSUB231PS_rznzmx::VFNMSUB231PS
              // VFNMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
              return 3355 << 16 | 6980;
            }
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB231PD_rxnxmx::VFNMSUB231PD
              // VFNMSUB231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm;
              return 2530 << 16 | 5120;
            }
            else
            {
              // TEMPLATE.VFNMSUB231PS_rxnxmx::VFNMSUB231PS
              // VFNMSUB231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm;
              return 2542 << 16 | 5153;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB231PD_rxnxmx::VFNMSUB231PD
              // VFNMSUB231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 2530 << 16 | 5119;
            }
            else
            {
              // TEMPLATE.VFNMSUB231PS_rxnxmx::VFNMSUB231PS
              // VFNMSUB231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 2542 << 16 | 5152;
            }
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB231PD_rznzmz::VFNMSUB231PD
            // VFNMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm RC=$RC;
            return 2532 << 16 | 5125;
          }
          else
          {
            // TEMPLATE.VFNMSUB231PS_rznzmz::VFNMSUB231PS
            // VFNMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm RC=$RC;
            return 2544 << 16 | 5158;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB231PD_rynymy::VFNMSUB231PD
              // VFNMSUB231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  VREG:r:f64=$YMMm;
              return 2531 << 16 | 5123;
            }
            else
            {
              // TEMPLATE.VFNMSUB231PS_rynymy::VFNMSUB231PS
              // VFNMSUB231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  VREG:r:f32=$YMMm;
              return 2543 << 16 | 5156;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMSUB231PD_rznzmz::VFNMSUB231PD
                // VFNMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  VREG:r:f64=$ZMMm;
                return 2532 << 16 | 5126;
              }
              else
              {
                // TEMPLATE.VFNMSUB231PS_rznzmz::VFNMSUB231PS
                // VFNMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  VREG:r:f32=$ZMMm;
                return 2544 << 16 | 5159;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VFNMSUB231PD_ronomo::VFNMSUB231PD
                // VFNMSUB231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  VREG:r:f64=$XMMm;
                return 2529 << 16 | 5117;
              }
              else
              {
                // TEMPLATE.VFNMSUB231PS_ronomo::VFNMSUB231PS
                // VFNMSUB231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  VREG:r:f32=$XMMm;
                return 2541 << 16 | 5150;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB231PD_rznzmx::VFNMSUB231PDm
            // VFNMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r=$mem SWZ=$su_f64 EVH=$EVH;
            return 3354 << 16 | 6979;
          }
          else
          {
            // TEMPLATE.VFNMSUB231PS_rznzmx::VFNMSUB231PSm
            // VFNMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
            return 3355 << 16 | 6982;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB231PD_rxnxmx::VFNMSUB231PDmy
              // VFNMSUB231PD VREG:rw:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256;
              return 2530 << 16 | 5122;
            }
            else
            {
              // TEMPLATE.VFNMSUB231PS_rxnxmx::VFNMSUB231PSmy
              // VFNMSUB231PS VREG:rw:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256;
              return 2542 << 16 | 5155;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB231PD_rxnxmx::VFNMSUB231PDmx
              // VFNMSUB231PD VREG:rw:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128;
              return 2530 << 16 | 5121;
            }
            else
            {
              // TEMPLATE.VFNMSUB231PS_rxnxmx::VFNMSUB231PSmx
              // VFNMSUB231PS VREG:rw:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128;
              return 2542 << 16 | 5154;
            }
          }
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB231PD_rynymy::VFNMSUB231PDmy
            // VFNMSUB231PD VREG:rw:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn  MEM:r:f64=$mem256 BCST=$BCST;
            return 2531 << 16 | 5124;
          }
          else
          {
            // TEMPLATE.VFNMSUB231PS_rynymy::VFNMSUB231PSmy
            // VFNMSUB231PS VREG:rw:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn  MEM:r:f32=$mem256 BCST=$BCST;
            return 2543 << 16 | 5157;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB231PD_rznzmz::VFNMSUB231PDmz
              // VFNMSUB231PD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn  MEM:r:f64=$mem512 BCST=$BCST;
              return 2532 << 16 | 5127;
            }
            else
            {
              // TEMPLATE.VFNMSUB231PS_rznzmz::VFNMSUB231PSmz
              // VFNMSUB231PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn  MEM:r:f32=$mem512 BCST=$BCST;
              return 2544 << 16 | 5160;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFNMSUB231PD_ronomo::VFNMSUB231PDmx
              // VFNMSUB231PD VREG:rw:f64=$XMMr PREG:r:Z=$Kk     VREG:r:f64=$XMMn  MEM:r:f64=$mem128 BCST=$BCST;
              return 2529 << 16 | 5118;
            }
            else
            {
              // TEMPLATE.VFNMSUB231PS_ronomo::VFNMSUB231PSmx
              // VFNMSUB231PS VREG:rw:f32=$XMMr PREG:r:Z=$Kk     VREG:r:f32=$XMMn  MEM:r:f32=$mem128 BCST=$BCST;
              return 2541 << 16 | 5151;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xbf */
  case 959:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUB231SD_ronqmq::VFNMSUB231SD
          // VFNMSUB231SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn REG:r:f64=$XMMm;
          return 2550 << 16 | 5174;
        }
        else
        {
          // TEMPLATE.VFNMSUB231SS_rondmd::VFNMSUB231SS
          // VFNMSUB231SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn REG:r:f32=$XMMm;
          return 2555 << 16 | 5186;
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB231SD_ronomx::VFNMSUB231SD
            // VFNMSUB231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm RC=$RC;
            return 2549 << 16 | 5172;
          }
          else
          {
            // TEMPLATE.VFNMSUB231SS_ronomx::VFNMSUB231SS
            // VFNMSUB231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm RC=$RC;
            return 2556 << 16 | 5189;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFNMSUB231SD_ronomx::VFNMSUB231SD
            // VFNMSUB231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
            return 2549 << 16 | 5171;
          }
          else
          {
            // TEMPLATE.VFNMSUB231SS_ronomx::VFNMSUB231SS
            // VFNMSUB231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
            return 2556 << 16 | 5188;
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUB231SD_ronqmq::VFNMSUB231SDmq
          // VFNMSUB231SD VREG:rw:f64=$XMMr REG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2550 << 16 | 5175;
        }
        else
        {
          // TEMPLATE.VFNMSUB231SS_rondmd::VFNMSUB231SSmd
          // VFNMSUB231SS VREG:rw:f32=$XMMr REG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2555 << 16 | 5187;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUB231SD_ronomx::VFNMSUB231SDmq
          // VFNMSUB231SD VREG:rw:f64=$XMMr PREG:r:Z=$Kk    VREG:r:f64=$XMMn MEM:r:f64=$mem64;
          return 2549 << 16 | 5173;
        }
        else
        {
          // TEMPLATE.VFNMSUB231SS_ronomx::VFNMSUB231SSmd
          // VFNMSUB231SS VREG:rw:f32=$XMMr PREG:r:Z=$Kk    VREG:r:f32=$XMMn MEM:r:f32=$mem32;
          return 2556 << 16 | 5190;
        }
      }
    }
  break;
  /* invalid */
  case 960:
    return 0;
  /* invalid */
  case 961:
    return 0;
  /* invalid */
  case 962:
    return 0;
  /* invalid */
  case 963:
    return 0;
  /* 0f38.0xc4 */
  case 964:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCONFLICTx_rymy::VPCONFLICTQ
          // VPCONFLICTQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMm;
          return 2695 << 16 | 5495;
        }
        else
        {
          // TEMPLATE.VPCONFLICTx_rymy::VPCONFLICTD
          // VPCONFLICTD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMm;
          return 2695 << 16 | 5493;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCONFLICTx_rzmz::VPCONFLICTQ
            // VPCONFLICTQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMm;
            return 2696 << 16 | 5499;
          }
          else
          {
            // TEMPLATE.VPCONFLICTx_rzmz::VPCONFLICTD
            // VPCONFLICTD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMm;
            return 2696 << 16 | 5497;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCONFLICTx_romo::VPCONFLICTQ
            // VPCONFLICTQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMm;
            return 2694 << 16 | 5491;
          }
          else
          {
            // TEMPLATE.VPCONFLICTx_romo::VPCONFLICTD
            // VPCONFLICTD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMm;
            return 2694 << 16 | 5489;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCONFLICTx_rymy::VPCONFLICTQmy
          // VPCONFLICTQ VREG:w:u64=$YMMr PREG:r:Z=$Kk MEM:r:u64=$mem256 BCST=$BCST;
          return 2695 << 16 | 5496;
        }
        else
        {
          // TEMPLATE.VPCONFLICTx_rymy::VPCONFLICTDmy
          // VPCONFLICTD VREG:w:u32=$YMMr PREG:r:Z=$Kk MEM:r:u32=$mem256 BCST=$BCST;
          return 2695 << 16 | 5494;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCONFLICTx_rzmz::VPCONFLICTQmz
            // VPCONFLICTQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk MEM:r:u64=$mem512 BCST=$BCST;
            return 2696 << 16 | 5500;
          }
          else
          {
            // TEMPLATE.VPCONFLICTx_rzmz::VPCONFLICTDmz
            // VPCONFLICTD VREG:w:u32=$ZMMr PREG:r:Z=$Kk MEM:r:u32=$mem512 BCST=$BCST;
            return 2696 << 16 | 5498;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCONFLICTx_romo::VPCONFLICTQmx
            // VPCONFLICTQ VREG:w:u64=$XMMr PREG:r:Z=$Kk MEM:r:u64=$mem128 BCST=$BCST;
            return 2694 << 16 | 5492;
          }
          else
          {
            // TEMPLATE.VPCONFLICTx_romo::VPCONFLICTDmx
            // VPCONFLICTD VREG:w:u32=$XMMr PREG:r:Z=$Kk MEM:r:u32=$mem128 BCST=$BCST;
            return 2694 << 16 | 5490;
          }
        }
      }
    }
  break;
  /* invalid */
  case 965:
    return 0;
  /* 0f38.0xc6 */
  case 966:
    if (a & 0x02)
    {
      if (a & 0x08)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VSCATTERPF0DPS_m0::VSCATTERPF0DPSm
          // VSCATTERPF0DPS MEM:w=$vmz SWZ=$u_f32 EVH=$EVH PREG:rw:Z=$Kk;
          return 3494 << 16 | 7266;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VSCATTERPF0DPD::VSCATTERPF0DPDmq
            // VSCATTERPF0DPD MEM:r:f64=$vmy64 PREG:rw=$Kk;
            return 3493 << 16 | 7265;
          }
          else
          {
            // TEMPLATE.VSCATTERPF0DPS_md::VSCATTERPF0DPSmd
            // VSCATTERPF0DPS MEM:r:f32=$vmz32               PREG:rw=$Kk;
            return 3495 << 16 | 7267;
          }
        }
      }
      else
      {
        if (c & 0x01)
        {
          // TEMPLATE.VGATHERPF0DPS_m0::VGATHERPF0DPSm
          // VGATHERPF0DPS MEM:r=$vmz SWZ=$u_f32 EVH=$EVH PREG:rw:Z=$Kk;
          return 3359 << 16 | 6986;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGATHERPF0DPD::VGATHERPF0DPDmq
            // VGATHERPF0DPD MEM:r:f64=$vmy64 PREG:rw=$Kk;
            return 3358 << 16 | 6985;
          }
          else
          {
            // TEMPLATE.VGATHERPF0DPS_md::VGATHERPF0DPSmd
            // VGATHERPF0DPS MEM:r:f32=$vmz32               PREG:rw=$Kk;
            return 3360 << 16 | 6987;
          }
        }
      }
    }
    else
    {
      if (a & 0x04)
      {
        if (a & 0x08)
        {
          if (c & 0x01)
          {
            // TEMPLATE.VSCATTERPF1DPS_m0::VSCATTERPF1DPSm
            // VSCATTERPF1DPS MEM:w=$vmz SWZ=$u_f32 EVH=$EVH PREG:rw:Z=$Kk;
            return 3501 << 16 | 7273;
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VSCATTERPF1DPD::VSCATTERPF1DPDmq
              // VSCATTERPF1DPD MEM:r:f64=$vmy64 PREG:rw=$Kk;
              return 3500 << 16 | 7272;
            }
            else
            {
              // TEMPLATE.VSCATTERPF1DPS_md::VSCATTERPF1DPSmd
              // VSCATTERPF1DPS MEM:r:f32=$vmz32               PREG:rw=$Kk;
              return 3502 << 16 | 7274;
            }
          }
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VGATHERPF1DPS_m0::VGATHERPF1DPSm
            // VGATHERPF1DPS MEM:r=$vmz SWZ=$u_f32 EVH=$EVH PREG:rw:Z=$Kk;
            return 3366 << 16 | 6993;
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VGATHERPF1DPD::VGATHERPF1DPDmq
              // VGATHERPF1DPD MEM:r:f64=$vmy64 PREG:rw=$Kk;
              return 3365 << 16 | 6992;
            }
            else
            {
              // TEMPLATE.VGATHERPF1DPS_md::VGATHERPF1DPSmd
              // VGATHERPF1DPS MEM:r:f32=$vmz32               PREG:rw=$Kk;
              return 3367 << 16 | 6994;
            }
          }
        }
      }
      else
      {
        if (a & 0x08)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VSCATTERPF0HINTDPD::VSCATTERPF0HINTDPDm
            // VSCATTERPF0HINTDPD MEM:w=$vmz SWZ=$u_f32 EVH=$EVH PREG:rw:Z=$Kk;
            return 3496 << 16 | 7268;
          }
          else
          {
            // TEMPLATE.VSCATTERPF0HINTDPS::VSCATTERPF0HINTDPSm
            // VSCATTERPF0HINTDPS MEM:w=$vmz SWZ=$u_f32 EVH=$EVH PREG:rw:Z=$Kk;
            return 3497 << 16 | 7269;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGATHERPF0HINTDPD::VGATHERPF0HINTDPDm
            // VGATHERPF0HINTDPD MEM:r=$vmz SWZ=$u_f32 EVH=$EVH PREG:rw:Z=$Kk;
            return 3361 << 16 | 6988;
          }
          else
          {
            // TEMPLATE.VGATHERPF0HINTDPS::VGATHERPF0HINTDPSm
            // VGATHERPF0HINTDPS MEM:r=$vmz SWZ=$u_f32 EVH=$EVH PREG:rw:Z=$Kk;
            return 3362 << 16 | 6989;
          }
        }
      }
    }
  break;
  /* 0f38.0xc7 */
  case 967:
    if (a & 0x02)
    {
      if (a & 0x08)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSCATTERPF0QPD::VSCATTERPF0QPDmq
          // VSCATTERPF0QPD MEM:r:f64=$vmz64 PREG:rw=$Kk;
          return 3498 << 16 | 7270;
        }
        else
        {
          // TEMPLATE.VSCATTERPF0QPS::VSCATTERPF0QPSmd
          // VSCATTERPF0QPS MEM:r:f32=$vmz32 PREG:rw=$Kk;
          return 3499 << 16 | 7271;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGATHERPF0QPD::VGATHERPF0QPDmq
          // VGATHERPF0QPD MEM:r:f64=$vmz64 PREG:rw=$Kk;
          return 3363 << 16 | 6990;
        }
        else
        {
          // TEMPLATE.VGATHERPF0QPS::VGATHERPF0QPSmd
          // VGATHERPF0QPS MEM:r:f32=$vmz32 PREG:rw=$Kk;
          return 3364 << 16 | 6991;
        }
      }
    }
    else
    {
      if (a & 0x08)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSCATTERPF1QPD::VSCATTERPF1QPDmq
          // VSCATTERPF1QPD MEM:r:f64=$vmz64 PREG:rw=$Kk;
          return 3503 << 16 | 7275;
        }
        else
        {
          // TEMPLATE.VSCATTERPF1QPS::VSCATTERPF1QPSmd
          // VSCATTERPF1QPS MEM:r:f32=$vmz32 PREG:rw=$Kk;
          return 3504 << 16 | 7276;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGATHERPF1QPD::VGATHERPF1QPDmq
          // VGATHERPF1QPD MEM:r:f64=$vmz64 PREG:rw=$Kk;
          return 3368 << 16 | 6995;
        }
        else
        {
          // TEMPLATE.VGATHERPF1QPS::VGATHERPF1QPSmd
          // VGATHERPF1QPS MEM:r:f32=$vmz32 PREG:rw=$Kk;
          return 3369 << 16 | 6996;
        }
      }
    }
  break;
  /* 0f38.0xc8 */
  case 968:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (c & 0x08)
          {
            // TEMPLATE.VEXP223PS::VEXP223PS
            // VEXP223PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm SAE=$SAE;
            return 3326 << 16 | 6894;
          }
          else
          {
            // TEMPLATE.VEXP223PS::VEXP223PS
            // VEXP223PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm;
            return 3326 << 16 | 6893;
          }
        }
        else
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VEXP2PD::VEXP2PD
              // VEXP2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE;
              return 3327 << 16 | 6896;
            }
            else
            {
              // TEMPLATE.VEXP2PS::VEXP2PS
              // VEXP2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE;
              return 3328 << 16 | 6899;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VEXP2PD::VEXP2PD
              // VEXP2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
              return 3327 << 16 | 6897;
            }
            else
            {
              // TEMPLATE.VEXP2PS::VEXP2PS
              // VEXP2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm;
              return 3328 << 16 | 6900;
            }
          }
        }
      }
      else
      {
        // TEMPLATE.SHA1NEXTE_romo_1::SHA1NEXTE
        // SHA1NEXTE VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
        return 468 << 16 | 826;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VEXP223PS::VEXP223PSmz
          // VEXP223PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r:s32=$mem512 SWZ=$n_f32 EVH=$EVH;
          return 3326 << 16 | 6895;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VEXP2PD::VEXP2PDmz
            // VEXP2PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
            return 3327 << 16 | 6898;
          }
          else
          {
            // TEMPLATE.VEXP2PS::VEXP2PSmz
            // VEXP2PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST;
            return 3328 << 16 | 6901;
          }
        }
      }
      else
      {
        // TEMPLATE.SHA1NEXTE_romo_2::SHA1NEXTEmx
        // SHA1NEXTE VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
        return 469 << 16 | 827;
      }
    }
  break;
  /* 0f38.0xc9 */
  case 969:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x08)
        {
          // TEMPLATE.VLOG2PS::VLOG2PS
          // VLOG2PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm SAE=$SAE;
          return 3387 << 16 | 7033;
        }
        else
        {
          // TEMPLATE.VLOG2PS::VLOG2PS
          // VLOG2PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm;
          return 3387 << 16 | 7032;
        }
      }
      else
      {
        // TEMPLATE.SHA1MSG1_romo_1::SHA1MSG1
        // SHA1MSG1 VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
        return 464 << 16 | 822;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // TEMPLATE.VLOG2PS::VLOG2PSmz
        // VLOG2PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r:s32=$mem512 SWZ=$n_f32 EVH=$EVH;
        return 3387 << 16 | 7034;
      }
      else
      {
        // TEMPLATE.SHA1MSG1_romo_2::SHA1MSG1mx
        // SHA1MSG1 VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
        return 465 << 16 | 823;
      }
    }
  break;
  /* 0f38.0xca */
  case 970:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (c & 0x08)
          {
            // TEMPLATE.VRCP23PS::VRCP23PS
            // VRCP23PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm SAE=$SAE;
            return 3478 << 16 | 7225;
          }
          else
          {
            // TEMPLATE.VRCP23PS::VRCP23PS
            // VRCP23PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm;
            return 3478 << 16 | 7224;
          }
        }
        else
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VRCP28PD::VRCP28PD
              // VRCP28PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE;
              return 3479 << 16 | 7227;
            }
            else
            {
              // TEMPLATE.VRCP28PS::VRCP28PS
              // VRCP28PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE;
              return 3480 << 16 | 7230;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VRCP28PD::VRCP28PD
              // VRCP28PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
              return 3479 << 16 | 7228;
            }
            else
            {
              // TEMPLATE.VRCP28PS::VRCP28PS
              // VRCP28PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm;
              return 3480 << 16 | 7231;
            }
          }
        }
      }
      else
      {
        // TEMPLATE.SHA1MSG2_romo_1::SHA1MSG2
        // SHA1MSG2 VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
        return 466 << 16 | 824;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VRCP23PS::VRCP23PSmz
          // VRCP23PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r:s32=$mem512 SWZ=$n_f32 EVH=$EVH;
          return 3478 << 16 | 7226;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRCP28PD::VRCP28PDmz
            // VRCP28PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
            return 3479 << 16 | 7229;
          }
          else
          {
            // TEMPLATE.VRCP28PS::VRCP28PSmz
            // VRCP28PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST;
            return 3480 << 16 | 7232;
          }
        }
      }
      else
      {
        // TEMPLATE.SHA1MSG2_romo_2::SHA1MSG2mx
        // SHA1MSG2 VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
        return 467 << 16 | 825;
      }
    }
  break;
  /* 0f38.0xcb */
  case 971:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (c & 0x08)
          {
            // TEMPLATE.VRSQRT23PS::VRSQRT23PS
            // VRSQRT23PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm SAE=$SAE;
            return 3485 << 16 | 7246;
          }
          else
          {
            // TEMPLATE.VRSQRT23PS::VRSQRT23PS
            // VRSQRT23PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm;
            return 3485 << 16 | 7245;
          }
        }
        else
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VRCP28SD::VRCP28SD
              // VRCP28SD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm SAE=$SAE;
              return 3481 << 16 | 7234;
            }
            else
            {
              // TEMPLATE.VRCP28SS::VRCP28SS
              // VRCP28SS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE;
              return 3482 << 16 | 7237;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VRCP28SD::VRCP28SD
              // VRCP28SD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 3481 << 16 | 7233;
            }
            else
            {
              // TEMPLATE.VRCP28SS::VRCP28SS
              // VRCP28SS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 3482 << 16 | 7236;
            }
          }
        }
      }
      else
      {
        // TEMPLATE.SHA256RNDS2_romo_1::SHA256RNDS2
        // SHA256RNDS2 VREG:rw:s32=$XMMr VREG:r:s32=$XMMm  VREG:SUPP:r:u8=XMM0;
        return 476 << 16 | 834;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VRSQRT23PS::VRSQRT23PSmz
          // VRSQRT23PS VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r:s32=$mem512 SWZ=$n_f32 EVH=$EVH;
          return 3485 << 16 | 7247;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRCP28SD::VRCP28SDmq
            // VRCP28SD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 3481 << 16 | 7235;
          }
          else
          {
            // TEMPLATE.VRCP28SS::VRCP28SSmd
            // VRCP28SS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem32;
            return 3482 << 16 | 7238;
          }
        }
      }
      else
      {
        // TEMPLATE.SHA256RNDS2_romo_2::SHA256RNDS2mx
        // SHA256RNDS2 VREG:rw:s32=$XMMr MEM:r:s32=$mem128 VREG:SUPP:r:u8=XMM0;
        return 477 << 16 | 835;
      }
    }
  break;
  /* 0f38.0xcc */
  case 972:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (c & 0x08)
          {
            // TEMPLATE.VADDSETSPS_rznzmz::VADDSETSPS
            // VADDSETSPS VREG:rw:f32=$ZMMr PREG:rw:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm RC=$RC;
            return 3304 << 16 | 6842;
          }
          else
          {
            // TEMPLATE.VADDSETSPS_rznzmz::VADDSETSPS
            // VADDSETSPS VREG:rw:f32=$ZMMr PREG:rw:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3304 << 16 | 6841;
          }
        }
        else
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VRSQRT28PD::VRSQRT28PD
              // VRSQRT28PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE;
              return 3486 << 16 | 7248;
            }
            else
            {
              // TEMPLATE.VRSQRT28PS::VRSQRT28PS
              // VRSQRT28PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE;
              return 3487 << 16 | 7251;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VRSQRT28PD::VRSQRT28PD
              // VRSQRT28PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm;
              return 3486 << 16 | 7249;
            }
            else
            {
              // TEMPLATE.VRSQRT28PS::VRSQRT28PS
              // VRSQRT28PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm;
              return 3487 << 16 | 7252;
            }
          }
        }
      }
      else
      {
        // TEMPLATE.SHA256MSG1_romo_1::SHA256MSG1
        // SHA256MSG1 VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
        return 472 << 16 | 830;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VADDSETSPS_rznzm0::VADDSETSPSm
          // VADDSETSPS VREG:rw:f32=$ZMMr PREG:rw:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_f32 EVH=$EVH;
          return 3303 << 16 | 6840;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRSQRT28PD::VRSQRT28PDmz
            // VRSQRT28PD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST;
            return 3486 << 16 | 7250;
          }
          else
          {
            // TEMPLATE.VRSQRT28PS::VRSQRT28PSmz
            // VRSQRT28PS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST;
            return 3487 << 16 | 7253;
          }
        }
      }
      else
      {
        // TEMPLATE.SHA256MSG1_romo_2::SHA256MSG1mx
        // SHA256MSG1 VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
        return 473 << 16 | 831;
      }
    }
  break;
  /* 0f38.0xcd */
  case 973:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          if (c & 0x08)
          {
            // TEMPLATE.VPADDSETSD::VPADDSETSD
            // VPADDSETSD VREG:rw:f32=$ZMMr PREG:rw:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm;
            return 3415 << 16 | 7081;
          }
          else
          {
            // TEMPLATE.VPADDSETSD::VPADDSETSD
            // VPADDSETSD VREG:rw:f32=$ZMMr PREG:rw:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SWZ=$r_i32;
            return 3415 << 16 | 7080;
          }
        }
        else
        {
          if (b & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VRSQRT28SD::VRSQRT28SD
              // VRSQRT28SD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm SAE=$SAE;
              return 3488 << 16 | 7255;
            }
            else
            {
              // TEMPLATE.VRSQRT28SS::VRSQRT28SS
              // VRSQRT28SS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE;
              return 3489 << 16 | 7258;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VRSQRT28SD::VRSQRT28SD
              // VRSQRT28SD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm;
              return 3488 << 16 | 7254;
            }
            else
            {
              // TEMPLATE.VRSQRT28SS::VRSQRT28SS
              // VRSQRT28SS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm;
              return 3489 << 16 | 7257;
            }
          }
        }
      }
      else
      {
        // TEMPLATE.SHA256MSG2_romo_1::SHA256MSG2
        // SHA256MSG2 VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
        return 474 << 16 | 832;
      }
    }
    else
    {
      if (b & 0x40)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPADDSETSD::VPADDSETSDm
          // VPADDSETSD VREG:rw:f32=$ZMMr PREG:rw:Z=$Kk VREG:r:f32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH;
          return 3415 << 16 | 7082;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRSQRT28SD::VRSQRT28SDmq
            // VRSQRT28SD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem64;
            return 3488 << 16 | 7256;
          }
          else
          {
            // TEMPLATE.VRSQRT28SS::VRSQRT28SSmd
            // VRSQRT28SS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem32;
            return 3489 << 16 | 7259;
          }
        }
      }
      else
      {
        // TEMPLATE.SHA256MSG2_romo_2::SHA256MSG2mx
        // SHA256MSG2 VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
        return 475 << 16 | 833;
      }
    }
  break;
  /* invalid */
  case 974:
    return 0;
  /* 0f38.0xcf */
  case 975:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.GF2P8MULB::GF2P8MULB
          // GF2P8MULB  VREG:rw:u8=$XMMr VREG:r:u8=$XMMm;
          return 1356 << 16 | 2507;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VGF2P8MULB_rxnxmx::VGF2P8MULB
            // VGF2P8MULB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
            return 1358 << 16 | 2512;
          }
          else
          {
            // TEMPLATE.VGF2P8MULB_rxnxmx::VGF2P8MULB
            // VGF2P8MULB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
            return 1358 << 16 | 2511;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VGF2P8MULB_ronomo::VGF2P8MULB
              // VGF2P8MULB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
              return 1357 << 16 | 2509;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VGF2P8MULB_rynymy::VGF2P8MULB
              // VGF2P8MULB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn  VREG:r:u8=$YMMm;
              return 1359 << 16 | 2515;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VGF2P8MULB_rznzmz::VGF2P8MULB
              // VGF2P8MULB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn  VREG:r:u8=$ZMMm;
              return 1360 << 16 | 2517;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.GF2P8MULB::GF2P8MULBmx
          // GF2P8MULB  VREG:rw:u8=$XMMr MEM:r:u8=$mem128;
          return 1356 << 16 | 2508;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VGF2P8MULB_rxnxmx::VGF2P8MULBmy
            // VGF2P8MULB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
            return 1358 << 16 | 2514;
          }
          else
          {
            // TEMPLATE.VGF2P8MULB_rxnxmx::VGF2P8MULBmx
            // VGF2P8MULB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
            return 1358 << 16 | 2513;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VGF2P8MULB_ronomo::VGF2P8MULBmx
              // VGF2P8MULB VREG:w:u8=$XMMr  PREG:r:Z=$Kk     VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
              return 1357 << 16 | 2510;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VGF2P8MULB_rynymy::VGF2P8MULBmy
              // VGF2P8MULB VREG:w:u8=$YMMr  PREG:r:Z=$Kk     VREG:r:u8=$YMMn  MEM:r:u8=$mem256;
              return 1359 << 16 | 2516;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VGF2P8MULB_rznzmz::VGF2P8MULBmz
              // VGF2P8MULB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk     VREG:r:u8=$ZMMn  MEM:r:u8=$mem512;
              return 1360 << 16 | 2518;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0xd0 */
  case 976:
    if (b & 0x40)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPACKSTORELQ::VPACKSTORELQm
        // VPACKSTORELQ MEM:w=$mem PREG:r:Z=$Kk VREG:r:s64=$ZMMr SWZ=$d_i64 EVH=$EVH;
        return 3411 << 16 | 7070;
      }
      else
      {
        // TEMPLATE.VPACKSTORELD::VPACKSTORELDm
        // VPACKSTORELD MEM:w=$mem PREG:r:Z=$Kk VREG:r:s32=$ZMMr SWZ=$d_i32 EVH=$EVH;
        return 3408 << 16 | 7067;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VLOADUNPACKLQ::VLOADUNPACKLQm
        // VLOADUNPACKLQ VREG:rw:s64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_i64 EVH=$EVH;
        return 3386 << 16 | 7031;
      }
      else
      {
        // TEMPLATE.VLOADUNPACKLD::VLOADUNPACKLDm
        // VLOADUNPACKLD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_i32 EVH=$EVH;
        return 3383 << 16 | 7028;
      }
    }
  break;
  /* 0f38.0xd1 */
  case 977:
    if (b & 0x40)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPACKSTORELPD::VPACKSTORELPDm
        // VPACKSTORELPD MEM:w=$mem PREG:r:Z=$Kk VREG:r:f64=$ZMMr SWZ=$d_f64 EVH=$EVH;
        return 3409 << 16 | 7068;
      }
      else
      {
        // TEMPLATE.VPACKSTORELPS::VPACKSTORELPSm
        // VPACKSTORELPS MEM:w=$mem PREG:r:Z=$Kk VREG:r:f32=$ZMMr SWZ=$d_f32 EVH=$EVH;
        return 3410 << 16 | 7069;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VLOADUNPACKLPD::VLOADUNPACKLPDm
        // VLOADUNPACKLPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_f64 EVH=$EVH;
        return 3384 << 16 | 7029;
      }
      else
      {
        // TEMPLATE.VLOADUNPACKLPS::VLOADUNPACKLPSm
        // VLOADUNPACKLPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_f32 EVH=$EVH;
        return 3385 << 16 | 7030;
      }
    }
  break;
  /* invalid */
  case 978:
    return 0;
  /* invalid */
  case 979:
    return 0;
  /* 0f38.0xd4 */
  case 980:
    if (b & 0x40)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPACKSTOREHQ::VPACKSTOREHQm
        // VPACKSTOREHQ MEM:w=$mem PREG:r:Z=$Kk VREG:r:s64=$ZMMr SWZ=$d_i64 EVH=$EVH;
        return 3407 << 16 | 7066;
      }
      else
      {
        // TEMPLATE.VPACKSTOREHD::VPACKSTOREHDm
        // VPACKSTOREHD MEM:w=$mem PREG:r:Z=$Kk VREG:r:s32=$ZMMr SWZ=$d_i32 EVH=$EVH;
        return 3404 << 16 | 7063;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VLOADUNPACKHQ::VLOADUNPACKHQm
        // VLOADUNPACKHQ VREG:rw:s64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_i64 EVH=$EVH;
        return 3382 << 16 | 7027;
      }
      else
      {
        // TEMPLATE.VLOADUNPACKHD::VLOADUNPACKHDm
        // VLOADUNPACKHD VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_i32 EVH=$EVH;
        return 3379 << 16 | 7024;
      }
    }
  break;
  /* 0f38.0xd5 */
  case 981:
    if (b & 0x40)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPACKSTOREHPD::VPACKSTOREHPDm
        // VPACKSTOREHPD MEM:w=$mem PREG:r:Z=$Kk VREG:r:f64=$ZMMr SWZ=$d_f64 EVH=$EVH;
        return 3405 << 16 | 7064;
      }
      else
      {
        // TEMPLATE.VPACKSTOREHPS::VPACKSTOREHPSm
        // VPACKSTOREHPS MEM:w=$mem PREG:r:Z=$Kk VREG:r:f32=$ZMMr SWZ=$d_f32 EVH=$EVH;
        return 3406 << 16 | 7065;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VLOADUNPACKHPD::VLOADUNPACKHPDm
        // VLOADUNPACKHPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_f64 EVH=$EVH;
        return 3380 << 16 | 7025;
      }
      else
      {
        // TEMPLATE.VLOADUNPACKHPS::VLOADUNPACKHPSm
        // VLOADUNPACKHPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$u_f32 EVH=$EVH;
        return 3381 << 16 | 7026;
      }
    }
  break;
  /* invalid */
  case 982:
    return 0;
  /* invalid */
  case 983:
    return 0;
  /* invalid */
  case 984:
    return 0;
  /* invalid */
  case 985:
    return 0;
  /* invalid */
  case 986:
    return 0;
  /* 0f38.0xdb */
  case 987:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // TEMPLATE.VAESIMC::VAESIMC
        // VAESIMC VREG:w:s32=$XMMr VREG:r:s32=$XMMm;
        return 1243 << 16 | 2154;
      }
      else
      {
        // TEMPLATE.AESIMC::AESIMC
        // AESIMC VREG:w:s32=$XMMr VREG:r:s32=$XMMm;
        return 30 << 16 | 56;
      }
    }
    else
    {
      if (c & 0x01)
      {
        // TEMPLATE.VAESIMC::VAESIMCmx
        // VAESIMC VREG:w:s32=$XMMr MEM:r:s32=$mem128;
        return 1243 << 16 | 2155;
      }
      else
      {
        // TEMPLATE.AESIMC::AESIMCmx
        // AESIMC VREG:w:s32=$XMMr MEM:r:s32=$mem128;
        return 30 << 16 | 57;
      }
    }
  break;
  /* 0f38.0xdc */
  case 988:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.AESENC::AESENC
          // AESENC VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 28 << 16 | 52;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VAESENC_rynymy_1::VAESENC
            // VAESENC VREG:w:u128=$YMMr VREG:r:u128=$YMMn VREG:r:u128=$YMMm;
            return 1235 << 16 | 2138;
          }
          else
          {
            // TEMPLATE.VAESENC_ronomo_1::VAESENC
            // VAESENC VREG:w:s32=$XMMr  VREG:r:s32=$XMMn  VREG:r:s32=$XMMm;
            return 1233 << 16 | 2134;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VAESENC_ronomo_2::VAESENC
              // VAESENC REG:w:u128=$XMMr  REG:r:u128=$XMMn  REG:r:u128=$XMMm;
              return 1234 << 16 | 2136;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VAESENC_rynymy_2::VAESENC
              // VAESENC VREG:w:u128=$YMMr VREG:r:u128=$YMMn VREG:r:u128=$YMMm;
              return 1236 << 16 | 2140;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VAESENC_rznzmz::VAESENC
              // VAESENC VREG:w:u128=$ZMMr VREG:r:u128=$ZMMn VREG:r:u128=$ZMMm;
              return 1237 << 16 | 2142;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.AESENC::AESENCmx
          // AESENC VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 28 << 16 | 53;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VAESENC_rynymy_1::VAESENCmy
            // VAESENC VREG:w:u128=$YMMr VREG:r:u128=$YMMn MEM:r:u128=$mem256;
            return 1235 << 16 | 2139;
          }
          else
          {
            // TEMPLATE.VAESENC_ronomo_1::VAESENCmx
            // VAESENC VREG:w:s32=$XMMr  VREG:r:s32=$XMMn  MEM:r:s32=$mem128;
            return 1233 << 16 | 2135;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VAESENC_ronomo_2::VAESENCmx
              // VAESENC REG:w:u128=$XMMr  REG:r:u128=$XMMn  MEM:r:u128=$mem128;
              return 1234 << 16 | 2137;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VAESENC_rynymy_2::VAESENCmy
              // VAESENC VREG:w:u128=$YMMr VREG:r:u128=$YMMn MEM:r:u128=$mem256;
              return 1236 << 16 | 2141;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VAESENC_rznzmz::VAESENCmz
              // VAESENC VREG:w:u128=$ZMMr VREG:r:u128=$ZMMn MEM:r:u128=$mem512;
              return 1237 << 16 | 2143;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0xdd */
  case 989:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.AESENCLAST::AESENCLAST
          // AESENCLAST VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 29 << 16 | 54;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VAESENCLAST_rynymy_1::VAESENCLAST
            // VAESENCLAST VREG:w:u128=$YMMr VREG:r:u128=$YMMn VREG:r:u128=$YMMm;
            return 1240 << 16 | 2148;
          }
          else
          {
            // TEMPLATE.VAESENCLAST_ronomo_1::VAESENCLAST
            // VAESENCLAST VREG:w:s32=$XMMr  VREG:r:s32=$XMMn  VREG:r:s32=$XMMm;
            return 1238 << 16 | 2144;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VAESENCLAST_ronomo_2::VAESENCLAST
              // VAESENCLAST REG:w:u128=$XMMr  REG:r:u128=$XMMn  REG:r:u128=$XMMm;
              return 1239 << 16 | 2146;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VAESENCLAST_rynymy_2::VAESENCLAST
              // VAESENCLAST VREG:w:u128=$YMMr VREG:r:u128=$YMMn VREG:r:u128=$YMMm;
              return 1241 << 16 | 2150;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VAESENCLAST_rznzmz::VAESENCLAST
              // VAESENCLAST VREG:w:u128=$ZMMr VREG:r:u128=$ZMMn VREG:r:u128=$ZMMm;
              return 1242 << 16 | 2152;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.AESENCLAST::AESENCLASTmx
          // AESENCLAST VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 29 << 16 | 55;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VAESENCLAST_rynymy_1::VAESENCLASTmy
            // VAESENCLAST VREG:w:u128=$YMMr VREG:r:u128=$YMMn MEM:r:u128=$mem256;
            return 1240 << 16 | 2149;
          }
          else
          {
            // TEMPLATE.VAESENCLAST_ronomo_1::VAESENCLASTmx
            // VAESENCLAST VREG:w:s32=$XMMr  VREG:r:s32=$XMMn  MEM:r:s32=$mem128;
            return 1238 << 16 | 2145;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VAESENCLAST_ronomo_2::VAESENCLASTmx
              // VAESENCLAST REG:w:u128=$XMMr  REG:r:u128=$XMMn  MEM:r:u128=$mem128;
              return 1239 << 16 | 2147;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VAESENCLAST_rynymy_2::VAESENCLASTmy
              // VAESENCLAST VREG:w:u128=$YMMr VREG:r:u128=$YMMn MEM:r:u128=$mem256;
              return 1241 << 16 | 2151;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VAESENCLAST_rznzmz::VAESENCLASTmz
              // VAESENCLAST VREG:w:u128=$ZMMr VREG:r:u128=$ZMMn MEM:r:u128=$mem512;
              return 1242 << 16 | 2153;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0xde */
  case 990:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.AESDEC::AESDEC
          // AESDEC VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 26 << 16 | 48;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VAESDEC_rynymy_1::VAESDEC
            // VAESDEC VREG:w:u128=$YMMr VREG:r:u128=$YMMn VREG:r:u128=$YMMm;
            return 1225 << 16 | 2118;
          }
          else
          {
            // TEMPLATE.VAESDEC_ronomo_1::VAESDEC
            // VAESDEC VREG:w:s32=$XMMr  VREG:r:s32=$XMMn  VREG:r:s32=$XMMm;
            return 1223 << 16 | 2114;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VAESDEC_ronomo_2::VAESDEC
              // VAESDEC REG:w:u128=$XMMr  REG:r:u128=$XMMn  REG:r:u128=$XMMm;
              return 1224 << 16 | 2116;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VAESDEC_rynymy_2::VAESDEC
              // VAESDEC VREG:w:u128=$YMMr VREG:r:u128=$YMMn VREG:r:u128=$YMMm;
              return 1226 << 16 | 2120;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VAESDEC_rznzmz::VAESDEC
              // VAESDEC VREG:w:u128=$ZMMr VREG:r:u128=$ZMMn VREG:r:u128=$ZMMm;
              return 1227 << 16 | 2122;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.AESDEC::AESDECmx
          // AESDEC VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 26 << 16 | 49;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VAESDEC_rynymy_1::VAESDECmy
            // VAESDEC VREG:w:u128=$YMMr VREG:r:u128=$YMMn MEM:r:u128=$mem256;
            return 1225 << 16 | 2119;
          }
          else
          {
            // TEMPLATE.VAESDEC_ronomo_1::VAESDECmx
            // VAESDEC VREG:w:s32=$XMMr  VREG:r:s32=$XMMn  MEM:r:s32=$mem128;
            return 1223 << 16 | 2115;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VAESDEC_ronomo_2::VAESDECmx
              // VAESDEC REG:w:u128=$XMMr  REG:r:u128=$XMMn  MEM:r:u128=$mem128;
              return 1224 << 16 | 2117;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VAESDEC_rynymy_2::VAESDECmy
              // VAESDEC VREG:w:u128=$YMMr VREG:r:u128=$YMMn MEM:r:u128=$mem256;
              return 1226 << 16 | 2121;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VAESDEC_rznzmz::VAESDECmz
              // VAESDEC VREG:w:u128=$ZMMr VREG:r:u128=$ZMMn MEM:r:u128=$mem512;
              return 1227 << 16 | 2123;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f38.0xdf */
  case 991:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.AESDECLAST::AESDECLAST
          // AESDECLAST VREG:rw:s32=$XMMr VREG:r:s32=$XMMm;
          return 27 << 16 | 50;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VAESDECLAST_rynymy_1::VAESDECLAST
            // VAESDECLAST VREG:w:u128=$YMMr VREG:r:u128=$YMMn VREG:r:u128=$YMMm;
            return 1230 << 16 | 2128;
          }
          else
          {
            // TEMPLATE.VAESDECLAST_ronomo_1::VAESDECLAST
            // VAESDECLAST VREG:w:s32=$XMMr  VREG:r:s32=$XMMn  VREG:r:s32=$XMMm;
            return 1228 << 16 | 2124;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VAESDECLAST_ronomo_2::VAESDECLAST
              // VAESDECLAST REG:w:u128=$XMMr  REG:r:u128=$XMMn  REG:r:u128=$XMMm;
              return 1229 << 16 | 2126;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VAESDECLAST_rynymy_2::VAESDECLAST
              // VAESDECLAST VREG:w:u128=$YMMr VREG:r:u128=$YMMn VREG:r:u128=$YMMm;
              return 1231 << 16 | 2130;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VAESDECLAST_rznzmz::VAESDECLAST
              // VAESDECLAST VREG:w:u128=$ZMMr VREG:r:u128=$ZMMn VREG:r:u128=$ZMMm;
              return 1232 << 16 | 2132;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.AESDECLAST::AESDECLASTmx
          // AESDECLAST VREG:rw:s32=$XMMr MEM:r:s32=$mem128;
          return 27 << 16 | 51;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VAESDECLAST_rynymy_1::VAESDECLASTmy
            // VAESDECLAST VREG:w:u128=$YMMr VREG:r:u128=$YMMn MEM:r:u128=$mem256;
            return 1230 << 16 | 2129;
          }
          else
          {
            // TEMPLATE.VAESDECLAST_ronomo_1::VAESDECLASTmx
            // VAESDECLAST VREG:w:s32=$XMMr  VREG:r:s32=$XMMn  MEM:r:s32=$mem128;
            return 1228 << 16 | 2125;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VAESDECLAST_ronomo_2::VAESDECLASTmx
              // VAESDECLAST REG:w:u128=$XMMr  REG:r:u128=$XMMn  MEM:r:u128=$mem128;
              return 1229 << 16 | 2127;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VAESDECLAST_rynymy_2::VAESDECLASTmy
              // VAESDECLAST VREG:w:u128=$YMMr VREG:r:u128=$YMMn MEM:r:u128=$mem256;
              return 1231 << 16 | 2131;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VAESDECLAST_rznzmz::VAESDECLASTmz
              // VAESDECLAST VREG:w:u128=$ZMMr VREG:r:u128=$ZMMn MEM:r:u128=$mem512;
              return 1232 << 16 | 2133;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* invalid */
  case 992:
    return 0;
  /* invalid */
  case 993:
    return 0;
  /* invalid */
  case 994:
    return 0;
  /* invalid */
  case 995:
    return 0;
  /* invalid */
  case 996:
    return 0;
  /* invalid */
  case 997:
    return 0;
  /* invalid */
  case 998:
    return 0;
  /* invalid */
  case 999:
    return 0;
  /* invalid */
  case 1000:
    return 0;
  /* invalid */
  case 1001:
    return 0;
  /* invalid */
  case 1002:
    return 0;
  /* invalid */
  case 1003:
    return 0;
  /* invalid */
  case 1004:
    return 0;
  /* invalid */
  case 1005:
    return 0;
  /* invalid */
  case 1006:
    return 0;
  /* invalid */
  case 1007:
    return 0;
  /* 0f38.0xf0 */
  case 1008:
    if (a & 0x01)
    {
      // TEMPLATE.CRC32_rymb::CRC32
      // CRC32 REG:rw:sx=$GPRyr REG:r:u8=$GPR8m;
      return 913 << 16 | 1524;
    }
    else
    {
      if (b & 0x10)
      {
        // TEMPLATE.CRC32_rymb::CRC32mb
        // CRC32 REG:rw:sx=$GPRyr MEM:r:u8=$mem8;
        return 913 << 16 | 1525;
      }
      else
      {
        // TEMPLATE.MOVBE_rvmv::MOVBEm
        // MOVBE REG:w=$GPRvr   MEM:r:sx=$memv;
        return 279 << 16 | 484;
      }
    }
  break;
  /* 0f38.0xf1 */
  case 1009:
    if (a & 0x01)
    {
      // TEMPLATE.CRC32_rymv::CRC32
      // CRC32 REG:rw:sx=$GPRyr REG:r:sx=$GPRvm;
      return 914 << 16 | 1526;
    }
    else
    {
      if (b & 0x10)
      {
        // TEMPLATE.CRC32_rymv::CRC32m
        // CRC32 REG:rw:sx=$GPRyr MEM:r:sx=$memv;
        return 914 << 16 | 1527;
      }
      else
      {
        // TEMPLATE.MOVBE_mvrv::MOVBEm
        // MOVBE MEM:w:sx=$memv REG:r=$GPRvr;
        return 278 << 16 | 483;
      }
    }
  break;
  /* 0f38.0xf2 */
  case 1010:
    if (a & 0x01)
    {
      if (c & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.ANDN::ANDN
          // ANDN REG:w:s64=$GPR64r REG:r:s64=$GPR64n REG:r:s64=$GPR64m;
          return 42 << 16 | 79;
        }
        else
        {
          // TEMPLATE.ANDN::ANDN
          // ANDN REG:w:s32=$GPR32r REG:r:s32=$GPR32n REG:r:s32=$GPR32m;
          return 42 << 16 | 78;
        }
      }
      else
      {
        // TEMPLATE.ANDN::ANDN
        // ANDN REG:w:s32=$GPR32r REG:r:s32=$GPR32n REG:r:s32=$GPR32m;
        return 42 << 16 | 82;
      }
    }
    else
    {
      if (c & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.ANDN::ANDNmq
          // ANDN REG:w:s64=$GPR64r REG:r:s64=$GPR64n MEM:r:s64=$mem64;
          return 42 << 16 | 81;
        }
        else
        {
          // TEMPLATE.ANDN::ANDNmd
          // ANDN REG:w:s32=$GPR32r REG:r:s32=$GPR32n MEM:r:s32=$mem32;
          return 42 << 16 | 80;
        }
      }
      else
      {
        // TEMPLATE.ANDN::ANDNmd
        // ANDN REG:w:s32=$GPR32r REG:r:s32=$GPR32n MEM:r:s32=$mem32;
        return 42 << 16 | 83;
      }
    }
  break;
  /* 0f38.0xf3 */
  case 1011:
    if (a & 0x01)
    {
      if (a & 0x02)
      {
        if (a & 0x04)
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.BLSI::BLSI
              // BLSI REG:w:s64=$GPR64n REG:r:s64=$GPR64m;
              return 45 << 16 | 93;
            }
            else
            {
              // TEMPLATE.BLSI::BLSI
              // BLSI REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
              return 45 << 16 | 92;
            }
          }
          else
          {
            // TEMPLATE.BLSI::BLSI
            // BLSI REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
            return 45 << 16 | 96;
          }
        }
        else
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.BLSR::BLSR
              // BLSR REG:w:s64=$GPR64n REG:r:s64=$GPR64m;
              return 47 << 16 | 105;
            }
            else
            {
              // TEMPLATE.BLSR::BLSR
              // BLSR REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
              return 47 << 16 | 104;
            }
          }
          else
          {
            // TEMPLATE.BLSR::BLSR
            // BLSR REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
            return 47 << 16 | 108;
          }
        }
      }
      else
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.BLSMSK::BLSMSK
            // BLSMSK REG:w:s64=$GPR64n REG:r:s64=$GPR64m;
            return 46 << 16 | 99;
          }
          else
          {
            // TEMPLATE.BLSMSK::BLSMSK
            // BLSMSK REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
            return 46 << 16 | 98;
          }
        }
        else
        {
          // TEMPLATE.BLSMSK::BLSMSK
          // BLSMSK REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
          return 46 << 16 | 102;
        }
      }
    }
    else
    {
      if (a & 0x02)
      {
        if (a & 0x04)
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.BLSI::BLSImq
              // BLSI REG:w:s64=$GPR64n MEM:r:s64=$mem64;
              return 45 << 16 | 95;
            }
            else
            {
              // TEMPLATE.BLSI::BLSImd
              // BLSI REG:w:s32=$GPR32n MEM:r:s32=$mem32;
              return 45 << 16 | 94;
            }
          }
          else
          {
            // TEMPLATE.BLSI::BLSImd
            // BLSI REG:w:s32=$GPR32n MEM:r:s32=$mem32;
            return 45 << 16 | 97;
          }
        }
        else
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.BLSR::BLSRmq
              // BLSR REG:w:s64=$GPR64n MEM:r:s64=$mem64;
              return 47 << 16 | 107;
            }
            else
            {
              // TEMPLATE.BLSR::BLSRmd
              // BLSR REG:w:s32=$GPR32n MEM:r:s32=$mem32;
              return 47 << 16 | 106;
            }
          }
          else
          {
            // TEMPLATE.BLSR::BLSRmd
            // BLSR REG:w:s32=$GPR32n MEM:r:s32=$mem32;
            return 47 << 16 | 109;
          }
        }
      }
      else
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.BLSMSK::BLSMSKmq
            // BLSMSK REG:w:s64=$GPR64n MEM:r:s64=$mem64;
            return 46 << 16 | 101;
          }
          else
          {
            // TEMPLATE.BLSMSK::BLSMSKmd
            // BLSMSK REG:w:s32=$GPR32n MEM:r:s32=$mem32;
            return 46 << 16 | 100;
          }
        }
        else
        {
          // TEMPLATE.BLSMSK::BLSMSKmd
          // BLSMSK REG:w:s32=$GPR32n MEM:r:s32=$mem32;
          return 46 << 16 | 103;
        }
      }
    }
  break;
  /* invalid */
  case 1012:
    return 0;
  /* 0f38.0xf5 */
  case 1013:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.PDEP::PDEP
            // PDEP REG:w:s64=$GPR64r REG:r:s64=$GPR64n REG:r:s64=$GPR64m;
            return 351 << 16 | 636;
          }
          else
          {
            // TEMPLATE.PDEP::PDEP
            // PDEP REG:w:s32=$GPR32r REG:r:s32=$GPR32n REG:r:s32=$GPR32m;
            return 351 << 16 | 635;
          }
        }
        else
        {
          // TEMPLATE.PDEP::PDEP
          // PDEP REG:w:s32=$GPR32r REG:r:s32=$GPR32n REG:r:s32=$GPR32m;
          return 351 << 16 | 639;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.PEXT::PEXT
              // PEXT REG:w:s64=$GPR64r REG:r:s64=$GPR64n REG:r:s64=$GPR64m;
              return 352 << 16 | 642;
            }
            else
            {
              // TEMPLATE.PEXT::PEXT
              // PEXT REG:w:s32=$GPR32r REG:r:s32=$GPR32n REG:r:s32=$GPR32m;
              return 352 << 16 | 641;
            }
          }
          else
          {
            // TEMPLATE.PEXT::PEXT
            // PEXT REG:w:s32=$GPR32r REG:r:s32=$GPR32n REG:r:s32=$GPR32m;
            return 352 << 16 | 645;
          }
        }
        else
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.BZHI::BZHI
              // BZHI REG:w:s64=$GPR64r REG:r:s64=$GPR64m REG:r:s64=$GPR64n;
              return 67 << 16 | 145;
            }
            else
            {
              // TEMPLATE.BZHI::BZHI
              // BZHI REG:w:s32=$GPR32r REG:r:s32=$GPR32m REG:r:s32=$GPR32n;
              return 67 << 16 | 144;
            }
          }
          else
          {
            // TEMPLATE.BZHI::BZHI
            // BZHI REG:w:s32=$GPR32r REG:r:s32=$GPR32m REG:r:s32=$GPR32n;
            return 67 << 16 | 148;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.PDEP::PDEPmq
            // PDEP REG:w:s64=$GPR64r REG:r:s64=$GPR64n MEM:r:s64=$mem64;
            return 351 << 16 | 638;
          }
          else
          {
            // TEMPLATE.PDEP::PDEPmd
            // PDEP REG:w:s32=$GPR32r REG:r:s32=$GPR32n MEM:r:s32=$mem32;
            return 351 << 16 | 637;
          }
        }
        else
        {
          // TEMPLATE.PDEP::PDEPmd
          // PDEP REG:w:s32=$GPR32r REG:r:s32=$GPR32n MEM:r:s32=$mem32;
          return 351 << 16 | 640;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.PEXT::PEXTmq
              // PEXT REG:w:s64=$GPR64r REG:r:s64=$GPR64n MEM:r:s64=$mem64;
              return 352 << 16 | 644;
            }
            else
            {
              // TEMPLATE.PEXT::PEXTmd
              // PEXT REG:w:s32=$GPR32r REG:r:s32=$GPR32n MEM:r:s32=$mem32;
              return 352 << 16 | 643;
            }
          }
          else
          {
            // TEMPLATE.PEXT::PEXTmd
            // PEXT REG:w:s32=$GPR32r REG:r:s32=$GPR32n MEM:r:s32=$mem32;
            return 352 << 16 | 646;
          }
        }
        else
        {
          if (b & 0x40)
          {
            if (d & 0x01)
            {
              // TEMPLATE.WRUSSx::WRUSSQmq
              // WRUSSQ MEM:w:u64=$mem64 REG:r:u64=$GPR64r;
              return 756 << 16 | 1270;
            }
            else
            {
              // TEMPLATE.WRUSSx::WRUSSDmd
              // WRUSSD MEM:w:u32=$mem32 REG:r:u32=$GPR32r;
              return 756 << 16 | 1269;
            }
          }
          else
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.BZHI::BZHImq
                // BZHI REG:w:s64=$GPR64r MEM:r:s64=$mem64  REG:r:s64=$GPR64n;
                return 67 << 16 | 147;
              }
              else
              {
                // TEMPLATE.BZHI::BZHImd
                // BZHI REG:w:s32=$GPR32r MEM:r:s32=$mem32  REG:r:s32=$GPR32n;
                return 67 << 16 | 146;
              }
            }
            else
            {
              // TEMPLATE.BZHI::BZHImd
              // BZHI REG:w:s32=$GPR32r MEM:r:s32=$mem32  REG:r:s32=$GPR32n;
              return 67 << 16 | 149;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xf6 */
  case 1014:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.MULX::MULX
            // MULX REG:w:s64=$GPR64r REG:w:s64=$GPR64n REG:r:s64=$GPR64m REG:SUPP:r=RDX;
            return 297 << 16 | 524;
          }
          else
          {
            // TEMPLATE.MULX::MULX
            // MULX REG:w:s32=$GPR32r REG:w:s32=$GPR32n REG:r:s32=$GPR32m REG:SUPP:r=EDX;
            return 297 << 16 | 523;
          }
        }
        else
        {
          // TEMPLATE.MULX::MULX
          // MULX REG:w:s32=$GPR32r REG:w:s32=$GPR32n REG:r:s32=$GPR32m REG:SUPP:r=EDX;
          return 297 << 16 | 527;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (d & 0x01)
          {
            // TEMPLATE.ADOX::ADOX
            // ADOX REG:rw:s64=$GPR64r REG:r:s64=$GPR64m;
            return 25 << 16 | 45;
          }
          else
          {
            // TEMPLATE.ADOX::ADOX
            // ADOX REG:rw:s32=$GPR32r REG:r:s32=$GPR32m;
            return 25 << 16 | 44;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.ADCX::ADCX
            // ADCX REG:rw:s64=$GPR64r REG:r:s64=$GPR64m;
            return 14 << 16 | 23;
          }
          else
          {
            // TEMPLATE.ADCX::ADCX
            // ADCX REG:rw:s32=$GPR32r REG:r:s32=$GPR32m;
            return 14 << 16 | 22;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.MULX::MULXmq
            // MULX REG:w:s64=$GPR64r REG:w:s64=$GPR64n MEM:r:s64=$mem64  REG:SUPP:r=RDX;
            return 297 << 16 | 526;
          }
          else
          {
            // TEMPLATE.MULX::MULXmd
            // MULX REG:w:s32=$GPR32r REG:w:s32=$GPR32n MEM:r:s32=$mem32  REG:SUPP:r=EDX;
            return 297 << 16 | 525;
          }
        }
        else
        {
          // TEMPLATE.MULX::MULXmd
          // MULX REG:w:s32=$GPR32r REG:w:s32=$GPR32n MEM:r:s32=$mem32  REG:SUPP:r=EDX;
          return 297 << 16 | 528;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (d & 0x01)
          {
            // TEMPLATE.ADOX::ADOXmq
            // ADOX REG:rw:s64=$GPR64r MEM:r:s64=$mem64;
            return 25 << 16 | 47;
          }
          else
          {
            // TEMPLATE.ADOX::ADOXmd
            // ADOX REG:rw:s32=$GPR32r MEM:r:s32=$mem32;
            return 25 << 16 | 46;
          }
        }
        else
        {
          if (b & 0x40)
          {
            if (d & 0x01)
            {
              // TEMPLATE.ADCX::ADCXmq
              // ADCX REG:rw:s64=$GPR64r MEM:r:s64=$mem64;
              return 14 << 16 | 25;
            }
            else
            {
              // TEMPLATE.ADCX::ADCXmd
              // ADCX REG:rw:s32=$GPR32r MEM:r:s32=$mem32;
              return 14 << 16 | 24;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.WRSSx::WRSSQmq
              // WRSSQ MEM:w:u64=$mem64 REG:r:u64=$GPR64r;
              return 755 << 16 | 1268;
            }
            else
            {
              // TEMPLATE.WRSSx::WRSSDmd
              // WRSSD MEM:w:u32=$mem32 REG:r:u32=$GPR32r;
              return 755 << 16 | 1267;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xf7 */
  case 1015:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.SxRX::SHRX
            // SHRX REG:w:s64=$GPR64r REG:r:s64=$GPR64m REG:r:s64=$GPR64n;
            return 503 << 16 | 897;
          }
          else
          {
            // TEMPLATE.SxRX::SHRX
            // SHRX REG:w:s32=$GPR32r REG:r:s32=$GPR32m REG:r:s32=$GPR32n;
            return 503 << 16 | 896;
          }
        }
        else
        {
          // TEMPLATE.SxRX::SHRX
          // SHRX REG:w:s32=$GPR32r REG:r:s32=$GPR32m REG:r:s32=$GPR32n;
          return 503 << 16 | 900;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.SxRX::SARX
              // SARX REG:w:s64=$GPR64r REG:r:s64=$GPR64m REG:r:s64=$GPR64n;
              return 503 << 16 | 891;
            }
            else
            {
              // TEMPLATE.SxRX::SARX
              // SARX REG:w:s32=$GPR32r REG:r:s32=$GPR32m REG:r:s32=$GPR32n;
              return 503 << 16 | 890;
            }
          }
          else
          {
            // TEMPLATE.SxRX::SARX
            // SARX REG:w:s32=$GPR32r REG:r:s32=$GPR32m REG:r:s32=$GPR32n;
            return 503 << 16 | 894;
          }
        }
        else
        {
          if (b & 0x40)
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.SHLX::SHLX
                // SHLX REG:w:s64=$GPR64r REG:r:s64=$GPR64m REG:r:s64=$GPR64n;
                return 502 << 16 | 885;
              }
              else
              {
                // TEMPLATE.SHLX::SHLX
                // SHLX REG:w:s32=$GPR32r REG:r:s32=$GPR32m REG:r:s32=$GPR32n;
                return 502 << 16 | 884;
              }
            }
            else
            {
              // TEMPLATE.SHLX::SHLX
              // SHLX REG:w:s32=$GPR32r REG:r:s32=$GPR32m REG:r:s32=$GPR32n;
              return 502 << 16 | 888;
            }
          }
          else
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.BEXTR_rxmxnx::BEXTR
                // BEXTR REG:w:s64=$GPR64r REG:r:s64=$GPR64m REG:r:s64=$GPR64n;
                return 44 << 16 | 87;
              }
              else
              {
                // TEMPLATE.BEXTR_rxmxnx::BEXTR
                // BEXTR REG:w:s32=$GPR32r REG:r:s32=$GPR32m REG:r:s32=$GPR32n;
                return 44 << 16 | 86;
              }
            }
            else
            {
              // TEMPLATE.BEXTR_rxmxnx::BEXTR
              // BEXTR REG:w:s32=$GPR32r REG:r:s32=$GPR32m REG:r:s32=$GPR32n;
              return 44 << 16 | 90;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.SxRX::SHRXmq
            // SHRX REG:w:s64=$GPR64r MEM:r:s64=$mem64  REG:r:s64=$GPR64n;
            return 503 << 16 | 899;
          }
          else
          {
            // TEMPLATE.SxRX::SHRXmd
            // SHRX REG:w:s32=$GPR32r MEM:r:s32=$mem32  REG:r:s32=$GPR32n;
            return 503 << 16 | 898;
          }
        }
        else
        {
          // TEMPLATE.SxRX::SHRXmd
          // SHRX REG:w:s32=$GPR32r MEM:r:s32=$mem32  REG:r:s32=$GPR32n;
          return 503 << 16 | 901;
        }
      }
      else
      {
        if (b & 0x20)
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.SxRX::SARXmq
              // SARX REG:w:s64=$GPR64r MEM:r:s64=$mem64  REG:r:s64=$GPR64n;
              return 503 << 16 | 893;
            }
            else
            {
              // TEMPLATE.SxRX::SARXmd
              // SARX REG:w:s32=$GPR32r MEM:r:s32=$mem32  REG:r:s32=$GPR32n;
              return 503 << 16 | 892;
            }
          }
          else
          {
            // TEMPLATE.SxRX::SARXmd
            // SARX REG:w:s32=$GPR32r MEM:r:s32=$mem32  REG:r:s32=$GPR32n;
            return 503 << 16 | 895;
          }
        }
        else
        {
          if (b & 0x40)
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.SHLX::SHLXmq
                // SHLX REG:w:s64=$GPR64r MEM:r:s64=$mem64  REG:r:s64=$GPR64n;
                return 502 << 16 | 887;
              }
              else
              {
                // TEMPLATE.SHLX::SHLXmd
                // SHLX REG:w:s32=$GPR32r MEM:r:s32=$mem32  REG:r:s32=$GPR32n;
                return 502 << 16 | 886;
              }
            }
            else
            {
              // TEMPLATE.SHLX::SHLXmd
              // SHLX REG:w:s32=$GPR32r MEM:r:s32=$mem32  REG:r:s32=$GPR32n;
              return 502 << 16 | 889;
            }
          }
          else
          {
            if (c & 0x80)
            {
              if (d & 0x01)
              {
                // TEMPLATE.BEXTR_rxmxnx::BEXTRmq
                // BEXTR REG:w:s64=$GPR64r MEM:r:s64=$mem64  REG:r:s64=$GPR64n;
                return 44 << 16 | 89;
              }
              else
              {
                // TEMPLATE.BEXTR_rxmxnx::BEXTRmd
                // BEXTR REG:w:s32=$GPR32r MEM:r:s32=$mem32  REG:r:s32=$GPR32n;
                return 44 << 16 | 88;
              }
            }
            else
            {
              // TEMPLATE.BEXTR_rxmxnx::BEXTRmd
              // BEXTR REG:w:s32=$GPR32r MEM:r:s32=$mem32  REG:r:s32=$GPR32n;
              return 44 << 16 | 91;
            }
          }
        }
      }
    }
  break;
  /* 0f38.0xf8 */
  case 1016:
    // the following switch contains 3 case.
    switch ((b & 0x70) - 16)
    {
      case 0x00:
      {
        // TEMPLATE.ENQCMD::ENQCMDmz
        // ENQCMD REG:r=$GPRar MEM:r:u32=$mem512;
        return 718 << 16 | 1213;
        break;
      }
      case 0x10:
      {
        // TEMPLATE.ENQCMDS::ENQCMDSmz
        // ENQCMDS REG:r=$GPRar MEM:r:u32=$mem512;
        return 719 << 16 | 1214;
        break;
      }
      case 0x30:
      {
        if (c & 0x80)
        {
          // TEMPLATE.MOVDIR64B::MOVDIR64Bmz
          // MOVDIR64B REG:r=$GPRar MEM:r:u32=$mem512 MEM:SUPP:w:s32={BASE:r=$GPRar SZ=512};
          return 280 << 16 | 485;
        }
        else
        {
          // TEMPLATE.MOVDIR64B::MOVDIR64Bmz
          // MOVDIR64B REG:r=$GPRar MEM:r:u32=$mem512 MEM:SUPP:w:s32={SEG:r=ES BASE:r=$GPRar SZ=512};
          return 280 << 16 | 486;
        }
        break;
      }
      default: break;
    }
  break;
  /* 0f38.0xf9 */
  case 1017:
    if (d & 0x01)
    {
      // TEMPLATE.MOVDIRI::MOVDIRImq
      // MOVDIRI MEM:w:u64=$mem64 REG:r:u64=$GPR64r;
      return 281 << 16 | 488;
    }
    else
    {
      // TEMPLATE.MOVDIRI::MOVDIRImd
      // MOVDIRI MEM:w:u32=$mem32 REG:r:u32=$GPR32r;
      return 281 << 16 | 487;
    }
  break;
  /* invalid */
  case 1018:
    return 0;
  /* invalid */
  case 1019:
    return 0;
  /* invalid */
  case 1020:
    return 0;
  /* invalid */
  case 1021:
    return 0;
  /* invalid */
  case 1022:
    return 0;
  /* invalid */
  case 1023:
    return 0;
  /* 0f3a.0x00 */
  case 1024:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMQ_rymyub_1::VPERMQib
          // VPERMQ VREG:w:u64=$YMMr VREG:r:u64=$YMMm  IMM:u8=$uimm8;
          return 2750 << 16 | 5627;
        }
        else
        {
          // TEMPLATE.VPERMQ_rymyub_2::VPERMQib
          // VPERMQ VREG:w:u64=$YMMr PREG:r:Z=$Kk      VREG:r:u64=$YMMm             IMM:u8=$uimm8;
          return 2751 << 16 | 5629;
        }
      }
      else
      {
        // TEMPLATE.VPERMQ_rzmzub::VPERMQib
        // VPERMQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk      VREG:r:u64=$ZMMm             IMM:u8=$uimm8;
        return 2753 << 16 | 5633;
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMQ_rymyub_1::VPERMQmyib
          // VPERMQ VREG:w:u64=$YMMr MEM:r:u64=$mem256 IMM:u8=$uimm8;
          return 2750 << 16 | 5628;
        }
        else
        {
          // TEMPLATE.VPERMQ_rymyub_2::VPERMQmyib
          // VPERMQ VREG:w:u64=$YMMr PREG:r:Z=$Kk      MEM:r:u64=$mem256 BCST=$BCST IMM:u8=$uimm8;
          return 2751 << 16 | 5630;
        }
      }
      else
      {
        // TEMPLATE.VPERMQ_rzmzub::VPERMQmzib
        // VPERMQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk      MEM:r:u64=$mem512 BCST=$BCST IMM:u8=$uimm8;
        return 2753 << 16 | 5634;
      }
    }
  break;
  /* 0f3a.0x01 */
  case 1025:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMPD_rymyub_1::VPERMPD
          // VPERMPD VREG:w:f64=$YMMr VREG:r:f64=$YMMm  CTL:r:u8=$ctl;
          return 2742 << 16 | 5611;
        }
        else
        {
          // TEMPLATE.VPERMPD_rymyub_2::VPERMPD
          // VPERMPD VREG:w:f64=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$YMMm             CTL:r:u8=$ctl;
          return 2743 << 16 | 5613;
        }
      }
      else
      {
        // TEMPLATE.VPERMPD_rzmzub::VPERMPD
        // VPERMPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMm             CTL:r:u8=$ctl;
        return 2745 << 16 | 5617;
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMPD_rymyub_1::VPERMPDmy
          // VPERMPD VREG:w:f64=$YMMr MEM:r:f64=$mem256 CTL:r:u8=$ctl;
          return 2742 << 16 | 5612;
        }
        else
        {
          // TEMPLATE.VPERMPD_rymyub_2::VPERMPDmy
          // VPERMPD VREG:w:f64=$YMMr PREG:r:Z=$Kk      MEM:r:f64=$mem256 BCST=$BCST CTL:r:u8=$ctl;
          return 2743 << 16 | 5614;
        }
      }
      else
      {
        // TEMPLATE.VPERMPD_rzmzub::VPERMPDmz
        // VPERMPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      MEM:r:f64=$mem512 BCST=$BCST CTL:r:u8=$ctl;
        return 2745 << 16 | 5618;
      }
    }
  break;
  /* 0f3a.0x02 */
  case 1026:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        // TEMPLATE.VPBLENDD::VPBLENDDib
        // VPBLENDD VREG:w:u32=$YMMr VREG:r:u32=$YMMn VREG:r:u32=$YMMm  IMM:u8=$uimm8;
        return 2613 << 16 | 5316;
      }
      else
      {
        // TEMPLATE.VPBLENDD::VPBLENDDib
        // VPBLENDD VREG:w:u32=$XMMr VREG:r:u32=$XMMn VREG:r:u32=$XMMm  IMM:u8=$uimm8;
        return 2613 << 16 | 5315;
      }
    }
    else
    {
      if (b & 0x01)
      {
        // TEMPLATE.VPBLENDD::VPBLENDDmyib
        // VPBLENDD VREG:w:u32=$YMMr VREG:r:u32=$YMMn MEM:r:u32=$mem256 IMM:u8=$uimm8;
        return 2613 << 16 | 5318;
      }
      else
      {
        // TEMPLATE.VPBLENDD::VPBLENDDmxib
        // VPBLENDD VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem128 IMM:u8=$uimm8;
        return 2613 << 16 | 5317;
      }
    }
  break;
  /* 0f3a.0x03 */
  case 1027:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // TEMPLATE.VALIGND::VALIGNDib
        // VALIGND VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm                      IMM:u8=$uimm8;
        return 3305 << 16 | 6843;
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VALIGNx_rynymyub::VALIGNQib
            // VALIGNQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm             IMM:u8=$uimm8;
            return 2226 << 16 | 4343;
          }
          else
          {
            // TEMPLATE.VALIGNx_rynymyub::VALIGNDib
            // VALIGND VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm             IMM:u8=$uimm8;
            return 2226 << 16 | 4341;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VALIGNx_rznzmzub::VALIGNQib
              // VALIGNQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm             IMM:u8=$uimm8;
              return 2227 << 16 | 4347;
            }
            else
            {
              // TEMPLATE.VALIGNx_rznzmzub::VALIGNDib
              // VALIGND VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm             IMM:u8=$uimm8;
              return 2227 << 16 | 4345;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VALIGNx_ronomoub::VALIGNQib
              // VALIGNQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm             IMM:u8=$uimm8;
              return 2225 << 16 | 4339;
            }
            else
            {
              // TEMPLATE.VALIGNx_ronomoub::VALIGNDib
              // VALIGND VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm             IMM:u8=$uimm8;
              return 2225 << 16 | 4337;
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        // TEMPLATE.VALIGND::VALIGNDmzib
        // VALIGND VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:s32=$mem512 SWZ=$n_i32 EVH=$EVH IMM:u8=$uimm8;
        return 3305 << 16 | 6844;
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VALIGNx_rynymyub::VALIGNQmyib
            // VALIGNQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST IMM:u8=$uimm8;
            return 2226 << 16 | 4344;
          }
          else
          {
            // TEMPLATE.VALIGNx_rynymyub::VALIGNDmyib
            // VALIGND VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST IMM:u8=$uimm8;
            return 2226 << 16 | 4342;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VALIGNx_rznzmzub::VALIGNQmzib
              // VALIGNQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST IMM:u8=$uimm8;
              return 2227 << 16 | 4348;
            }
            else
            {
              // TEMPLATE.VALIGNx_rznzmzub::VALIGNDmzib
              // VALIGND VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST IMM:u8=$uimm8;
              return 2227 << 16 | 4346;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VALIGNx_ronomoub::VALIGNQmxib
              // VALIGNQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST IMM:u8=$uimm8;
              return 2225 << 16 | 4340;
            }
            else
            {
              // TEMPLATE.VALIGNx_ronomoub::VALIGNDmxib
              // VALIGND VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST IMM:u8=$uimm8;
              return 2225 << 16 | 4338;
            }
          }
        }
      }
    }
  break;
  /* 0f3a.0x04 */
  case 1028:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMILPS_rxmxub::VPERMILPS
          // VPERMILPS VREG:w:f32=$YMMr VREG:r:f32=$YMMm  CTL:r:u8=$ctl;
          return 2736 << 16 | 5596;
        }
        else
        {
          // TEMPLATE.VPERMILPS_rymyub::VPERMILPS
          // VPERMILPS VREG:w:f32=$YMMr PREG:r:Z=$Kk      VREG:r:f32=$YMMm             CTL:r:u8=$ctl;
          return 2738 << 16 | 5603;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPERMILPS_rzmzub::VPERMILPS
          // VPERMILPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk      VREG:r:f32=$ZMMm             CTL:r:u8=$ctl;
          return 2740 << 16 | 5607;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPERMILPS_rxmxub::VPERMILPS
            // VPERMILPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm  CTL:r:u8=$ctl;
            return 2736 << 16 | 5595;
          }
          else
          {
            // TEMPLATE.VPERMILPS_romoub::VPERMILPS
            // VPERMILPS VREG:w:f32=$XMMr PREG:r:Z=$Kk      VREG:r:f32=$XMMm             CTL:r:u8=$ctl;
            return 2734 << 16 | 5591;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMILPS_rxmxub::VPERMILPSmy
          // VPERMILPS VREG:w:f32=$YMMr MEM:r:f32=$mem256 CTL:r:u8=$ctl;
          return 2736 << 16 | 5598;
        }
        else
        {
          // TEMPLATE.VPERMILPS_rymyub::VPERMILPSmy
          // VPERMILPS VREG:w:f32=$YMMr PREG:r:Z=$Kk      MEM:r:f32=$mem256 BCST=$BCST CTL:r:u8=$ctl;
          return 2738 << 16 | 5604;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPERMILPS_rzmzub::VPERMILPSmz
          // VPERMILPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk      MEM:r:f32=$mem512 BCST=$BCST CTL:r:u8=$ctl;
          return 2740 << 16 | 5608;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPERMILPS_rxmxub::VPERMILPSmx
            // VPERMILPS VREG:w:f32=$XMMr MEM:r:f32=$mem128 CTL:r:u8=$ctl;
            return 2736 << 16 | 5597;
          }
          else
          {
            // TEMPLATE.VPERMILPS_romoub::VPERMILPSmx
            // VPERMILPS VREG:w:f32=$XMMr PREG:r:Z=$Kk      MEM:r:f32=$mem128 BCST=$BCST CTL:r:u8=$ctl;
            return 2734 << 16 | 5592;
          }
        }
      }
    }
  break;
  /* 0f3a.0x05 */
  case 1029:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMILPD_rxmxub::VPERMILPD
          // VPERMILPD VREG:w:f64=$YMMr VREG:r:f64=$YMMm  CTL:r:u8=$ctl;
          return 2728 << 16 | 5576;
        }
        else
        {
          // TEMPLATE.VPERMILPD_rymyub::VPERMILPD
          // VPERMILPD VREG:w:f64=$YMMr PREG:r:Z=$Kk      VREG:r:f64=$YMMm             CTL:r:u8=$ctl;
          return 2730 << 16 | 5583;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPERMILPD_rzmzub::VPERMILPD
          // VPERMILPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      VREG:r:f64=$ZMMm             CTL:r:u8=$ctl;
          return 2732 << 16 | 5587;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPERMILPD_rxmxub::VPERMILPD
            // VPERMILPD VREG:w:f64=$XMMr VREG:r:f64=$XMMm  CTL:r:u8=$ctl;
            return 2728 << 16 | 5575;
          }
          else
          {
            // TEMPLATE.VPERMILPD_romoub::VPERMILPD
            // VPERMILPD VREG:w:f64=$XMMr PREG:r:Z=$Kk      VREG:r:f64=$XMMm             CTL:r:u8=$ctl;
            return 2726 << 16 | 5571;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VPERMILPD_rxmxub::VPERMILPDmy
          // VPERMILPD VREG:w:f64=$YMMr MEM:r:f64=$mem256 CTL:r:u8=$ctl;
          return 2728 << 16 | 5578;
        }
        else
        {
          // TEMPLATE.VPERMILPD_rymyub::VPERMILPDmy
          // VPERMILPD VREG:w:f64=$YMMr PREG:r:Z=$Kk      MEM:r:f64=$mem256 BCST=$BCST CTL:r:u8=$ctl;
          return 2730 << 16 | 5584;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VPERMILPD_rzmzub::VPERMILPDmz
          // VPERMILPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk      MEM:r:f64=$mem512 BCST=$BCST CTL:r:u8=$ctl;
          return 2732 << 16 | 5588;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VPERMILPD_rxmxub::VPERMILPDmx
            // VPERMILPD VREG:w:f64=$XMMr MEM:r:f64=$mem128 CTL:r:u8=$ctl;
            return 2728 << 16 | 5577;
          }
          else
          {
            // TEMPLATE.VPERMILPD_romoub::VPERMILPDmx
            // VPERMILPD VREG:w:f64=$XMMr PREG:r:Z=$Kk      MEM:r:f64=$mem128 BCST=$BCST CTL:r:u8=$ctl;
            return 2726 << 16 | 5572;
          }
        }
      }
    }
  break;
  /* 0f3a.0x06 */
  case 1030:
    if (a & 0x01)
    {
      // TEMPLATE.VPERM2F128::VPERM2F128
      // VPERM2F128 VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm  CTL:r:u8=$ctl;
      return 2709 << 16 | 5525;
    }
    else
    {
      // TEMPLATE.VPERM2F128::VPERM2F128my
      // VPERM2F128 VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256 CTL:r:u8=$ctl;
      return 2709 << 16 | 5526;
    }
  break;
  /* 0f3a.0x07 */
  case 1031:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VPERMF32X4::VPERMF32X4
        // VPERMF32X4 VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm                      ORDER:r:u8=$order;
        return 3430 << 16 | 7121;
      }
      else
      {
        // TEMPLATE.VPERMF32X4::VPERMF32X4
        // VPERMF32X4 VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm                      ORDER:r:u8=$order;
        return 3430 << 16 | 7120;
      }
    }
    else
    {
      // TEMPLATE.VPERMF32X4::VPERMF32X4mz
      // VPERMF32X4 VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r:s32=$mem512 SWZ=$n_i32 EVH=$EVH ORDER:r:u8=$order;
      return 3430 << 16 | 7122;
    }
  break;
  /* 0f3a.0x08 */
  case 1032:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.ROUNDPS::ROUNDPS
          // ROUNDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm  RNDC:r:u8=$rndc2;
          return 1184 << 16 | 2026;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VROUNDPS::VROUNDPS
            // VROUNDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMm  RNDC:r:u8=$rndc2;
            return 2167 << 16 | 4189;
          }
          else
          {
            // TEMPLATE.VROUNDPS::VROUNDPS
            // VROUNDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm  RNDC:r:u8=$rndc2;
            return 2167 << 16 | 4188;
          }
          break;
        }
        case 0x02:
        {
          if (b & 0x80)
          {
            // TEMPLATE.VRNDSCALEPS_rzmzub::VRNDSCALEPSib
            // VRNDSCALEPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE    IMM:u8=$uimm8;
            return 3040 << 16 | 6262;
          }
          else
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VRNDSCALEPS_romoub::VRNDSCALEPSib
                // VRNDSCALEPS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm             IMM:u8=$uimm8;
                return 3038 << 16 | 6258;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VRNDSCALEPS_rymyub::VRNDSCALEPSib
                // VRNDSCALEPS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm             IMM:u8=$uimm8;
                return 3039 << 16 | 6260;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VRNDSCALEPS_rzmzub::VRNDSCALEPSib
                // VRNDSCALEPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm             IMM:u8=$uimm8;
                return 3040 << 16 | 6263;
                break;
              }
              default: break;
            }
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.ROUNDPS::ROUNDPSmx
          // ROUNDPS VREG:w:f32=$XMMr MEM:r:f32=$mem128 RNDC:r:u8=$rndc2;
          return 1184 << 16 | 2027;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VROUNDPS::VROUNDPSmy
            // VROUNDPS VREG:w:f32=$YMMr MEM:r:f32=$mem256 RNDC:r:u8=$rndc2;
            return 2167 << 16 | 4191;
          }
          else
          {
            // TEMPLATE.VROUNDPS::VROUNDPSmx
            // VROUNDPS VREG:w:f32=$XMMr MEM:r:f32=$mem128 RNDC:r:u8=$rndc2;
            return 2167 << 16 | 4190;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VRNDSCALEPS_romoub::VRNDSCALEPSmxib
              // VRNDSCALEPS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST IMM:u8=$uimm8;
              return 3038 << 16 | 6259;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VRNDSCALEPS_rymyub::VRNDSCALEPSmyib
              // VRNDSCALEPS VREG:w:f32=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST IMM:u8=$uimm8;
              return 3039 << 16 | 6261;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VRNDSCALEPS_rzmzub::VRNDSCALEPSmzib
              // VRNDSCALEPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST IMM:u8=$uimm8;
              return 3040 << 16 | 6264;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x09 */
  case 1033:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.ROUNDPD::ROUNDPD
          // ROUNDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMm  RNDC:r:u8=$rndc2;
          return 1183 << 16 | 2024;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VROUNDPD::VROUNDPD
            // VROUNDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMm  RNDC:r:u8=$rndc2;
            return 2166 << 16 | 4185;
          }
          else
          {
            // TEMPLATE.VROUNDPD::VROUNDPD
            // VROUNDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMm  RNDC:r:u8=$rndc2;
            return 2166 << 16 | 4184;
          }
          break;
        }
        case 0x02:
        {
          if (b & 0x80)
          {
            // TEMPLATE.VRNDSCALEPD_rzmzub::VRNDSCALEPDib
            // VRNDSCALEPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE    IMM:u8=$uimm8;
            return 3037 << 16 | 6255;
          }
          else
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VRNDSCALEPD_romoub::VRNDSCALEPDib
                // VRNDSCALEPD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm             IMM:u8=$uimm8;
                return 3035 << 16 | 6251;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VRNDSCALEPD_rymyub::VRNDSCALEPDib
                // VRNDSCALEPD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm             IMM:u8=$uimm8;
                return 3036 << 16 | 6253;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VRNDSCALEPD_rzmzub::VRNDSCALEPDib
                // VRNDSCALEPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm             IMM:u8=$uimm8;
                return 3037 << 16 | 6256;
                break;
              }
              default: break;
            }
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.ROUNDPD::ROUNDPDmx
          // ROUNDPD VREG:w:f64=$XMMr MEM:r:f64=$mem128 RNDC:r:u8=$rndc2;
          return 1183 << 16 | 2025;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VROUNDPD::VROUNDPDmy
            // VROUNDPD VREG:w:f64=$YMMr MEM:r:f64=$mem256 RNDC:r:u8=$rndc2;
            return 2166 << 16 | 4187;
          }
          else
          {
            // TEMPLATE.VROUNDPD::VROUNDPDmx
            // VROUNDPD VREG:w:f64=$XMMr MEM:r:f64=$mem128 RNDC:r:u8=$rndc2;
            return 2166 << 16 | 4186;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VRNDSCALEPD_romoub::VRNDSCALEPDmxib
              // VRNDSCALEPD VREG:w:f64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST IMM:u8=$uimm8;
              return 3035 << 16 | 6252;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VRNDSCALEPD_rymyub::VRNDSCALEPDmyib
              // VRNDSCALEPD VREG:w:f64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST IMM:u8=$uimm8;
              return 3036 << 16 | 6254;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VRNDSCALEPD_rzmzub::VRNDSCALEPDmzib
              // VRNDSCALEPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST IMM:u8=$uimm8;
              return 3037 << 16 | 6257;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x0a */
  case 1034:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.ROUNDSS::ROUNDSS
          // ROUNDSS REG:w:s32=$XMMr REG:r:s32=$XMMm  RNDC:r:u8=$rndc2;
          return 1186 << 16 | 2030;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VROUNDSS::VROUNDSS
          // VROUNDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm  RNDC:r:u8=$rndc2;
          return 2169 << 16 | 4194;
          break;
        }
        case 0x02:
        {
          if (b & 0x80)
          {
            // TEMPLATE.VRNDSCALESS::VRNDSCALESSib
            // VRNDSCALESS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE IMM:u8=$uimm8;
            return 3042 << 16 | 6269;
          }
          else
          {
            // TEMPLATE.VRNDSCALESS::VRNDSCALESSib
            // VRNDSCALESS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm          IMM:u8=$uimm8;
            return 3042 << 16 | 6268;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.ROUNDSS::ROUNDSSmd
          // ROUNDSS REG:w:s32=$XMMr MEM:r:s32=$mem32 RNDC:r:u8=$rndc2;
          return 1186 << 16 | 2031;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VROUNDSS::VROUNDSSmd
          // VROUNDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32 RNDC:r:u8=$rndc2;
          return 2169 << 16 | 4195;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VRNDSCALESS::VRNDSCALESSmdib
          // VRNDSCALESS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem32          IMM:u8=$uimm8;
          return 3042 << 16 | 6270;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x0b */
  case 1035:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.ROUNDSD::ROUNDSD
          // ROUNDSD REG:w:s64=$XMMr REG:r:s64=$XMMm  RNDC:r:u8=$rndc2;
          return 1185 << 16 | 2028;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VROUNDSD::VROUNDSD
          // VROUNDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm  RNDC:r:u8=$rndc2;
          return 2168 << 16 | 4192;
          break;
        }
        case 0x02:
        {
          if (b & 0x80)
          {
            // TEMPLATE.VRNDSCALESD::VRNDSCALESDib
            // VRNDSCALESD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm SAE=$SAE IMM:u8=$uimm8;
            return 3041 << 16 | 6266;
          }
          else
          {
            // TEMPLATE.VRNDSCALESD::VRNDSCALESDib
            // VRNDSCALESD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm          IMM:u8=$uimm8;
            return 3041 << 16 | 6265;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.ROUNDSD::ROUNDSDmq
          // ROUNDSD REG:w:s64=$XMMr MEM:r:s64=$mem64 RNDC:r:u8=$rndc2;
          return 1185 << 16 | 2029;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VROUNDSD::VROUNDSDmq
          // VROUNDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64 RNDC:r:u8=$rndc2;
          return 2168 << 16 | 4193;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VRNDSCALESD::VRNDSCALESDmqib
          // VRNDSCALESD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem64          IMM:u8=$uimm8;
          return 3041 << 16 | 6267;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x0c */
  case 1036:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VBLENDPS::VBLENDPSib
          // VBLENDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm  IMM:u8=$uimm8;
          return 1262 << 16 | 2203;
        }
        else
        {
          // TEMPLATE.VBLENDPS::VBLENDPSib
          // VBLENDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm  IMM:u8=$uimm8;
          return 1262 << 16 | 2202;
        }
      }
      else
      {
        // TEMPLATE.BLENDPS::BLENDPSib
        // BLENDPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm  IMM:u8=$uimm8;
        return 904 << 16 | 1506;
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VBLENDPS::VBLENDPSmyib
          // VBLENDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256 IMM:u8=$uimm8;
          return 1262 << 16 | 2205;
        }
        else
        {
          // TEMPLATE.VBLENDPS::VBLENDPSmxib
          // VBLENDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128 IMM:u8=$uimm8;
          return 1262 << 16 | 2204;
        }
      }
      else
      {
        // TEMPLATE.BLENDPS::BLENDPSmxib
        // BLENDPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128 IMM:u8=$uimm8;
        return 904 << 16 | 1507;
      }
    }
  break;
  /* 0f3a.0x0d */
  case 1037:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VBLENDPD::VBLENDPDib
          // VBLENDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm  IMM:u8=$uimm8;
          return 1261 << 16 | 2199;
        }
        else
        {
          // TEMPLATE.VBLENDPD::VBLENDPDib
          // VBLENDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm  IMM:u8=$uimm8;
          return 1261 << 16 | 2198;
        }
      }
      else
      {
        // TEMPLATE.BLENDPD::BLENDPDib
        // BLENDPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm  IMM:u8=$uimm8;
        return 903 << 16 | 1504;
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VBLENDPD::VBLENDPDmyib
          // VBLENDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256 IMM:u8=$uimm8;
          return 1261 << 16 | 2201;
        }
        else
        {
          // TEMPLATE.VBLENDPD::VBLENDPDmxib
          // VBLENDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128 IMM:u8=$uimm8;
          return 1261 << 16 | 2200;
        }
      }
      else
      {
        // TEMPLATE.BLENDPD::BLENDPDmxib
        // BLENDPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128 IMM:u8=$uimm8;
        return 903 << 16 | 1505;
      }
    }
  break;
  /* 0f3a.0x0e */
  case 1038:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VPBLENDW_rynymyub::VPBLENDWib
          // VPBLENDW VREG:w:u16=$YMMr VREG:r:u16=$YMMn VREG:r:u16=$YMMm  IMM:u8=$uimm8;
          return 1712 << 16 | 3232;
        }
        else
        {
          // TEMPLATE.VPBLENDW_ronomoub::VPBLENDWib
          // VPBLENDW VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u16=$XMMm  IMM:u8=$uimm8;
          return 1711 << 16 | 3230;
        }
      }
      else
      {
        // TEMPLATE.PBLENDW::PBLENDWib
        // PBLENDW VREG:rw:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8;
        return 1048 << 16 | 1776;
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VPBLENDW_rynymyub::VPBLENDWmyib
          // VPBLENDW VREG:w:u16=$YMMr VREG:r:u16=$YMMn MEM:r:u16=$mem256 IMM:u8=$uimm8;
          return 1712 << 16 | 3233;
        }
        else
        {
          // TEMPLATE.VPBLENDW_ronomoub::VPBLENDWmxib
          // VPBLENDW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem128 IMM:u8=$uimm8;
          return 1711 << 16 | 3231;
        }
      }
      else
      {
        // TEMPLATE.PBLENDW::PBLENDWmxib
        // PBLENDW VREG:rw:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8;
        return 1048 << 16 | 1777;
      }
    }
  break;
  /* 0f3a.0x0f */
  case 1039:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PALIGNR_romoub::PALIGNRib
            // PALIGNR VREG:rw:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8;
            return 1041 << 16 | 1762;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPALIGNR_rynymyub_1::VPALIGNRib
              // VPALIGNR VREG:w:u8=$YMMr VREG:r:u8=$YMMn VREG:r:u8=$YMMm  IMM:u8=$uimm8;
              return 1692 << 16 | 3192;
            }
            else
            {
              // TEMPLATE.VPALIGNR_ronomoub_1::VPALIGNRib
              // VPALIGNR VREG:w:u8=$XMMr VREG:r:u8=$XMMn VREG:r:u8=$XMMm  IMM:u8=$uimm8;
              return 1690 << 16 | 3188;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPALIGNR_ronomoub_2::VPALIGNRib
                // VPALIGNR VREG:w:u8=$XMMr PREG:r:Z=$Kk    VREG:r:u8=$XMMn  VREG:r:u8=$XMMm  IMM:u8=$uimm8;
                return 1691 << 16 | 3190;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPALIGNR_rynymyub_2::VPALIGNRib
                // VPALIGNR VREG:w:u8=$YMMr PREG:r:Z=$Kk    VREG:r:u8=$YMMn  VREG:r:u8=$YMMm  IMM:u8=$uimm8;
                return 1693 << 16 | 3194;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPALIGNR_rznzmzub::VPALIGNRib
                // VPALIGNR VREG:w:u8=$ZMMr PREG:r:Z=$Kk    VREG:r:u8=$ZMMn  VREG:r:u8=$ZMMm  IMM:u8=$uimm8;
                return 1694 << 16 | 3196;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PALIGNR_rqmqub::PALIGNRib
        // PALIGNR REG:rw:s64=$MMXr  REG:r:s64=$MMXm   IMM:u8=$uimm8;
        return 1042 << 16 | 1764;
      }
    }
    else
    {
      if (b & 0x40)
      {
        // the following switch contains 3 case.
        switch (c & 0x03)
        {
          case 0x00:
          {
            // TEMPLATE.PALIGNR_romoub::PALIGNRmxib
            // PALIGNR VREG:rw:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8;
            return 1041 << 16 | 1763;
            break;
          }
          case 0x01:
          {
            if (b & 0x01)
            {
              // TEMPLATE.VPALIGNR_rynymyub_1::VPALIGNRmyib
              // VPALIGNR VREG:w:u8=$YMMr VREG:r:u8=$YMMn MEM:r:u8=$mem256 IMM:u8=$uimm8;
              return 1692 << 16 | 3193;
            }
            else
            {
              // TEMPLATE.VPALIGNR_ronomoub_1::VPALIGNRmxib
              // VPALIGNR VREG:w:u8=$XMMr VREG:r:u8=$XMMn MEM:r:u8=$mem128 IMM:u8=$uimm8;
              return 1690 << 16 | 3189;
            }
            break;
          }
          case 0x02:
          {
            // the following switch contains 3 case.
            switch (b & 0x03)
            {
              case 0x00:
              {
                // TEMPLATE.VPALIGNR_ronomoub_2::VPALIGNRmxib
                // VPALIGNR VREG:w:u8=$XMMr PREG:r:Z=$Kk    VREG:r:u8=$XMMn  MEM:r:u8=$mem128 IMM:u8=$uimm8;
                return 1691 << 16 | 3191;
                break;
              }
              case 0x01:
              {
                // TEMPLATE.VPALIGNR_rynymyub_2::VPALIGNRmyib
                // VPALIGNR VREG:w:u8=$YMMr PREG:r:Z=$Kk    VREG:r:u8=$YMMn  MEM:r:u8=$mem256 IMM:u8=$uimm8;
                return 1693 << 16 | 3195;
                break;
              }
              case 0x02:
              {
                // TEMPLATE.VPALIGNR_rznzmzub::VPALIGNRmzib
                // VPALIGNR VREG:w:u8=$ZMMr PREG:r:Z=$Kk    VREG:r:u8=$ZMMn  MEM:r:u8=$mem512 IMM:u8=$uimm8;
                return 1694 << 16 | 3197;
                break;
              }
              default: break;
            }
            break;
          }
          default: break;
        }
      }
      else
      {
        // TEMPLATE.PALIGNR_rqmqub::PALIGNRmqib
        // PALIGNR REG:rw:s64=$MMXr  MEM:r:s64=$mem64  IMM:u8=$uimm8;
        return 1042 << 16 | 1765;
      }
    }
  break;
  /* invalid */
  case 1040:
    return 0;
  /* invalid */
  case 1041:
    return 0;
  /* invalid */
  case 1042:
    return 0;
  /* invalid */
  case 1043:
    return 0;
  /* 0f3a.0x14 */
  case 1044:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PEXTRB::PEXTRBib
          // PEXTRB REG:w:s32=$GPR32m VREG:r:s32=$XMMr IMM:u8=$index;
          return 1063 << 16 | 1811;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPEXTRB_mxroub_1::VPEXTRBib
          // VPEXTRB REG:w:s32=$GPR32m VREG:r:u8=$XMMr  IMM:u8=$index;
          return 1765 << 16 | 3348;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPEXTRB_mxroub_2::VPEXTRBib
          // VPEXTRB REG:w:u8=$GPR32m  VREG:r:u8=$XMMr  IMM:u8=$index;
          return 1766 << 16 | 3350;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PEXTRB::PEXTRBmbib
          // PEXTRB MEM:w:u8=$mem8    VREG:r:s32=$XMMr IMM:u8=$index;
          return 1063 << 16 | 1812;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPEXTRB_mxroub_1::VPEXTRBmbib
          // VPEXTRB MEM:w:u8=$mem8    VREG:r:u8=$XMMr  IMM:u8=$index;
          return 1765 << 16 | 3349;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPEXTRB_mxroub_2::VPEXTRBmbib
          // VPEXTRB MEM:w:u8=$mem8    VREG:r:u8=$XMMr  IMM:u8=$index;
          return 1766 << 16 | 3351;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x15 */
  case 1045:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PEXTRW_mxroub::PEXTRWib
          // PEXTRW REG:w=$GPR32m    VREG:r:s32=$XMMr IMM:u8=$index;
          return 1061 << 16 | 1808;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPEXTRW_mxroub_1::VPEXTRWib
          // VPEXTRW REG:w:s32=$GPR32m VREG:r:u16=$XMMr IMM:u8=$index;
          return 1761 << 16 | 3342;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPEXTRW_mxroub_2::VPEXTRWib
          // VPEXTRW REG:w:u16=$GPR32m VREG:r:u16=$XMMr IMM:u8=$index;
          return 1762 << 16 | 3344;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PEXTRW_mxroub::PEXTRWmwib
          // PEXTRW MEM:w:s16=$mem16 VREG:r:s32=$XMMr IMM:u8=$index;
          return 1061 << 16 | 1809;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPEXTRW_mxroub_1::VPEXTRWmwib
          // VPEXTRW MEM:w:s16=$mem16  VREG:r:u16=$XMMr IMM:u8=$index;
          return 1761 << 16 | 3343;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPEXTRW_mxroub_2::VPEXTRWmwib
          // VPEXTRW MEM:w:u16=$mem16  VREG:r:u16=$XMMr IMM:u8=$index;
          return 1762 << 16 | 3345;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x16 */
  case 1046:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          if (d & 0x01)
          {
            // TEMPLATE.PEXTRx::PEXTRQib
            // PEXTRQ REG:w:s64=$GPR64m VREG:r:s32=$XMMr IMM:u8=$index;
            return 1064 << 16 | 1815;
          }
          else
          {
            // TEMPLATE.PEXTRx::PEXTRDib
            // PEXTRD REG:w:s32=$GPR32m VREG:r:s32=$XMMr IMM:u8=$index;
            return 1064 << 16 | 1813;
          }
          break;
        }
        case 0x01:
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPEXTRx_mxroub_1::VPEXTRQib
              // VPEXTRQ REG:w:s64=$GPR64m VREG:r:u64=$XMMr IMM:u8=$index;
              return 1767 << 16 | 3356;
            }
            else
            {
              // TEMPLATE.VPEXTRx_mxroub_1::VPEXTRDib
              // VPEXTRD REG:w:s32=$GPR32m VREG:r:u32=$XMMr IMM:u8=$index;
              return 1767 << 16 | 3352;
            }
          }
          else
          {
            // TEMPLATE.VPEXTRx_mxroub_1::VPEXTRDib
            // VPEXTRD REG:w:s32=$GPR32m VREG:r:u32=$XMMr IMM:u8=$index;
            return 1767 << 16 | 3354;
          }
          break;
        }
        case 0x02:
        {
          if (d & 0x01)
          {
            if (c & 0x80)
            {
              // TEMPLATE.VPEXTRx_mxroub_2::VPEXTRQib
              // VPEXTRQ REG:w:u64=$GPR64m VREG:r:u64=$XMMr IMM:u8=$index;
              return 1768 << 16 | 3362;
            }
            else
            {
              // TEMPLATE.VPEXTRx_mxroub_2::VPEXTRDib
              // VPEXTRD REG:w:u32=$GPR32m VREG:r:u32=$XMMr IMM:u8=$index;
              return 1768 << 16 | 3360;
            }
          }
          else
          {
            // TEMPLATE.VPEXTRx_mxroub_2::VPEXTRDib
            // VPEXTRD REG:w:u32=$GPR32m VREG:r:u32=$XMMr IMM:u8=$index;
            return 1768 << 16 | 3358;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          if (d & 0x01)
          {
            // TEMPLATE.PEXTRx::PEXTRQmqib
            // PEXTRQ MEM:w:s64=$mem64  VREG:r:s32=$XMMr IMM:u8=$index;
            return 1064 << 16 | 1816;
          }
          else
          {
            // TEMPLATE.PEXTRx::PEXTRDmdib
            // PEXTRD MEM:w:s32=$mem32  VREG:r:s32=$XMMr IMM:u8=$index;
            return 1064 << 16 | 1814;
          }
          break;
        }
        case 0x01:
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPEXTRx_mxroub_1::VPEXTRQmqib
              // VPEXTRQ MEM:w:s64=$mem64  VREG:r:u64=$XMMr IMM:u8=$index;
              return 1767 << 16 | 3357;
            }
            else
            {
              // TEMPLATE.VPEXTRx_mxroub_1::VPEXTRDmdib
              // VPEXTRD MEM:w:s32=$mem32  VREG:r:u32=$XMMr IMM:u8=$index;
              return 1767 << 16 | 3353;
            }
          }
          else
          {
            // TEMPLATE.VPEXTRx_mxroub_1::VPEXTRDmdib
            // VPEXTRD MEM:w:s32=$mem32  VREG:r:u32=$XMMr IMM:u8=$index;
            return 1767 << 16 | 3355;
          }
          break;
        }
        case 0x02:
        {
          if (d & 0x01)
          {
            if (c & 0x80)
            {
              // TEMPLATE.VPEXTRx_mxroub_2::VPEXTRQmqib
              // VPEXTRQ MEM:w:u64=$mem64  VREG:r:u64=$XMMr IMM:u8=$index;
              return 1768 << 16 | 3363;
            }
            else
            {
              // TEMPLATE.VPEXTRx_mxroub_2::VPEXTRDmdib
              // VPEXTRD MEM:w:u32=$mem32  VREG:r:u32=$XMMr IMM:u8=$index;
              return 1768 << 16 | 3361;
            }
          }
          else
          {
            // TEMPLATE.VPEXTRx_mxroub_2::VPEXTRDmdib
            // VPEXTRD MEM:w:u32=$mem32  VREG:r:u32=$XMMr IMM:u8=$index;
            return 1768 << 16 | 3359;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x17 */
  case 1047:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.EXTRACTPS::EXTRACTPSib
          // EXTRACTPS REG:w:s32=$GPR32m VREG:r:s32=$XMMr IMM:u8=$index;
          return 943 << 16 | 1596;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VEXTRACTPS_mdroub_1::VEXTRACTPSib
          // VEXTRACTPS REG:w=$GPR32m     VREG:r:f32=$XMMr IMM:u8=$index;
          return 1344 << 16 | 2479;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VEXTRACTPS_mdroub_2::VEXTRACTPSib
          // VEXTRACTPS REG:w:f32=$GPR32m VREG:r:f32=$XMMr IMM:u8=$index;
          return 1345 << 16 | 2481;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.EXTRACTPS::EXTRACTPSmdib
          // EXTRACTPS MEM:w:s32=$mem32  VREG:r:f32=$XMMr IMM:u8=$index;
          return 943 << 16 | 1597;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VEXTRACTPS_mdroub_1::VEXTRACTPSmdib
          // VEXTRACTPS MEM:w:f32=$mem32  VREG:r:f32=$XMMr IMM:u8=$index;
          return 1344 << 16 | 2480;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VEXTRACTPS_mdroub_2::VEXTRACTPSmdib
          // VEXTRACTPS MEM:w:f32=$mem32  VREG:r:f32=$XMMr IMM:u8=$index;
          return 1345 << 16 | 2482;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x18 */
  case 1048:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VINSERTF128::VINSERTF128ib
          // VINSERTF128  VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$XMMm                           IMM:u8=$index;
          return 2589 << 16 | 5267;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VINSERTF64X2_rynymoub::VINSERTF64X2ib
            // VINSERTF64X2 VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn                           VREG:r:f64=$XMMm  IMM:u8=$index;
            return 2593 << 16 | 5275;
          }
          else
          {
            // TEMPLATE.VINSERTF32X4_rynymoub::VINSERTF32X4ib
            // VINSERTF32X4 VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn                           VREG:r:f32=$XMMm  IMM:u8=$index;
            return 2590 << 16 | 5269;
          }
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VINSERTF64X2_rznzmoub::VINSERTF64X2ib
          // VINSERTF64X2 VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn                           VREG:r:f64=$XMMm  IMM:u8=$index;
          return 2594 << 16 | 5277;
        }
        else
        {
          // TEMPLATE.VINSERTF32X4_rznzmoub::VINSERTF32X4ib
          // VINSERTF32X4 VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn                           VREG:r:f32=$XMMm  IMM:u8=$index;
          return 2591 << 16 | 5271;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VINSERTF128::VINSERTF128mxib
          // VINSERTF128  VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem128 SBCST:SUPP={FROM=2 TO=4} IMM:u8=$index;
          return 2589 << 16 | 5268;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VINSERTF64X2_rynymoub::VINSERTF64X2mxib
            // VINSERTF64X2 VREG:w:f64=$YMMr PREG:r:Z=$Kk     VREG:r:f64=$YMMn                           MEM:r:f64=$mem128 IMM:u8=$index;
            return 2593 << 16 | 5276;
          }
          else
          {
            // TEMPLATE.VINSERTF32X4_rynymoub::VINSERTF32X4mxib
            // VINSERTF32X4 VREG:w:f32=$YMMr PREG:r:Z=$Kk     VREG:r:f32=$YMMn                           MEM:r:f32=$mem128 IMM:u8=$index;
            return 2590 << 16 | 5270;
          }
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VINSERTF64X2_rznzmoub::VINSERTF64X2mxib
          // VINSERTF64X2 VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn                           MEM:r:f64=$mem128 IMM:u8=$index;
          return 2594 << 16 | 5278;
        }
        else
        {
          // TEMPLATE.VINSERTF32X4_rznzmoub::VINSERTF32X4mxib
          // VINSERTF32X4 VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn                           MEM:r:f32=$mem128 IMM:u8=$index;
          return 2591 << 16 | 5272;
        }
      }
    }
  break;
  /* 0f3a.0x19 */
  case 1049:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VEXTRACTF128::VEXTRACTF128ib
          // VEXTRACTF128  VREG:w:f64=$XMMm  VREG:r:f64=$YMMr IMM:u8=$index;
          return 2343 << 16 | 4627;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VEXTRACTF64X2_moryub::VEXTRACTF64X2ib
            // VEXTRACTF64X2 VREG:w:f64=$XMMm  PREG:r:Z=$Kk     VREG:r:f64=$YMMr IMM:u8=$index;
            return 2347 << 16 | 4635;
          }
          else
          {
            // TEMPLATE.VEXTRACTF32X4_moryub::VEXTRACTF32X4ib
            // VEXTRACTF32X4 VREG:w:f32=$XMMm  PREG:r:Z=$Kk     VREG:r:f32=$YMMr IMM:u8=$index;
            return 2344 << 16 | 4629;
          }
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VEXTRACTF64X2_morzub::VEXTRACTF64X2ib
          // VEXTRACTF64X2 VREG:w:f64=$XMMm  PREG:r:Z=$Kk     VREG:r:f64=$ZMMr IMM:u8=$index;
          return 2348 << 16 | 4637;
        }
        else
        {
          // TEMPLATE.VEXTRACTF32X4_morzub::VEXTRACTF32X4ib
          // VEXTRACTF32X4 VREG:w:f32=$XMMm  PREG:r:Z=$Kk     VREG:r:f32=$ZMMr IMM:u8=$index;
          return 2345 << 16 | 4631;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VEXTRACTF128::VEXTRACTF128mxib
          // VEXTRACTF128  MEM:w:f64=$mem128 VREG:r:f64=$YMMr IMM:u8=$index;
          return 2343 << 16 | 4628;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VEXTRACTF64X2_moryub::VEXTRACTF64X2mxib
            // VEXTRACTF64X2 MEM:w:f64=$mem128 PREG:r:Z=$Kk     VREG:r:f64=$YMMr IMM:u8=$index;
            return 2347 << 16 | 4636;
          }
          else
          {
            // TEMPLATE.VEXTRACTF32X4_moryub::VEXTRACTF32X4mxib
            // VEXTRACTF32X4 MEM:w:f32=$mem128 PREG:r:Z=$Kk     VREG:r:f32=$YMMr IMM:u8=$index;
            return 2344 << 16 | 4630;
          }
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VEXTRACTF64X2_morzub::VEXTRACTF64X2mxib
          // VEXTRACTF64X2 MEM:w:f64=$mem128 PREG:r:Z=$Kk     VREG:r:f64=$ZMMr IMM:u8=$index;
          return 2348 << 16 | 4638;
        }
        else
        {
          // TEMPLATE.VEXTRACTF32X4_morzub::VEXTRACTF32X4mxib
          // VEXTRACTF32X4 MEM:w:f32=$mem128 PREG:r:Z=$Kk     VREG:r:f32=$ZMMr IMM:u8=$index;
          return 2345 << 16 | 4632;
        }
      }
    }
  break;
  /* 0f3a.0x1a */
  case 1050:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VINSERTF64X4::VINSERTF64X4ib
        // VINSERTF64X4 VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn                           VREG:r:f64=$YMMm  IMM:u8=$index;
        return 2595 << 16 | 5279;
      }
      else
      {
        // TEMPLATE.VINSERTF32X8::VINSERTF32X8ib
        // VINSERTF32X8 VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn                           VREG:r:f32=$YMMm  IMM:u8=$index;
        return 2592 << 16 | 5273;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VINSERTF64X4::VINSERTF64X4myib
        // VINSERTF64X4 VREG:w:f64=$ZMMr PREG:r:Z=$Kk     VREG:r:f64=$ZMMn                           MEM:r:f64=$mem256 IMM:u8=$index;
        return 2595 << 16 | 5280;
      }
      else
      {
        // TEMPLATE.VINSERTF32X8::VINSERTF32X8myib
        // VINSERTF32X8 VREG:w:f32=$ZMMr PREG:r:Z=$Kk     VREG:r:f32=$ZMMn                           MEM:r:f32=$mem256 IMM:u8=$index;
        return 2592 << 16 | 5274;
      }
    }
  break;
  /* 0f3a.0x1b */
  case 1051:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VEXTRACTF64X4::VEXTRACTF64X4ib
        // VEXTRACTF64X4 VREG:w:f64=$YMMm  PREG:r:Z=$Kk     VREG:r:f64=$ZMMr IMM:u8=$index;
        return 2349 << 16 | 4639;
      }
      else
      {
        // TEMPLATE.VEXTRACTF32X8::VEXTRACTF32X8ib
        // VEXTRACTF32X8 VREG:w:f32=$YMMm  PREG:r:Z=$Kk     VREG:r:f32=$ZMMr IMM:u8=$index;
        return 2346 << 16 | 4633;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VEXTRACTF64X4::VEXTRACTF64X4myib
        // VEXTRACTF64X4 MEM:w:f64=$mem256 PREG:r:Z=$Kk     VREG:r:f64=$ZMMr IMM:u8=$index;
        return 2349 << 16 | 4640;
      }
      else
      {
        // TEMPLATE.VEXTRACTF32X8::VEXTRACTF32X8myib
        // VEXTRACTF32X8 MEM:w:f32=$mem256 PREG:r:Z=$Kk     VREG:r:f32=$ZMMr IMM:u8=$index;
        return 2346 << 16 | 4634;
      }
    }
  break;
  /* invalid */
  case 1052:
    return 0;
  /* 0f3a.0x1d */
  case 1053:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VCVTPS2PH_mxrxub::VCVTPS2PH
          // VCVTPS2PH VREG:w:f16=$XMMm  VREG:r:f32=$YMMr RNDC:r:u8=$rndc3;
          return 547 << 16 | 985;
        }
        else
        {
          // TEMPLATE.VCVTPS2PH_mxrxub::VCVTPS2PH
          // VCVTPS2PH VREG:w:f16=$XMMm  VREG:r:f32=$XMMr RNDC:r:u8=$rndc3;
          return 547 << 16 | 984;
        }
      }
      else
      {
        if (b & 0x80)
        {
          // TEMPLATE.VCVTPS2PH_myrzub_1::VCVTPS2PH
          // VCVTPS2PH VREG:w:f16=$YMMm  PREG:r:Z=$Kk VREG:r:f32=$ZMMr SAE=$SAE RNDC:r:u8=$rndc3;
          return 2277 << 16 | 4444;
        }
        else
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VCVTPS2PH_moroub::VCVTPS2PH
              // VCVTPS2PH VREG:w:f16=$XMMm  PREG:r:Z=$Kk VREG:r:f32=$XMMr          RNDC:r:u8=$rndc3;
              return 2273 << 16 | 4440;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VCVTPS2PH_moryub_1::VCVTPS2PH
              // VCVTPS2PH VREG:w:f16=$XMMm  PREG:r:Z=$Kk VREG:r:f32=$YMMr          RNDC:r:u8=$rndc3;
              return 2274 << 16 | 4441;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VCVTPS2PH_myrzub_1::VCVTPS2PH
              // VCVTPS2PH VREG:w:f16=$YMMm  PREG:r:Z=$Kk VREG:r:f32=$ZMMr          RNDC:r:u8=$rndc3;
              return 2277 << 16 | 4445;
              break;
            }
            default: break;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VCVTPS2PH_mxrxub::VCVTPS2PHmx
          // VCVTPS2PH MEM:w:f16=$mem128 VREG:r:f32=$YMMr RNDC:r:u8=$rndc3;
          return 547 << 16 | 987;
        }
        else
        {
          // TEMPLATE.VCVTPS2PH_moryub_2::VCVTPS2PHmx
          // VCVTPS2PH MEM:w:f16=$mem128 PREG:r:Z=$Kk VREG:r:f32=$YMMr          RNDC:r:u8=$rndc3;
          return 2275 << 16 | 4442;
        }
      }
      else
      {
        if (b & 0x02)
        {
          // TEMPLATE.VCVTPS2PH_myrzub_2::VCVTPS2PHmy
          // VCVTPS2PH MEM:w:f16=$mem256 PREG:r:Z=$Kk VREG:r:f32=$ZMMr          RNDC:r:u8=$rndc3;
          return 2278 << 16 | 4446;
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.VCVTPS2PH_mxrxub::VCVTPS2PHmq
            // VCVTPS2PH MEM:w:f16=$mem64  VREG:r:f32=$XMMr RNDC:r:u8=$rndc3;
            return 547 << 16 | 986;
          }
          else
          {
            // TEMPLATE.VCVTPS2PH_mqroub::VCVTPS2PHmq
            // VCVTPS2PH MEM:w:f16=$mem64  PREG:r:Z=$Kk VREG:r:f32=$XMMr          RNDC:r:u8=$rndc3;
            return 2276 << 16 | 4443;
          }
        }
      }
    }
  break;
  /* 0f3a.0x1e */
  case 1054:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          // TEMPLATE.VPCMPUD_nzmxub::VPCMPUD
          // VPCMPUD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm                CC:u8=$cc3;
          return 3428 << 16 | 7116;
        }
        else
        {
          // TEMPLATE.VPCMPUD_nzmxub::VPCMPUD
          // VPCMPUD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm SWZ=$r_i64     CC:u8=$cc3;
          return 3428 << 16 | 7115;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPUQ_nymyub::VPCMPUQ
            // VPCMPUQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm             CC:u8=$cc3;
            return 2677 << 16 | 5449;
          }
          else
          {
            // TEMPLATE.VPCMPUD_nymyub::VPCMPUD
            // VPCMPUD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm             CC:u8=$cc3;
            return 2671 << 16 | 5437;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPCMPUQ_nzmzub::VPCMPUQ
              // VPCMPUQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm             CC:u8=$cc3;
              return 2678 << 16 | 5451;
            }
            else
            {
              // TEMPLATE.VPCMPUD_nzmzub::VPCMPUD
              // VPCMPUD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm             CC:u8=$cc3;
              return 2672 << 16 | 5439;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPCMPUQ_nomoub::VPCMPUQ
              // VPCMPUQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm             CC:u8=$cc3;
              return 2676 << 16 | 5447;
            }
            else
            {
              // TEMPLATE.VPCMPUD_nomoub::VPCMPUD
              // VPCMPUD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm             CC:u8=$cc3;
              return 2670 << 16 | 5435;
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        // TEMPLATE.VPCMPUD_nzmxub::VPCMPUDm
        // VPCMPUD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH CC:u8=$cc3;
        return 3428 << 16 | 7117;
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPUQ_nymyub::VPCMPUQmy
            // VPCMPUQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST CC:u8=$cc3;
            return 2677 << 16 | 5450;
          }
          else
          {
            // TEMPLATE.VPCMPUD_nymyub::VPCMPUDmy
            // VPCMPUD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST CC:u8=$cc3;
            return 2671 << 16 | 5438;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPCMPUQ_nzmzub::VPCMPUQmz
              // VPCMPUQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST CC:u8=$cc3;
              return 2678 << 16 | 5452;
            }
            else
            {
              // TEMPLATE.VPCMPUD_nzmzub::VPCMPUDmz
              // VPCMPUD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST CC:u8=$cc3;
              return 2672 << 16 | 5440;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPCMPUQ_nomoub::VPCMPUQmx
              // VPCMPUQ REG:w=$Kr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST CC:u8=$cc3;
              return 2676 << 16 | 5448;
            }
            else
            {
              // TEMPLATE.VPCMPUD_nomoub::VPCMPUDmx
              // VPCMPUD REG:w=$Kr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST CC:u8=$cc3;
              return 2670 << 16 | 5436;
            }
          }
        }
      }
    }
  break;
  /* 0f3a.0x1f */
  case 1055:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          // TEMPLATE.VPCMPD_nzmxub::VPCMPD
          // VPCMPD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm                CC:u8=$cc3;
          return 3424 << 16 | 7104;
        }
        else
        {
          // TEMPLATE.VPCMPD_nzmxub::VPCMPD
          // VPCMPD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm SWZ=$r_i64     CC:u8=$cc3;
          return 3424 << 16 | 7103;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPQ_nymyub::VPCMPQ
            // VPCMPQ  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s64=$YMMn VREG:r:s64=$YMMm             CC:u8=$cc3;
            return 2674 << 16 | 5443;
          }
          else
          {
            // TEMPLATE.VPCMPD_nymyub::VPCMPD
            // VPCMPD  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$YMMn VREG:r:s32=$YMMm             CC:u8=$cc3;
            return 2668 << 16 | 5431;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPCMPQ_nzmzub::VPCMPQ
              // VPCMPQ  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s64=$ZMMn VREG:r:s64=$ZMMm             CC:u8=$cc3;
              return 2675 << 16 | 5445;
            }
            else
            {
              // TEMPLATE.VPCMPD_nzmzub::VPCMPD
              // VPCMPD  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn VREG:r:s32=$ZMMm             CC:u8=$cc3;
              return 2669 << 16 | 5433;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPCMPQ_nomoub::VPCMPQ
              // VPCMPQ  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s64=$XMMn VREG:r:s64=$XMMm             CC:u8=$cc3;
              return 2673 << 16 | 5441;
            }
            else
            {
              // TEMPLATE.VPCMPD_nomoub::VPCMPD
              // VPCMPD  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$XMMn VREG:r:s32=$XMMm             CC:u8=$cc3;
              return 2667 << 16 | 5429;
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        // TEMPLATE.VPCMPD_nzmxub::VPCMPDm
        // VPCMPD REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn MEM:r=$mem SWZ=$su_i32 EVH=$EVH CC:u8=$cc3;
        return 3424 << 16 | 7105;
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPQ_nymyub::VPCMPQmy
            // VPCMPQ  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s64=$YMMn MEM:r:s64=$mem256 BCST=$BCST CC:u8=$cc3;
            return 2674 << 16 | 5444;
          }
          else
          {
            // TEMPLATE.VPCMPD_nymyub::VPCMPDmy
            // VPCMPD  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$YMMn MEM:r:s32=$mem256 BCST=$BCST CC:u8=$cc3;
            return 2668 << 16 | 5432;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPCMPQ_nzmzub::VPCMPQmz
              // VPCMPQ  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s64=$ZMMn MEM:r:s64=$mem512 BCST=$BCST CC:u8=$cc3;
              return 2675 << 16 | 5446;
            }
            else
            {
              // TEMPLATE.VPCMPD_nzmzub::VPCMPDmz
              // VPCMPD  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$ZMMn MEM:r:s32=$mem512 BCST=$BCST CC:u8=$cc3;
              return 2669 << 16 | 5434;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPCMPQ_nomoub::VPCMPQmx
              // VPCMPQ  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s64=$XMMn MEM:r:s64=$mem128 BCST=$BCST CC:u8=$cc3;
              return 2673 << 16 | 5442;
            }
            else
            {
              // TEMPLATE.VPCMPD_nomoub::VPCMPDmx
              // VPCMPD  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s32=$XMMn MEM:r:s32=$mem128 BCST=$BCST CC:u8=$cc3;
              return 2667 << 16 | 5430;
            }
          }
        }
      }
    }
  break;
  /* 0f3a.0x20 */
  case 1056:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PINSRB::PINSRBib
          // PINSRB VREG:rw:s32=$XMMr REG:r:s32=$GPR32m IMM:u8=$index;
          return 1079 << 16 | 1845;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPINSRB_ronomxub_1::VPINSRBib
          // VPINSRB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  REG:r:u8=$GPR32m  IMM:u8=$index;
          return 1784 << 16 | 3394;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPINSRB_ronomxub_2::VPINSRBib
          // VPINSRB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  REG:r:u8=$GPR32m  IMM:u8=$index;
          return 1785 << 16 | 3396;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PINSRB::PINSRBmbib
          // PINSRB VREG:rw:s32=$XMMr MEM:r:u8=$mem8    IMM:u8=$index;
          return 1079 << 16 | 1846;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPINSRB_ronomxub_1::VPINSRBmbib
          // VPINSRB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  MEM:r:u8=$mem8    IMM:u8=$index;
          return 1784 << 16 | 3395;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPINSRB_ronomxub_2::VPINSRBmbib
          // VPINSRB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn  MEM:r:u8=$mem8    IMM:u8=$index;
          return 1785 << 16 | 3397;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x21 */
  case 1057:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.INSERTPS::INSERTPSib
          // INSERTPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm IMM:u8=$index;
          return 955 << 16 | 1613;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VINSERTPS_ronomxub_1::VINSERTPSib
          // VINSERTPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm IMM:u8=$index;
          return 1365 << 16 | 2535;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VINSERTPS_ronomxub_2::VINSERTPSib
          // VINSERTPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm IMM:u8=$index;
          return 1366 << 16 | 2537;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.INSERTPS::INSERTPSmdib
          // INSERTPS VREG:rw:f32=$XMMr MEM:r:s32=$mem32 IMM:u8=$index;
          return 955 << 16 | 1614;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VINSERTPS_ronomxub_1::VINSERTPSmdib
          // VINSERTPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32 IMM:u8=$index;
          return 1365 << 16 | 2536;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VINSERTPS_ronomxub_2::VINSERTPSmdib
          // VINSERTPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32 IMM:u8=$index;
          return 1366 << 16 | 2538;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x22 */
  case 1058:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          if (d & 0x01)
          {
            // TEMPLATE.PINSRx::PINSRQib
            // PINSRQ VREG:rw:s32=$XMMr REG:r:s64=$GPR64m IMM:u8=$index;
            return 1080 << 16 | 1849;
          }
          else
          {
            // TEMPLATE.PINSRx::PINSRDib
            // PINSRD VREG:rw:s32=$XMMr REG:r:s32=$GPR32m IMM:u8=$index;
            return 1080 << 16 | 1847;
          }
          break;
        }
        case 0x01:
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPINSRx_ronomxub_1::VPINSRQib
              // VPINSRQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn REG:r:u64=$GPR64m IMM:u8=$index;
              return 1786 << 16 | 3402;
            }
            else
            {
              // TEMPLATE.VPINSRx_ronomxub_1::VPINSRDib
              // VPINSRD VREG:w:u32=$XMMr VREG:r:u32=$XMMn REG:r:u32=$GPR32m IMM:u8=$index;
              return 1786 << 16 | 3398;
            }
          }
          else
          {
            // TEMPLATE.VPINSRx_ronomxub_1::VPINSRDib
            // VPINSRD VREG:w:u32=$XMMr VREG:r:u32=$XMMn REG:r:u32=$GPR32m IMM:u8=$index;
            return 1786 << 16 | 3400;
          }
          break;
        }
        case 0x02:
        {
          if (d & 0x01)
          {
            if (c & 0x80)
            {
              // TEMPLATE.VPINSRx_ronomxub_2::VPINSRQib
              // VPINSRQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn REG:r:u64=$GPR64m IMM:u8=$index;
              return 1787 << 16 | 3408;
            }
            else
            {
              // TEMPLATE.VPINSRx_ronomxub_2::VPINSRDib
              // VPINSRD VREG:w:u32=$XMMr VREG:r:u32=$XMMn REG:r:u32=$GPR32m IMM:u8=$index;
              return 1787 << 16 | 3406;
            }
          }
          else
          {
            // TEMPLATE.VPINSRx_ronomxub_2::VPINSRDib
            // VPINSRD VREG:w:u32=$XMMr VREG:r:u32=$XMMn REG:r:u32=$GPR32m IMM:u8=$index;
            return 1787 << 16 | 3404;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          if (d & 0x01)
          {
            // TEMPLATE.PINSRx::PINSRQmqib
            // PINSRQ VREG:rw:s32=$XMMr MEM:r:s64=$mem64  IMM:u8=$index;
            return 1080 << 16 | 1850;
          }
          else
          {
            // TEMPLATE.PINSRx::PINSRDmdib
            // PINSRD VREG:rw:s32=$XMMr MEM:r:s32=$mem32  IMM:u8=$index;
            return 1080 << 16 | 1848;
          }
          break;
        }
        case 0x01:
        {
          if (c & 0x80)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPINSRx_ronomxub_1::VPINSRQmqib
              // VPINSRQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem64  IMM:u8=$index;
              return 1786 << 16 | 3403;
            }
            else
            {
              // TEMPLATE.VPINSRx_ronomxub_1::VPINSRDmdib
              // VPINSRD VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem32  IMM:u8=$index;
              return 1786 << 16 | 3399;
            }
          }
          else
          {
            // TEMPLATE.VPINSRx_ronomxub_1::VPINSRDmdib
            // VPINSRD VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem32  IMM:u8=$index;
            return 1786 << 16 | 3401;
          }
          break;
        }
        case 0x02:
        {
          if (d & 0x01)
          {
            if (c & 0x80)
            {
              // TEMPLATE.VPINSRx_ronomxub_2::VPINSRQmqib
              // VPINSRQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem64  IMM:u8=$index;
              return 1787 << 16 | 3409;
            }
            else
            {
              // TEMPLATE.VPINSRx_ronomxub_2::VPINSRDmdib
              // VPINSRD VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem32  IMM:u8=$index;
              return 1787 << 16 | 3407;
            }
          }
          else
          {
            // TEMPLATE.VPINSRx_ronomxub_2::VPINSRDmdib
            // VPINSRD VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem32  IMM:u8=$index;
            return 1787 << 16 | 3405;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x23 */
  case 1059:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSHUFFxxXx_rynymyub::VSHUFF64X2
          // VSHUFF64X2 VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn VREG:r:f64=$YMMm             ORDER:r:u8=$order;
          return 3065 << 16 | 6321;
        }
        else
        {
          // TEMPLATE.VSHUFFxxXx_rynymyub::VSHUFF32X4
          // VSHUFF32X4 VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn VREG:r:f32=$YMMm             ORDER:r:u8=$order;
          return 3065 << 16 | 6319;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSHUFFxxXx_rznzmzub::VSHUFF64X2
          // VSHUFF64X2 VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm             ORDER:r:u8=$order;
          return 3066 << 16 | 6325;
        }
        else
        {
          // TEMPLATE.VSHUFFxxXx_rznzmzub::VSHUFF32X4
          // VSHUFF32X4 VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm             ORDER:r:u8=$order;
          return 3066 << 16 | 6323;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSHUFFxxXx_rynymyub::VSHUFF64X2my
          // VSHUFF64X2 VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn MEM:r:f64=$mem256 BCST=$BCST ORDER:r:u8=$order;
          return 3065 << 16 | 6322;
        }
        else
        {
          // TEMPLATE.VSHUFFxxXx_rynymyub::VSHUFF32X4my
          // VSHUFF32X4 VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn MEM:r:f32=$mem256 BCST=$BCST ORDER:r:u8=$order;
          return 3065 << 16 | 6320;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSHUFFxxXx_rznzmzub::VSHUFF64X2mz
          // VSHUFF64X2 VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r:f64=$mem512 BCST=$BCST ORDER:r:u8=$order;
          return 3066 << 16 | 6326;
        }
        else
        {
          // TEMPLATE.VSHUFFxxXx_rznzmzub::VSHUFF32X4mz
          // VSHUFF32X4 VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:f32=$mem512 BCST=$BCST ORDER:r:u8=$order;
          return 3066 << 16 | 6324;
        }
      }
    }
  break;
  /* invalid */
  case 1060:
    return 0;
  /* 0f3a.0x25 */
  case 1061:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPTERNLOGx_rynymyub::VPTERNLOGQib
          // VPTERNLOGQ VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm             IMM:u8=$uimm8;
          return 2997 << 16 | 6141;
        }
        else
        {
          // TEMPLATE.VPTERNLOGx_rynymyub::VPTERNLOGDib
          // VPTERNLOGD VREG:rw:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm             IMM:u8=$uimm8;
          return 2997 << 16 | 6139;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPTERNLOGx_rznzmzub::VPTERNLOGQib
            // VPTERNLOGQ VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm             IMM:u8=$uimm8;
            return 2998 << 16 | 6145;
          }
          else
          {
            // TEMPLATE.VPTERNLOGx_rznzmzub::VPTERNLOGDib
            // VPTERNLOGD VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm             IMM:u8=$uimm8;
            return 2998 << 16 | 6143;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPTERNLOGx_ronomoub::VPTERNLOGQib
            // VPTERNLOGQ VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm             IMM:u8=$uimm8;
            return 2996 << 16 | 6137;
          }
          else
          {
            // TEMPLATE.VPTERNLOGx_ronomoub::VPTERNLOGDib
            // VPTERNLOGD VREG:rw:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm             IMM:u8=$uimm8;
            return 2996 << 16 | 6135;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPTERNLOGx_rynymyub::VPTERNLOGQmyib
          // VPTERNLOGQ VREG:rw:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST IMM:u8=$uimm8;
          return 2997 << 16 | 6142;
        }
        else
        {
          // TEMPLATE.VPTERNLOGx_rynymyub::VPTERNLOGDmyib
          // VPTERNLOGD VREG:rw:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST IMM:u8=$uimm8;
          return 2997 << 16 | 6140;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPTERNLOGx_rznzmzub::VPTERNLOGQmzib
            // VPTERNLOGQ VREG:rw:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST IMM:u8=$uimm8;
            return 2998 << 16 | 6146;
          }
          else
          {
            // TEMPLATE.VPTERNLOGx_rznzmzub::VPTERNLOGDmzib
            // VPTERNLOGD VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST IMM:u8=$uimm8;
            return 2998 << 16 | 6144;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPTERNLOGx_ronomoub::VPTERNLOGQmxib
            // VPTERNLOGQ VREG:rw:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST IMM:u8=$uimm8;
            return 2996 << 16 | 6138;
          }
          else
          {
            // TEMPLATE.VPTERNLOGx_ronomoub::VPTERNLOGDmxib
            // VPTERNLOGD VREG:rw:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST IMM:u8=$uimm8;
            return 2996 << 16 | 6136;
          }
        }
      }
    }
  break;
  /* 0f3a.0x26 */
  case 1062:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x08)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGETMANTPD_rzmxub::VGETMANTPD
            // VGETMANTPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE       SIGNC:r:u8=$signc;
            return 3372 << 16 | 7004;
          }
          else
          {
            // TEMPLATE.VGETMANTPS_rzmxub::VGETMANTPS
            // VGETMANTPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE       SIGNC:r:u8=$signc;
            return 3373 << 16 | 7007;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGETMANTPD_rzmxub::VGETMANTPD
            // VGETMANTPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SWZ=$r_i64     SIGNC:r:u8=$signc;
            return 3372 << 16 | 7003;
          }
          else
          {
            // TEMPLATE.VGETMANTPS_rzmxub::VGETMANTPS
            // VGETMANTPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SWZ=$r_i32     SIGNC:r:u8=$signc;
            return 3373 << 16 | 7006;
          }
        }
      }
      else
      {
        if (b & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGETMANTPD_rzmzub::VGETMANTPD
            // VGETMANTPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE    SIGNC:r:u8=$signc;
            return 2583 << 16 | 5251;
          }
          else
          {
            // TEMPLATE.VGETMANTPS_rzmzub::VGETMANTPS
            // VGETMANTPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE    SIGNC:r:u8=$signc;
            return 2586 << 16 | 5258;
          }
        }
        else
        {
          if (b & 0x01)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VGETMANTPD_rymyub::VGETMANTPD
              // VGETMANTPD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm             SIGNC:r:u8=$signc;
              return 2582 << 16 | 5249;
            }
            else
            {
              // TEMPLATE.VGETMANTPS_rymyub::VGETMANTPS
              // VGETMANTPS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm             SIGNC:r:u8=$signc;
              return 2585 << 16 | 5256;
            }
          }
          else
          {
            if (b & 0x02)
            {
              if (d & 0x01)
              {
                // TEMPLATE.VGETMANTPD_rzmzub::VGETMANTPD
                // VGETMANTPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm             SIGNC:r:u8=$signc;
                return 2583 << 16 | 5252;
              }
              else
              {
                // TEMPLATE.VGETMANTPS_rzmzub::VGETMANTPS
                // VGETMANTPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm             SIGNC:r:u8=$signc;
                return 2586 << 16 | 5259;
              }
            }
            else
            {
              if (d & 0x01)
              {
                // TEMPLATE.VGETMANTPD_romoub::VGETMANTPD
                // VGETMANTPD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm             SIGNC:r:u8=$signc;
                return 2581 << 16 | 5247;
              }
              else
              {
                // TEMPLATE.VGETMANTPS_romoub::VGETMANTPS
                // VGETMANTPS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm             SIGNC:r:u8=$signc;
                return 2584 << 16 | 5254;
              }
            }
          }
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGETMANTPD_rzmxub::VGETMANTPDm
          // VGETMANTPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_f64 EVH=$EVH SIGNC:r:u8=$signc;
          return 3372 << 16 | 7005;
        }
        else
        {
          // TEMPLATE.VGETMANTPS_rzmxub::VGETMANTPSm
          // VGETMANTPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_f32 EVH=$EVH SIGNC:r:u8=$signc;
          return 3373 << 16 | 7008;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VGETMANTPD_rymyub::VGETMANTPDmy
            // VGETMANTPD VREG:w:f64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST SIGNC:r:u8=$signc;
            return 2582 << 16 | 5250;
          }
          else
          {
            // TEMPLATE.VGETMANTPS_rymyub::VGETMANTPSmy
            // VGETMANTPS VREG:w:f32=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST SIGNC:r:u8=$signc;
            return 2585 << 16 | 5257;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VGETMANTPD_rzmzub::VGETMANTPDmz
              // VGETMANTPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST SIGNC:r:u8=$signc;
              return 2583 << 16 | 5253;
            }
            else
            {
              // TEMPLATE.VGETMANTPS_rzmzub::VGETMANTPSmz
              // VGETMANTPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST SIGNC:r:u8=$signc;
              return 2586 << 16 | 5260;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VGETMANTPD_romoub::VGETMANTPDmx
              // VGETMANTPD VREG:w:f64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST SIGNC:r:u8=$signc;
              return 2581 << 16 | 5248;
            }
            else
            {
              // TEMPLATE.VGETMANTPS_romoub::VGETMANTPSmx
              // VGETMANTPS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST SIGNC:r:u8=$signc;
              return 2584 << 16 | 5255;
            }
          }
        }
      }
    }
  break;
  /* 0f3a.0x27 */
  case 1063:
    if (a & 0x01)
    {
      if (b & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGETMANTSD::VGETMANTSD
          // VGETMANTSD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm SAE=$SAE SIGNC:r:u8=$signc;
          return 2587 << 16 | 5262;
        }
        else
        {
          // TEMPLATE.VGETMANTSS::VGETMANTSS
          // VGETMANTSS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE SIGNC:r:u8=$signc;
          return 2588 << 16 | 5265;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VGETMANTSD::VGETMANTSD
          // VGETMANTSD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm          SIGNC:r:u8=$signc;
          return 2587 << 16 | 5261;
        }
        else
        {
          // TEMPLATE.VGETMANTSS::VGETMANTSS
          // VGETMANTSS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm          SIGNC:r:u8=$signc;
          return 2588 << 16 | 5264;
        }
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VGETMANTSD::VGETMANTSDmq
        // VGETMANTSD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem64          SIGNC:r:u8=$signc;
        return 2587 << 16 | 5263;
      }
      else
      {
        // TEMPLATE.VGETMANTSS::VGETMANTSSmd
        // VGETMANTSS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem32          SIGNC:r:u8=$signc;
        return 2588 << 16 | 5266;
      }
    }
  break;
  /* invalid */
  case 1064:
    return 0;
  /* invalid */
  case 1065:
    return 0;
  /* invalid */
  case 1066:
    return 0;
  /* invalid */
  case 1067:
    return 0;
  /* invalid */
  case 1068:
    return 0;
  /* invalid */
  case 1069:
    return 0;
  /* invalid */
  case 1070:
    return 0;
  /* invalid */
  case 1071:
    return 0;
  /* 0f3a.0x30 */
  case 1072:
    if (d & 0x01)
    {
      // TEMPLATE.KSHIFTRW::KSHIFTRW
      // KSHIFTRW REG:w=$Kr REG:r=$Km SHIFT:r:u8=$shr;
      return 1400 << 16 | 2600;
    }
    else
    {
      // TEMPLATE.KSHIFTRB::KSHIFTRB
      // KSHIFTRB REG:w=$Kr REG:r=$Km SHIFT:r:u8=$shr;
      return 1399 << 16 | 2599;
    }
  break;
  /* 0f3a.0x31 */
  case 1073:
    if (d & 0x01)
    {
      // TEMPLATE.KSHIFTRx::KSHIFTRQ
      // KSHIFTRQ REG:w=$Kr REG:r=$Km SHIFT:r:u8=$shr;
      return 1401 << 16 | 2602;
    }
    else
    {
      // TEMPLATE.KSHIFTRx::KSHIFTRD
      // KSHIFTRD REG:w=$Kr REG:r=$Km SHIFT:r:u8=$shr;
      return 1401 << 16 | 2601;
    }
  break;
  /* 0f3a.0x32 */
  case 1074:
    if (d & 0x01)
    {
      // TEMPLATE.KSHIFTLW::KSHIFTLW
      // KSHIFTLW REG:w=$Kr REG:r=$Km SHIFT:r:u8=$shl;
      return 1397 << 16 | 2596;
    }
    else
    {
      // TEMPLATE.KSHIFTLB::KSHIFTLB
      // KSHIFTLB REG:w=$Kr REG:r=$Km SHIFT:r:u8=$shl;
      return 1396 << 16 | 2595;
    }
  break;
  /* 0f3a.0x33 */
  case 1075:
    if (d & 0x01)
    {
      // TEMPLATE.KSHIFTLx::KSHIFTLQ
      // KSHIFTLQ REG:w=$Kr REG:r=$Km SHIFT:r:u8=$shl;
      return 1398 << 16 | 2598;
    }
    else
    {
      // TEMPLATE.KSHIFTLx::KSHIFTLD
      // KSHIFTLD REG:w=$Kr REG:r=$Km SHIFT:r:u8=$shl;
      return 1398 << 16 | 2597;
    }
  break;
  /* invalid */
  case 1076:
    return 0;
  /* invalid */
  case 1077:
    return 0;
  /* invalid */
  case 1078:
    return 0;
  /* invalid */
  case 1079:
    return 0;
  /* 0f3a.0x38 */
  case 1080:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VINSERTI128::VINSERTI128ib
          // VINSERTI128  VREG:w:u128=$YMMr VREG:r:u128=$YMMn REG:r:u128=$XMMm   IMM:u8=$index;
          return 2596 << 16 | 5281;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VINSERTI64X2_rynymoub::VINSERTI64X2ib
            // VINSERTI64X2 VREG:w:u64=$YMMr  PREG:r:Z=$Kk      VREG:r:u64=$YMMn   VREG:r:u64=$XMMm  IMM:u8=$index;
            return 2600 << 16 | 5289;
          }
          else
          {
            // TEMPLATE.VINSERTI32X4_rynymoub::VINSERTI32X4ib
            // VINSERTI32X4 VREG:w:u32=$YMMr  PREG:r:Z=$Kk      VREG:r:u32=$YMMn   VREG:r:u32=$XMMm  IMM:u8=$index;
            return 2597 << 16 | 5283;
          }
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VINSERTI64X2_rznzmoub::VINSERTI64X2ib
          // VINSERTI64X2 VREG:w:u64=$ZMMr  PREG:r:Z=$Kk      VREG:r:u64=$ZMMn   VREG:r:u64=$XMMm  IMM:u8=$index;
          return 2601 << 16 | 5291;
        }
        else
        {
          // TEMPLATE.VINSERTI32X4_rznzmoub::VINSERTI32X4ib
          // VINSERTI32X4 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk      VREG:r:u32=$ZMMn   VREG:r:u32=$XMMm  IMM:u8=$index;
          return 2598 << 16 | 5285;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VINSERTI128::VINSERTI128mxib
          // VINSERTI128  VREG:w:u128=$YMMr VREG:r:u128=$YMMn MEM:r:u128=$mem128 IMM:u8=$index;
          return 2596 << 16 | 5282;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VINSERTI64X2_rynymoub::VINSERTI64X2mxib
            // VINSERTI64X2 VREG:w:u64=$YMMr  PREG:r:Z=$Kk      VREG:r:u64=$YMMn   MEM:r:u64=$mem128 IMM:u8=$index;
            return 2600 << 16 | 5290;
          }
          else
          {
            // TEMPLATE.VINSERTI32X4_rynymoub::VINSERTI32X4mxib
            // VINSERTI32X4 VREG:w:u32=$YMMr  PREG:r:Z=$Kk      VREG:r:u32=$YMMn   MEM:r:u32=$mem128 IMM:u8=$index;
            return 2597 << 16 | 5284;
          }
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VINSERTI64X2_rznzmoub::VINSERTI64X2mxib
          // VINSERTI64X2 VREG:w:u64=$ZMMr  PREG:r:Z=$Kk      VREG:r:u64=$ZMMn   MEM:r:u64=$mem128 IMM:u8=$index;
          return 2601 << 16 | 5292;
        }
        else
        {
          // TEMPLATE.VINSERTI32X4_rznzmoub::VINSERTI32X4mxib
          // VINSERTI32X4 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk      VREG:r:u32=$ZMMn   MEM:r:u32=$mem128 IMM:u8=$index;
          return 2598 << 16 | 5286;
        }
      }
    }
  break;
  /* 0f3a.0x39 */
  case 1081:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VEXTRACTI128::VEXTRACTI128ib
          // VEXTRACTI128  REG:w:u128=$XMMm   VREG:r:u128=$YMMr IMM:u8=$index;
          return 2350 << 16 | 4641;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VEXTRACTI64X2_moryub::VEXTRACTI64X2ib
            // VEXTRACTI64X2 VREG:w:u64=$XMMm   PREG:r:Z=$Kk      VREG:r:u64=$YMMr IMM:u8=$index;
            return 2354 << 16 | 4649;
          }
          else
          {
            // TEMPLATE.VEXTRACTI32X4_moryub::VEXTRACTI32X4ib
            // VEXTRACTI32X4 VREG:w:u32=$XMMm   PREG:r:Z=$Kk      VREG:r:u32=$YMMr IMM:u8=$index;
            return 2351 << 16 | 4643;
          }
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VEXTRACTI64X2_morzub::VEXTRACTI64X2ib
          // VEXTRACTI64X2 VREG:w:u64=$XMMm   PREG:r:Z=$Kk      VREG:r:u64=$ZMMr IMM:u8=$index;
          return 2355 << 16 | 4651;
        }
        else
        {
          // TEMPLATE.VEXTRACTI32X4_morzub::VEXTRACTI32X4ib
          // VEXTRACTI32X4 VREG:w:u32=$XMMm   PREG:r:Z=$Kk      VREG:r:u32=$ZMMr IMM:u8=$index;
          return 2352 << 16 | 4645;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (c & 0x01)
        {
          // TEMPLATE.VEXTRACTI128::VEXTRACTI128mxib
          // VEXTRACTI128  MEM:w:u128=$mem128 VREG:r:u128=$YMMr IMM:u8=$index;
          return 2350 << 16 | 4642;
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VEXTRACTI64X2_moryub::VEXTRACTI64X2mxib
            // VEXTRACTI64X2 MEM:w:u64=$mem128  PREG:r:Z=$Kk      VREG:r:u64=$YMMr IMM:u8=$index;
            return 2354 << 16 | 4650;
          }
          else
          {
            // TEMPLATE.VEXTRACTI32X4_moryub::VEXTRACTI32X4mxib
            // VEXTRACTI32X4 MEM:w:u32=$mem128  PREG:r:Z=$Kk      VREG:r:u32=$YMMr IMM:u8=$index;
            return 2351 << 16 | 4644;
          }
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VEXTRACTI64X2_morzub::VEXTRACTI64X2mxib
          // VEXTRACTI64X2 MEM:w:u64=$mem128  PREG:r:Z=$Kk      VREG:r:u64=$ZMMr IMM:u8=$index;
          return 2355 << 16 | 4652;
        }
        else
        {
          // TEMPLATE.VEXTRACTI32X4_morzub::VEXTRACTI32X4mxib
          // VEXTRACTI32X4 MEM:w:u32=$mem128  PREG:r:Z=$Kk      VREG:r:u32=$ZMMr IMM:u8=$index;
          return 2352 << 16 | 4646;
        }
      }
    }
  break;
  /* 0f3a.0x3a */
  case 1082:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VINSERTI64X4::VINSERTI64X4ib
        // VINSERTI64X4 VREG:w:u64=$ZMMr  PREG:r:Z=$Kk      VREG:r:u64=$ZMMn   VREG:r:u64=$YMMm  IMM:u8=$index;
        return 2602 << 16 | 5293;
      }
      else
      {
        // TEMPLATE.VINSERTI32X8::VINSERTI32X8ib
        // VINSERTI32X8 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk      VREG:r:u32=$ZMMn   VREG:r:u32=$YMMm  IMM:u8=$index;
        return 2599 << 16 | 5287;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VINSERTI64X4::VINSERTI64X4myib
        // VINSERTI64X4 VREG:w:u64=$ZMMr  PREG:r:Z=$Kk      VREG:r:u64=$ZMMn   MEM:r:u64=$mem256 IMM:u8=$index;
        return 2602 << 16 | 5294;
      }
      else
      {
        // TEMPLATE.VINSERTI32X8::VINSERTI32X8myib
        // VINSERTI32X8 VREG:w:u32=$ZMMr  PREG:r:Z=$Kk      VREG:r:u32=$ZMMn   MEM:r:u32=$mem256 IMM:u8=$index;
        return 2599 << 16 | 5288;
      }
    }
  break;
  /* 0f3a.0x3b */
  case 1083:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VEXTRACTI64X4::VEXTRACTI64X4ib
        // VEXTRACTI64X4 VREG:w:u64=$YMMm   PREG:r:Z=$Kk      VREG:r:u64=$ZMMr IMM:u8=$index;
        return 2356 << 16 | 4653;
      }
      else
      {
        // TEMPLATE.VEXTRACTI32X8::VEXTRACTI32X8ib
        // VEXTRACTI32X8 VREG:w:u32=$YMMm   PREG:r:Z=$Kk      VREG:r:u32=$ZMMr IMM:u8=$index;
        return 2353 << 16 | 4647;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VEXTRACTI64X4::VEXTRACTI64X4myib
        // VEXTRACTI64X4 MEM:w:u64=$mem256  PREG:r:Z=$Kk      VREG:r:u64=$ZMMr IMM:u8=$index;
        return 2356 << 16 | 4654;
      }
      else
      {
        // TEMPLATE.VEXTRACTI32X8::VEXTRACTI32X8myib
        // VEXTRACTI32X8 MEM:w:u32=$mem256  PREG:r:Z=$Kk      VREG:r:u32=$ZMMr IMM:u8=$index;
        return 2353 << 16 | 4648;
      }
    }
  break;
  /* invalid */
  case 1084:
    return 0;
  /* invalid */
  case 1085:
    return 0;
  /* 0f3a.0x3e */
  case 1086:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCMPUW_nymyub::VPCMPUW
          // VPCMPUW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$YMMn VREG:r:u16=$YMMm  CC:u8=$cc3;
          return 2680 << 16 | 5455;
        }
        else
        {
          // TEMPLATE.VPCMPUB_nymyub::VPCMPUB
          // VPCMPUB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$YMMn VREG:r:u8=$YMMm  CC:u8=$cc3;
          return 2665 << 16 | 5425;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPUW_nzmzub::VPCMPUW
            // VPCMPUW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$ZMMn VREG:r:u16=$ZMMm  CC:u8=$cc3;
            return 2681 << 16 | 5457;
          }
          else
          {
            // TEMPLATE.VPCMPUB_nzmzub::VPCMPUB
            // VPCMPUB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$ZMMn VREG:r:u8=$ZMMm  CC:u8=$cc3;
            return 2666 << 16 | 5427;
          }
        }
        else
        {
          if (c & 0x01)
          {
            // TEMPLATE.KEXTRACT::KEXTRACTib
            // KEXTRACT REG:w=$Kr REG:r:s64=$GPR64m IMM:u8=$index;
            return 3278 << 16 | 6802;
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VPCMPUW_nomoub::VPCMPUW
              // VPCMPUW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$XMMn VREG:r:u16=$XMMm  CC:u8=$cc3;
              return 2679 << 16 | 5453;
            }
            else
            {
              // TEMPLATE.VPCMPUB_nomoub::VPCMPUB
              // VPCMPUB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$XMMn VREG:r:u8=$XMMm  CC:u8=$cc3;
              return 2664 << 16 | 5423;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCMPUW_nymyub::VPCMPUWmy
          // VPCMPUW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$YMMn MEM:r:u16=$mem256 CC:u8=$cc3;
          return 2680 << 16 | 5456;
        }
        else
        {
          // TEMPLATE.VPCMPUB_nymyub::VPCMPUBmy
          // VPCMPUB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$YMMn MEM:r:u8=$mem256 CC:u8=$cc3;
          return 2665 << 16 | 5426;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPUW_nzmzub::VPCMPUWmz
            // VPCMPUW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$ZMMn MEM:r:u16=$mem512 CC:u8=$cc3;
            return 2681 << 16 | 5458;
          }
          else
          {
            // TEMPLATE.VPCMPUB_nzmzub::VPCMPUBmz
            // VPCMPUB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$ZMMn MEM:r:u8=$mem512 CC:u8=$cc3;
            return 2666 << 16 | 5428;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPUW_nomoub::VPCMPUWmx
            // VPCMPUW REG:w=$Kr PREG:r:Z=$Kk VREG:r:u16=$XMMn MEM:r:u16=$mem128 CC:u8=$cc3;
            return 2679 << 16 | 5454;
          }
          else
          {
            // TEMPLATE.VPCMPUB_nomoub::VPCMPUBmx
            // VPCMPUB REG:w=$Kr PREG:r:Z=$Kk VREG:r:u8=$XMMn MEM:r:u8=$mem128 CC:u8=$cc3;
            return 2664 << 16 | 5424;
          }
        }
      }
    }
  break;
  /* 0f3a.0x3f */
  case 1087:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCMPW_nymyub::VPCMPW
          // VPCMPW  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s16=$YMMn VREG:r:s16=$YMMm  CC:u8=$cc3;
          return 2683 << 16 | 5461;
        }
        else
        {
          // TEMPLATE.VPCMPB_nymyub::VPCMPB
          // VPCMPB  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s8=$YMMn VREG:r:s8=$YMMm  CC:u8=$cc3;
          return 2662 << 16 | 5419;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPW_nzmzub::VPCMPW
            // VPCMPW  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s16=$ZMMn VREG:r:s16=$ZMMm  CC:u8=$cc3;
            return 2684 << 16 | 5463;
          }
          else
          {
            // TEMPLATE.VPCMPB_nzmzub::VPCMPB
            // VPCMPB  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s8=$ZMMn VREG:r:s8=$ZMMm  CC:u8=$cc3;
            return 2663 << 16 | 5421;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPW_nomoub::VPCMPW
            // VPCMPW  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s16=$XMMn VREG:r:s16=$XMMm  CC:u8=$cc3;
            return 2682 << 16 | 5459;
          }
          else
          {
            // TEMPLATE.VPCMPB_nomoub::VPCMPB
            // VPCMPB  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s8=$XMMn VREG:r:s8=$XMMm  CC:u8=$cc3;
            return 2661 << 16 | 5417;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCMPW_nymyub::VPCMPWmy
          // VPCMPW  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s16=$YMMn MEM:r:s16=$mem256 CC:u8=$cc3;
          return 2683 << 16 | 5462;
        }
        else
        {
          // TEMPLATE.VPCMPB_nymyub::VPCMPBmy
          // VPCMPB  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s8=$YMMn MEM:r:s8=$mem256 CC:u8=$cc3;
          return 2662 << 16 | 5420;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPW_nzmzub::VPCMPWmz
            // VPCMPW  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s16=$ZMMn MEM:r:s16=$mem512 CC:u8=$cc3;
            return 2684 << 16 | 5464;
          }
          else
          {
            // TEMPLATE.VPCMPB_nzmzub::VPCMPBmz
            // VPCMPB  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s8=$ZMMn MEM:r:s8=$mem512 CC:u8=$cc3;
            return 2663 << 16 | 5422;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPW_nomoub::VPCMPWmx
            // VPCMPW  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s16=$XMMn MEM:r:s16=$mem128 CC:u8=$cc3;
            return 2682 << 16 | 5460;
          }
          else
          {
            // TEMPLATE.VPCMPB_nomoub::VPCMPBmx
            // VPCMPB  REG:w=$Kr PREG:r:Z=$Kk VREG:r:s8=$XMMn MEM:r:s8=$mem128 CC:u8=$cc3;
            return 2661 << 16 | 5418;
          }
        }
      }
    }
  break;
  /* 0f3a.0x40 */
  case 1088:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VDPPS::VDPPSib
          // VDPPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm  IMM:u8=$uimm8;
          return 1343 << 16 | 2476;
        }
        else
        {
          // TEMPLATE.VDPPS::VDPPSib
          // VDPPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm  IMM:u8=$uimm8;
          return 1343 << 16 | 2475;
        }
      }
      else
      {
        // TEMPLATE.DPPS::DPPSib
        // DPPS VREG:rw:f32=$XMMr VREG:r:f32=$XMMm  IMM:u8=$uimm8;
        return 942 << 16 | 1594;
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (b & 0x01)
        {
          // TEMPLATE.VDPPS::VDPPSmyib
          // VDPPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256 IMM:u8=$uimm8;
          return 1343 << 16 | 2478;
        }
        else
        {
          // TEMPLATE.VDPPS::VDPPSmxib
          // VDPPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128 IMM:u8=$uimm8;
          return 1343 << 16 | 2477;
        }
      }
      else
      {
        // TEMPLATE.DPPS::DPPSmxib
        // DPPS VREG:rw:f32=$XMMr MEM:r:f32=$mem128 IMM:u8=$uimm8;
        return 942 << 16 | 1595;
      }
    }
  break;
  /* 0f3a.0x41 */
  case 1089:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // TEMPLATE.VDPPD::VDPPDib
        // VDPPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm  IMM:u8=$uimm8;
        return 1342 << 16 | 2473;
      }
      else
      {
        // TEMPLATE.DPPD::DPPDib
        // DPPD VREG:rw:f64=$XMMr VREG:r:f64=$XMMm  IMM:u8=$uimm8;
        return 941 << 16 | 1592;
      }
    }
    else
    {
      if (c & 0x01)
      {
        // TEMPLATE.VDPPD::VDPPDmxib
        // VDPPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128 IMM:u8=$uimm8;
        return 1342 << 16 | 2474;
      }
      else
      {
        // TEMPLATE.DPPD::DPPDmxib
        // DPPD VREG:rw:f64=$XMMr MEM:r:f64=$mem128 IMM:u8=$uimm8;
        return 941 << 16 | 1593;
      }
    }
  break;
  /* 0f3a.0x42 */
  case 1090:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.MPSADBW::MPSADBWib
          // MPSADBW VREG:rw:u8=$XMMr VREG:r:u8=$XMMm  IMM:u8=$uimm8;
          return 1013 << 16 | 1710;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VMPSADBW_rynymyub::VMPSADBWib
            // VMPSADBW VREG:w:u16=$YMMr VREG:r:u8=$YMMn VREG:r:u8=$YMMm  IMM:u8=$uimm8;
            return 1591 << 16 | 2978;
          }
          else
          {
            // TEMPLATE.VMPSADBW_ronomoub::VMPSADBWib
            // VMPSADBW VREG:w:u16=$XMMr VREG:r:u8=$XMMn VREG:r:u8=$XMMm  IMM:u8=$uimm8;
            return 1590 << 16 | 2976;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VDBPSADBW_ronomoub::VDBPSADBWib
              // VDBPSADBW VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn VREG:r:u8=$XMMm  IMM:u8=$uimm8;
              return 2331 << 16 | 4603;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VDBPSADBW_rynymyub::VDBPSADBWib
              // VDBPSADBW VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn VREG:r:u8=$YMMm  IMM:u8=$uimm8;
              return 2332 << 16 | 4605;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VDBPSADBW_rznzmzub::VDBPSADBWib
              // VDBPSADBW VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn VREG:r:u8=$ZMMm  IMM:u8=$uimm8;
              return 2333 << 16 | 4607;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.MPSADBW::MPSADBWmxib
          // MPSADBW VREG:rw:u8=$XMMr MEM:r:u8=$mem128 IMM:u8=$uimm8;
          return 1013 << 16 | 1711;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VMPSADBW_rynymyub::VMPSADBWmyib
            // VMPSADBW VREG:w:u16=$YMMr VREG:r:u8=$YMMn MEM:r:u8=$mem256 IMM:u8=$uimm8;
            return 1591 << 16 | 2979;
          }
          else
          {
            // TEMPLATE.VMPSADBW_ronomoub::VMPSADBWmxib
            // VMPSADBW VREG:w:u16=$XMMr VREG:r:u8=$XMMn MEM:r:u8=$mem128 IMM:u8=$uimm8;
            return 1590 << 16 | 2977;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VDBPSADBW_ronomoub::VDBPSADBWmxib
              // VDBPSADBW VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:u8=$XMMn MEM:r:u8=$mem128 IMM:u8=$uimm8;
              return 2331 << 16 | 4604;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VDBPSADBW_rynymyub::VDBPSADBWmyib
              // VDBPSADBW VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:u8=$YMMn MEM:r:u8=$mem256 IMM:u8=$uimm8;
              return 2332 << 16 | 4606;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VDBPSADBW_rznzmzub::VDBPSADBWmzib
              // VDBPSADBW VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u8=$ZMMn MEM:r:u8=$mem512 IMM:u8=$uimm8;
              return 2333 << 16 | 4608;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x43 */
  case 1091:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSHUFIxxXx_rynymyub::VSHUFI64X2
          // VSHUFI64X2 VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm             ORDER:r:u8=$order;
          return 3067 << 16 | 6329;
        }
        else
        {
          // TEMPLATE.VSHUFIxxXx_rynymyub::VSHUFI32X4
          // VSHUFI32X4 VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm             ORDER:r:u8=$order;
          return 3067 << 16 | 6327;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSHUFIxxXx_rznzmzub::VSHUFI64X2
          // VSHUFI64X2 VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm             ORDER:r:u8=$order;
          return 3068 << 16 | 6333;
        }
        else
        {
          // TEMPLATE.VSHUFIxxXx_rznzmzub::VSHUFI32X4
          // VSHUFI32X4 VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm             ORDER:r:u8=$order;
          return 3068 << 16 | 6331;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSHUFIxxXx_rynymyub::VSHUFI64X2my
          // VSHUFI64X2 VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST ORDER:r:u8=$order;
          return 3067 << 16 | 6330;
        }
        else
        {
          // TEMPLATE.VSHUFIxxXx_rynymyub::VSHUFI32X4my
          // VSHUFI32X4 VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST ORDER:r:u8=$order;
          return 3067 << 16 | 6328;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VSHUFIxxXx_rznzmzub::VSHUFI64X2mz
          // VSHUFI64X2 VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST ORDER:r:u8=$order;
          return 3068 << 16 | 6334;
        }
        else
        {
          // TEMPLATE.VSHUFIxxXx_rznzmzub::VSHUFI32X4mz
          // VSHUFI32X4 VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST ORDER:r:u8=$order;
          return 3068 << 16 | 6332;
        }
      }
    }
  break;
  /* 0f3a.0x44 */
  case 1092:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PCLMULQDQ::PCLMULQDQib
          // PCLMULQDQ  VREG:rw:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8;
          return 348 << 16 | 630;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPCLMULQDQ_rynymyub_1::VPCLMULQDQib
            // VPCLMULQDQ VREG:w:u128=$YMMr VREG:r:u64=$YMMn  VREG:r:u64=$YMMm  IMM:u8=$uimm8;
            return 349 << 16 | 632;
          }
          else
          {
            // TEMPLATE.VPCLMULQDQ_ronomoub_1::VPCLMULQDQib
            // VPCLMULQDQ REG:w:u128=$XMMr  VREG:r:u64=$XMMn VREG:r:u64=$XMMm  IMM:u8=$uimm8;
            return 1713 << 16 | 3234;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPCLMULQDQ_ronomoub_2::VPCLMULQDQib
              // VPCLMULQDQ REG:w:u128=$XMMr  VREG:r:u64=$XMMn VREG:r:u64=$XMMm  IMM:u8=$uimm8;
              return 1714 << 16 | 3236;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPCLMULQDQ_rynymyub_2::VPCLMULQDQib
              // VPCLMULQDQ VREG:w:u128=$YMMr VREG:r:u64=$YMMn VREG:r:u64=$YMMm  IMM:u8=$uimm8;
              return 1715 << 16 | 3238;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPCLMULQDQ_rznzmzub::VPCLMULQDQib
              // VPCLMULQDQ VREG:w:u128=$ZMMr VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm  IMM:u8=$uimm8;
              return 1716 << 16 | 3240;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.PCLMULQDQ::PCLMULQDQmxib
          // PCLMULQDQ  VREG:rw:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8;
          return 348 << 16 | 631;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VPCLMULQDQ_rynymyub_1::VPCLMULQDQmyib
            // VPCLMULQDQ VREG:w:u128=$YMMr VREG:r:u64=$YMMn  MEM:r:u64=$mem256 IMM:u8=$uimm8;
            return 349 << 16 | 633;
          }
          else
          {
            // TEMPLATE.VPCLMULQDQ_ronomoub_1::VPCLMULQDQmxib
            // VPCLMULQDQ REG:w:u128=$XMMr  VREG:r:u64=$XMMn MEM:r:u64=$mem128 IMM:u8=$uimm8;
            return 1713 << 16 | 3235;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VPCLMULQDQ_ronomoub_2::VPCLMULQDQmxib
              // VPCLMULQDQ REG:w:u128=$XMMr  VREG:r:u64=$XMMn MEM:r:u64=$mem128 IMM:u8=$uimm8;
              return 1714 << 16 | 3237;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VPCLMULQDQ_rynymyub_2::VPCLMULQDQmyib
              // VPCLMULQDQ VREG:w:u128=$YMMr VREG:r:u64=$YMMn MEM:r:u64=$mem256 IMM:u8=$uimm8;
              return 1715 << 16 | 3239;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VPCLMULQDQ_rznzmzub::VPCLMULQDQmzib
              // VPCLMULQDQ VREG:w:u128=$ZMMr VREG:r:u64=$ZMMn MEM:r:u64=$mem512 IMM:u8=$uimm8;
              return 1716 << 16 | 3241;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* invalid */
  case 1093:
    return 0;
  /* 0f3a.0x46 */
  case 1094:
    if (a & 0x01)
    {
      // TEMPLATE.VPERM2I128::VPERM2I128
      // VPERM2I128 VREG:w:u128=$YMMr VREG:r:u128=$YMMn VREG:r:u128=$YMMm  CTL:r:u8=$ctl;
      return 2710 << 16 | 5527;
    }
    else
    {
      // TEMPLATE.VPERM2I128::VPERM2I128my
      // VPERM2I128 VREG:w:u128=$YMMr VREG:r:u128=$YMMn MEM:r:u128=$mem256 CTL:r:u8=$ctl;
      return 2710 << 16 | 5528;
    }
  break;
  /* invalid */
  case 1095:
    return 0;
  /* 0f3a.0x48 */
  case 1096:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMIL2PS_rxnxis4xmxis4::VPERMIL2PS
          // VPERMIL2PS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 VREG:r:f32=$YMMm   CTL:r:u8=$ctl;
          return 3196 << 16 | 6656;
        }
        else
        {
          // TEMPLATE.VPERMIL2PS_rxnxmxis4xis4::VPERMIL2PS
          // VPERMIL2PS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm   VREG:r:f32=$YMMis4 CTL:r:u8=$ctl;
          return 3197 << 16 | 6660;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMIL2PS_rxnxis4xmxis4::VPERMIL2PS
          // VPERMIL2PS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 VREG:r:f32=$XMMm   CTL:r:u8=$ctl;
          return 3196 << 16 | 6655;
        }
        else
        {
          // TEMPLATE.VPERMIL2PS_rxnxmxis4xis4::VPERMIL2PS
          // VPERMIL2PS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm   VREG:r:f32=$XMMis4 CTL:r:u8=$ctl;
          return 3197 << 16 | 6659;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMIL2PS_rxnxis4xmxis4::VPERMIL2PSmy
          // VPERMIL2PS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 MEM:r:f32=$mem256  CTL:r:u8=$ctl;
          return 3196 << 16 | 6658;
        }
        else
        {
          // TEMPLATE.VPERMIL2PS_rxnxmxis4xis4::VPERMIL2PSmy
          // VPERMIL2PS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256  VREG:r:f32=$YMMis4 CTL:r:u8=$ctl;
          return 3197 << 16 | 6662;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMIL2PS_rxnxis4xmxis4::VPERMIL2PSmx
          // VPERMIL2PS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 MEM:r:f32=$mem128  CTL:r:u8=$ctl;
          return 3196 << 16 | 6657;
        }
        else
        {
          // TEMPLATE.VPERMIL2PS_rxnxmxis4xis4::VPERMIL2PSmx
          // VPERMIL2PS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128  VREG:r:f32=$XMMis4 CTL:r:u8=$ctl;
          return 3197 << 16 | 6661;
        }
      }
    }
  break;
  /* 0f3a.0x49 */
  case 1097:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMIL2PD_rxnxis4xmxis4::VPERMIL2PD
          // VPERMIL2PD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 VREG:r:f64=$YMMm   CTL:r:u8=$ctl;
          return 3179 << 16 | 6610;
        }
        else
        {
          // TEMPLATE.VPERMIL2PD_rxnxmxis4xis4::VPERMIL2PD
          // VPERMIL2PD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm   VREG:r:f64=$YMMis4 CTL:r:u8=$ctl;
          return 3180 << 16 | 6614;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMIL2PD_rxnxis4xmxis4::VPERMIL2PD
          // VPERMIL2PD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 VREG:r:f64=$XMMm   CTL:r:u8=$ctl;
          return 3179 << 16 | 6609;
        }
        else
        {
          // TEMPLATE.VPERMIL2PD_rxnxmxis4xis4::VPERMIL2PD
          // VPERMIL2PD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm   VREG:r:f64=$XMMis4 CTL:r:u8=$ctl;
          return 3180 << 16 | 6613;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMIL2PD_rxnxis4xmxis4::VPERMIL2PDmy
          // VPERMIL2PD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 MEM:r:f64=$mem256  CTL:r:u8=$ctl;
          return 3179 << 16 | 6612;
        }
        else
        {
          // TEMPLATE.VPERMIL2PD_rxnxmxis4xis4::VPERMIL2PDmy
          // VPERMIL2PD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256  VREG:r:f64=$YMMis4 CTL:r:u8=$ctl;
          return 3180 << 16 | 6616;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPERMIL2PD_rxnxis4xmxis4::VPERMIL2PDmx
          // VPERMIL2PD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 MEM:r:f64=$mem128  CTL:r:u8=$ctl;
          return 3179 << 16 | 6611;
        }
        else
        {
          // TEMPLATE.VPERMIL2PD_rxnxmxis4xis4::VPERMIL2PDmx
          // VPERMIL2PD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128  VREG:r:f64=$XMMis4 CTL:r:u8=$ctl;
          return 3180 << 16 | 6615;
        }
      }
    }
  break;
  /* 0f3a.0x4a */
  case 1098:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        // TEMPLATE.VBLENDVPS::VBLENDVPS
        // VBLENDVPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm  VREG:r:u32=$YMMis4;
        return 1264 << 16 | 2211;
      }
      else
      {
        // TEMPLATE.VBLENDVPS::VBLENDVPS
        // VBLENDVPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm  VREG:r:u32=$XMMis4;
        return 1264 << 16 | 2210;
      }
    }
    else
    {
      if (b & 0x01)
      {
        // TEMPLATE.VBLENDVPS::VBLENDVPSmy
        // VBLENDVPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256 VREG:r:u32=$YMMis4;
        return 1264 << 16 | 2213;
      }
      else
      {
        // TEMPLATE.VBLENDVPS::VBLENDVPSmx
        // VBLENDVPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128 VREG:r:u32=$XMMis4;
        return 1264 << 16 | 2212;
      }
    }
  break;
  /* 0f3a.0x4b */
  case 1099:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        // TEMPLATE.VBLENDVPD::VBLENDVPD
        // VBLENDVPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm  VREG:r:u64=$YMMis4;
        return 1263 << 16 | 2207;
      }
      else
      {
        // TEMPLATE.VBLENDVPD::VBLENDVPD
        // VBLENDVPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm  VREG:r:u64=$XMMis4;
        return 1263 << 16 | 2206;
      }
    }
    else
    {
      if (b & 0x01)
      {
        // TEMPLATE.VBLENDVPD::VBLENDVPDmy
        // VBLENDVPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256 VREG:r:u64=$YMMis4;
        return 1263 << 16 | 2209;
      }
      else
      {
        // TEMPLATE.VBLENDVPD::VBLENDVPDmx
        // VBLENDVPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128 VREG:r:u64=$XMMis4;
        return 1263 << 16 | 2208;
      }
    }
  break;
  /* 0f3a.0x4c */
  case 1100:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        // TEMPLATE.VPBLENDVB_rynymyis4y::VPBLENDVB
        // VPBLENDVB VREG:w:u8=$YMMr VREG:r:u8=$YMMn VREG:r:u8=$YMMm  VREG:r:u8=$YMMis4;
        return 1710 << 16 | 3228;
      }
      else
      {
        // TEMPLATE.VPBLENDVB_ronomois4o::VPBLENDVB
        // VPBLENDVB VREG:w:s8=$XMMr VREG:r:s8=$XMMn VREG:r:s8=$XMMm  VREG:r:s8=$XMMis4;
        return 1709 << 16 | 3226;
      }
    }
    else
    {
      if (b & 0x01)
      {
        // TEMPLATE.VPBLENDVB_rynymyis4y::VPBLENDVBmy
        // VPBLENDVB VREG:w:u8=$YMMr VREG:r:u8=$YMMn MEM:r:u8=$mem256 VREG:r:u8=$YMMis4;
        return 1710 << 16 | 3229;
      }
      else
      {
        // TEMPLATE.VPBLENDVB_ronomois4o::VPBLENDVBmx
        // VPBLENDVB VREG:w:s8=$XMMr VREG:r:s8=$XMMn MEM:r:s8=$mem128 VREG:r:s8=$XMMis4;
        return 1709 << 16 | 3227;
      }
    }
  break;
  /* invalid */
  case 1101:
    return 0;
  /* invalid */
  case 1102:
    return 0;
  /* invalid */
  case 1103:
    return 0;
  /* 0f3a.0x50 */
  case 1104:
    if (a & 0x01)
    {
      if (b & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VRANGEPD_rznzmzub::VRANGEPDib
          // VRANGEPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SAE=$SAE    IMM:u8=$uimm8;
          return 3013 << 16 | 6199;
        }
        else
        {
          // TEMPLATE.VRANGEPS_rznzmzub::VRANGEPSib
          // VRANGEPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SAE=$SAE    IMM:u8=$uimm8;
          return 3016 << 16 | 6206;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRANGEPD_rynymyub::VRANGEPDib
            // VRANGEPD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn VREG:r:f64=$YMMm             IMM:u8=$uimm8;
            return 3012 << 16 | 6197;
          }
          else
          {
            // TEMPLATE.VRANGEPS_rynymyub::VRANGEPSib
            // VRANGEPS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn VREG:r:f32=$YMMm             IMM:u8=$uimm8;
            return 3015 << 16 | 6204;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VRANGEPD_rznzmzub::VRANGEPDib
              // VRANGEPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm             IMM:u8=$uimm8;
              return 3013 << 16 | 6200;
            }
            else
            {
              // TEMPLATE.VRANGEPS_rznzmzub::VRANGEPSib
              // VRANGEPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm             IMM:u8=$uimm8;
              return 3016 << 16 | 6207;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VRANGEPD_ronomoub::VRANGEPDib
              // VRANGEPD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm             IMM:u8=$uimm8;
              return 3011 << 16 | 6195;
            }
            else
            {
              // TEMPLATE.VRANGEPS_ronomoub::VRANGEPSib
              // VRANGEPS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm             IMM:u8=$uimm8;
              return 3014 << 16 | 6202;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VRANGEPD_rynymyub::VRANGEPDmyib
          // VRANGEPD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn MEM:r:f64=$mem256 BCST=$BCST IMM:u8=$uimm8;
          return 3012 << 16 | 6198;
        }
        else
        {
          // TEMPLATE.VRANGEPS_rynymyub::VRANGEPSmyib
          // VRANGEPS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn MEM:r:f32=$mem256 BCST=$BCST IMM:u8=$uimm8;
          return 3015 << 16 | 6205;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRANGEPD_rznzmzub::VRANGEPDmzib
            // VRANGEPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r:f64=$mem512 BCST=$BCST IMM:u8=$uimm8;
            return 3013 << 16 | 6201;
          }
          else
          {
            // TEMPLATE.VRANGEPS_rznzmzub::VRANGEPSmzib
            // VRANGEPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:f32=$mem512 BCST=$BCST IMM:u8=$uimm8;
            return 3016 << 16 | 6208;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VRANGEPD_ronomoub::VRANGEPDmxib
            // VRANGEPD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem128 BCST=$BCST IMM:u8=$uimm8;
            return 3011 << 16 | 6196;
          }
          else
          {
            // TEMPLATE.VRANGEPS_ronomoub::VRANGEPSmxib
            // VRANGEPS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem128 BCST=$BCST IMM:u8=$uimm8;
            return 3014 << 16 | 6203;
          }
        }
      }
    }
  break;
  /* 0f3a.0x51 */
  case 1105:
    if (a & 0x01)
    {
      if (b & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VRANGESD::VRANGESDib
          // VRANGESD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm SAE=$SAE IMM:u8=$uimm8;
          return 3017 << 16 | 6210;
        }
        else
        {
          // TEMPLATE.VRANGESS::VRANGESSib
          // VRANGESS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE IMM:u8=$uimm8;
          return 3018 << 16 | 6213;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VRANGESD::VRANGESDib
          // VRANGESD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm          IMM:u8=$uimm8;
          return 3017 << 16 | 6209;
        }
        else
        {
          // TEMPLATE.VRANGESS::VRANGESSib
          // VRANGESS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm          IMM:u8=$uimm8;
          return 3018 << 16 | 6212;
        }
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VRANGESD::VRANGESDmqib
        // VRANGESD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem64          IMM:u8=$uimm8;
        return 3017 << 16 | 6211;
      }
      else
      {
        // TEMPLATE.VRANGESS::VRANGESSmdib
        // VRANGESS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem32          IMM:u8=$uimm8;
        return 3018 << 16 | 6214;
      }
    }
  break;
  /* 0f3a.0x52 */
  case 1106:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VRNDFXPNTPD::VRNDFXPNTPDib
          // VRNDFXPNTPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE       IMM:u8=$uimm8;
          return 3483 << 16 | 7240;
        }
        else
        {
          // TEMPLATE.VRNDFXPNTPS::VRNDFXPNTPSib
          // VRNDFXPNTPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE       IMM:u8=$uimm8;
          return 3484 << 16 | 7243;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VRNDFXPNTPD::VRNDFXPNTPDib
          // VRNDFXPNTPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SWZ=$r_i64     IMM:u8=$uimm8;
          return 3483 << 16 | 7239;
        }
        else
        {
          // TEMPLATE.VRNDFXPNTPS::VRNDFXPNTPSib
          // VRNDFXPNTPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SWZ=$r_i32     IMM:u8=$uimm8;
          return 3484 << 16 | 7242;
        }
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VRNDFXPNTPD::VRNDFXPNTPDmib
        // VRNDFXPNTPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_f64 EVH=$EVH IMM:u8=$uimm8;
        return 3483 << 16 | 7241;
      }
      else
      {
        // TEMPLATE.VRNDFXPNTPS::VRNDFXPNTPSmib
        // VRNDFXPNTPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_f32 EVH=$EVH IMM:u8=$uimm8;
        return 3484 << 16 | 7244;
      }
    }
  break;
  /* invalid */
  case 1107:
    return 0;
  /* 0f3a.0x54 */
  case 1108:
    if (a & 0x01)
    {
      if (b & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFIXUPIMMPD_rznzmzub::VFIXUPIMMPD
          // VFIXUPIMMPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm SAE=$SAE    FEXCPC:r:u8=$fexcpc;
          return 2359 << 16 | 4659;
        }
        else
        {
          // TEMPLATE.VFIXUPIMMPS_rznzmzub::VFIXUPIMMPS
          // VFIXUPIMMPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm SAE=$SAE    FEXCPC:r:u8=$fexcpc;
          return 2362 << 16 | 4666;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFIXUPIMMPD_rynymyub::VFIXUPIMMPD
            // VFIXUPIMMPD VREG:rw:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn VREG:r:f64=$YMMm             FEXCPC:r:u8=$fexcpc;
            return 2358 << 16 | 4657;
          }
          else
          {
            // TEMPLATE.VFIXUPIMMPS_rynymyub::VFIXUPIMMPS
            // VFIXUPIMMPS VREG:rw:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn VREG:r:f32=$YMMm             FEXCPC:r:u8=$fexcpc;
            return 2361 << 16 | 4664;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFIXUPIMMPD_rznzmzub::VFIXUPIMMPD
              // VFIXUPIMMPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn VREG:r:f64=$ZMMm             FEXCPC:r:u8=$fexcpc;
              return 2359 << 16 | 4660;
            }
            else
            {
              // TEMPLATE.VFIXUPIMMPS_rznzmzub::VFIXUPIMMPS
              // VFIXUPIMMPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn VREG:r:f32=$ZMMm             FEXCPC:r:u8=$fexcpc;
              return 2362 << 16 | 4667;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VFIXUPIMMPD_ronomoub::VFIXUPIMMPD
              // VFIXUPIMMPD VREG:rw:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm             FEXCPC:r:u8=$fexcpc;
              return 2357 << 16 | 4655;
            }
            else
            {
              // TEMPLATE.VFIXUPIMMPS_ronomoub::VFIXUPIMMPS
              // VFIXUPIMMPS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm             FEXCPC:r:u8=$fexcpc;
              return 2360 << 16 | 4662;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFIXUPIMMPD_rynymyub::VFIXUPIMMPDmy
          // VFIXUPIMMPD VREG:rw:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMn MEM:r:f64=$mem256 BCST=$BCST FEXCPC:r:u8=$fexcpc;
          return 2358 << 16 | 4658;
        }
        else
        {
          // TEMPLATE.VFIXUPIMMPS_rynymyub::VFIXUPIMMPSmy
          // VFIXUPIMMPS VREG:rw:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMn MEM:r:f32=$mem256 BCST=$BCST FEXCPC:r:u8=$fexcpc;
          return 2361 << 16 | 4665;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFIXUPIMMPD_rznzmzub::VFIXUPIMMPDmz
            // VFIXUPIMMPD VREG:rw:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMn MEM:r:f64=$mem512 BCST=$BCST FEXCPC:r:u8=$fexcpc;
            return 2359 << 16 | 4661;
          }
          else
          {
            // TEMPLATE.VFIXUPIMMPS_rznzmzub::VFIXUPIMMPSmz
            // VFIXUPIMMPS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMn MEM:r:f32=$mem512 BCST=$BCST FEXCPC:r:u8=$fexcpc;
            return 2362 << 16 | 4668;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFIXUPIMMPD_ronomoub::VFIXUPIMMPDmx
            // VFIXUPIMMPD VREG:rw:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem128 BCST=$BCST FEXCPC:r:u8=$fexcpc;
            return 2357 << 16 | 4656;
          }
          else
          {
            // TEMPLATE.VFIXUPIMMPS_ronomoub::VFIXUPIMMPSmx
            // VFIXUPIMMPS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem128 BCST=$BCST FEXCPC:r:u8=$fexcpc;
            return 2360 << 16 | 4663;
          }
        }
      }
    }
  break;
  /* 0f3a.0x55 */
  case 1109:
    if (a & 0x01)
    {
      if (b & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFIXUPIMMSD::VFIXUPIMMSD
          // VFIXUPIMMSD VREG:rw:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm SAE=$SAE FEXCPC:r:u8=$fexcpc;
          return 2363 << 16 | 4670;
        }
        else
        {
          // TEMPLATE.VFIXUPIMMSS::VFIXUPIMMSS
          // VFIXUPIMMSS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE FEXCPC:r:u8=$fexcpc;
          return 2364 << 16 | 4673;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFIXUPIMMSD::VFIXUPIMMSD
          // VFIXUPIMMSD VREG:rw:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm          FEXCPC:r:u8=$fexcpc;
          return 2363 << 16 | 4669;
        }
        else
        {
          // TEMPLATE.VFIXUPIMMSS::VFIXUPIMMSS
          // VFIXUPIMMSS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm          FEXCPC:r:u8=$fexcpc;
          return 2364 << 16 | 4672;
        }
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFIXUPIMMSD::VFIXUPIMMSDmq
        // VFIXUPIMMSD VREG:rw:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem64          FEXCPC:r:u8=$fexcpc;
        return 2363 << 16 | 4671;
      }
      else
      {
        // TEMPLATE.VFIXUPIMMSS::VFIXUPIMMSSmd
        // VFIXUPIMMSS VREG:rw:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem32          FEXCPC:r:u8=$fexcpc;
        return 2364 << 16 | 4674;
      }
    }
  break;
  /* 0f3a.0x56 */
  case 1110:
    if (a & 0x01)
    {
      if (b & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VREDUCEPD_rzmzub::VREDUCEPDib
          // VREDUCEPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE    IMM:u8=$uimm8;
          return 3029 << 16 | 6235;
        }
        else
        {
          // TEMPLATE.VREDUCEPS_rzmzub::VREDUCEPSib
          // VREDUCEPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE    IMM:u8=$uimm8;
          return 3032 << 16 | 6242;
        }
      }
      else
      {
        if (b & 0x01)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VREDUCEPD_rymyub::VREDUCEPDib
            // VREDUCEPD VREG:w:f64=$YMMr PREG:r:Z=$Kk VREG:r:f64=$YMMm             IMM:u8=$uimm8;
            return 3028 << 16 | 6233;
          }
          else
          {
            // TEMPLATE.VREDUCEPS_rymyub::VREDUCEPSib
            // VREDUCEPS VREG:w:f32=$YMMr PREG:r:Z=$Kk VREG:r:f32=$YMMm             IMM:u8=$uimm8;
            return 3031 << 16 | 6240;
          }
        }
        else
        {
          if (b & 0x02)
          {
            if (d & 0x01)
            {
              // TEMPLATE.VREDUCEPD_rzmzub::VREDUCEPDib
              // VREDUCEPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm             IMM:u8=$uimm8;
              return 3029 << 16 | 6236;
            }
            else
            {
              // TEMPLATE.VREDUCEPS_rzmzub::VREDUCEPSib
              // VREDUCEPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm             IMM:u8=$uimm8;
              return 3032 << 16 | 6243;
            }
          }
          else
          {
            if (d & 0x01)
            {
              // TEMPLATE.VREDUCEPD_romoub::VREDUCEPDib
              // VREDUCEPD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMm             IMM:u8=$uimm8;
              return 3027 << 16 | 6231;
            }
            else
            {
              // TEMPLATE.VREDUCEPS_romoub::VREDUCEPSib
              // VREDUCEPS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMm             IMM:u8=$uimm8;
              return 3030 << 16 | 6238;
            }
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VREDUCEPD_rymyub::VREDUCEPDmyib
          // VREDUCEPD VREG:w:f64=$YMMr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST IMM:u8=$uimm8;
          return 3028 << 16 | 6234;
        }
        else
        {
          // TEMPLATE.VREDUCEPS_rymyub::VREDUCEPSmyib
          // VREDUCEPS VREG:w:f32=$YMMr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST IMM:u8=$uimm8;
          return 3031 << 16 | 6241;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VREDUCEPD_rzmzub::VREDUCEPDmzib
            // VREDUCEPD VREG:w:f64=$ZMMr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST IMM:u8=$uimm8;
            return 3029 << 16 | 6237;
          }
          else
          {
            // TEMPLATE.VREDUCEPS_rzmzub::VREDUCEPSmzib
            // VREDUCEPS VREG:w:f32=$ZMMr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST IMM:u8=$uimm8;
            return 3032 << 16 | 6244;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VREDUCEPD_romoub::VREDUCEPDmxib
            // VREDUCEPD VREG:w:f64=$XMMr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST IMM:u8=$uimm8;
            return 3027 << 16 | 6232;
          }
          else
          {
            // TEMPLATE.VREDUCEPS_romoub::VREDUCEPSmxib
            // VREDUCEPS VREG:w:f32=$XMMr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST IMM:u8=$uimm8;
            return 3030 << 16 | 6239;
          }
        }
      }
    }
  break;
  /* 0f3a.0x57 */
  case 1111:
    if (a & 0x01)
    {
      if (b & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VREDUCESD::VREDUCESDib
          // VREDUCESD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm SAE=$SAE IMM:u8=$uimm8;
          return 3033 << 16 | 6246;
        }
        else
        {
          // TEMPLATE.VREDUCESS::VREDUCESSib
          // VREDUCESS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm SAE=$SAE IMM:u8=$uimm8;
          return 3034 << 16 | 6249;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VREDUCESD::VREDUCESDib
          // VREDUCESD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn VREG:r:f64=$XMMm          IMM:u8=$uimm8;
          return 3033 << 16 | 6245;
        }
        else
        {
          // TEMPLATE.VREDUCESS::VREDUCESSib
          // VREDUCESS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn VREG:r:f32=$XMMm          IMM:u8=$uimm8;
          return 3034 << 16 | 6248;
        }
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VREDUCESD::VREDUCESDmqib
        // VREDUCESD VREG:w:f64=$XMMr PREG:r:Z=$Kk VREG:r:f64=$XMMn MEM:r:f64=$mem64          IMM:u8=$uimm8;
        return 3033 << 16 | 6247;
      }
      else
      {
        // TEMPLATE.VREDUCESS::VREDUCESSmdib
        // VREDUCESS VREG:w:f32=$XMMr PREG:r:Z=$Kk VREG:r:f32=$XMMn MEM:r:f32=$mem32          IMM:u8=$uimm8;
        return 3034 << 16 | 6250;
      }
    }
  break;
  /* invalid */
  case 1112:
    return 0;
  /* invalid */
  case 1113:
    return 0;
  /* invalid */
  case 1114:
    return 0;
  /* invalid */
  case 1115:
    return 0;
  /* 0f3a.0x5c */
  case 1116:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDSUBPS_rxnxis4xmx::VFMADDSUBPS
          // VFMADDSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 VREG:r:f32=$YMMm;
          return 3149 << 16 | 6514;
        }
        else
        {
          // TEMPLATE.VFMADDSUBPS_rxnxmxis4x::VFMADDSUBPS
          // VFMADDSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm   VREG:r:f32=$YMMis4;
          return 3150 << 16 | 6518;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDSUBPS_rxnxis4xmx::VFMADDSUBPS
          // VFMADDSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 VREG:r:f32=$XMMm;
          return 3149 << 16 | 6513;
        }
        else
        {
          // TEMPLATE.VFMADDSUBPS_rxnxmxis4x::VFMADDSUBPS
          // VFMADDSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm   VREG:r:f32=$XMMis4;
          return 3150 << 16 | 6517;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDSUBPS_rxnxis4xmx::VFMADDSUBPSmy
          // VFMADDSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 MEM:r:f32=$mem256;
          return 3149 << 16 | 6516;
        }
        else
        {
          // TEMPLATE.VFMADDSUBPS_rxnxmxis4x::VFMADDSUBPSmy
          // VFMADDSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256  VREG:r:f32=$YMMis4;
          return 3150 << 16 | 6520;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDSUBPS_rxnxis4xmx::VFMADDSUBPSmx
          // VFMADDSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 MEM:r:f32=$mem128;
          return 3149 << 16 | 6515;
        }
        else
        {
          // TEMPLATE.VFMADDSUBPS_rxnxmxis4x::VFMADDSUBPSmx
          // VFMADDSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128  VREG:r:f32=$XMMis4;
          return 3150 << 16 | 6519;
        }
      }
    }
  break;
  /* 0f3a.0x5d */
  case 1117:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDSUBPD_rxnxis4xmx::VFMADDSUBPD
          // VFMADDSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 VREG:r:f64=$YMMm;
          return 3147 << 16 | 6506;
        }
        else
        {
          // TEMPLATE.VFMADDSUBPD_rxnxmxis4x::VFMADDSUBPD
          // VFMADDSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm   VREG:r:f64=$YMMis4;
          return 3148 << 16 | 6510;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDSUBPD_rxnxis4xmx::VFMADDSUBPD
          // VFMADDSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 VREG:r:f64=$XMMm;
          return 3147 << 16 | 6505;
        }
        else
        {
          // TEMPLATE.VFMADDSUBPD_rxnxmxis4x::VFMADDSUBPD
          // VFMADDSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm   VREG:r:f64=$XMMis4;
          return 3148 << 16 | 6509;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDSUBPD_rxnxis4xmx::VFMADDSUBPDmy
          // VFMADDSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 MEM:r:f64=$mem256;
          return 3147 << 16 | 6508;
        }
        else
        {
          // TEMPLATE.VFMADDSUBPD_rxnxmxis4x::VFMADDSUBPDmy
          // VFMADDSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256  VREG:r:f64=$YMMis4;
          return 3148 << 16 | 6512;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDSUBPD_rxnxis4xmx::VFMADDSUBPDmx
          // VFMADDSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 MEM:r:f64=$mem128;
          return 3147 << 16 | 6507;
        }
        else
        {
          // TEMPLATE.VFMADDSUBPD_rxnxmxis4x::VFMADDSUBPDmx
          // VFMADDSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128  VREG:r:f64=$XMMis4;
          return 3148 << 16 | 6511;
        }
      }
    }
  break;
  /* 0f3a.0x5e */
  case 1118:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBADDPS_rxnxis4xmx::VFMSUBADDPS
          // VFMSUBADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 VREG:r:f32=$YMMm;
          return 3153 << 16 | 6530;
        }
        else
        {
          // TEMPLATE.VFMSUBADDPS_rxnxmxis4x::VFMSUBADDPS
          // VFMSUBADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm   VREG:r:f32=$YMMis4;
          return 3154 << 16 | 6534;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBADDPS_rxnxis4xmx::VFMSUBADDPS
          // VFMSUBADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 VREG:r:f32=$XMMm;
          return 3153 << 16 | 6529;
        }
        else
        {
          // TEMPLATE.VFMSUBADDPS_rxnxmxis4x::VFMSUBADDPS
          // VFMSUBADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm   VREG:r:f32=$XMMis4;
          return 3154 << 16 | 6533;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBADDPS_rxnxis4xmx::VFMSUBADDPSmy
          // VFMSUBADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 MEM:r:f32=$mem256;
          return 3153 << 16 | 6532;
        }
        else
        {
          // TEMPLATE.VFMSUBADDPS_rxnxmxis4x::VFMSUBADDPSmy
          // VFMSUBADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256  VREG:r:f32=$YMMis4;
          return 3154 << 16 | 6536;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBADDPS_rxnxis4xmx::VFMSUBADDPSmx
          // VFMSUBADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 MEM:r:f32=$mem128;
          return 3153 << 16 | 6531;
        }
        else
        {
          // TEMPLATE.VFMSUBADDPS_rxnxmxis4x::VFMSUBADDPSmx
          // VFMSUBADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128  VREG:r:f32=$XMMis4;
          return 3154 << 16 | 6535;
        }
      }
    }
  break;
  /* 0f3a.0x5f */
  case 1119:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBADDPD_rxnxis4xmx::VFMSUBADDPD
          // VFMSUBADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 VREG:r:f64=$YMMm;
          return 3151 << 16 | 6522;
        }
        else
        {
          // TEMPLATE.VFMSUBADDPD_rxnxmxis4x::VFMSUBADDPD
          // VFMSUBADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm   VREG:r:f64=$YMMis4;
          return 3152 << 16 | 6526;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBADDPD_rxnxis4xmx::VFMSUBADDPD
          // VFMSUBADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 VREG:r:f64=$XMMm;
          return 3151 << 16 | 6521;
        }
        else
        {
          // TEMPLATE.VFMSUBADDPD_rxnxmxis4x::VFMSUBADDPD
          // VFMSUBADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm   VREG:r:f64=$XMMis4;
          return 3152 << 16 | 6525;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBADDPD_rxnxis4xmx::VFMSUBADDPDmy
          // VFMSUBADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 MEM:r:f64=$mem256;
          return 3151 << 16 | 6524;
        }
        else
        {
          // TEMPLATE.VFMSUBADDPD_rxnxmxis4x::VFMSUBADDPDmy
          // VFMSUBADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256  VREG:r:f64=$YMMis4;
          return 3152 << 16 | 6528;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBADDPD_rxnxis4xmx::VFMSUBADDPDmx
          // VFMSUBADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 MEM:r:f64=$mem128;
          return 3151 << 16 | 6523;
        }
        else
        {
          // TEMPLATE.VFMSUBADDPD_rxnxmxis4x::VFMSUBADDPDmx
          // VFMSUBADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128  VREG:r:f64=$XMMis4;
          return 3152 << 16 | 6527;
        }
      }
    }
  break;
  /* 0f3a.0x60 */
  case 1120:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPESTRM::VPCMPESTRMib
            // VPCMPESTRM VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:r=RAX REG:SUPP:r=RDX VREG:SUPP:w:s32=XMM0;
            return 1738 << 16 | 3289;
          }
          else
          {
            // TEMPLATE.VPCMPESTRM::VPCMPESTRMib
            // VPCMPESTRM VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX VREG:SUPP:w:s32=XMM0;
            return 1738 << 16 | 3288;
          }
        }
        else
        {
          // TEMPLATE.VPCMPESTRM::VPCMPESTRMib
          // VPCMPESTRM VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX VREG:SUPP:w:s32=XMM0;
          return 1738 << 16 | 3292;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.PCMPESTRM::PCMPESTRMib
          // PCMPESTRM VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:r=RAX REG:SUPP:r=RDX VREG:SUPP:w:s32=XMM0;
          return 1054 << 16 | 1791;
        }
        else
        {
          // TEMPLATE.PCMPESTRM::PCMPESTRMib
          // PCMPESTRM VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX VREG:SUPP:w:s32=XMM0;
          return 1054 << 16 | 1790;
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPESTRM::VPCMPESTRMmxib
            // VPCMPESTRM VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:r=RAX REG:SUPP:r=RDX VREG:SUPP:w:s32=XMM0;
            return 1738 << 16 | 3291;
          }
          else
          {
            // TEMPLATE.VPCMPESTRM::VPCMPESTRMmxib
            // VPCMPESTRM VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX VREG:SUPP:w:s32=XMM0;
            return 1738 << 16 | 3290;
          }
        }
        else
        {
          // TEMPLATE.VPCMPESTRM::VPCMPESTRMmxib
          // VPCMPESTRM VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX VREG:SUPP:w:s32=XMM0;
          return 1738 << 16 | 3293;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.PCMPESTRM::PCMPESTRMmxib
          // PCMPESTRM VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:r=RAX REG:SUPP:r=RDX VREG:SUPP:w:s32=XMM0;
          return 1054 << 16 | 1793;
        }
        else
        {
          // TEMPLATE.PCMPESTRM::PCMPESTRMmxib
          // PCMPESTRM VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX VREG:SUPP:w:s32=XMM0;
          return 1054 << 16 | 1792;
        }
      }
    }
  break;
  /* 0f3a.0x61 */
  case 1121:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPESTRI::VPCMPESTRIib
            // VPCMPESTRI VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:r=RAX REG:SUPP:r=RDX REG:SUPP:w=RCX;
            return 1737 << 16 | 3283;
          }
          else
          {
            // TEMPLATE.VPCMPESTRI::VPCMPESTRIib
            // VPCMPESTRI VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX REG:SUPP:w=ECX;
            return 1737 << 16 | 3282;
          }
        }
        else
        {
          // TEMPLATE.VPCMPESTRI::VPCMPESTRIib
          // VPCMPESTRI VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX REG:SUPP:w=ECX;
          return 1737 << 16 | 3286;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.PCMPESTRI::PCMPESTRIib
          // PCMPESTRI VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:r=RAX REG:SUPP:r=RDX REG:SUPP:w=RCX;
          return 1053 << 16 | 1787;
        }
        else
        {
          // TEMPLATE.PCMPESTRI::PCMPESTRIib
          // PCMPESTRI VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX REG:SUPP:w=ECX;
          return 1053 << 16 | 1786;
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPESTRI::VPCMPESTRImxib
            // VPCMPESTRI VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:r=RAX REG:SUPP:r=RDX REG:SUPP:w=RCX;
            return 1737 << 16 | 3285;
          }
          else
          {
            // TEMPLATE.VPCMPESTRI::VPCMPESTRImxib
            // VPCMPESTRI VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX REG:SUPP:w=ECX;
            return 1737 << 16 | 3284;
          }
        }
        else
        {
          // TEMPLATE.VPCMPESTRI::VPCMPESTRImxib
          // VPCMPESTRI VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX REG:SUPP:w=ECX;
          return 1737 << 16 | 3287;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.PCMPESTRI::PCMPESTRImxib
          // PCMPESTRI VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:r=RAX REG:SUPP:r=RDX REG:SUPP:w=RCX;
          return 1053 << 16 | 1789;
        }
        else
        {
          // TEMPLATE.PCMPESTRI::PCMPESTRImxib
          // PCMPESTRI VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:r=EAX REG:SUPP:r=EDX REG:SUPP:w=ECX;
          return 1053 << 16 | 1788;
        }
      }
    }
  break;
  /* 0f3a.0x62 */
  case 1122:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // TEMPLATE.VPCMPISTRM::VPCMPISTRMib
        // VPCMPISTRM VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 VREG:SUPP:w:s32=XMM0;
        return 1760 << 16 | 3340;
      }
      else
      {
        // TEMPLATE.PCMPISTRM::PCMPISTRMib
        // PCMPISTRM VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 VREG:SUPP:w:s32=XMM0;
        return 1060 << 16 | 1806;
      }
    }
    else
    {
      if (c & 0x01)
      {
        // TEMPLATE.VPCMPISTRM::VPCMPISTRMmxib
        // VPCMPISTRM VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 VREG:SUPP:w:s32=XMM0;
        return 1760 << 16 | 3341;
      }
      else
      {
        // TEMPLATE.PCMPISTRM::PCMPISTRMmxib
        // PCMPISTRM VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 VREG:SUPP:w:s32=XMM0;
        return 1060 << 16 | 1807;
      }
    }
  break;
  /* 0f3a.0x63 */
  case 1123:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPISTRI::VPCMPISTRIib
            // VPCMPISTRI VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:w=RCX;
            return 1759 << 16 | 3335;
          }
          else
          {
            // TEMPLATE.VPCMPISTRI::VPCMPISTRIib
            // VPCMPISTRI VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:w=ECX;
            return 1759 << 16 | 3334;
          }
        }
        else
        {
          // TEMPLATE.VPCMPISTRI::VPCMPISTRIib
          // VPCMPISTRI VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:w=ECX;
          return 1759 << 16 | 3338;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.PCMPISTRI::PCMPISTRIib
          // PCMPISTRI VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:w=RCX;
          return 1059 << 16 | 1803;
        }
        else
        {
          // TEMPLATE.PCMPISTRI::PCMPISTRIib
          // PCMPISTRI VREG:r:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8 REG:SUPP:w=ECX;
          return 1059 << 16 | 1802;
        }
      }
    }
    else
    {
      if (c & 0x01)
      {
        if (c & 0x80)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPCMPISTRI::VPCMPISTRImxib
            // VPCMPISTRI VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:w=RCX;
            return 1759 << 16 | 3337;
          }
          else
          {
            // TEMPLATE.VPCMPISTRI::VPCMPISTRImxib
            // VPCMPISTRI VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:w=ECX;
            return 1759 << 16 | 3336;
          }
        }
        else
        {
          // TEMPLATE.VPCMPISTRI::VPCMPISTRImxib
          // VPCMPISTRI VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:w=ECX;
          return 1759 << 16 | 3339;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.PCMPISTRI::PCMPISTRImxib
          // PCMPISTRI VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:w=RCX;
          return 1059 << 16 | 1805;
        }
        else
        {
          // TEMPLATE.PCMPISTRI::PCMPISTRImxib
          // PCMPISTRI VREG:r:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8 REG:SUPP:w=ECX;
          return 1059 << 16 | 1804;
        }
      }
    }
  break;
  /* invalid */
  case 1124:
    return 0;
  /* invalid */
  case 1125:
    return 0;
  /* 0f3a.0x66 */
  case 1126:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFPCLASSPD_myub::VFPCLASSPD
          // VFPCLASSPD REG:w=$Kr PREG:r:Z=$Kk VREG:r:f64=$YMMm             FPCT:r:u8=$fpct;
          return 2558 << 16 | 5193;
        }
        else
        {
          // TEMPLATE.VFPCLASSPS_myub::VFPCLASSPS
          // VFPCLASSPS REG:w=$Kr PREG:r:Z=$Kk VREG:r:f32=$YMMm             FPCT:r:u8=$fpct;
          return 2561 << 16 | 5199;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFPCLASSPD_mzub::VFPCLASSPD
            // VFPCLASSPD REG:w=$Kr PREG:r:Z=$Kk VREG:r:f64=$ZMMm             FPCT:r:u8=$fpct;
            return 2559 << 16 | 5195;
          }
          else
          {
            // TEMPLATE.VFPCLASSPS_mzub::VFPCLASSPS
            // VFPCLASSPS REG:w=$Kr PREG:r:Z=$Kk VREG:r:f32=$ZMMm             FPCT:r:u8=$fpct;
            return 2562 << 16 | 5201;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFPCLASSPD_moub::VFPCLASSPD
            // VFPCLASSPD REG:w=$Kr PREG:r:Z=$Kk VREG:r:f64=$XMMm             FPCT:r:u8=$fpct;
            return 2557 << 16 | 5191;
          }
          else
          {
            // TEMPLATE.VFPCLASSPS_moub::VFPCLASSPS
            // VFPCLASSPS REG:w=$Kr PREG:r:Z=$Kk VREG:r:f32=$XMMm             FPCT:r:u8=$fpct;
            return 2560 << 16 | 5197;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFPCLASSPD_myub::VFPCLASSPDmy
          // VFPCLASSPD REG:w=$Kr PREG:r:Z=$Kk MEM:r:f64=$mem256 BCST=$BCST FPCT:r:u8=$fpct;
          return 2558 << 16 | 5194;
        }
        else
        {
          // TEMPLATE.VFPCLASSPS_myub::VFPCLASSPSmy
          // VFPCLASSPS REG:w=$Kr PREG:r:Z=$Kk MEM:r:f32=$mem256 BCST=$BCST FPCT:r:u8=$fpct;
          return 2561 << 16 | 5200;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFPCLASSPD_mzub::VFPCLASSPDmz
            // VFPCLASSPD REG:w=$Kr PREG:r:Z=$Kk MEM:r:f64=$mem512 BCST=$BCST FPCT:r:u8=$fpct;
            return 2559 << 16 | 5196;
          }
          else
          {
            // TEMPLATE.VFPCLASSPS_mzub::VFPCLASSPSmz
            // VFPCLASSPS REG:w=$Kr PREG:r:Z=$Kk MEM:r:f32=$mem512 BCST=$BCST FPCT:r:u8=$fpct;
            return 2562 << 16 | 5202;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VFPCLASSPD_moub::VFPCLASSPDmx
            // VFPCLASSPD REG:w=$Kr PREG:r:Z=$Kk MEM:r:f64=$mem128 BCST=$BCST FPCT:r:u8=$fpct;
            return 2557 << 16 | 5192;
          }
          else
          {
            // TEMPLATE.VFPCLASSPS_moub::VFPCLASSPSmx
            // VFPCLASSPS REG:w=$Kr PREG:r:Z=$Kk MEM:r:f32=$mem128 BCST=$BCST FPCT:r:u8=$fpct;
            return 2560 << 16 | 5198;
          }
        }
      }
    }
  break;
  /* 0f3a.0x67 */
  case 1127:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFPCLASSSD::VFPCLASSSDib
        // VFPCLASSSD REG:w=$Kr PREG:r:Z=$Kk VREG:r:f64=$XMMm IMM:u8=$uimm8;
        return 2563 << 16 | 5203;
      }
      else
      {
        // TEMPLATE.VFPCLASSSS::VFPCLASSSSib
        // VFPCLASSSS REG:w=$Kr PREG:r:Z=$Kk VREG:r:f32=$XMMm IMM:u8=$uimm8;
        return 2564 << 16 | 5205;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFPCLASSSD::VFPCLASSSDmqib
        // VFPCLASSSD REG:w=$Kr PREG:r:Z=$Kk MEM:r:f64=$mem64 IMM:u8=$uimm8;
        return 2563 << 16 | 5204;
      }
      else
      {
        // TEMPLATE.VFPCLASSSS::VFPCLASSSSmdib
        // VFPCLASSSS REG:w=$Kr PREG:r:Z=$Kk MEM:r:f32=$mem32 IMM:u8=$uimm8;
        return 2564 << 16 | 5206;
      }
    }
  break;
  /* 0f3a.0x68 */
  case 1128:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDPS_rxnxis4xmx::VFMADDPS
          // VFMADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 VREG:r:f32=$YMMm;
          return 3141 << 16 | 6490;
        }
        else
        {
          // TEMPLATE.VFMADDPS_rxnxmxis4x::VFMADDPS
          // VFMADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm   VREG:r:f32=$YMMis4;
          return 3142 << 16 | 6494;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDPS_rxnxis4xmx::VFMADDPS
          // VFMADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 VREG:r:f32=$XMMm;
          return 3141 << 16 | 6489;
        }
        else
        {
          // TEMPLATE.VFMADDPS_rxnxmxis4x::VFMADDPS
          // VFMADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm   VREG:r:f32=$XMMis4;
          return 3142 << 16 | 6493;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDPS_rxnxis4xmx::VFMADDPSmy
          // VFMADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 MEM:r:f32=$mem256;
          return 3141 << 16 | 6492;
        }
        else
        {
          // TEMPLATE.VFMADDPS_rxnxmxis4x::VFMADDPSmy
          // VFMADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256  VREG:r:f32=$YMMis4;
          return 3142 << 16 | 6496;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDPS_rxnxis4xmx::VFMADDPSmx
          // VFMADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 MEM:r:f32=$mem128;
          return 3141 << 16 | 6491;
        }
        else
        {
          // TEMPLATE.VFMADDPS_rxnxmxis4x::VFMADDPSmx
          // VFMADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128  VREG:r:f32=$XMMis4;
          return 3142 << 16 | 6495;
        }
      }
    }
  break;
  /* 0f3a.0x69 */
  case 1129:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDPD_rxnxis4xmx::VFMADDPD
          // VFMADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 VREG:r:f64=$YMMm;
          return 3139 << 16 | 6482;
        }
        else
        {
          // TEMPLATE.VFMADDPD_rxnxmxis4x::VFMADDPD
          // VFMADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm   VREG:r:f64=$YMMis4;
          return 3140 << 16 | 6486;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDPD_rxnxis4xmx::VFMADDPD
          // VFMADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 VREG:r:f64=$XMMm;
          return 3139 << 16 | 6481;
        }
        else
        {
          // TEMPLATE.VFMADDPD_rxnxmxis4x::VFMADDPD
          // VFMADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm   VREG:r:f64=$XMMis4;
          return 3140 << 16 | 6485;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDPD_rxnxis4xmx::VFMADDPDmy
          // VFMADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 MEM:r:f64=$mem256;
          return 3139 << 16 | 6484;
        }
        else
        {
          // TEMPLATE.VFMADDPD_rxnxmxis4x::VFMADDPDmy
          // VFMADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256  VREG:r:f64=$YMMis4;
          return 3140 << 16 | 6488;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMADDPD_rxnxis4xmx::VFMADDPDmx
          // VFMADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 MEM:r:f64=$mem128;
          return 3139 << 16 | 6483;
        }
        else
        {
          // TEMPLATE.VFMADDPD_rxnxmxis4x::VFMADDPDmx
          // VFMADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128  VREG:r:f64=$XMMis4;
          return 3140 << 16 | 6487;
        }
      }
    }
  break;
  /* 0f3a.0x6a */
  case 1130:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFMADDSS_ronois4omd::VFMADDSS
        // VFMADDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 REG:r:f32=$XMMm;
        return 3145 << 16 | 6501;
      }
      else
      {
        // TEMPLATE.VFMADDSS_ronomdis4o::VFMADDSS
        // VFMADDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm    VREG:r:f32=$XMMis4;
        return 3146 << 16 | 6503;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFMADDSS_ronois4omd::VFMADDSSmd
        // VFMADDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 MEM:r:f32=$mem32;
        return 3145 << 16 | 6502;
      }
      else
      {
        // TEMPLATE.VFMADDSS_ronomdis4o::VFMADDSSmd
        // VFMADDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32   VREG:r:f32=$XMMis4;
        return 3146 << 16 | 6504;
      }
    }
  break;
  /* 0f3a.0x6b */
  case 1131:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFMADDSD_ronois4omq::VFMADDSD
        // VFMADDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 REG:r:f64=$XMMm;
        return 3143 << 16 | 6497;
      }
      else
      {
        // TEMPLATE.VFMADDSD_ronomqis4o::VFMADDSD
        // VFMADDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm    VREG:r:f64=$XMMis4;
        return 3144 << 16 | 6499;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFMADDSD_ronois4omq::VFMADDSDmq
        // VFMADDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 MEM:r:f64=$mem64;
        return 3143 << 16 | 6498;
      }
      else
      {
        // TEMPLATE.VFMADDSD_ronomqis4o::VFMADDSDmq
        // VFMADDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64   VREG:r:f64=$XMMis4;
        return 3144 << 16 | 6500;
      }
    }
  break;
  /* 0f3a.0x6c */
  case 1132:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBPS_rxnxis4xmx::VFMSUBPS
          // VFMSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 VREG:r:f32=$YMMm;
          return 3157 << 16 | 6546;
        }
        else
        {
          // TEMPLATE.VFMSUBPS_rxnxmxis4x::VFMSUBPS
          // VFMSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm   VREG:r:f32=$YMMis4;
          return 3158 << 16 | 6550;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBPS_rxnxis4xmx::VFMSUBPS
          // VFMSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 VREG:r:f32=$XMMm;
          return 3157 << 16 | 6545;
        }
        else
        {
          // TEMPLATE.VFMSUBPS_rxnxmxis4x::VFMSUBPS
          // VFMSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm   VREG:r:f32=$XMMis4;
          return 3158 << 16 | 6549;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBPS_rxnxis4xmx::VFMSUBPSmy
          // VFMSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 MEM:r:f32=$mem256;
          return 3157 << 16 | 6548;
        }
        else
        {
          // TEMPLATE.VFMSUBPS_rxnxmxis4x::VFMSUBPSmy
          // VFMSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256  VREG:r:f32=$YMMis4;
          return 3158 << 16 | 6552;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBPS_rxnxis4xmx::VFMSUBPSmx
          // VFMSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 MEM:r:f32=$mem128;
          return 3157 << 16 | 6547;
        }
        else
        {
          // TEMPLATE.VFMSUBPS_rxnxmxis4x::VFMSUBPSmx
          // VFMSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128  VREG:r:f32=$XMMis4;
          return 3158 << 16 | 6551;
        }
      }
    }
  break;
  /* 0f3a.0x6d */
  case 1133:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBPD_rxnxis4xmx::VFMSUBPD
          // VFMSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 VREG:r:f64=$YMMm;
          return 3155 << 16 | 6538;
        }
        else
        {
          // TEMPLATE.VFMSUBPD_rxnxmxis4x::VFMSUBPD
          // VFMSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm   VREG:r:f64=$YMMis4;
          return 3156 << 16 | 6542;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBPD_rxnxis4xmx::VFMSUBPD
          // VFMSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 VREG:r:f64=$XMMm;
          return 3155 << 16 | 6537;
        }
        else
        {
          // TEMPLATE.VFMSUBPD_rxnxmxis4x::VFMSUBPD
          // VFMSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm   VREG:r:f64=$XMMis4;
          return 3156 << 16 | 6541;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBPD_rxnxis4xmx::VFMSUBPDmy
          // VFMSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 MEM:r:f64=$mem256;
          return 3155 << 16 | 6540;
        }
        else
        {
          // TEMPLATE.VFMSUBPD_rxnxmxis4x::VFMSUBPDmy
          // VFMSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256  VREG:r:f64=$YMMis4;
          return 3156 << 16 | 6544;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFMSUBPD_rxnxis4xmx::VFMSUBPDmx
          // VFMSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 MEM:r:f64=$mem128;
          return 3155 << 16 | 6539;
        }
        else
        {
          // TEMPLATE.VFMSUBPD_rxnxmxis4x::VFMSUBPDmx
          // VFMSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128  VREG:r:f64=$XMMis4;
          return 3156 << 16 | 6543;
        }
      }
    }
  break;
  /* 0f3a.0x6e */
  case 1134:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFMSUBSS_ronois4omd::VFMSUBSS
        // VFMSUBSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 REG:r:f32=$XMMm;
        return 3161 << 16 | 6557;
      }
      else
      {
        // TEMPLATE.VFMSUBSS_ronomdis4o::VFMSUBSS
        // VFMSUBSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm    VREG:r:f32=$XMMis4;
        return 3162 << 16 | 6559;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFMSUBSS_ronois4omd::VFMSUBSSmd
        // VFMSUBSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 MEM:r:f32=$mem32;
        return 3161 << 16 | 6558;
      }
      else
      {
        // TEMPLATE.VFMSUBSS_ronomdis4o::VFMSUBSSmd
        // VFMSUBSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32   VREG:r:f32=$XMMis4;
        return 3162 << 16 | 6560;
      }
    }
  break;
  /* 0f3a.0x6f */
  case 1135:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFMSUBSD_ronois4omq::VFMSUBSD
        // VFMSUBSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 REG:r:f64=$XMMm;
        return 3159 << 16 | 6553;
      }
      else
      {
        // TEMPLATE.VFMSUBSD_ronomqis4o::VFMSUBSD
        // VFMSUBSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm    VREG:r:f64=$XMMis4;
        return 3160 << 16 | 6555;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFMSUBSD_ronois4omq::VFMSUBSDmq
        // VFMSUBSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 MEM:r:f64=$mem64;
        return 3159 << 16 | 6554;
      }
      else
      {
        // TEMPLATE.VFMSUBSD_ronomqis4o::VFMSUBSDmq
        // VFMSUBSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64   VREG:r:f64=$XMMis4;
        return 3160 << 16 | 6556;
      }
    }
  break;
  /* 0f3a.0x70 */
  case 1136:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPSHLDW_ronomoub::VPSHLDW
          // VPSHLDW VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn VREG:r:u16=$XMMm             SHIFT:r:u8=$shl;
          return 2948 << 16 | 5983;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPSHLDW_rynymyub::VPSHLDW
          // VPSHLDW VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn VREG:r:u16=$YMMm             SHIFT:r:u8=$shl;
          return 2949 << 16 | 5985;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPSHLDW_rznzmzub::VPSHLDW
          // VPSHLDW VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn VREG:r:u16=$ZMMm             SHIFT:r:u8=$shl;
          return 2950 << 16 | 5987;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPSHLDW_ronomoub::VPSHLDWmx
          // VPSHLDW VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn MEM:r:u16=$mem128            SHIFT:r:u8=$shl;
          return 2948 << 16 | 5984;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPSHLDW_rynymyub::VPSHLDWmy
          // VPSHLDW VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn MEM:r:u16=$mem256            SHIFT:r:u8=$shl;
          return 2949 << 16 | 5986;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPSHLDW_rznzmzub::VPSHLDWmz
          // VPSHLDW VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn MEM:r:u16=$mem512            SHIFT:r:u8=$shl;
          return 2950 << 16 | 5988;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x71 */
  case 1137:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPSHLDx_rynymyub::VPSHLDQ
          // VPSHLDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm             SHIFT:r:u8=$shl;
          return 2952 << 16 | 5995;
        }
        else
        {
          // TEMPLATE.VPSHLDx_rynymyub::VPSHLDD
          // VPSHLDD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm             SHIFT:r:u8=$shl;
          return 2952 << 16 | 5993;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHLDx_rznzmzub::VPSHLDQ
            // VPSHLDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm             SHIFT:r:u8=$shl;
            return 2953 << 16 | 5999;
          }
          else
          {
            // TEMPLATE.VPSHLDx_rznzmzub::VPSHLDD
            // VPSHLDD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm             SHIFT:r:u8=$shl;
            return 2953 << 16 | 5997;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHLDx_ronomoub::VPSHLDQ
            // VPSHLDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm             SHIFT:r:u8=$shl;
            return 2951 << 16 | 5991;
          }
          else
          {
            // TEMPLATE.VPSHLDx_ronomoub::VPSHLDD
            // VPSHLDD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm             SHIFT:r:u8=$shl;
            return 2951 << 16 | 5989;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPSHLDx_rynymyub::VPSHLDQmy
          // VPSHLDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST SHIFT:r:u8=$shl;
          return 2952 << 16 | 5996;
        }
        else
        {
          // TEMPLATE.VPSHLDx_rynymyub::VPSHLDDmy
          // VPSHLDD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST SHIFT:r:u8=$shl;
          return 2952 << 16 | 5994;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHLDx_rznzmzub::VPSHLDQmz
            // VPSHLDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST SHIFT:r:u8=$shl;
            return 2953 << 16 | 6000;
          }
          else
          {
            // TEMPLATE.VPSHLDx_rznzmzub::VPSHLDDmz
            // VPSHLDD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST SHIFT:r:u8=$shl;
            return 2953 << 16 | 5998;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHLDx_ronomoub::VPSHLDQmx
            // VPSHLDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST SHIFT:r:u8=$shl;
            return 2951 << 16 | 5992;
          }
          else
          {
            // TEMPLATE.VPSHLDx_ronomoub::VPSHLDDmx
            // VPSHLDD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST SHIFT:r:u8=$shl;
            return 2951 << 16 | 5990;
          }
        }
      }
    }
  break;
  /* 0f3a.0x72 */
  case 1138:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPSHRDW_ronomoub::VPSHRDW
          // VPSHRDW VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn VREG:r:u16=$XMMm             SHIFT:r:u8=$shr;
          return 2960 << 16 | 6019;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPSHRDW_rynymyub::VPSHRDW
          // VPSHRDW VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn VREG:r:u16=$YMMm             SHIFT:r:u8=$shr;
          return 2961 << 16 | 6021;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPSHRDW_rznzmzub::VPSHRDW
          // VPSHRDW VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn VREG:r:u16=$ZMMm             SHIFT:r:u8=$shr;
          return 2962 << 16 | 6023;
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (b & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.VPSHRDW_ronomoub::VPSHRDWmx
          // VPSHRDW VREG:w:u16=$XMMr PREG:r:Z=$Kk VREG:r:u16=$XMMn MEM:r:u16=$mem128            SHIFT:r:u8=$shr;
          return 2960 << 16 | 6020;
          break;
        }
        case 0x01:
        {
          // TEMPLATE.VPSHRDW_rynymyub::VPSHRDWmy
          // VPSHRDW VREG:w:u16=$YMMr PREG:r:Z=$Kk VREG:r:u16=$YMMn MEM:r:u16=$mem256            SHIFT:r:u8=$shr;
          return 2961 << 16 | 6022;
          break;
        }
        case 0x02:
        {
          // TEMPLATE.VPSHRDW_rznzmzub::VPSHRDWmz
          // VPSHRDW VREG:w:u16=$ZMMr PREG:r:Z=$Kk VREG:r:u16=$ZMMn MEM:r:u16=$mem512            SHIFT:r:u8=$shr;
          return 2962 << 16 | 6024;
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0x73 */
  case 1139:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPSHRDx_rynymyub::VPSHRDQ
          // VPSHRDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn VREG:r:u64=$YMMm             SHIFT:r:u8=$shr;
          return 2964 << 16 | 6031;
        }
        else
        {
          // TEMPLATE.VPSHRDx_rynymyub::VPSHRDD
          // VPSHRDD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn VREG:r:u32=$YMMm             SHIFT:r:u8=$shr;
          return 2964 << 16 | 6029;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHRDx_rznzmzub::VPSHRDQ
            // VPSHRDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn VREG:r:u64=$ZMMm             SHIFT:r:u8=$shr;
            return 2965 << 16 | 6035;
          }
          else
          {
            // TEMPLATE.VPSHRDx_rznzmzub::VPSHRDD
            // VPSHRDD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn VREG:r:u32=$ZMMm             SHIFT:r:u8=$shr;
            return 2965 << 16 | 6033;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHRDx_ronomoub::VPSHRDQ
            // VPSHRDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn VREG:r:u64=$XMMm             SHIFT:r:u8=$shr;
            return 2963 << 16 | 6027;
          }
          else
          {
            // TEMPLATE.VPSHRDx_ronomoub::VPSHRDD
            // VPSHRDD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn VREG:r:u32=$XMMm             SHIFT:r:u8=$shr;
            return 2963 << 16 | 6025;
          }
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPSHRDx_rynymyub::VPSHRDQmy
          // VPSHRDQ VREG:w:u64=$YMMr PREG:r:Z=$Kk VREG:r:u64=$YMMn MEM:r:u64=$mem256 BCST=$BCST SHIFT:r:u8=$shr;
          return 2964 << 16 | 6032;
        }
        else
        {
          // TEMPLATE.VPSHRDx_rynymyub::VPSHRDDmy
          // VPSHRDD VREG:w:u32=$YMMr PREG:r:Z=$Kk VREG:r:u32=$YMMn MEM:r:u32=$mem256 BCST=$BCST SHIFT:r:u8=$shr;
          return 2964 << 16 | 6030;
        }
      }
      else
      {
        if (b & 0x02)
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHRDx_rznzmzub::VPSHRDQmz
            // VPSHRDQ VREG:w:u64=$ZMMr PREG:r:Z=$Kk VREG:r:u64=$ZMMn MEM:r:u64=$mem512 BCST=$BCST SHIFT:r:u8=$shr;
            return 2965 << 16 | 6036;
          }
          else
          {
            // TEMPLATE.VPSHRDx_rznzmzub::VPSHRDDmz
            // VPSHRDD VREG:w:u32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMn MEM:r:u32=$mem512 BCST=$BCST SHIFT:r:u8=$shr;
            return 2965 << 16 | 6034;
          }
        }
        else
        {
          if (d & 0x01)
          {
            // TEMPLATE.VPSHRDx_ronomoub::VPSHRDQmx
            // VPSHRDQ VREG:w:u64=$XMMr PREG:r:Z=$Kk VREG:r:u64=$XMMn MEM:r:u64=$mem128 BCST=$BCST SHIFT:r:u8=$shr;
            return 2963 << 16 | 6028;
          }
          else
          {
            // TEMPLATE.VPSHRDx_ronomoub::VPSHRDDmx
            // VPSHRDD VREG:w:u32=$XMMr PREG:r:Z=$Kk VREG:r:u32=$XMMn MEM:r:u32=$mem128 BCST=$BCST SHIFT:r:u8=$shr;
            return 2963 << 16 | 6026;
          }
        }
      }
    }
  break;
  /* invalid */
  case 1140:
    return 0;
  /* invalid */
  case 1141:
    return 0;
  /* invalid */
  case 1142:
    return 0;
  /* invalid */
  case 1143:
    return 0;
  /* 0f3a.0x78 */
  case 1144:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADDPS_rxnxis4xmx::VFNMADDPS
          // VFNMADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 VREG:r:f32=$YMMm;
          return 3165 << 16 | 6570;
        }
        else
        {
          // TEMPLATE.VFNMADDPS_rxnxmxis4x::VFNMADDPS
          // VFNMADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm   VREG:r:f32=$YMMis4;
          return 3166 << 16 | 6574;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADDPS_rxnxis4xmx::VFNMADDPS
          // VFNMADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 VREG:r:f32=$XMMm;
          return 3165 << 16 | 6569;
        }
        else
        {
          // TEMPLATE.VFNMADDPS_rxnxmxis4x::VFNMADDPS
          // VFNMADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm   VREG:r:f32=$XMMis4;
          return 3166 << 16 | 6573;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADDPS_rxnxis4xmx::VFNMADDPSmy
          // VFNMADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 MEM:r:f32=$mem256;
          return 3165 << 16 | 6572;
        }
        else
        {
          // TEMPLATE.VFNMADDPS_rxnxmxis4x::VFNMADDPSmy
          // VFNMADDPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256  VREG:r:f32=$YMMis4;
          return 3166 << 16 | 6576;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADDPS_rxnxis4xmx::VFNMADDPSmx
          // VFNMADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 MEM:r:f32=$mem128;
          return 3165 << 16 | 6571;
        }
        else
        {
          // TEMPLATE.VFNMADDPS_rxnxmxis4x::VFNMADDPSmx
          // VFNMADDPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128  VREG:r:f32=$XMMis4;
          return 3166 << 16 | 6575;
        }
      }
    }
  break;
  /* 0f3a.0x79 */
  case 1145:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADDPD_rxnxis4xmx::VFNMADDPD
          // VFNMADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 VREG:r:f64=$YMMm;
          return 3163 << 16 | 6562;
        }
        else
        {
          // TEMPLATE.VFNMADDPD_rxnxmxis4x::VFNMADDPD
          // VFNMADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm   VREG:r:f64=$YMMis4;
          return 3164 << 16 | 6566;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADDPD_rxnxis4xmx::VFNMADDPD
          // VFNMADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 VREG:r:f64=$XMMm;
          return 3163 << 16 | 6561;
        }
        else
        {
          // TEMPLATE.VFNMADDPD_rxnxmxis4x::VFNMADDPD
          // VFNMADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm   VREG:r:f64=$XMMis4;
          return 3164 << 16 | 6565;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADDPD_rxnxis4xmx::VFNMADDPDmy
          // VFNMADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 MEM:r:f64=$mem256;
          return 3163 << 16 | 6564;
        }
        else
        {
          // TEMPLATE.VFNMADDPD_rxnxmxis4x::VFNMADDPDmy
          // VFNMADDPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256  VREG:r:f64=$YMMis4;
          return 3164 << 16 | 6568;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMADDPD_rxnxis4xmx::VFNMADDPDmx
          // VFNMADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 MEM:r:f64=$mem128;
          return 3163 << 16 | 6563;
        }
        else
        {
          // TEMPLATE.VFNMADDPD_rxnxmxis4x::VFNMADDPDmx
          // VFNMADDPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128  VREG:r:f64=$XMMis4;
          return 3164 << 16 | 6567;
        }
      }
    }
  break;
  /* 0f3a.0x7a */
  case 1146:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFNMADDSS_ronois4omd::VFNMADDSS
        // VFNMADDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 REG:r:f32=$XMMm;
        return 3169 << 16 | 6581;
      }
      else
      {
        // TEMPLATE.VFNMADDSS_ronomdis4o::VFNMADDSS
        // VFNMADDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm    VREG:r:f32=$XMMis4;
        return 3170 << 16 | 6583;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFNMADDSS_ronois4omd::VFNMADDSSmd
        // VFNMADDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 MEM:r:f32=$mem32;
        return 3169 << 16 | 6582;
      }
      else
      {
        // TEMPLATE.VFNMADDSS_ronomdis4o::VFNMADDSSmd
        // VFNMADDSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32   VREG:r:f32=$XMMis4;
        return 3170 << 16 | 6584;
      }
    }
  break;
  /* 0f3a.0x7b */
  case 1147:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFNMADDSD_ronois4omq::VFNMADDSD
        // VFNMADDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 REG:r:f64=$XMMm;
        return 3167 << 16 | 6577;
      }
      else
      {
        // TEMPLATE.VFNMADDSD_ronomqis4o::VFNMADDSD
        // VFNMADDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm    VREG:r:f64=$XMMis4;
        return 3168 << 16 | 6579;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFNMADDSD_ronois4omq::VFNMADDSDmq
        // VFNMADDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 MEM:r:f64=$mem64;
        return 3167 << 16 | 6578;
      }
      else
      {
        // TEMPLATE.VFNMADDSD_ronomqis4o::VFNMADDSDmq
        // VFNMADDSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64   VREG:r:f64=$XMMis4;
        return 3168 << 16 | 6580;
      }
    }
  break;
  /* 0f3a.0x7c */
  case 1148:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUBPS_rxnxis4xmx::VFNMSUBPS
          // VFNMSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 VREG:r:f32=$YMMm;
          return 3173 << 16 | 6594;
        }
        else
        {
          // TEMPLATE.VFNMSUBPS_rxnxmxis4x::VFNMSUBPS
          // VFNMSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMm   VREG:r:f32=$YMMis4;
          return 3174 << 16 | 6598;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUBPS_rxnxis4xmx::VFNMSUBPS
          // VFNMSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 VREG:r:f32=$XMMm;
          return 3173 << 16 | 6593;
        }
        else
        {
          // TEMPLATE.VFNMSUBPS_rxnxmxis4x::VFNMSUBPS
          // VFNMSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMm   VREG:r:f32=$XMMis4;
          return 3174 << 16 | 6597;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUBPS_rxnxis4xmx::VFNMSUBPSmy
          // VFNMSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn VREG:r:f32=$YMMis4 MEM:r:f32=$mem256;
          return 3173 << 16 | 6596;
        }
        else
        {
          // TEMPLATE.VFNMSUBPS_rxnxmxis4x::VFNMSUBPSmy
          // VFNMSUBPS VREG:w:f32=$YMMr VREG:r:f32=$YMMn MEM:r:f32=$mem256  VREG:r:f32=$YMMis4;
          return 3174 << 16 | 6600;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUBPS_rxnxis4xmx::VFNMSUBPSmx
          // VFNMSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 MEM:r:f32=$mem128;
          return 3173 << 16 | 6595;
        }
        else
        {
          // TEMPLATE.VFNMSUBPS_rxnxmxis4x::VFNMSUBPSmx
          // VFNMSUBPS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem128  VREG:r:f32=$XMMis4;
          return 3174 << 16 | 6599;
        }
      }
    }
  break;
  /* 0f3a.0x7d */
  case 1149:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUBPD_rxnxis4xmx::VFNMSUBPD
          // VFNMSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 VREG:r:f64=$YMMm;
          return 3171 << 16 | 6586;
        }
        else
        {
          // TEMPLATE.VFNMSUBPD_rxnxmxis4x::VFNMSUBPD
          // VFNMSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMm   VREG:r:f64=$YMMis4;
          return 3172 << 16 | 6590;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUBPD_rxnxis4xmx::VFNMSUBPD
          // VFNMSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 VREG:r:f64=$XMMm;
          return 3171 << 16 | 6585;
        }
        else
        {
          // TEMPLATE.VFNMSUBPD_rxnxmxis4x::VFNMSUBPD
          // VFNMSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMm   VREG:r:f64=$XMMis4;
          return 3172 << 16 | 6589;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUBPD_rxnxis4xmx::VFNMSUBPDmy
          // VFNMSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn VREG:r:f64=$YMMis4 MEM:r:f64=$mem256;
          return 3171 << 16 | 6588;
        }
        else
        {
          // TEMPLATE.VFNMSUBPD_rxnxmxis4x::VFNMSUBPDmy
          // VFNMSUBPD VREG:w:f64=$YMMr VREG:r:f64=$YMMn MEM:r:f64=$mem256  VREG:r:f64=$YMMis4;
          return 3172 << 16 | 6592;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VFNMSUBPD_rxnxis4xmx::VFNMSUBPDmx
          // VFNMSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 MEM:r:f64=$mem128;
          return 3171 << 16 | 6587;
        }
        else
        {
          // TEMPLATE.VFNMSUBPD_rxnxmxis4x::VFNMSUBPDmx
          // VFNMSUBPD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem128  VREG:r:f64=$XMMis4;
          return 3172 << 16 | 6591;
        }
      }
    }
  break;
  /* 0f3a.0x7e */
  case 1150:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFNMSUBSS_ronois4omd::VFNMSUBSS
        // VFNMSUBSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 REG:r:f32=$XMMm;
        return 3177 << 16 | 6605;
      }
      else
      {
        // TEMPLATE.VFNMSUBSS_ronomdis4o::VFNMSUBSS
        // VFNMSUBSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn REG:r:f32=$XMMm    VREG:r:f32=$XMMis4;
        return 3178 << 16 | 6607;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFNMSUBSS_ronois4omd::VFNMSUBSSmd
        // VFNMSUBSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn VREG:r:f32=$XMMis4 MEM:r:f32=$mem32;
        return 3177 << 16 | 6606;
      }
      else
      {
        // TEMPLATE.VFNMSUBSS_ronomdis4o::VFNMSUBSSmd
        // VFNMSUBSS VREG:w:f32=$XMMr VREG:r:f32=$XMMn MEM:r:f32=$mem32   VREG:r:f32=$XMMis4;
        return 3178 << 16 | 6608;
      }
    }
  break;
  /* 0f3a.0x7f */
  case 1151:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFNMSUBSD_ronois4omq::VFNMSUBSD
        // VFNMSUBSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 REG:r:f64=$XMMm;
        return 3175 << 16 | 6601;
      }
      else
      {
        // TEMPLATE.VFNMSUBSD_ronomqis4o::VFNMSUBSD
        // VFNMSUBSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn REG:r:f64=$XMMm    VREG:r:f64=$XMMis4;
        return 3176 << 16 | 6603;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VFNMSUBSD_ronois4omq::VFNMSUBSDmq
        // VFNMSUBSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn VREG:r:f64=$XMMis4 MEM:r:f64=$mem64;
        return 3175 << 16 | 6602;
      }
      else
      {
        // TEMPLATE.VFNMSUBSD_ronomqis4o::VFNMSUBSDmq
        // VFNMSUBSD VREG:w:f64=$XMMr VREG:r:f64=$XMMn MEM:r:f64=$mem64   VREG:r:f64=$XMMis4;
        return 3176 << 16 | 6604;
      }
    }
  break;
  /* invalid */
  case 1152:
    return 0;
  /* invalid */
  case 1153:
    return 0;
  /* invalid */
  case 1154:
    return 0;
  /* invalid */
  case 1155:
    return 0;
  /* invalid */
  case 1156:
    return 0;
  /* invalid */
  case 1157:
    return 0;
  /* invalid */
  case 1158:
    return 0;
  /* invalid */
  case 1159:
    return 0;
  /* invalid */
  case 1160:
    return 0;
  /* invalid */
  case 1161:
    return 0;
  /* invalid */
  case 1162:
    return 0;
  /* invalid */
  case 1163:
    return 0;
  /* invalid */
  case 1164:
    return 0;
  /* invalid */
  case 1165:
    return 0;
  /* invalid */
  case 1166:
    return 0;
  /* invalid */
  case 1167:
    return 0;
  /* invalid */
  case 1168:
    return 0;
  /* invalid */
  case 1169:
    return 0;
  /* invalid */
  case 1170:
    return 0;
  /* invalid */
  case 1171:
    return 0;
  /* invalid */
  case 1172:
    return 0;
  /* invalid */
  case 1173:
    return 0;
  /* invalid */
  case 1174:
    return 0;
  /* invalid */
  case 1175:
    return 0;
  /* invalid */
  case 1176:
    return 0;
  /* invalid */
  case 1177:
    return 0;
  /* invalid */
  case 1178:
    return 0;
  /* invalid */
  case 1179:
    return 0;
  /* invalid */
  case 1180:
    return 0;
  /* invalid */
  case 1181:
    return 0;
  /* invalid */
  case 1182:
    return 0;
  /* invalid */
  case 1183:
    return 0;
  /* invalid */
  case 1184:
    return 0;
  /* invalid */
  case 1185:
    return 0;
  /* invalid */
  case 1186:
    return 0;
  /* invalid */
  case 1187:
    return 0;
  /* invalid */
  case 1188:
    return 0;
  /* invalid */
  case 1189:
    return 0;
  /* invalid */
  case 1190:
    return 0;
  /* invalid */
  case 1191:
    return 0;
  /* invalid */
  case 1192:
    return 0;
  /* invalid */
  case 1193:
    return 0;
  /* invalid */
  case 1194:
    return 0;
  /* invalid */
  case 1195:
    return 0;
  /* invalid */
  case 1196:
    return 0;
  /* invalid */
  case 1197:
    return 0;
  /* invalid */
  case 1198:
    return 0;
  /* invalid */
  case 1199:
    return 0;
  /* invalid */
  case 1200:
    return 0;
  /* invalid */
  case 1201:
    return 0;
  /* invalid */
  case 1202:
    return 0;
  /* invalid */
  case 1203:
    return 0;
  /* invalid */
  case 1204:
    return 0;
  /* invalid */
  case 1205:
    return 0;
  /* invalid */
  case 1206:
    return 0;
  /* invalid */
  case 1207:
    return 0;
  /* invalid */
  case 1208:
    return 0;
  /* invalid */
  case 1209:
    return 0;
  /* invalid */
  case 1210:
    return 0;
  /* invalid */
  case 1211:
    return 0;
  /* invalid */
  case 1212:
    return 0;
  /* invalid */
  case 1213:
    return 0;
  /* invalid */
  case 1214:
    return 0;
  /* invalid */
  case 1215:
    return 0;
  /* invalid */
  case 1216:
    return 0;
  /* invalid */
  case 1217:
    return 0;
  /* invalid */
  case 1218:
    return 0;
  /* invalid */
  case 1219:
    return 0;
  /* invalid */
  case 1220:
    return 0;
  /* invalid */
  case 1221:
    return 0;
  /* invalid */
  case 1222:
    return 0;
  /* invalid */
  case 1223:
    return 0;
  /* invalid */
  case 1224:
    return 0;
  /* invalid */
  case 1225:
    return 0;
  /* 0f3a.0xca */
  case 1226:
    if (a & 0x01)
    {
      if (b & 0x10)
      {
        if (c & 0x08)
        {
          // TEMPLATE.VCVTFXPNTPD2UDQ::VCVTFXPNTPD2UDQib
          // VCVTFXPNTPD2UDQ VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE       IMM:u8=$uimm8;
          return 3319 << 16 | 6873;
        }
        else
        {
          // TEMPLATE.VCVTFXPNTPD2UDQ::VCVTFXPNTPD2UDQib
          // VCVTFXPNTPD2UDQ VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SWZ=$r_i64     IMM:u8=$uimm8;
          return 3319 << 16 | 6872;
        }
      }
      else
      {
        if (b & 0x40)
        {
          if (c & 0x08)
          {
            // TEMPLATE.VCVTFXPNTPS2UDQ::VCVTFXPNTPS2UDQib
            // VCVTFXPNTPS2UDQ VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE       IMM:u8=$uimm8;
            return 3321 << 16 | 6879;
          }
          else
          {
            // TEMPLATE.VCVTFXPNTPS2UDQ::VCVTFXPNTPS2UDQib
            // VCVTFXPNTPS2UDQ VREG:rw:u32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SWZ=$r_i32     IMM:u8=$uimm8;
            return 3321 << 16 | 6878;
          }
        }
        else
        {
          if (c & 0x08)
          {
            // TEMPLATE.VCVTFXPNTUDQ2PS::VCVTFXPNTUDQ2PSib
            // VCVTFXPNTUDQ2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMm SAE=$SAE       IMM:u8=$uimm8;
            return 3322 << 16 | 6882;
          }
          else
          {
            // TEMPLATE.VCVTFXPNTUDQ2PS::VCVTFXPNTUDQ2PSib
            // VCVTFXPNTUDQ2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:u32=$ZMMm SWZ=$r_i32     IMM:u8=$uimm8;
            return 3322 << 16 | 6881;
          }
        }
      }
    }
    else
    {
      if (b & 0x10)
      {
        // TEMPLATE.VCVTFXPNTPD2UDQ::VCVTFXPNTPD2UDQmib
        // VCVTFXPNTPD2UDQ VREG:rw:u32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_f64 EVH=$EVH IMM:u8=$uimm8;
        return 3319 << 16 | 6874;
      }
      else
      {
        if (b & 0x40)
        {
          // TEMPLATE.VCVTFXPNTPS2UDQ::VCVTFXPNTPS2UDQmib
          // VCVTFXPNTPS2UDQ VREG:rw:u32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_f32 EVH=$EVH IMM:u8=$uimm8;
          return 3321 << 16 | 6880;
        }
        else
        {
          // TEMPLATE.VCVTFXPNTUDQ2PS::VCVTFXPNTUDQ2PSmib
          // VCVTFXPNTUDQ2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_i32 EVH=$EVH IMM:u8=$uimm8;
          return 3322 << 16 | 6883;
        }
      }
    }
  break;
  /* 0f3a.0xcb */
  case 1227:
    if (a & 0x01)
    {
      if (b & 0x40)
      {
        if (c & 0x08)
        {
          // TEMPLATE.VCVTFXPNTPS2DQ::VCVTFXPNTPS2DQib
          // VCVTFXPNTPS2DQ VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SAE=$SAE       IMM:u8=$uimm8;
          return 3320 << 16 | 6876;
        }
        else
        {
          // TEMPLATE.VCVTFXPNTPS2DQ::VCVTFXPNTPS2DQib
          // VCVTFXPNTPS2DQ VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:f32=$ZMMm SWZ=$r_i32     IMM:u8=$uimm8;
          return 3320 << 16 | 6875;
        }
      }
      else
      {
        if (c & 0x08)
        {
          // TEMPLATE.VCVTFXPNTDQ2PS::VCVTFXPNTDQ2PSib
          // VCVTFXPNTDQ2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm SAE=$SAE       IMM:u8=$uimm8;
          return 3317 << 16 | 6867;
        }
        else
        {
          // TEMPLATE.VCVTFXPNTDQ2PS::VCVTFXPNTDQ2PSib
          // VCVTFXPNTDQ2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk VREG:r:s32=$ZMMm SWZ=$r_i32     IMM:u8=$uimm8;
          return 3317 << 16 | 6866;
        }
      }
    }
    else
    {
      if (b & 0x40)
      {
        // TEMPLATE.VCVTFXPNTPS2DQ::VCVTFXPNTPS2DQmib
        // VCVTFXPNTPS2DQ VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_f32 EVH=$EVH IMM:u8=$uimm8;
        return 3320 << 16 | 6877;
      }
      else
      {
        // TEMPLATE.VCVTFXPNTDQ2PS::VCVTFXPNTDQ2PSmib
        // VCVTFXPNTDQ2PS VREG:rw:f32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_i32 EVH=$EVH IMM:u8=$uimm8;
        return 3317 << 16 | 6868;
      }
    }
  break;
  /* 0f3a.0xcc */
  case 1228:
    if (a & 0x01)
    {
      // TEMPLATE.SHA1RNDS4_romoub_1::SHA1RNDS4ib
      // SHA1RNDS4 VREG:rw:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8;
      return 470 << 16 | 828;
    }
    else
    {
      // TEMPLATE.SHA1RNDS4_romoub_2::SHA1RNDS4mxib
      // SHA1RNDS4 VREG:rw:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8;
      return 471 << 16 | 829;
    }
  break;
  /* invalid */
  case 1229:
    return 0;
  /* 0f3a.0xce */
  case 1230:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.GF2P8AFFINEQB::GF2P8AFFINEQBib
          // GF2P8AFFINEQB  VREG:rw:u8=$XMMr VREG:r:u64=$XMMm  IMM:u8=$uimm8;
          return 1351 << 16 | 2495;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VGF2P8AFFINEQB_rxnxmxub::VGF2P8AFFINEQBib
            // VGF2P8AFFINEQB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn   VREG:r:u64=$YMMm  IMM:u8=$uimm8;
            return 1353 << 16 | 2500;
          }
          else
          {
            // TEMPLATE.VGF2P8AFFINEQB_rxnxmxub::VGF2P8AFFINEQBib
            // VGF2P8AFFINEQB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn   VREG:r:u64=$XMMm  IMM:u8=$uimm8;
            return 1353 << 16 | 2499;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VGF2P8AFFINEQB_ronomoub::VGF2P8AFFINEQBib
              // VGF2P8AFFINEQB VREG:w:u8=$XMMr  PREG:r:Z=$Kk      VREG:r:u8=$XMMn   VREG:r:u64=$XMMm             IMM:u8=$uimm8;
              return 1352 << 16 | 2497;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VGF2P8AFFINEQB_rynymyub::VGF2P8AFFINEQBib
              // VGF2P8AFFINEQB VREG:w:u8=$YMMr  PREG:r:Z=$Kk      VREG:r:u8=$YMMn   VREG:r:u64=$YMMm             IMM:u8=$uimm8;
              return 1354 << 16 | 2503;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VGF2P8AFFINEQB_rznzmzub::VGF2P8AFFINEQBib
              // VGF2P8AFFINEQB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk      VREG:r:u8=$ZMMn   VREG:r:u64=$ZMMm             IMM:u8=$uimm8;
              return 1355 << 16 | 2505;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.GF2P8AFFINEQB::GF2P8AFFINEQBmxib
          // GF2P8AFFINEQB  VREG:rw:u8=$XMMr MEM:r:u64=$mem128 IMM:u8=$uimm8;
          return 1351 << 16 | 2496;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VGF2P8AFFINEQB_rxnxmxub::VGF2P8AFFINEQBmyib
            // VGF2P8AFFINEQB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn   MEM:r:u64=$mem256 IMM:u8=$uimm8;
            return 1353 << 16 | 2502;
          }
          else
          {
            // TEMPLATE.VGF2P8AFFINEQB_rxnxmxub::VGF2P8AFFINEQBmxib
            // VGF2P8AFFINEQB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn   MEM:r:u64=$mem128 IMM:u8=$uimm8;
            return 1353 << 16 | 2501;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VGF2P8AFFINEQB_ronomoub::VGF2P8AFFINEQBmxib
              // VGF2P8AFFINEQB VREG:w:u8=$XMMr  PREG:r:Z=$Kk      VREG:r:u8=$XMMn   MEM:r:u64=$mem128 BCST=$BCST IMM:u8=$uimm8;
              return 1352 << 16 | 2498;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VGF2P8AFFINEQB_rynymyub::VGF2P8AFFINEQBmyib
              // VGF2P8AFFINEQB VREG:w:u8=$YMMr  PREG:r:Z=$Kk      VREG:r:u8=$YMMn   MEM:r:u64=$mem256 BCST=$BCST IMM:u8=$uimm8;
              return 1354 << 16 | 2504;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VGF2P8AFFINEQB_rznzmzub::VGF2P8AFFINEQBmzib
              // VGF2P8AFFINEQB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk      VREG:r:u8=$ZMMn   MEM:r:u64=$mem512 BCST=$BCST IMM:u8=$uimm8;
              return 1355 << 16 | 2506;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* 0f3a.0xcf */
  case 1231:
    if (a & 0x01)
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.GF2P8AFFINEINVQB::GF2P8AFFINEINVQBib
          // GF2P8AFFINEINVQB  VREG:rw:u8=$XMMr VREG:r:u64=$XMMm  IMM:u8=$uimm8;
          return 1346 << 16 | 2483;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VGF2P8AFFINEINVQB_rxnxmxub::VGF2P8AFFINEINVQBib
            // VGF2P8AFFINEINVQB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn   VREG:r:u64=$YMMm  IMM:u8=$uimm8;
            return 1348 << 16 | 2488;
          }
          else
          {
            // TEMPLATE.VGF2P8AFFINEINVQB_rxnxmxub::VGF2P8AFFINEINVQBib
            // VGF2P8AFFINEINVQB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn   VREG:r:u64=$XMMm  IMM:u8=$uimm8;
            return 1348 << 16 | 2487;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VGF2P8AFFINEINVQB_ronomoub::VGF2P8AFFINEINVQBib
              // VGF2P8AFFINEINVQB VREG:w:u8=$XMMr  PREG:r:Z=$Kk      VREG:r:u8=$XMMn   VREG:r:u64=$XMMm             IMM:u8=$uimm8;
              return 1347 << 16 | 2485;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VGF2P8AFFINEINVQB_rynymyub::VGF2P8AFFINEINVQBib
              // VGF2P8AFFINEINVQB VREG:w:u8=$YMMr  PREG:r:Z=$Kk      VREG:r:u8=$YMMn   VREG:r:u64=$YMMm             IMM:u8=$uimm8;
              return 1349 << 16 | 2491;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VGF2P8AFFINEINVQB_rznzmzub::VGF2P8AFFINEINVQBib
              // VGF2P8AFFINEINVQB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk      VREG:r:u8=$ZMMn   VREG:r:u64=$ZMMm             IMM:u8=$uimm8;
              return 1350 << 16 | 2493;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
    else
    {
      // the following switch contains 3 case.
      switch (c & 0x03)
      {
        case 0x00:
        {
          // TEMPLATE.GF2P8AFFINEINVQB::GF2P8AFFINEINVQBmxib
          // GF2P8AFFINEINVQB  VREG:rw:u8=$XMMr MEM:r:u64=$mem128 IMM:u8=$uimm8;
          return 1346 << 16 | 2484;
          break;
        }
        case 0x01:
        {
          if (b & 0x01)
          {
            // TEMPLATE.VGF2P8AFFINEINVQB_rxnxmxub::VGF2P8AFFINEINVQBmyib
            // VGF2P8AFFINEINVQB VREG:w:u8=$YMMr  VREG:r:u8=$YMMn   MEM:r:u64=$mem256 IMM:u8=$uimm8;
            return 1348 << 16 | 2490;
          }
          else
          {
            // TEMPLATE.VGF2P8AFFINEINVQB_rxnxmxub::VGF2P8AFFINEINVQBmxib
            // VGF2P8AFFINEINVQB VREG:w:u8=$XMMr  VREG:r:u8=$XMMn   MEM:r:u64=$mem128 IMM:u8=$uimm8;
            return 1348 << 16 | 2489;
          }
          break;
        }
        case 0x02:
        {
          // the following switch contains 3 case.
          switch (b & 0x03)
          {
            case 0x00:
            {
              // TEMPLATE.VGF2P8AFFINEINVQB_ronomoub::VGF2P8AFFINEINVQBmxib
              // VGF2P8AFFINEINVQB VREG:w:u8=$XMMr  PREG:r:Z=$Kk      VREG:r:u8=$XMMn   MEM:r:u64=$mem128 BCST=$BCST IMM:u8=$uimm8;
              return 1347 << 16 | 2486;
              break;
            }
            case 0x01:
            {
              // TEMPLATE.VGF2P8AFFINEINVQB_rynymyub::VGF2P8AFFINEINVQBmyib
              // VGF2P8AFFINEINVQB VREG:w:u8=$YMMr  PREG:r:Z=$Kk      VREG:r:u8=$YMMn   MEM:r:u64=$mem256 BCST=$BCST IMM:u8=$uimm8;
              return 1349 << 16 | 2492;
              break;
            }
            case 0x02:
            {
              // TEMPLATE.VGF2P8AFFINEINVQB_rznzmzub::VGF2P8AFFINEINVQBmzib
              // VGF2P8AFFINEINVQB VREG:w:u8=$ZMMr  PREG:r:Z=$Kk      VREG:r:u8=$ZMMn   MEM:r:u64=$mem512 BCST=$BCST IMM:u8=$uimm8;
              return 1350 << 16 | 2494;
              break;
            }
            default: break;
          }
          break;
        }
        default: break;
      }
    }
  break;
  /* invalid */
  case 1232:
    return 0;
  /* invalid */
  case 1233:
    return 0;
  /* invalid */
  case 1234:
    return 0;
  /* invalid */
  case 1235:
    return 0;
  /* invalid */
  case 1236:
    return 0;
  /* invalid */
  case 1237:
    return 0;
  /* invalid */
  case 1238:
    return 0;
  /* invalid */
  case 1239:
    return 0;
  /* invalid */
  case 1240:
    return 0;
  /* invalid */
  case 1241:
    return 0;
  /* invalid */
  case 1242:
    return 0;
  /* invalid */
  case 1243:
    return 0;
  /* invalid */
  case 1244:
    return 0;
  /* invalid */
  case 1245:
    return 0;
  /* invalid */
  case 1246:
    return 0;
  /* 0f3a.0xdf */
  case 1247:
    if (a & 0x01)
    {
      if (c & 0x01)
      {
        // TEMPLATE.VAESKEYGENASSIST::VAESKEYGENASSISTib
        // VAESKEYGENASSIST VREG:w:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8;
        return 1244 << 16 | 2156;
      }
      else
      {
        // TEMPLATE.AESKEYGENASSIST::AESKEYGENASSISTib
        // AESKEYGENASSIST VREG:w:s32=$XMMr VREG:r:s32=$XMMm  IMM:u8=$uimm8;
        return 31 << 16 | 58;
      }
    }
    else
    {
      if (c & 0x01)
      {
        // TEMPLATE.VAESKEYGENASSIST::VAESKEYGENASSISTmxib
        // VAESKEYGENASSIST VREG:w:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8;
        return 1244 << 16 | 2157;
      }
      else
      {
        // TEMPLATE.AESKEYGENASSIST::AESKEYGENASSISTmxib
        // AESKEYGENASSIST VREG:w:s32=$XMMr MEM:r:s32=$mem128 IMM:u8=$uimm8;
        return 31 << 16 | 59;
      }
    }
  break;
  /* invalid */
  case 1248:
    return 0;
  /* invalid */
  case 1249:
    return 0;
  /* invalid */
  case 1250:
    return 0;
  /* invalid */
  case 1251:
    return 0;
  /* invalid */
  case 1252:
    return 0;
  /* invalid */
  case 1253:
    return 0;
  /* 0f3a.0xe6 */
  case 1254:
    if (a & 0x01)
    {
      if (c & 0x08)
      {
        // TEMPLATE.VCVTFXPNTPD2DQ::VCVTFXPNTPD2DQib
        // VCVTFXPNTPD2DQ VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SAE=$SAE       IMM:u8=$uimm8;
        return 3318 << 16 | 6870;
      }
      else
      {
        // TEMPLATE.VCVTFXPNTPD2DQ::VCVTFXPNTPD2DQib
        // VCVTFXPNTPD2DQ VREG:rw:s32=$ZMMr PREG:r:Z=$Kk VREG:r:f64=$ZMMm SWZ=$r_i64     IMM:u8=$uimm8;
        return 3318 << 16 | 6869;
      }
    }
    else
    {
      // TEMPLATE.VCVTFXPNTPD2DQ::VCVTFXPNTPD2DQmib
      // VCVTFXPNTPD2DQ VREG:rw:s32=$ZMMr PREG:r:Z=$Kk MEM:r=$mem SWZ=$su_f64 EVH=$EVH IMM:u8=$uimm8;
      return 3318 << 16 | 6871;
    }
  break;
  /* invalid */
  case 1255:
    return 0;
  /* invalid */
  case 1256:
    return 0;
  /* invalid */
  case 1257:
    return 0;
  /* invalid */
  case 1258:
    return 0;
  /* invalid */
  case 1259:
    return 0;
  /* invalid */
  case 1260:
    return 0;
  /* invalid */
  case 1261:
    return 0;
  /* invalid */
  case 1262:
    return 0;
  /* invalid */
  case 1263:
    return 0;
  /* 0f3a.0xf0 */
  case 1264:
    if (a & 0x01)
    {
      if (c & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.RORX::RORX
          // RORX REG:w:s64=$GPR64r REG:r:s64=$GPR64m ROTATE:r:u8=$ror;
          return 401 << 16 | 702;
        }
        else
        {
          // TEMPLATE.RORX::RORX
          // RORX REG:w:s32=$GPR32r REG:r:s32=$GPR32m ROTATE:r:u8=$ror;
          return 401 << 16 | 701;
        }
      }
      else
      {
        // TEMPLATE.RORX::RORX
        // RORX REG:w:s32=$GPR32r REG:r:s32=$GPR32m ROTATE:r:u8=$ror;
        return 401 << 16 | 705;
      }
    }
    else
    {
      if (c & 0x80)
      {
        if (d & 0x01)
        {
          // TEMPLATE.RORX::RORXmq
          // RORX REG:w:s64=$GPR64r MEM:r:s64=$mem64  ROTATE:r:u8=$ror;
          return 401 << 16 | 704;
        }
        else
        {
          // TEMPLATE.RORX::RORXmd
          // RORX REG:w:s32=$GPR32r MEM:r:s32=$mem32  ROTATE:r:u8=$ror;
          return 401 << 16 | 703;
        }
      }
      else
      {
        // TEMPLATE.RORX::RORXmd
        // RORX REG:w:s32=$GPR32r MEM:r:s32=$mem32  ROTATE:r:u8=$ror;
        return 401 << 16 | 706;
      }
    }
  break;
  /* invalid */
  case 1265:
    return 0;
  /* invalid */
  case 1266:
    return 0;
  /* invalid */
  case 1267:
    return 0;
  /* invalid */
  case 1268:
    return 0;
  /* invalid */
  case 1269:
    return 0;
  /* invalid */
  case 1270:
    return 0;
  /* invalid */
  case 1271:
    return 0;
  /* invalid */
  case 1272:
    return 0;
  /* invalid */
  case 1273:
    return 0;
  /* invalid */
  case 1274:
    return 0;
  /* invalid */
  case 1275:
    return 0;
  /* invalid */
  case 1276:
    return 0;
  /* invalid */
  case 1277:
    return 0;
  /* invalid */
  case 1278:
    return 0;
  /* invalid */
  case 1279:
    return 0;
  /* invalid */
  case 1280:
    return 0;
  /* invalid */
  case 1281:
    return 0;
  /* invalid */
  case 1282:
    return 0;
  /* invalid */
  case 1283:
    return 0;
  /* invalid */
  case 1284:
    return 0;
  /* invalid */
  case 1285:
    return 0;
  /* invalid */
  case 1286:
    return 0;
  /* invalid */
  case 1287:
    return 0;
  /* invalid */
  case 1288:
    return 0;
  /* invalid */
  case 1289:
    return 0;
  /* invalid */
  case 1290:
    return 0;
  /* invalid */
  case 1291:
    return 0;
  /* invalid */
  case 1292:
    return 0;
  /* invalid */
  case 1293:
    return 0;
  /* invalid */
  case 1294:
    return 0;
  /* invalid */
  case 1295:
    return 0;
  /* invalid */
  case 1296:
    return 0;
  /* invalid */
  case 1297:
    return 0;
  /* invalid */
  case 1298:
    return 0;
  /* invalid */
  case 1299:
    return 0;
  /* invalid */
  case 1300:
    return 0;
  /* invalid */
  case 1301:
    return 0;
  /* invalid */
  case 1302:
    return 0;
  /* invalid */
  case 1303:
    return 0;
  /* invalid */
  case 1304:
    return 0;
  /* invalid */
  case 1305:
    return 0;
  /* invalid */
  case 1306:
    return 0;
  /* invalid */
  case 1307:
    return 0;
  /* invalid */
  case 1308:
    return 0;
  /* invalid */
  case 1309:
    return 0;
  /* invalid */
  case 1310:
    return 0;
  /* invalid */
  case 1311:
    return 0;
  /* invalid */
  case 1312:
    return 0;
  /* invalid */
  case 1313:
    return 0;
  /* invalid */
  case 1314:
    return 0;
  /* invalid */
  case 1315:
    return 0;
  /* invalid */
  case 1316:
    return 0;
  /* invalid */
  case 1317:
    return 0;
  /* invalid */
  case 1318:
    return 0;
  /* invalid */
  case 1319:
    return 0;
  /* invalid */
  case 1320:
    return 0;
  /* invalid */
  case 1321:
    return 0;
  /* invalid */
  case 1322:
    return 0;
  /* invalid */
  case 1323:
    return 0;
  /* invalid */
  case 1324:
    return 0;
  /* invalid */
  case 1325:
    return 0;
  /* invalid */
  case 1326:
    return 0;
  /* invalid */
  case 1327:
    return 0;
  /* invalid */
  case 1328:
    return 0;
  /* invalid */
  case 1329:
    return 0;
  /* invalid */
  case 1330:
    return 0;
  /* invalid */
  case 1331:
    return 0;
  /* invalid */
  case 1332:
    return 0;
  /* invalid */
  case 1333:
    return 0;
  /* invalid */
  case 1334:
    return 0;
  /* invalid */
  case 1335:
    return 0;
  /* invalid */
  case 1336:
    return 0;
  /* invalid */
  case 1337:
    return 0;
  /* invalid */
  case 1338:
    return 0;
  /* invalid */
  case 1339:
    return 0;
  /* invalid */
  case 1340:
    return 0;
  /* invalid */
  case 1341:
    return 0;
  /* invalid */
  case 1342:
    return 0;
  /* invalid */
  case 1343:
    return 0;
  /* invalid */
  case 1344:
    return 0;
  /* invalid */
  case 1345:
    return 0;
  /* invalid */
  case 1346:
    return 0;
  /* invalid */
  case 1347:
    return 0;
  /* invalid */
  case 1348:
    return 0;
  /* invalid */
  case 1349:
    return 0;
  /* invalid */
  case 1350:
    return 0;
  /* invalid */
  case 1351:
    return 0;
  /* invalid */
  case 1352:
    return 0;
  /* invalid */
  case 1353:
    return 0;
  /* invalid */
  case 1354:
    return 0;
  /* invalid */
  case 1355:
    return 0;
  /* invalid */
  case 1356:
    return 0;
  /* invalid */
  case 1357:
    return 0;
  /* invalid */
  case 1358:
    return 0;
  /* invalid */
  case 1359:
    return 0;
  /* invalid */
  case 1360:
    return 0;
  /* invalid */
  case 1361:
    return 0;
  /* invalid */
  case 1362:
    return 0;
  /* invalid */
  case 1363:
    return 0;
  /* invalid */
  case 1364:
    return 0;
  /* invalid */
  case 1365:
    return 0;
  /* invalid */
  case 1366:
    return 0;
  /* invalid */
  case 1367:
    return 0;
  /* invalid */
  case 1368:
    return 0;
  /* invalid */
  case 1369:
    return 0;
  /* invalid */
  case 1370:
    return 0;
  /* invalid */
  case 1371:
    return 0;
  /* invalid */
  case 1372:
    return 0;
  /* invalid */
  case 1373:
    return 0;
  /* invalid */
  case 1374:
    return 0;
  /* invalid */
  case 1375:
    return 0;
  /* invalid */
  case 1376:
    return 0;
  /* invalid */
  case 1377:
    return 0;
  /* invalid */
  case 1378:
    return 0;
  /* invalid */
  case 1379:
    return 0;
  /* invalid */
  case 1380:
    return 0;
  /* invalid */
  case 1381:
    return 0;
  /* invalid */
  case 1382:
    return 0;
  /* invalid */
  case 1383:
    return 0;
  /* invalid */
  case 1384:
    return 0;
  /* invalid */
  case 1385:
    return 0;
  /* invalid */
  case 1386:
    return 0;
  /* invalid */
  case 1387:
    return 0;
  /* invalid */
  case 1388:
    return 0;
  /* invalid */
  case 1389:
    return 0;
  /* invalid */
  case 1390:
    return 0;
  /* invalid */
  case 1391:
    return 0;
  /* invalid */
  case 1392:
    return 0;
  /* invalid */
  case 1393:
    return 0;
  /* invalid */
  case 1394:
    return 0;
  /* invalid */
  case 1395:
    return 0;
  /* invalid */
  case 1396:
    return 0;
  /* invalid */
  case 1397:
    return 0;
  /* invalid */
  case 1398:
    return 0;
  /* invalid */
  case 1399:
    return 0;
  /* invalid */
  case 1400:
    return 0;
  /* invalid */
  case 1401:
    return 0;
  /* invalid */
  case 1402:
    return 0;
  /* invalid */
  case 1403:
    return 0;
  /* invalid */
  case 1404:
    return 0;
  /* invalid */
  case 1405:
    return 0;
  /* invalid */
  case 1406:
    return 0;
  /* invalid */
  case 1407:
    return 0;
  /* invalid */
  case 1408:
    return 0;
  /* invalid */
  case 1409:
    return 0;
  /* invalid */
  case 1410:
    return 0;
  /* invalid */
  case 1411:
    return 0;
  /* invalid */
  case 1412:
    return 0;
  /* xop8.0x85 */
  case 1413:
    if (a & 0x01)
    {
      // TEMPLATE.VPMACSSWW::VPMACSSWW
      // VPMACSSWW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm  VREG:r:s16=$XMMis4;
      return 3219 << 16 | 6705;
    }
    else
    {
      // TEMPLATE.VPMACSSWW::VPMACSSWWmx
      // VPMACSSWW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128 VREG:r:s16=$XMMis4;
      return 3219 << 16 | 6706;
    }
  break;
  /* xop8.0x86 */
  case 1414:
    if (a & 0x01)
    {
      // TEMPLATE.VPMACSSWD::VPMACSSWD
      // VPMACSSWD VREG:w:s32=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm  VREG:r:s32=$XMMis4;
      return 3218 << 16 | 6703;
    }
    else
    {
      // TEMPLATE.VPMACSSWD::VPMACSSWDmx
      // VPMACSSWD VREG:w:s32=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128 VREG:r:s32=$XMMis4;
      return 3218 << 16 | 6704;
    }
  break;
  /* xop8.0x87 */
  case 1415:
    if (a & 0x01)
    {
      // TEMPLATE.VPMACSSDQL::VPMACSSDQL
      // VPMACSSDQL VREG:w:s64=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm  VREG:r:s64=$XMMis4;
      return 3217 << 16 | 6701;
    }
    else
    {
      // TEMPLATE.VPMACSSDQL::VPMACSSDQLmx
      // VPMACSSDQL VREG:w:s64=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128 VREG:r:s64=$XMMis4;
      return 3217 << 16 | 6702;
    }
  break;
  /* invalid */
  case 1416:
    return 0;
  /* invalid */
  case 1417:
    return 0;
  /* invalid */
  case 1418:
    return 0;
  /* invalid */
  case 1419:
    return 0;
  /* invalid */
  case 1420:
    return 0;
  /* invalid */
  case 1421:
    return 0;
  /* xop8.0x8e */
  case 1422:
    if (a & 0x01)
    {
      // TEMPLATE.VPMACSSDD::VPMACSSDD
      // VPMACSSDD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm  VREG:r:s32=$XMMis4;
      return 3215 << 16 | 6697;
    }
    else
    {
      // TEMPLATE.VPMACSSDD::VPMACSSDDmx
      // VPMACSSDD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128 VREG:r:s32=$XMMis4;
      return 3215 << 16 | 6698;
    }
  break;
  /* xop8.0x8f */
  case 1423:
    if (a & 0x01)
    {
      // TEMPLATE.VPMACSSDQH::VPMACSSDQH
      // VPMACSSDQH VREG:w:s64=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm  VREG:r:s64=$XMMis4;
      return 3216 << 16 | 6699;
    }
    else
    {
      // TEMPLATE.VPMACSSDQH::VPMACSSDQHmx
      // VPMACSSDQH VREG:w:s64=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128 VREG:r:s64=$XMMis4;
      return 3216 << 16 | 6700;
    }
  break;
  /* invalid */
  case 1424:
    return 0;
  /* invalid */
  case 1425:
    return 0;
  /* invalid */
  case 1426:
    return 0;
  /* invalid */
  case 1427:
    return 0;
  /* invalid */
  case 1428:
    return 0;
  /* xop8.0x95 */
  case 1429:
    if (a & 0x01)
    {
      // TEMPLATE.VPMACSWW::VPMACSWW
      // VPMACSWW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm  VREG:r:s16=$XMMis4;
      return 3221 << 16 | 6709;
    }
    else
    {
      // TEMPLATE.VPMACSWW::VPMACSWWmx
      // VPMACSWW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128 VREG:r:s16=$XMMis4;
      return 3221 << 16 | 6710;
    }
  break;
  /* xop8.0x96 */
  case 1430:
    if (a & 0x01)
    {
      // TEMPLATE.VPMACSWD::VPMACSWD
      // VPMACSWD VREG:w:s32=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm  VREG:r:s32=$XMMis4;
      return 3220 << 16 | 6707;
    }
    else
    {
      // TEMPLATE.VPMACSWD::VPMACSWDmx
      // VPMACSWD VREG:w:s32=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128 VREG:r:s32=$XMMis4;
      return 3220 << 16 | 6708;
    }
  break;
  /* xop8.0x97 */
  case 1431:
    if (a & 0x01)
    {
      // TEMPLATE.VPMACSDQL::VPMACSDQL
      // VPMACSDQL VREG:w:s64=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm  VREG:r:s64=$XMMis4;
      return 3214 << 16 | 6695;
    }
    else
    {
      // TEMPLATE.VPMACSDQL::VPMACSDQLmx
      // VPMACSDQL VREG:w:s64=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128 VREG:r:s64=$XMMis4;
      return 3214 << 16 | 6696;
    }
  break;
  /* invalid */
  case 1432:
    return 0;
  /* invalid */
  case 1433:
    return 0;
  /* invalid */
  case 1434:
    return 0;
  /* invalid */
  case 1435:
    return 0;
  /* invalid */
  case 1436:
    return 0;
  /* invalid */
  case 1437:
    return 0;
  /* xop8.0x9e */
  case 1438:
    if (a & 0x01)
    {
      // TEMPLATE.VPMACSDD::VPMACSDD
      // VPMACSDD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm  VREG:r:s32=$XMMis4;
      return 3212 << 16 | 6691;
    }
    else
    {
      // TEMPLATE.VPMACSDD::VPMACSDDmx
      // VPMACSDD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128 VREG:r:s32=$XMMis4;
      return 3212 << 16 | 6692;
    }
  break;
  /* xop8.0x9f */
  case 1439:
    if (a & 0x01)
    {
      // TEMPLATE.VPMACSDQH::VPMACSDQH
      // VPMACSDQH VREG:w:s64=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm  VREG:r:s64=$XMMis4;
      return 3213 << 16 | 6693;
    }
    else
    {
      // TEMPLATE.VPMACSDQH::VPMACSDQHmx
      // VPMACSDQH VREG:w:s64=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128 VREG:r:s64=$XMMis4;
      return 3213 << 16 | 6694;
    }
  break;
  /* invalid */
  case 1440:
    return 0;
  /* invalid */
  case 1441:
    return 0;
  /* xop8.0xa2 */
  case 1442:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCMOV_rxnxis4xmx::VPCMOV
          // VPCMOV VREG:w=$YMMr VREG:r=$YMMn VREG:r=$YMMis4 VREG:r=$YMMm;
          return 3186 << 16 | 6632;
        }
        else
        {
          // TEMPLATE.VPCMOV_rxnxmxis4x::VPCMOV
          // VPCMOV VREG:w=$YMMr VREG:r=$YMMn VREG:r=$YMMm   VREG:r=$YMMis4;
          return 3187 << 16 | 6636;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCMOV_rxnxis4xmx::VPCMOV
          // VPCMOV VREG:w=$XMMr VREG:r=$XMMn VREG:r=$XMMis4 VREG:r=$XMMm;
          return 3186 << 16 | 6631;
        }
        else
        {
          // TEMPLATE.VPCMOV_rxnxmxis4x::VPCMOV
          // VPCMOV VREG:w=$XMMr VREG:r=$XMMn VREG:r=$XMMm   VREG:r=$XMMis4;
          return 3187 << 16 | 6635;
        }
      }
    }
    else
    {
      if (b & 0x01)
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCMOV_rxnxis4xmx::VPCMOVmy
          // VPCMOV VREG:w=$YMMr VREG:r=$YMMn VREG:r=$YMMis4 MEM:r=$mem256;
          return 3186 << 16 | 6634;
        }
        else
        {
          // TEMPLATE.VPCMOV_rxnxmxis4x::VPCMOVmy
          // VPCMOV VREG:w=$YMMr VREG:r=$YMMn MEM:r=$mem256  VREG:r=$YMMis4;
          return 3187 << 16 | 6638;
        }
      }
      else
      {
        if (d & 0x01)
        {
          // TEMPLATE.VPCMOV_rxnxis4xmx::VPCMOVmx
          // VPCMOV VREG:w=$XMMr VREG:r=$XMMn VREG:r=$XMMis4 MEM:r=$mem128;
          return 3186 << 16 | 6633;
        }
        else
        {
          // TEMPLATE.VPCMOV_rxnxmxis4x::VPCMOVmx
          // VPCMOV VREG:w=$XMMr VREG:r=$XMMn MEM:r=$mem128  VREG:r=$XMMis4;
          return 3187 << 16 | 6637;
        }
      }
    }
  break;
  /* xop8.0xa3 */
  case 1443:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPPERM_ronois4omo::VPPERM
        // VPPERM VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMis4 VREG:r:s16=$XMMm;
        return 3224 << 16 | 6715;
      }
      else
      {
        // TEMPLATE.VPPERM_ronomois4o::VPPERM
        // VPPERM VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm   VREG:r:s16=$XMMis4;
        return 3225 << 16 | 6717;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPPERM_ronois4omo::VPPERMmx
        // VPPERM VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMis4 MEM:r:s16=$mem128;
        return 3224 << 16 | 6716;
      }
      else
      {
        // TEMPLATE.VPPERM_ronomois4o::VPPERMmx
        // VPPERM VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128  VREG:r:s16=$XMMis4;
        return 3225 << 16 | 6718;
      }
    }
  break;
  /* invalid */
  case 1444:
    return 0;
  /* invalid */
  case 1445:
    return 0;
  /* xop8.0xa6 */
  case 1446:
    if (a & 0x01)
    {
      // TEMPLATE.VPMADCSSWD::VPMADCSSWD
      // VPMADCSSWD VREG:w:s32=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm  VREG:r:s32=$XMMis4;
      return 3222 << 16 | 6711;
    }
    else
    {
      // TEMPLATE.VPMADCSSWD::VPMADCSSWDmx
      // VPMADCSSWD VREG:w:s32=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128 VREG:r:s32=$XMMis4;
      return 3222 << 16 | 6712;
    }
  break;
  /* invalid */
  case 1447:
    return 0;
  /* invalid */
  case 1448:
    return 0;
  /* invalid */
  case 1449:
    return 0;
  /* invalid */
  case 1450:
    return 0;
  /* invalid */
  case 1451:
    return 0;
  /* invalid */
  case 1452:
    return 0;
  /* invalid */
  case 1453:
    return 0;
  /* invalid */
  case 1454:
    return 0;
  /* invalid */
  case 1455:
    return 0;
  /* invalid */
  case 1456:
    return 0;
  /* invalid */
  case 1457:
    return 0;
  /* invalid */
  case 1458:
    return 0;
  /* invalid */
  case 1459:
    return 0;
  /* invalid */
  case 1460:
    return 0;
  /* invalid */
  case 1461:
    return 0;
  /* xop8.0xb6 */
  case 1462:
    if (a & 0x01)
    {
      // TEMPLATE.VPMADCSWD::VPMADCSWD
      // VPMADCSWD VREG:w:s32=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm  VREG:r:s32=$XMMis4;
      return 3223 << 16 | 6713;
    }
    else
    {
      // TEMPLATE.VPMADCSWD::VPMADCSWDmx
      // VPMADCSWD VREG:w:s32=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128 VREG:r:s32=$XMMis4;
      return 3223 << 16 | 6714;
    }
  break;
  /* invalid */
  case 1463:
    return 0;
  /* invalid */
  case 1464:
    return 0;
  /* invalid */
  case 1465:
    return 0;
  /* invalid */
  case 1466:
    return 0;
  /* invalid */
  case 1467:
    return 0;
  /* invalid */
  case 1468:
    return 0;
  /* invalid */
  case 1469:
    return 0;
  /* invalid */
  case 1470:
    return 0;
  /* invalid */
  case 1471:
    return 0;
  /* xop8.0xc0 */
  case 1472:
    if (a & 0x01)
    {
      // TEMPLATE.VPROTB_romoub::VPROTBib
      // VPROTB VREG:w:u8=$XMMr VREG:r:u8=$XMMm  IMM:u8=$uimm8;
      return 3227 << 16 | 6721;
    }
    else
    {
      // TEMPLATE.VPROTB_romoub::VPROTBmxib
      // VPROTB VREG:w:u8=$XMMr MEM:r:u8=$mem128 IMM:u8=$uimm8;
      return 3227 << 16 | 6722;
    }
  break;
  /* xop8.0xc1 */
  case 1473:
    if (a & 0x01)
    {
      // TEMPLATE.VPROTW_romoub::VPROTWib
      // VPROTW VREG:w:u16=$XMMr VREG:r:u16=$XMMm  IMM:u8=$uimm8;
      return 3236 << 16 | 6739;
    }
    else
    {
      // TEMPLATE.VPROTW_romoub::VPROTWmxib
      // VPROTW VREG:w:u16=$XMMr MEM:r:u16=$mem128 IMM:u8=$uimm8;
      return 3236 << 16 | 6740;
    }
  break;
  /* xop8.0xc2 */
  case 1474:
    if (a & 0x01)
    {
      // TEMPLATE.VPROTD_romoub::VPROTDib
      // VPROTD VREG:w:u32=$XMMr VREG:r:u32=$XMMm  IMM:u8=$uimm8;
      return 3230 << 16 | 6727;
    }
    else
    {
      // TEMPLATE.VPROTD_romoub::VPROTDmxib
      // VPROTD VREG:w:u32=$XMMr MEM:r:u32=$mem128 IMM:u8=$uimm8;
      return 3230 << 16 | 6728;
    }
  break;
  /* xop8.0xc3 */
  case 1475:
    if (a & 0x01)
    {
      // TEMPLATE.VPROTQ_romoub::VPROTQib
      // VPROTQ VREG:w:u64=$XMMr VREG:r:u64=$XMMm  IMM:u8=$uimm8;
      return 3233 << 16 | 6733;
    }
    else
    {
      // TEMPLATE.VPROTQ_romoub::VPROTQmxib
      // VPROTQ VREG:w:u64=$XMMr MEM:r:u64=$mem128 IMM:u8=$uimm8;
      return 3233 << 16 | 6734;
    }
  break;
  /* invalid */
  case 1476:
    return 0;
  /* invalid */
  case 1477:
    return 0;
  /* invalid */
  case 1478:
    return 0;
  /* invalid */
  case 1479:
    return 0;
  /* invalid */
  case 1480:
    return 0;
  /* invalid */
  case 1481:
    return 0;
  /* invalid */
  case 1482:
    return 0;
  /* invalid */
  case 1483:
    return 0;
  /* xop8.0xcc */
  case 1484:
    if (a & 0x01)
    {
      // TEMPLATE.VPCOMB::VPCOMBib
      // VPCOMB VREG:w:s8=$XMMr VREG:r:s8=$XMMn VREG:r:s8=$XMMm  IMM:u8=$uimm8;
      return 3188 << 16 | 6639;
    }
    else
    {
      // TEMPLATE.VPCOMB::VPCOMBmxib
      // VPCOMB VREG:w:s8=$XMMr VREG:r:s8=$XMMn MEM:r:s8=$mem128 IMM:u8=$uimm8;
      return 3188 << 16 | 6640;
    }
  break;
  /* xop8.0xcd */
  case 1485:
    if (a & 0x01)
    {
      // TEMPLATE.VPCOMW::VPCOMWib
      // VPCOMW VREG:w:s16=$XMMr VREG:r:s16=$XMMn VREG:r:s16=$XMMm  IMM:u8=$uimm8;
      return 3195 << 16 | 6653;
    }
    else
    {
      // TEMPLATE.VPCOMW::VPCOMWmxib
      // VPCOMW VREG:w:s16=$XMMr VREG:r:s16=$XMMn MEM:r:s16=$mem128 IMM:u8=$uimm8;
      return 3195 << 16 | 6654;
    }
  break;
  /* xop8.0xce */
  case 1486:
    if (a & 0x01)
    {
      // TEMPLATE.VPCOMD::VPCOMDib
      // VPCOMD VREG:w:s32=$XMMr VREG:r:s32=$XMMn VREG:r:s32=$XMMm  IMM:u8=$uimm8;
      return 3189 << 16 | 6641;
    }
    else
    {
      // TEMPLATE.VPCOMD::VPCOMDmxib
      // VPCOMD VREG:w:s32=$XMMr VREG:r:s32=$XMMn MEM:r:s32=$mem128 IMM:u8=$uimm8;
      return 3189 << 16 | 6642;
    }
  break;
  /* xop8.0xcf */
  case 1487:
    if (a & 0x01)
    {
      // TEMPLATE.VPCOMQ::VPCOMQib
      // VPCOMQ VREG:w:s64=$XMMr VREG:r:s64=$XMMn VREG:r:s64=$XMMm  IMM:u8=$uimm8;
      return 3190 << 16 | 6643;
    }
    else
    {
      // TEMPLATE.VPCOMQ::VPCOMQmxib
      // VPCOMQ VREG:w:s64=$XMMr VREG:r:s64=$XMMn MEM:r:s64=$mem128 IMM:u8=$uimm8;
      return 3190 << 16 | 6644;
    }
  break;
  /* invalid */
  case 1488:
    return 0;
  /* invalid */
  case 1489:
    return 0;
  /* invalid */
  case 1490:
    return 0;
  /* invalid */
  case 1491:
    return 0;
  /* invalid */
  case 1492:
    return 0;
  /* invalid */
  case 1493:
    return 0;
  /* invalid */
  case 1494:
    return 0;
  /* invalid */
  case 1495:
    return 0;
  /* invalid */
  case 1496:
    return 0;
  /* invalid */
  case 1497:
    return 0;
  /* invalid */
  case 1498:
    return 0;
  /* invalid */
  case 1499:
    return 0;
  /* invalid */
  case 1500:
    return 0;
  /* invalid */
  case 1501:
    return 0;
  /* invalid */
  case 1502:
    return 0;
  /* invalid */
  case 1503:
    return 0;
  /* invalid */
  case 1504:
    return 0;
  /* invalid */
  case 1505:
    return 0;
  /* invalid */
  case 1506:
    return 0;
  /* invalid */
  case 1507:
    return 0;
  /* invalid */
  case 1508:
    return 0;
  /* invalid */
  case 1509:
    return 0;
  /* invalid */
  case 1510:
    return 0;
  /* invalid */
  case 1511:
    return 0;
  /* invalid */
  case 1512:
    return 0;
  /* invalid */
  case 1513:
    return 0;
  /* invalid */
  case 1514:
    return 0;
  /* invalid */
  case 1515:
    return 0;
  /* xop8.0xec */
  case 1516:
    if (a & 0x01)
    {
      // TEMPLATE.VPCOMUB::VPCOMUBib
      // VPCOMUB VREG:w:u8=$XMMr VREG:r:u8=$XMMn VREG:r:u8=$XMMm  IMM:u8=$uimm8;
      return 3191 << 16 | 6645;
    }
    else
    {
      // TEMPLATE.VPCOMUB::VPCOMUBmxib
      // VPCOMUB VREG:w:u8=$XMMr VREG:r:u8=$XMMn MEM:r:u8=$mem128 IMM:u8=$uimm8;
      return 3191 << 16 | 6646;
    }
  break;
  /* xop8.0xed */
  case 1517:
    if (a & 0x01)
    {
      // TEMPLATE.VPCOMUW::VPCOMUWib
      // VPCOMUW VREG:w:u16=$XMMr VREG:r:u16=$XMMn VREG:r:u16=$XMMm  IMM:u8=$uimm8;
      return 3194 << 16 | 6651;
    }
    else
    {
      // TEMPLATE.VPCOMUW::VPCOMUWmxib
      // VPCOMUW VREG:w:u16=$XMMr VREG:r:u16=$XMMn MEM:r:u16=$mem128 IMM:u8=$uimm8;
      return 3194 << 16 | 6652;
    }
  break;
  /* xop8.0xee */
  case 1518:
    if (a & 0x01)
    {
      // TEMPLATE.VPCOMUD::VPCOMUDib
      // VPCOMUD VREG:w:u32=$XMMr VREG:r:u32=$XMMn VREG:r:u32=$XMMm  IMM:u8=$uimm8;
      return 3192 << 16 | 6647;
    }
    else
    {
      // TEMPLATE.VPCOMUD::VPCOMUDmxib
      // VPCOMUD VREG:w:u32=$XMMr VREG:r:u32=$XMMn MEM:r:u32=$mem128 IMM:u8=$uimm8;
      return 3192 << 16 | 6648;
    }
  break;
  /* xop8.0xef */
  case 1519:
    if (a & 0x01)
    {
      // TEMPLATE.VPCOMUQ::VPCOMUQib
      // VPCOMUQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn VREG:r:u64=$XMMm  IMM:u8=$uimm8;
      return 3193 << 16 | 6649;
    }
    else
    {
      // TEMPLATE.VPCOMUQ::VPCOMUQmxib
      // VPCOMUQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn MEM:r:u64=$mem128 IMM:u8=$uimm8;
      return 3193 << 16 | 6650;
    }
  break;
  /* invalid */
  case 1520:
    return 0;
  /* invalid */
  case 1521:
    return 0;
  /* invalid */
  case 1522:
    return 0;
  /* invalid */
  case 1523:
    return 0;
  /* invalid */
  case 1524:
    return 0;
  /* invalid */
  case 1525:
    return 0;
  /* invalid */
  case 1526:
    return 0;
  /* invalid */
  case 1527:
    return 0;
  /* invalid */
  case 1528:
    return 0;
  /* invalid */
  case 1529:
    return 0;
  /* invalid */
  case 1530:
    return 0;
  /* invalid */
  case 1531:
    return 0;
  /* invalid */
  case 1532:
    return 0;
  /* invalid */
  case 1533:
    return 0;
  /* invalid */
  case 1534:
    return 0;
  /* invalid */
  case 1535:
    return 0;
  /* invalid */
  case 1536:
    return 0;
  /* xop9.0x01 */
  case 1537:
    if (a & 0x01)
    {
      if (a & 0x02)
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            if (c & 0x80)
            {
              // TEMPLATE.T1MSKC::T1MSKC
              // T1MSKC REG:w:sx=$GPRyn   REG:r:sx=$GPRvm;
              return 3137 << 16 | 6473;
            }
            else
            {
              // TEMPLATE.T1MSKC::T1MSKC
              // T1MSKC REG:w:s32=$GPR32n REG:r:s32=$GPRvm;
              return 3137 << 16 | 6475;
            }
          }
          else
          {
            if (c & 0x80)
            {
              // TEMPLATE.BLCS::BLCS
              // BLCS REG:w:sx=$GPRyn   REG:r:sx=$GPRvm;
              return 3110 << 16 | 6433;
            }
            else
            {
              // TEMPLATE.BLCS::BLCS
              // BLCS REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
              return 3110 << 16 | 6435;
            }
          }
        }
        else
        {
          if (a & 0x08)
          {
            if (c & 0x80)
            {
              // TEMPLATE.BLCIC::BLCIC
              // BLCIC REG:w:sx=$GPRyn   REG:r:sx=$GPRvm;
              return 3108 << 16 | 6425;
            }
            else
            {
              // TEMPLATE.BLCIC::BLCIC
              // BLCIC REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
              return 3108 << 16 | 6427;
            }
          }
          else
          {
            if (c & 0x80)
            {
              // TEMPLATE.BLCFILL::BLCFILL
              // BLCFILL REG:w:sx=$GPRyn   REG:r:sx=$GPRvm;
              return 3106 << 16 | 6417;
            }
            else
            {
              // TEMPLATE.BLCFILL::BLCFILL
              // BLCFILL REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
              return 3106 << 16 | 6419;
            }
          }
        }
      }
      else
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            if (c & 0x80)
            {
              // TEMPLATE.BLSIC::BLSIC
              // BLSIC REG:w:sx=$GPRyn   REG:r:sx=$GPRvm;
              return 3112 << 16 | 6441;
            }
            else
            {
              // TEMPLATE.BLSIC::BLSIC
              // BLSIC REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
              return 3112 << 16 | 6443;
            }
          }
          else
          {
            if (c & 0x80)
            {
              // TEMPLATE.BLSFILL::BLSFILL
              // BLSFILL REG:w:sx=$GPRyn   REG:r:sx=$GPRvm;
              return 3111 << 16 | 6437;
            }
            else
            {
              // TEMPLATE.BLSFILL::BLSFILL
              // BLSFILL REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
              return 3111 << 16 | 6439;
            }
          }
        }
        else
        {
          if (c & 0x80)
          {
            // TEMPLATE.TZMSK::TZMSK
            // TZMSK REG:w:sx=$GPRyn   REG:r:sx=$GPRvm;
            return 3138 << 16 | 6477;
          }
          else
          {
            // TEMPLATE.TZMSK::TZMSK
            // TZMSK REG:w:s32=$GPR32n REG:r:s32=$GPR32m;
            return 3138 << 16 | 6479;
          }
        }
      }
    }
    else
    {
      if (a & 0x02)
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            if (c & 0x80)
            {
              // TEMPLATE.T1MSKC::T1MSKCm
              // T1MSKC REG:w:sx=$GPRyn   MEM:r:sx=$memy;
              return 3137 << 16 | 6474;
            }
            else
            {
              // TEMPLATE.T1MSKC::T1MSKCmd
              // T1MSKC REG:w:s32=$GPR32n MEM:r:s32=$mem32;
              return 3137 << 16 | 6476;
            }
          }
          else
          {
            if (c & 0x80)
            {
              // TEMPLATE.BLCS::BLCSm
              // BLCS REG:w:sx=$GPRyn   MEM:r:sx=$memy;
              return 3110 << 16 | 6434;
            }
            else
            {
              // TEMPLATE.BLCS::BLCSmd
              // BLCS REG:w:s32=$GPR32n MEM:r:s32=$mem32;
              return 3110 << 16 | 6436;
            }
          }
        }
        else
        {
          if (a & 0x08)
          {
            if (c & 0x80)
            {
              // TEMPLATE.BLCIC::BLCICm
              // BLCIC REG:w:sx=$GPRyn   MEM:r:sx=$memy;
              return 3108 << 16 | 6426;
            }
            else
            {
              // TEMPLATE.BLCIC::BLCICmd
              // BLCIC REG:w:s32=$GPR32n MEM:r:s32=$mem32;
              return 3108 << 16 | 6428;
            }
          }
          else
          {
            if (c & 0x80)
            {
              // TEMPLATE.BLCFILL::BLCFILLm
              // BLCFILL REG:w:sx=$GPRyn   MEM:r:sx=$memy;
              return 3106 << 16 | 6418;
            }
            else
            {
              // TEMPLATE.BLCFILL::BLCFILLmd
              // BLCFILL REG:w:s32=$GPR32n MEM:r:s32=$mem32;
              return 3106 << 16 | 6420;
            }
          }
        }
      }
      else
      {
        if (a & 0x04)
        {
          if (a & 0x08)
          {
            if (c & 0x80)
            {
              // TEMPLATE.BLSIC::BLSICm
              // BLSIC REG:w:sx=$GPRyn   MEM:r:sx=$memy;
              return 3112 << 16 | 6442;
            }
            else
            {
              // TEMPLATE.BLSIC::BLSICmd
              // BLSIC REG:w:s32=$GPR32n MEM:r:s32=$mem32;
              return 3112 << 16 | 6444;
            }
          }
          else
          {
            if (c & 0x80)
            {
              // TEMPLATE.BLSFILL::BLSFILLm
              // BLSFILL REG:w:sx=$GPRyn   MEM:r:sx=$memy;
              return 3111 << 16 | 6438;
            }
            else
            {
              // TEMPLATE.BLSFILL::BLSFILLmd
              // BLSFILL REG:w:s32=$GPR32n MEM:r:s32=$mem32;
              return 3111 << 16 | 6440;
            }
          }
        }
        else
        {
          if (c & 0x80)
          {
            // TEMPLATE.TZMSK::TZMSKm
            // TZMSK REG:w:sx=$GPRyn   MEM:r:sx=$memy;
            return 3138 << 16 | 6478;
          }
          else
          {
            // TEMPLATE.TZMSK::TZMSKmd
            // TZMSK REG:w:s32=$GPR32n MEM:r:s32=$mem32;
            return 3138 << 16 | 6480;
          }
        }
      }
    }
  break;
  /* xop9.0x02 */
  case 1538:
    if (a & 0x01)
    {
      if (a & 0x02)
      {
        if (c & 0x80)
        {
          // TEMPLATE.BLCMSK::BLCMSK
          // BLCMSK REG:w:sx=$GPRyn   REG:r:sx=$GPRvm;
          return 3109 << 16 | 6429;
        }
        else
        {
          // TEMPLATE.BLCMSK::BLCMSK
          // BLCMSK REG:w:s32=$GPR32n REG:r:s32=$GPRvm;
          return 3109 << 16 | 6431;
        }
      }
      else
      {
        if (c & 0x80)
        {
          // TEMPLATE.BLCI::BLCI
          // BLCI REG:w:sx=$GPRyn   REG:r:sx=$GPRvm;
          return 3107 << 16 | 6421;
        }
        else
        {
          // TEMPLATE.BLCI::BLCI
          // BLCI REG:w:s32=$GPR32n REG:r:s32=$GPRvm;
          return 3107 << 16 | 6423;
        }
      }
    }
    else
    {
      if (a & 0x02)
      {
        if (c & 0x80)
        {
          // TEMPLATE.BLCMSK::BLCMSKm
          // BLCMSK REG:w:sx=$GPRyn   MEM:r:sx=$memy;
          return 3109 << 16 | 6430;
        }
        else
        {
          // TEMPLATE.BLCMSK::BLCMSKmd
          // BLCMSK REG:w:s32=$GPR32n MEM:r:s32=$mem32;
          return 3109 << 16 | 6432;
        }
      }
      else
      {
        if (c & 0x80)
        {
          // TEMPLATE.BLCI::BLCIm
          // BLCI REG:w:sx=$GPRyn   MEM:r:sx=$memy;
          return 3107 << 16 | 6422;
        }
        else
        {
          // TEMPLATE.BLCI::BLCImd
          // BLCI REG:w:s32=$GPR32n MEM:r:s32=$mem32;
          return 3107 << 16 | 6424;
        }
      }
    }
  break;
  /* invalid */
  case 1539:
    return 0;
  /* invalid */
  case 1540:
    return 0;
  /* invalid */
  case 1541:
    return 0;
  /* invalid */
  case 1542:
    return 0;
  /* invalid */
  case 1543:
    return 0;
  /* invalid */
  case 1544:
    return 0;
  /* invalid */
  case 1545:
    return 0;
  /* invalid */
  case 1546:
    return 0;
  /* invalid */
  case 1547:
    return 0;
  /* invalid */
  case 1548:
    return 0;
  /* invalid */
  case 1549:
    return 0;
  /* invalid */
  case 1550:
    return 0;
  /* invalid */
  case 1551:
    return 0;
  /* invalid */
  case 1552:
    return 0;
  /* invalid */
  case 1553:
    return 0;
  /* xop9.0x12 */
  case 1554:
    if (a & 0x02)
    {
      // TEMPLATE.SLWPCB::SLWPCB
      // SLWPCB REG:w:sx=$GPRym;
      return 3121 << 16 | 6455;
    }
    else
    {
      // TEMPLATE.LLWPCB::LLWPCB
      // LLWPCB REG:w:sx=$GPRym;
      return 3118 << 16 | 6450;
    }
  break;
  /* invalid */
  case 1555:
    return 0;
  /* invalid */
  case 1556:
    return 0;
  /* invalid */
  case 1557:
    return 0;
  /* invalid */
  case 1558:
    return 0;
  /* invalid */
  case 1559:
    return 0;
  /* invalid */
  case 1560:
    return 0;
  /* invalid */
  case 1561:
    return 0;
  /* invalid */
  case 1562:
    return 0;
  /* invalid */
  case 1563:
    return 0;
  /* invalid */
  case 1564:
    return 0;
  /* invalid */
  case 1565:
    return 0;
  /* invalid */
  case 1566:
    return 0;
  /* invalid */
  case 1567:
    return 0;
  /* invalid */
  case 1568:
    return 0;
  /* invalid */
  case 1569:
    return 0;
  /* invalid */
  case 1570:
    return 0;
  /* invalid */
  case 1571:
    return 0;
  /* invalid */
  case 1572:
    return 0;
  /* invalid */
  case 1573:
    return 0;
  /* invalid */
  case 1574:
    return 0;
  /* invalid */
  case 1575:
    return 0;
  /* invalid */
  case 1576:
    return 0;
  /* invalid */
  case 1577:
    return 0;
  /* invalid */
  case 1578:
    return 0;
  /* invalid */
  case 1579:
    return 0;
  /* invalid */
  case 1580:
    return 0;
  /* invalid */
  case 1581:
    return 0;
  /* invalid */
  case 1582:
    return 0;
  /* invalid */
  case 1583:
    return 0;
  /* invalid */
  case 1584:
    return 0;
  /* invalid */
  case 1585:
    return 0;
  /* invalid */
  case 1586:
    return 0;
  /* invalid */
  case 1587:
    return 0;
  /* invalid */
  case 1588:
    return 0;
  /* invalid */
  case 1589:
    return 0;
  /* invalid */
  case 1590:
    return 0;
  /* invalid */
  case 1591:
    return 0;
  /* invalid */
  case 1592:
    return 0;
  /* invalid */
  case 1593:
    return 0;
  /* invalid */
  case 1594:
    return 0;
  /* invalid */
  case 1595:
    return 0;
  /* invalid */
  case 1596:
    return 0;
  /* invalid */
  case 1597:
    return 0;
  /* invalid */
  case 1598:
    return 0;
  /* invalid */
  case 1599:
    return 0;
  /* invalid */
  case 1600:
    return 0;
  /* invalid */
  case 1601:
    return 0;
  /* invalid */
  case 1602:
    return 0;
  /* invalid */
  case 1603:
    return 0;
  /* invalid */
  case 1604:
    return 0;
  /* invalid */
  case 1605:
    return 0;
  /* invalid */
  case 1606:
    return 0;
  /* invalid */
  case 1607:
    return 0;
  /* invalid */
  case 1608:
    return 0;
  /* invalid */
  case 1609:
    return 0;
  /* invalid */
  case 1610:
    return 0;
  /* invalid */
  case 1611:
    return 0;
  /* invalid */
  case 1612:
    return 0;
  /* invalid */
  case 1613:
    return 0;
  /* invalid */
  case 1614:
    return 0;
  /* invalid */
  case 1615:
    return 0;
  /* invalid */
  case 1616:
    return 0;
  /* invalid */
  case 1617:
    return 0;
  /* invalid */
  case 1618:
    return 0;
  /* invalid */
  case 1619:
    return 0;
  /* invalid */
  case 1620:
    return 0;
  /* invalid */
  case 1621:
    return 0;
  /* invalid */
  case 1622:
    return 0;
  /* invalid */
  case 1623:
    return 0;
  /* invalid */
  case 1624:
    return 0;
  /* invalid */
  case 1625:
    return 0;
  /* invalid */
  case 1626:
    return 0;
  /* invalid */
  case 1627:
    return 0;
  /* invalid */
  case 1628:
    return 0;
  /* invalid */
  case 1629:
    return 0;
  /* invalid */
  case 1630:
    return 0;
  /* invalid */
  case 1631:
    return 0;
  /* invalid */
  case 1632:
    return 0;
  /* invalid */
  case 1633:
    return 0;
  /* invalid */
  case 1634:
    return 0;
  /* invalid */
  case 1635:
    return 0;
  /* invalid */
  case 1636:
    return 0;
  /* invalid */
  case 1637:
    return 0;
  /* invalid */
  case 1638:
    return 0;
  /* invalid */
  case 1639:
    return 0;
  /* invalid */
  case 1640:
    return 0;
  /* invalid */
  case 1641:
    return 0;
  /* invalid */
  case 1642:
    return 0;
  /* invalid */
  case 1643:
    return 0;
  /* invalid */
  case 1644:
    return 0;
  /* invalid */
  case 1645:
    return 0;
  /* invalid */
  case 1646:
    return 0;
  /* invalid */
  case 1647:
    return 0;
  /* invalid */
  case 1648:
    return 0;
  /* invalid */
  case 1649:
    return 0;
  /* invalid */
  case 1650:
    return 0;
  /* invalid */
  case 1651:
    return 0;
  /* invalid */
  case 1652:
    return 0;
  /* invalid */
  case 1653:
    return 0;
  /* invalid */
  case 1654:
    return 0;
  /* invalid */
  case 1655:
    return 0;
  /* invalid */
  case 1656:
    return 0;
  /* invalid */
  case 1657:
    return 0;
  /* invalid */
  case 1658:
    return 0;
  /* invalid */
  case 1659:
    return 0;
  /* invalid */
  case 1660:
    return 0;
  /* invalid */
  case 1661:
    return 0;
  /* invalid */
  case 1662:
    return 0;
  /* invalid */
  case 1663:
    return 0;
  /* xop9.0x80 */
  case 1664:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        // TEMPLATE.VFRCZPS::VFRCZPS
        // VFRCZPS VREG:w:f32=$YMMr VREG:r:f32=$YMMm;
        return 3183 << 16 | 6624;
      }
      else
      {
        // TEMPLATE.VFRCZPS::VFRCZPS
        // VFRCZPS VREG:w:f32=$XMMr VREG:r:f32=$XMMm;
        return 3183 << 16 | 6623;
      }
    }
    else
    {
      if (b & 0x01)
      {
        // TEMPLATE.VFRCZPS::VFRCZPSmy
        // VFRCZPS VREG:w:f32=$YMMr MEM:r:f32=$mem256;
        return 3183 << 16 | 6626;
      }
      else
      {
        // TEMPLATE.VFRCZPS::VFRCZPSmx
        // VFRCZPS VREG:w:f32=$XMMr MEM:r:f32=$mem128;
        return 3183 << 16 | 6625;
      }
    }
  break;
  /* xop9.0x81 */
  case 1665:
    if (a & 0x01)
    {
      if (b & 0x01)
      {
        // TEMPLATE.VFRCZPD::VFRCZPD
        // VFRCZPD VREG:w:f64=$YMMr VREG:r:f64=$YMMm;
        return 3182 << 16 | 6620;
      }
      else
      {
        // TEMPLATE.VFRCZPD::VFRCZPD
        // VFRCZPD VREG:w:f64=$XMMr VREG:r:f64=$XMMm;
        return 3182 << 16 | 6619;
      }
    }
    else
    {
      if (b & 0x01)
      {
        // TEMPLATE.VFRCZPD::VFRCZPDmy
        // VFRCZPD VREG:w:f64=$YMMr MEM:r:f64=$mem256;
        return 3182 << 16 | 6622;
      }
      else
      {
        // TEMPLATE.VFRCZPD::VFRCZPDmx
        // VFRCZPD VREG:w:f64=$XMMr MEM:r:f64=$mem128;
        return 3182 << 16 | 6621;
      }
    }
  break;
  /* xop9.0x82 */
  case 1666:
    if (a & 0x01)
    {
      // TEMPLATE.VFRCZSS::VFRCZSS
      // VFRCZSS VREG:w:f32=$XMMr REG:r:f32=$XMMm;
      return 3185 << 16 | 6629;
    }
    else
    {
      // TEMPLATE.VFRCZSS::VFRCZSSmd
      // VFRCZSS VREG:w:f32=$XMMr MEM:r:f32=$mem32;
      return 3185 << 16 | 6630;
    }
  break;
  /* xop9.0x83 */
  case 1667:
    if (a & 0x01)
    {
      // TEMPLATE.VFRCZSD::VFRCZSD
      // VFRCZSD VREG:w:f64=$XMMr REG:r:f64=$XMMm;
      return 3184 << 16 | 6627;
    }
    else
    {
      // TEMPLATE.VFRCZSD::VFRCZSDmq
      // VFRCZSD VREG:w:f64=$XMMr MEM:r:f64=$mem64;
      return 3184 << 16 | 6628;
    }
  break;
  /* invalid */
  case 1668:
    return 0;
  /* invalid */
  case 1669:
    return 0;
  /* invalid */
  case 1670:
    return 0;
  /* invalid */
  case 1671:
    return 0;
  /* invalid */
  case 1672:
    return 0;
  /* invalid */
  case 1673:
    return 0;
  /* invalid */
  case 1674:
    return 0;
  /* invalid */
  case 1675:
    return 0;
  /* invalid */
  case 1676:
    return 0;
  /* invalid */
  case 1677:
    return 0;
  /* invalid */
  case 1678:
    return 0;
  /* invalid */
  case 1679:
    return 0;
  /* xop9.0x90 */
  case 1680:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPROTB_ronomo::VPROTB
        // VPROTB VREG:w:u8=$XMMr VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
        return 3228 << 16 | 6723;
      }
      else
      {
        // TEMPLATE.VPROTB_romono::VPROTB
        // VPROTB VREG:w:u8=$XMMr VREG:r:u8=$XMMm  VREG:r:u8=$XMMn;
        return 3226 << 16 | 6719;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPROTB_ronomo::VPROTBmx
        // VPROTB VREG:w:u8=$XMMr VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
        return 3228 << 16 | 6724;
      }
      else
      {
        // TEMPLATE.VPROTB_romono::VPROTBmx
        // VPROTB VREG:w:u8=$XMMr MEM:r:u8=$mem128 VREG:r:u8=$XMMn;
        return 3226 << 16 | 6720;
      }
    }
  break;
  /* xop9.0x91 */
  case 1681:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPROTW_ronomo::VPROTW
        // VPROTW VREG:w:u16=$XMMr VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
        return 3237 << 16 | 6741;
      }
      else
      {
        // TEMPLATE.VPROTW_romono::VPROTW
        // VPROTW VREG:w:u16=$XMMr VREG:r:u16=$XMMm  VREG:r:u16=$XMMn;
        return 3235 << 16 | 6737;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPROTW_ronomo::VPROTWmx
        // VPROTW VREG:w:u16=$XMMr VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
        return 3237 << 16 | 6742;
      }
      else
      {
        // TEMPLATE.VPROTW_romono::VPROTWmx
        // VPROTW VREG:w:u16=$XMMr MEM:r:u16=$mem128 VREG:r:u16=$XMMn;
        return 3235 << 16 | 6738;
      }
    }
  break;
  /* xop9.0x92 */
  case 1682:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPROTD_ronomo::VPROTD
        // VPROTD VREG:w:u32=$XMMr VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
        return 3231 << 16 | 6729;
      }
      else
      {
        // TEMPLATE.VPROTD_romono::VPROTD
        // VPROTD VREG:w:u32=$XMMr VREG:r:u32=$XMMm  VREG:r:u32=$XMMn;
        return 3229 << 16 | 6725;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPROTD_ronomo::VPROTDmx
        // VPROTD VREG:w:u32=$XMMr VREG:r:u32=$XMMn  MEM:r:u32=$mem128;
        return 3231 << 16 | 6730;
      }
      else
      {
        // TEMPLATE.VPROTD_romono::VPROTDmx
        // VPROTD VREG:w:u32=$XMMr MEM:r:u32=$mem128 VREG:r:u32=$XMMn;
        return 3229 << 16 | 6726;
      }
    }
  break;
  /* xop9.0x93 */
  case 1683:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPROTQ_ronomo::VPROTQ
        // VPROTQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
        return 3234 << 16 | 6735;
      }
      else
      {
        // TEMPLATE.VPROTQ_romono::VPROTQ
        // VPROTQ VREG:w:u64=$XMMr VREG:r:u64=$XMMm  VREG:r:u64=$XMMn;
        return 3232 << 16 | 6731;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPROTQ_ronomo::VPROTQmx
        // VPROTQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn  MEM:r:u64=$mem128;
        return 3234 << 16 | 6736;
      }
      else
      {
        // TEMPLATE.VPROTQ_romono::VPROTQmx
        // VPROTQ VREG:w:u64=$XMMr MEM:r:u64=$mem128 VREG:r:u64=$XMMn;
        return 3232 << 16 | 6732;
      }
    }
  break;
  /* xop9.0x94 */
  case 1684:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHLB_ronomo::VPSHLB
        // VPSHLB VREG:w:u8=$XMMr VREG:r:u8=$XMMn  VREG:r:u8=$XMMm;
        return 3247 << 16 | 6761;
      }
      else
      {
        // TEMPLATE.VPSHLB_romono::VPSHLB
        // VPSHLB VREG:w:u8=$XMMr VREG:r:u8=$XMMm  VREG:r:u8=$XMMn;
        return 3246 << 16 | 6759;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHLB_ronomo::VPSHLBmx
        // VPSHLB VREG:w:u8=$XMMr VREG:r:u8=$XMMn  MEM:r:u8=$mem128;
        return 3247 << 16 | 6762;
      }
      else
      {
        // TEMPLATE.VPSHLB_romono::VPSHLBmx
        // VPSHLB VREG:w:u8=$XMMr MEM:r:u8=$mem128 VREG:r:u8=$XMMn;
        return 3246 << 16 | 6760;
      }
    }
  break;
  /* xop9.0x95 */
  case 1685:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHLW_ronomo::VPSHLW
        // VPSHLW VREG:w:u16=$XMMr VREG:r:u16=$XMMn  VREG:r:u16=$XMMm;
        return 3253 << 16 | 6773;
      }
      else
      {
        // TEMPLATE.VPSHLW_romono::VPSHLW
        // VPSHLW VREG:w:u16=$XMMr VREG:r:u16=$XMMm  VREG:r:u16=$XMMn;
        return 3252 << 16 | 6771;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHLW_ronomo::VPSHLWmx
        // VPSHLW VREG:w:u16=$XMMr VREG:r:u16=$XMMn  MEM:r:u16=$mem128;
        return 3253 << 16 | 6774;
      }
      else
      {
        // TEMPLATE.VPSHLW_romono::VPSHLWmx
        // VPSHLW VREG:w:u16=$XMMr MEM:r:u16=$mem128 VREG:r:u16=$XMMn;
        return 3252 << 16 | 6772;
      }
    }
  break;
  /* xop9.0x96 */
  case 1686:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHLD_ronomo::VPSHLD
        // VPSHLD VREG:w:u32=$XMMr VREG:r:u32=$XMMn  VREG:r:u32=$XMMm;
        return 3249 << 16 | 6765;
      }
      else
      {
        // TEMPLATE.VPSHLD_romono::VPSHLD
        // VPSHLD VREG:w:u32=$XMMr VREG:r:u32=$XMMm  VREG:r:u32=$XMMn;
        return 3248 << 16 | 6763;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHLD_ronomo::VPSHLDmx
        // VPSHLD VREG:w:u32=$XMMr VREG:r:u32=$XMMn  MEM:r:u32=$mem128;
        return 3249 << 16 | 6766;
      }
      else
      {
        // TEMPLATE.VPSHLD_romono::VPSHLDmx
        // VPSHLD VREG:w:u32=$XMMr MEM:r:u32=$mem128 VREG:r:u32=$XMMn;
        return 3248 << 16 | 6764;
      }
    }
  break;
  /* xop9.0x97 */
  case 1687:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHLQ_ronomo::VPSHLQ
        // VPSHLQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn  VREG:r:u64=$XMMm;
        return 3251 << 16 | 6769;
      }
      else
      {
        // TEMPLATE.VPSHLQ_romono::VPSHLQ
        // VPSHLQ VREG:w:u64=$XMMr VREG:r:u64=$XMMm  VREG:r:u64=$XMMn;
        return 3250 << 16 | 6767;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHLQ_ronomo::VPSHLQmx
        // VPSHLQ VREG:w:u64=$XMMr VREG:r:u64=$XMMn  MEM:r:u64=$mem128;
        return 3251 << 16 | 6770;
      }
      else
      {
        // TEMPLATE.VPSHLQ_romono::VPSHLQmx
        // VPSHLQ VREG:w:u64=$XMMr MEM:r:u64=$mem128 VREG:r:u64=$XMMn;
        return 3250 << 16 | 6768;
      }
    }
  break;
  /* xop9.0x98 */
  case 1688:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHAB_ronomo::VPSHAB
        // VPSHAB VREG:w:s8=$XMMr VREG:r:s8=$XMMn  VREG:r:s8=$XMMm;
        return 3239 << 16 | 6745;
      }
      else
      {
        // TEMPLATE.VPSHAB_romono::VPSHAB
        // VPSHAB VREG:w:s8=$XMMr VREG:r:s8=$XMMm  VREG:r:s8=$XMMn;
        return 3238 << 16 | 6743;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHAB_ronomo::VPSHABmx
        // VPSHAB VREG:w:s8=$XMMr VREG:r:s8=$XMMn  MEM:r:s8=$mem128;
        return 3239 << 16 | 6746;
      }
      else
      {
        // TEMPLATE.VPSHAB_romono::VPSHABmx
        // VPSHAB VREG:w:s8=$XMMr MEM:r:s8=$mem128 VREG:r:s8=$XMMn;
        return 3238 << 16 | 6744;
      }
    }
  break;
  /* xop9.0x99 */
  case 1689:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHAW_ronomo::VPSHAW
        // VPSHAW VREG:w:s16=$XMMr VREG:r:s16=$XMMn  VREG:r:s16=$XMMm;
        return 3245 << 16 | 6757;
      }
      else
      {
        // TEMPLATE.VPSHAW_romono::VPSHAW
        // VPSHAW VREG:w:s16=$XMMr VREG:r:s16=$XMMm  VREG:r:s16=$XMMn;
        return 3244 << 16 | 6755;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHAW_ronomo::VPSHAWmx
        // VPSHAW VREG:w:s16=$XMMr VREG:r:s16=$XMMn  MEM:r:s16=$mem128;
        return 3245 << 16 | 6758;
      }
      else
      {
        // TEMPLATE.VPSHAW_romono::VPSHAWmx
        // VPSHAW VREG:w:s16=$XMMr MEM:r:s16=$mem128 VREG:r:s16=$XMMn;
        return 3244 << 16 | 6756;
      }
    }
  break;
  /* xop9.0x9a */
  case 1690:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHAD_ronomo::VPSHAD
        // VPSHAD VREG:w:s32=$XMMr VREG:r:s32=$XMMn  VREG:r:s32=$XMMm;
        return 3241 << 16 | 6749;
      }
      else
      {
        // TEMPLATE.VPSHAD_romono::VPSHAD
        // VPSHAD VREG:w:s32=$XMMr VREG:r:s32=$XMMm  VREG:r:s32=$XMMn;
        return 3240 << 16 | 6747;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHAD_ronomo::VPSHADmx
        // VPSHAD VREG:w:s32=$XMMr VREG:r:s32=$XMMn  MEM:r:s32=$mem128;
        return 3241 << 16 | 6750;
      }
      else
      {
        // TEMPLATE.VPSHAD_romono::VPSHADmx
        // VPSHAD VREG:w:s32=$XMMr MEM:r:s32=$mem128 VREG:r:s32=$XMMn;
        return 3240 << 16 | 6748;
      }
    }
  break;
  /* xop9.0x9b */
  case 1691:
    if (a & 0x01)
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHAQ_ronomo::VPSHAQ
        // VPSHAQ VREG:w:s64=$XMMr VREG:r:s64=$XMMn  VREG:r:s64=$XMMm;
        return 3243 << 16 | 6753;
      }
      else
      {
        // TEMPLATE.VPSHAQ_romono::VPSHAQ
        // VPSHAQ VREG:w:s64=$XMMr VREG:r:s64=$XMMm  VREG:r:s64=$XMMn;
        return 3242 << 16 | 6751;
      }
    }
    else
    {
      if (d & 0x01)
      {
        // TEMPLATE.VPSHAQ_ronomo::VPSHAQmx
        // VPSHAQ VREG:w:s64=$XMMr VREG:r:s64=$XMMn  MEM:r:s64=$mem128;
        return 3243 << 16 | 6754;
      }
      else
      {
        // TEMPLATE.VPSHAQ_romono::VPSHAQmx
        // VPSHAQ VREG:w:s64=$XMMr MEM:r:s64=$mem128 VREG:r:s64=$XMMn;
        return 3242 << 16 | 6752;
      }
    }
  break;
  /* invalid */
  case 1692:
    return 0;
  /* invalid */
  case 1693:
    return 0;
  /* invalid */
  case 1694:
    return 0;
  /* invalid */
  case 1695:
    return 0;
  /* invalid */
  case 1696:
    return 0;
  /* invalid */
  case 1697:
    return 0;
  /* invalid */
  case 1698:
    return 0;
  /* invalid */
  case 1699:
    return 0;
  /* invalid */
  case 1700:
    return 0;
  /* invalid */
  case 1701:
    return 0;
  /* invalid */
  case 1702:
    return 0;
  /* invalid */
  case 1703:
    return 0;
  /* invalid */
  case 1704:
    return 0;
  /* invalid */
  case 1705:
    return 0;
  /* invalid */
  case 1706:
    return 0;
  /* invalid */
  case 1707:
    return 0;
  /* invalid */
  case 1708:
    return 0;
  /* invalid */
  case 1709:
    return 0;
  /* invalid */
  case 1710:
    return 0;
  /* invalid */
  case 1711:
    return 0;
  /* invalid */
  case 1712:
    return 0;
  /* invalid */
  case 1713:
    return 0;
  /* invalid */
  case 1714:
    return 0;
  /* invalid */
  case 1715:
    return 0;
  /* invalid */
  case 1716:
    return 0;
  /* invalid */
  case 1717:
    return 0;
  /* invalid */
  case 1718:
    return 0;
  /* invalid */
  case 1719:
    return 0;
  /* invalid */
  case 1720:
    return 0;
  /* invalid */
  case 1721:
    return 0;
  /* invalid */
  case 1722:
    return 0;
  /* invalid */
  case 1723:
    return 0;
  /* invalid */
  case 1724:
    return 0;
  /* invalid */
  case 1725:
    return 0;
  /* invalid */
  case 1726:
    return 0;
  /* invalid */
  case 1727:
    return 0;
  /* invalid */
  case 1728:
    return 0;
  /* xop9.0xc1 */
  case 1729:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDBW::VPHADDBW
      // VPHADDBW VREG:w:s8=$XMMr VREG:r:s8=$XMMm;
      return 3200 << 16 | 6667;
    }
    else
    {
      // TEMPLATE.VPHADDBW::VPHADDBWmx
      // VPHADDBW VREG:w:s8=$XMMr MEM:r:s8=$mem128;
      return 3200 << 16 | 6668;
    }
  break;
  /* xop9.0xc2 */
  case 1730:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDBD::VPHADDBD
      // VPHADDBD VREG:w:s32=$XMMr VREG:r:s8=$XMMm;
      return 3198 << 16 | 6663;
    }
    else
    {
      // TEMPLATE.VPHADDBD::VPHADDBDmx
      // VPHADDBD VREG:w:s32=$XMMr MEM:r:s8=$mem128;
      return 3198 << 16 | 6664;
    }
  break;
  /* xop9.0xc3 */
  case 1731:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDBQ::VPHADDBQ
      // VPHADDBQ VREG:w:s64=$XMMr VREG:r:s8=$XMMm;
      return 3199 << 16 | 6665;
    }
    else
    {
      // TEMPLATE.VPHADDBQ::VPHADDBQmx
      // VPHADDBQ VREG:w:s64=$XMMr MEM:r:s8=$mem128;
      return 3199 << 16 | 6666;
    }
  break;
  /* invalid */
  case 1732:
    return 0;
  /* invalid */
  case 1733:
    return 0;
  /* xop9.0xc6 */
  case 1734:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDWD::VPHADDWD
      // VPHADDWD VREG:w:s32=$XMMr VREG:r:s16=$XMMm;
      return 3207 << 16 | 6681;
    }
    else
    {
      // TEMPLATE.VPHADDWD::VPHADDWDmx
      // VPHADDWD VREG:w:s32=$XMMr MEM:r:s16=$mem128;
      return 3207 << 16 | 6682;
    }
  break;
  /* xop9.0xc7 */
  case 1735:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDWQ::VPHADDWQ
      // VPHADDWQ VREG:w:s64=$XMMr VREG:r:s16=$XMMm;
      return 3208 << 16 | 6683;
    }
    else
    {
      // TEMPLATE.VPHADDWQ::VPHADDWQmx
      // VPHADDWQ VREG:w:s64=$XMMr MEM:r:s16=$mem128;
      return 3208 << 16 | 6684;
    }
  break;
  /* invalid */
  case 1736:
    return 0;
  /* invalid */
  case 1737:
    return 0;
  /* invalid */
  case 1738:
    return 0;
  /* xop9.0xcb */
  case 1739:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDDQ::VPHADDDQ
      // VPHADDDQ VREG:w:s64=$XMMr VREG:r:s32=$XMMm;
      return 3201 << 16 | 6669;
    }
    else
    {
      // TEMPLATE.VPHADDDQ::VPHADDDQmx
      // VPHADDDQ VREG:w:s64=$XMMr MEM:r:s32=$mem128;
      return 3201 << 16 | 6670;
    }
  break;
  /* invalid */
  case 1740:
    return 0;
  /* invalid */
  case 1741:
    return 0;
  /* invalid */
  case 1742:
    return 0;
  /* invalid */
  case 1743:
    return 0;
  /* invalid */
  case 1744:
    return 0;
  /* xop9.0xd1 */
  case 1745:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDUBW::VPHADDUBW
      // VPHADDUBW VREG:w:u16=$XMMr VREG:r:u8=$XMMm;
      return 3204 << 16 | 6675;
    }
    else
    {
      // TEMPLATE.VPHADDUBW::VPHADDUBWmx
      // VPHADDUBW VREG:w:u16=$XMMr MEM:r:u8=$mem128;
      return 3204 << 16 | 6676;
    }
  break;
  /* xop9.0xd2 */
  case 1746:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDUBD::VPHADDUBD
      // VPHADDUBD VREG:w:u32=$XMMr VREG:r:u8=$XMMm;
      return 3202 << 16 | 6671;
    }
    else
    {
      // TEMPLATE.VPHADDUBD::VPHADDUBDmx
      // VPHADDUBD VREG:w:u32=$XMMr MEM:r:u8=$mem128;
      return 3202 << 16 | 6672;
    }
  break;
  /* xop9.0xd3 */
  case 1747:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDUBQ::VPHADDUBQ
      // VPHADDUBQ VREG:w:u64=$XMMr VREG:r:u8=$XMMm;
      return 3203 << 16 | 6673;
    }
    else
    {
      // TEMPLATE.VPHADDUBQ::VPHADDUBQmx
      // VPHADDUBQ VREG:w:u64=$XMMr MEM:r:u8=$mem128;
      return 3203 << 16 | 6674;
    }
  break;
  /* invalid */
  case 1748:
    return 0;
  /* invalid */
  case 1749:
    return 0;
  /* xop9.0xd6 */
  case 1750:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDUWD::VPHADDUWD
      // VPHADDUWD VREG:w:u32=$XMMr VREG:r:u16=$XMMm;
      return 3181 << 16 | 6617;
    }
    else
    {
      // TEMPLATE.VPHADDUWD::VPHADDUWDmx
      // VPHADDUWD VREG:w:u32=$XMMr MEM:r:u16=$mem128;
      return 3181 << 16 | 6618;
    }
  break;
  /* xop9.0xd7 */
  case 1751:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDUWQ::VPHADDUWQ
      // VPHADDUWQ VREG:w:u64=$XMMr VREG:r:u16=$XMMm;
      return 3206 << 16 | 6679;
    }
    else
    {
      // TEMPLATE.VPHADDUWQ::VPHADDUWQmx
      // VPHADDUWQ VREG:w:u64=$XMMr MEM:r:u16=$mem128;
      return 3206 << 16 | 6680;
    }
  break;
  /* invalid */
  case 1752:
    return 0;
  /* invalid */
  case 1753:
    return 0;
  /* invalid */
  case 1754:
    return 0;
  /* xop9.0xdb */
  case 1755:
    if (a & 0x01)
    {
      // TEMPLATE.VPHADDUDQ::VPHADDUDQ
      // VPHADDUDQ VREG:w:u64=$XMMr VREG:r:u32=$XMMm;
      return 3205 << 16 | 6677;
    }
    else
    {
      // TEMPLATE.VPHADDUDQ::VPHADDUDQmx
      // VPHADDUDQ VREG:w:u64=$XMMr MEM:r:u32=$mem128;
      return 3205 << 16 | 6678;
    }
  break;
  /* invalid */
  case 1756:
    return 0;
  /* invalid */
  case 1757:
    return 0;
  /* invalid */
  case 1758:
    return 0;
  /* invalid */
  case 1759:
    return 0;
  /* invalid */
  case 1760:
    return 0;
  /* xop9.0xe1 */
  case 1761:
    if (a & 0x01)
    {
      // TEMPLATE.VPHSUBBW::VPHSUBBW
      // VPHSUBBW VREG:w:s16=$XMMr VREG:r:s8=$XMMm;
      return 3209 << 16 | 6685;
    }
    else
    {
      // TEMPLATE.VPHSUBBW::VPHSUBBWmx
      // VPHSUBBW VREG:w:s16=$XMMr MEM:r:s8=$mem128;
      return 3209 << 16 | 6686;
    }
  break;
  /* xop9.0xe2 */
  case 1762:
    if (a & 0x01)
    {
      // TEMPLATE.VPHSUBWD::VPHSUBWD
      // VPHSUBWD VREG:w:s32=$XMMr VREG:r:s16=$XMMm;
      return 3211 << 16 | 6689;
    }
    else
    {
      // TEMPLATE.VPHSUBWD::VPHSUBWDmx
      // VPHSUBWD VREG:w:s32=$XMMr MEM:r:s16=$mem128;
      return 3211 << 16 | 6690;
    }
  break;
  /* xop9.0xe3 */
  case 1763:
    if (a & 0x01)
    {
      // TEMPLATE.VPHSUBDQ::VPHSUBDQ
      // VPHSUBDQ VREG:w:s64=$XMMr VREG:r:s32=$XMMm;
      return 3210 << 16 | 6687;
    }
    else
    {
      // TEMPLATE.VPHSUBDQ::VPHSUBDQmx
      // VPHSUBDQ VREG:w:s64=$XMMr MEM:r:s32=$mem128;
      return 3210 << 16 | 6688;
    }
  break;
  /* invalid */
  case 1764:
    return 0;
  /* invalid */
  case 1765:
    return 0;
  /* invalid */
  case 1766:
    return 0;
  /* invalid */
  case 1767:
    return 0;
  /* invalid */
  case 1768:
    return 0;
  /* invalid */
  case 1769:
    return 0;
  /* invalid */
  case 1770:
    return 0;
  /* invalid */
  case 1771:
    return 0;
  /* invalid */
  case 1772:
    return 0;
  /* invalid */
  case 1773:
    return 0;
  /* invalid */
  case 1774:
    return 0;
  /* invalid */
  case 1775:
    return 0;
  /* invalid */
  case 1776:
    return 0;
  /* invalid */
  case 1777:
    return 0;
  /* invalid */
  case 1778:
    return 0;
  /* invalid */
  case 1779:
    return 0;
  /* invalid */
  case 1780:
    return 0;
  /* invalid */
  case 1781:
    return 0;
  /* invalid */
  case 1782:
    return 0;
  /* invalid */
  case 1783:
    return 0;
  /* invalid */
  case 1784:
    return 0;
  /* invalid */
  case 1785:
    return 0;
  /* invalid */
  case 1786:
    return 0;
  /* invalid */
  case 1787:
    return 0;
  /* invalid */
  case 1788:
    return 0;
  /* invalid */
  case 1789:
    return 0;
  /* invalid */
  case 1790:
    return 0;
  /* invalid */
  case 1791:
    return 0;
  /* invalid */
  case 1792:
    return 0;
  /* invalid */
  case 1793:
    return 0;
  /* invalid */
  case 1794:
    return 0;
  /* invalid */
  case 1795:
    return 0;
  /* invalid */
  case 1796:
    return 0;
  /* invalid */
  case 1797:
    return 0;
  /* invalid */
  case 1798:
    return 0;
  /* invalid */
  case 1799:
    return 0;
  /* invalid */
  case 1800:
    return 0;
  /* invalid */
  case 1801:
    return 0;
  /* invalid */
  case 1802:
    return 0;
  /* invalid */
  case 1803:
    return 0;
  /* invalid */
  case 1804:
    return 0;
  /* invalid */
  case 1805:
    return 0;
  /* invalid */
  case 1806:
    return 0;
  /* invalid */
  case 1807:
    return 0;
  /* xopa.0x10 */
  case 1808:
    if (a & 0x01)
    {
      if (c & 0x80)
      {
        // TEMPLATE.BEXTR_rxmxud::BEXTRid
        // BEXTR REG:w:sx=$GPRyr   REG:r:sx=$GPRym   IMM:s32=$simm32;
        return 3105 << 16 | 6413;
      }
      else
      {
        // TEMPLATE.BEXTR_rxmxud::BEXTRid
        // BEXTR REG:w:s32=$GPR32r REG:r:s32=$GPR32m IMM:s32=$simm32;
        return 3105 << 16 | 6415;
      }
    }
    else
    {
      if (c & 0x80)
      {
        // TEMPLATE.BEXTR_rxmxud::BEXTRmid
        // BEXTR REG:w:sx=$GPRyr   MEM:r:sx=$memy    IMM:s32=$simm32;
        return 3105 << 16 | 6414;
      }
      else
      {
        // TEMPLATE.BEXTR_rxmxud::BEXTRmdid
        // BEXTR REG:w:s32=$GPR32r MEM:r:s32=$mem32  IMM:s32=$simm32;
        return 3105 << 16 | 6416;
      }
    }
  break;
  /* invalid */
  case 1809:
    return 0;
  /* xopa.0x12 */
  case 1810:
    // the following switch contains 4 case.
    switch (a & 0x13)
    {
      case 0x00:
      {
        // TEMPLATE.LWPINS::LWPINSmdid
        // LWPINS REG:w:sx=$GPRyn MEM:r:s32=$mem32  IMM:s32=$simm32;
        return 3119 << 16 | 6452;
        break;
      }
      case 0x01:
      {
        // TEMPLATE.LWPINS::LWPINSid
        // LWPINS REG:w:sx=$GPRyn REG:r:s32=$GPR32m IMM:s32=$simm32;
        return 3119 << 16 | 6451;
        break;
      }
      case 0x12:
      {
        // TEMPLATE.LWPVAL::LWPVALmdid
        // LWPVAL REG:w:sx=$GPRyn MEM:r:s32=$mem32  IMM:s32=$simm32;
        return 3120 << 16 | 6454;
        break;
      }
      case 0x13:
      {
        // TEMPLATE.LWPVAL::LWPVALid
        // LWPVAL REG:w:sx=$GPRyn REG:r:s32=$GPR32m IMM:s32=$simm32;
        return 3120 << 16 | 6453;
        break;
      }
      default: break;
    }
  break;
  }
  return 0;
};

