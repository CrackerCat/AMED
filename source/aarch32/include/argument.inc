/*BEGIN_HEADER
*
* Copyright (C) 2020 Mahdi Safsafi.
*
* https://github.com/MahdiSafsafi/AMED
*
* See licence file 'LICENCE' for use and distribution rights.
*
*END_HEADER*/


/*===----------------------------------------------------------------------===*\
|*                                                                            *|
|*                Automatically generated file, do not edit!                  *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

static const amed_db_reg reg0 = {.dpc=1, .encodedin=1, .has_encodedin=1, .iwb=1, .optional=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg1 = {.dpc=1, .encodedin=3, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_imm imm0 = {.datatype=MK_DATATYPE(I32), .encodedin=5, .has_encodedin=1, .symbol=MK_SYMBOL(aimm), .type=MK_TYPE(IMM)};
static const amed_db_reg reg2 = {.dpc=1, .encodedin=1, .erb=1, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg3 = {.encodedin=7, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1, .write=1};
static const amed_db_reg reg4 = {.encodedin=3, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_imm imm1 = {.datatype=MK_DATATYPE(I32), .encodedin=9, .has_encodedin=1, .symbol=MK_SYMBOL(timm), .type=MK_TYPE(IMM)};
static const amed_db_reg reg5 = {.dpc=1, .encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_extend extend0 = {.type=MK_TYPE(EXTEND), .value=MK_EXTEND(RRX)};
static const amed_db_shifter shifter0 = {.extend=(void*)&extend0, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh0 = {.reg=(void*)&reg5, .shifter=(void*)&shifter0, .type=MK_TYPE(REGSH)};
static const amed_db_amount amount0 = {.datatype=MK_DATATYPE(U8), .encodedin=13, .has_encodedin=1, .symbol=MK_SYMBOL(amount), .type=MK_TYPE(AMOUNT)};
static const amed_db_shift shift0 = {.encodedin=15, .has_encodedin=1, .symbol=MK_SYMBOL(shift), .table=(void*)&tbl_shift1, .type=MK_TYPE(SHIFT)};
static const amed_db_shifter shifter1 = {.amount=(void*)&amount0, .optional=1, .shift=(void*)&shift0, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh1 = {.reg=(void*)&reg5, .shifter=(void*)&shifter1, .type=MK_TYPE(REGSH)};
static const amed_db_reg reg6 = {.encodedin=17, .has_encodedin=1, .optional=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg7 = {.encodedin=17, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg8 = {.encodedin=19, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg9 = {.encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_regsh regsh2 = {.reg=(void*)&reg9, .shifter=(void*)&shifter0, .type=MK_TYPE(REGSH)};
static const amed_db_amount amount1 = {.datatype=MK_DATATYPE(U8), .encodedin=21, .has_encodedin=1, .symbol=MK_SYMBOL(amount), .type=MK_TYPE(AMOUNT)};
static const amed_db_shift shift1 = {.encodedin=23, .has_encodedin=1, .symbol=MK_SYMBOL(shift), .table=(void*)&tbl_shift1, .type=MK_TYPE(SHIFT)};
static const amed_db_shifter shifter2 = {.amount=(void*)&amount1, .optional=1, .shift=(void*)&shift1, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh3 = {.reg=(void*)&reg9, .shifter=(void*)&shifter2, .type=MK_TYPE(REGSH)};
static const amed_db_reg reg10 = {.encodedin=1, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1, .write=1};
static const amed_db_rs rs0 = {.encodedin=7, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(RS), .upc=1};
static const amed_db_shifter shifter3 = {.rs=(void*)&rs0, .shift=(void*)&shift0, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh4 = {.reg=(void*)&reg9, .shifter=(void*)&shifter3, .type=MK_TYPE(REGSH)};
static const amed_db_reg reg11 = {.encodedin=1, .has_encodedin=1, .iwb=1, .optional=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg12 = {.encodedin=3, .has_encodedin=1, .nopc=1, .nosp=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg13 = {.encodedin=3, .has_encodedin=1, .nosp=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg14 = {.encodedin=17, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_imm imm2 = {.datatype=MK_DATATYPE(U8), .encodedin=25, .has_encodedin=1, .symbol=MK_SYMBOL(imm3), .type=MK_TYPE(IMM)};
static const amed_db_reg reg15 = {.encodedin=27, .has_encodedin=1, .optional=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg16 = {.encodedin=27, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_imm imm3 = {.datatype=MK_DATATYPE(U8), .encodedin=29, .has_encodedin=1, .symbol=MK_SYMBOL(imm8), .type=MK_TYPE(IMM)};
static const amed_db_reg reg17 = {.encodedin=7, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg18 = {.encodedin=3, .has_encodedin=1, .nosp=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_reg reg19 = {.encodedin=7, .has_encodedin=1, .nopc=1, .optional=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_imm imm4 = {.datatype=MK_DATATYPE(U16), .encodedin=9, .has_encodedin=1, .symbol=MK_SYMBOL(imm12), .type=MK_TYPE(IMM)};
static const amed_db_reg reg20 = {.encodedin=25, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg21 = {.encodedin=17, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg22 = {.encodedin=31, .has_encodedin=1, .iwb=1, .nosp=1, .optional=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg23 = {.encodedin=31, .has_encodedin=1, .iwb=1, .nosp=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg24 = {.encodedin=33, .has_encodedin=1, .nosp=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg25 = {.type=MK_TYPE(REG), .value=MK_REG(SP)};
static const amed_db_reg reg26 = {.encodedin=27, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_imm imm5 = {.datatype=MK_DATATYPE(U16), .encodedin=29, .has_encodedin=1, .scale=4, .symbol=MK_SYMBOL(imm8), .type=MK_TYPE(IMM)};
static const amed_db_reg reg27 = {.optional=1, .type=MK_TYPE(REG), .value=MK_REG(SP)};
static const amed_db_imm imm6 = {.datatype=MK_DATATYPE(U16), .encodedin=35, .has_encodedin=1, .scale=4, .symbol=MK_SYMBOL(imm7), .type=MK_TYPE(IMM)};
static const amed_db_reg reg28 = {.dpc=1, .encodedin=17, .has_encodedin=1, .iwb=1, .optional=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg29 = {.dpc=1, .encodedin=17, .has_encodedin=1, .iwb=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg30 = {.dpc=1, .encodedin=33, .has_encodedin=1, .nosp=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg31 = {.encodedin=1, .has_encodedin=1, .iwb=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_addr addr0 = {.datatype=MK_DATATYPE(I32), .encodedin=5, .has_encodedin=1, .symbol=MK_SYMBOL(plabela), .type=MK_TYPE(ADDR)};
static const amed_db_addr addr1 = {.datatype=MK_DATATYPE(I32), .encodedin=5, .has_encodedin=1, .symbol=MK_SYMBOL(nlabela), .type=MK_TYPE(ADDR)};
static const amed_db_addr addr2 = {.datatype=MK_DATATYPE(U32), .encodedin=29, .has_encodedin=1, .scale=4, .symbol=MK_SYMBOL(plabel), .type=MK_TYPE(ADDR)};
static const amed_db_reg reg32 = {.encodedin=7, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1, .write=1};
static const amed_db_addr addr3 = {.datatype=MK_DATATYPE(I32), .encodedin=9, .has_encodedin=1, .symbol=MK_SYMBOL(nlabel), .type=MK_TYPE(ADDR)};
static const amed_db_addr addr4 = {.datatype=MK_DATATYPE(I32), .encodedin=9, .has_encodedin=1, .symbol=MK_SYMBOL(plabel), .type=MK_TYPE(ADDR)};
static const amed_db_label label0 = {.datatype=MK_DATATYPE(I32), .encodedin=37, .has_encodedin=1, .scale=4, .signpos=MK_SIGNPOS(imm24<23>), .symbol=MK_SYMBOL(label), .type=MK_TYPE(LABEL)};
static const amed_db_label label1 = {.datatype=MK_DATATYPE(I32), .encodedin=29, .has_encodedin=1, .scale=2, .signpos=MK_SIGNPOS(imm8<7>), .symbol=MK_SYMBOL(label), .type=MK_TYPE(LABEL)};
static const amed_db_label label2 = {.datatype=MK_DATATYPE(I32), .encodedin=39, .has_encodedin=1, .scale=2, .signpos=MK_SIGNPOS(imm11<10>), .symbol=MK_SYMBOL(label), .type=MK_TYPE(LABEL)};
static const amed_db_label label3 = {.datatype=MK_DATATYPE(I32), .encodedin=41, .has_encodedin=1, .scale=2, .signpos=MK_SIGNPOS(S), .symbol=MK_SYMBOL(label), .type=MK_TYPE(LABEL)};
static const amed_db_label label4 = {.datatype=MK_DATATYPE(I32), .encodedin=45, .has_encodedin=1, .scale=2, .signpos=MK_SIGNPOS(S), .symbol=MK_SYMBOL(labelj), .type=MK_TYPE(LABEL)};
static const amed_db_reg reg33 = {.encodedin=1, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1, .write=1};
static const amed_db_imm imm7 = {.datatype=MK_DATATYPE(U8), .encodedin=13, .has_encodedin=1, .symbol=MK_SYMBOL(lsb), .type=MK_TYPE(IMM)};
static const amed_db_imm imm8 = {.datatype=MK_DATATYPE(U8), .encodedin=48, .has_encodedin=1, .symbol=MK_SYMBOL(width), .type=MK_TYPE(IMM)};
static const amed_db_imm imm9 = {.datatype=MK_DATATYPE(U8), .encodedin=21, .has_encodedin=1, .symbol=MK_SYMBOL(lsb), .type=MK_TYPE(IMM)};
static const amed_db_imm imm10 = {.datatype=MK_DATATYPE(U8), .encodedin=50, .has_encodedin=1, .symbol=MK_SYMBOL(width), .type=MK_TYPE(IMM)};
static const amed_db_reg reg34 = {.encodedin=11, .has_encodedin=1, .nopc=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg35 = {.encodedin=3, .has_encodedin=1, .nopc=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_imm imm11 = {.datatype=MK_DATATYPE(U16), .encodedin=52, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm12 = {.datatype=MK_DATATYPE(U8), .encodedin=29, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_label label5 = {.datatype=MK_DATATYPE(I32), .encodedin=54, .has_encodedin=1, .scale=2, .signpos=MK_SIGNPOS(imm24<23>), .symbol=MK_SYMBOL(label), .type=MK_TYPE(LABEL)};
static const amed_db_label label6 = {.datatype=MK_DATATYPE(I32), .encodedin=57, .has_encodedin=1, .scale=4, .signpos=MK_SIGNPOS(S), .symbol=MK_SYMBOL(labelj), .type=MK_TYPE(LABEL)};
static const amed_db_reg reg36 = {.encodedin=33, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_reg reg37 = {.encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg38 = {.encodedin=33, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg39 = {.encodedin=17, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_label label7 = {.datatype=MK_DATATYPE(U32), .encodedin=60, .has_encodedin=1, .scale=2, .symbol=MK_SYMBOL(label), .type=MK_TYPE(LABEL)};
static const amed_db_shift shift2 = {.encodedin=15, .has_encodedin=1, .symbol=MK_SYMBOL(type), .table=(void*)&tbl_shift1, .type=MK_TYPE(SHIFT)};
static const amed_db_shifter shifter4 = {.rs=(void*)&rs0, .shift=(void*)&shift2, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh5 = {.reg=(void*)&reg9, .shifter=(void*)&shifter4, .type=MK_TYPE(REGSH)};
static const amed_db_reg reg40 = {.encodedin=27, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg41 = {.encodedin=31, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_shifter shifter5 = {.amount=(void*)&amount1, .shift=(void*)&shift1, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh6 = {.reg=(void*)&reg9, .shifter=(void*)&shifter5, .type=MK_TYPE(REGSH)};
static const amed_db_imm imm13 = {.datatype=MK_DATATYPE(U8), .encodedin=50, .has_encodedin=1, .symbol=MK_SYMBOL(mode), .type=MK_TYPE(IMM)};
static const amed_db_iflags iflags0 = {.encodedin=25, .has_encodedin=1, .symbol=MK_SYMBOL(iflags), .type=MK_TYPE(IFLAGS)};
static const amed_db_iflags iflags1 = {.encodedin=17, .has_encodedin=1, .symbol=MK_SYMBOL(iflags), .type=MK_TYPE(IFLAGS)};
static const amed_db_iflags iflags2 = {.encodedin=62, .has_encodedin=1, .symbol=MK_SYMBOL(iflags), .type=MK_TYPE(IFLAGS)};
static const amed_db_imm imm14 = {.datatype=MK_DATATYPE(U8), .encodedin=11, .has_encodedin=1, .symbol=MK_SYMBOL(option), .type=MK_TYPE(IMM)};
static const amed_db_barrier barrier0 = {.encodedin=11, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(option), .table=(void*)&tbl_barrier, .type=MK_TYPE(BARRIER)};
static const amed_db_imm imm15 = {.datatype=MK_DATATYPE(U8), .encodedin=64, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm16 = {.datatype=MK_DATATYPE(U16), .encodedin=52, .has_encodedin=1, .symbol=MK_SYMBOL(imm16), .type=MK_TYPE(IMM)};
static const amed_db_imm imm17 = {.datatype=MK_DATATYPE(U16), .encodedin=66, .has_encodedin=1, .symbol=MK_SYMBOL(imm16), .type=MK_TYPE(IMM)};
static const amed_db_barrier barrier1 = {.encodedin=11, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(option), .table=(void*)&tbl_barrier1, .type=MK_TYPE(BARRIER)};
static const amed_db_xyz xyz0 = {.encodedin=11, .has_encodedin=1, .symbol=MK_SYMBOL(xyz), .type=MK_TYPE(XYZ)};
static const amed_db_cond cond0 = {.encodedin=68, .has_encodedin=1, .symbol=MK_SYMBOL(cond), .type=MK_TYPE(COND)};
static const amed_db_base base0 = {.encodedin=3, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(BASE), .upc=1};
static const amed_db_size size0 = {.size=32};
static const amed_db_mem mem0 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .ldacc=MK_LDACC(ACQUIRE), .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_size size1 = {.size=8};
static const amed_db_mem mem1 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .ldacc=MK_LDACC(ACQUIRE), .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem2 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .ldacc=MK_LDACC(ATOMIC_ACQUIRE), .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem3 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .ldacc=MK_LDACC(ATOMIC_ACQUIRE), .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_reg reg42 = {.encodedin=1, .even=1, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg43 = {.encodedin=1, .has_encodedin=1, .pair=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1, .write=1};
static const amed_db_size size2 = {.size=64};
static const amed_db_mem mem4 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I64), .ldacc=MK_LDACC(ATOMIC_ACQUIRE), .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_size size3 = {.size=16};
static const amed_db_mem mem5 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .ldacc=MK_LDACC(ATOMIC_ACQUIRE), .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem6 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .ldacc=MK_LDACC(ACQUIRE), .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_pspace pspace0 = {.type=MK_TYPE(PSPACE), .value=MK_PSPACE(P14)};
static const amed_db_cspace cspace0 = {.type=MK_TYPE(CSPACE), .value=MK_CSPACE(C5)};
static const amed_db_add add0 = {.encodedin=70, .has_encodedin=1, .symbol=MK_SYMBOL(ADD), .type=MK_TYPE(ADD)};
static const amed_db_base base1 = {.encodedin=3, .has_encodedin=1, .nopc=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(BASE)};
static const amed_db_immoff immoff0 = {.datatype=MK_DATATYPE(I32), .default_to=0, .encodedin=29, .has_encodedin=1, .optional=1, .scale=4, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem7 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff0, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_immoff immoff1 = {.datatype=MK_DATATYPE(I32), .default_to=0, .encodedin=29, .has_encodedin=1, .scale=4, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem8 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff1, .post_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem9 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff1, .pre_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_immoff immoff2 = {.datatype=MK_DATATYPE(U8), .encodedin=29, .has_encodedin=1, .symbol=MK_SYMBOL(option), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem10 = {.base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff2, .post_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_base base2 = {.type=MK_TYPE(BASE), .value=MK_BASE(PC)};
static const amed_db_lm lm0 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff1, .read=1, .size=(void*)&size0, .type=MK_TYPE(LM)};
static const amed_db_mem mem11 = {.base=(void*)&base2, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff2, .post_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_wback wback0 = {.default_to=0, .encodedin=72, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(wback), .type=MK_TYPE(WBACK)};
static const amed_db_wreg wreg0 = {.reg=(void*)&reg4, .type=MK_TYPE(WREG), .wback=(void*)&wback0};
static const amed_db_glist glist0 = {.encodedin=74, .has_encodedin=1, .symbol=MK_SYMBOL(registers), .type=MK_TYPE(GLIST)};
static const amed_db_wback wback1 = {.encodedin=29, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(wback16), .type=MK_TYPE(WBACK)};
static const amed_db_wreg wreg1 = {.reg=(void*)&reg40, .type=MK_TYPE(WREG), .wback=(void*)&wback1};
static const amed_db_glist glist1 = {.encodedin=29, .has_encodedin=1, .symbol=MK_SYMBOL(registers), .type=MK_TYPE(GLIST)};
static const amed_db_glist glist2 = {.default_to=0, .encodedin=74, .has_encodedin=1, .symbol=MK_SYMBOL(registers), .type=MK_TYPE(GLIST)};
static const amed_db_glist glist3 = {.encodedin=76, .has_encodedin=1, .symbol=MK_SYMBOL(registers_with_pc), .type=MK_TYPE(GLIST)};
static const amed_db_glist glist4 = {.encodedin=76, .has_encodedin=1, .symbol=MK_SYMBOL(registers_without_pc), .type=MK_TYPE(GLIST)};
static const amed_db_immoff immoff3 = {.datatype=MK_DATATYPE(U16), .default_to=0, .encodedin=5, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem12 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff3, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_immoff immoff4 = {.datatype=MK_DATATYPE(U16), .default_to=0, .encodedin=5, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem13 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff4, .post_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem14 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff4, .pre_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_add add1 = {.type=MK_TYPE(ADD), .value=1};
static const amed_db_base base3 = {.encodedin=19, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(BASE)};
static const amed_db_immoff immoff5 = {.datatype=MK_DATATYPE(U8), .default_to=0, .encodedin=78, .has_encodedin=1, .optional=1, .scale=4, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem15 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff5, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_base base4 = {.type=MK_TYPE(BASE), .value=MK_BASE(SP)};
static const amed_db_immoff immoff6 = {.datatype=MK_DATATYPE(U16), .default_to=0, .encodedin=29, .has_encodedin=1, .optional=1, .scale=4, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem16 = {.add=(void*)&add1, .base=(void*)&base4, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff6, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem17 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff3, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_add add2 = {.type=MK_TYPE(ADD), .value=0};
static const amed_db_immoff immoff7 = {.datatype=MK_DATATYPE(U8), .default_to=0, .encodedin=29, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem18 = {.add=(void*)&add2, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff7, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_add add3 = {.encodedin=80, .has_encodedin=1, .symbol=MK_SYMBOL(ADD), .type=MK_TYPE(ADD)};
static const amed_db_immoff immoff8 = {.datatype=MK_DATATYPE(U8), .default_to=0, .encodedin=29, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem19 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff8, .post_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem20 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff8, .pre_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_lm lm1 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff4, .read=1, .size=(void*)&size0, .type=MK_TYPE(LM)};
static const amed_db_label label8 = {.datatype=MK_DATATYPE(U32), .encodedin=29, .has_encodedin=1, .scale=4, .symbol=MK_SYMBOL(plabel), .type=MK_TYPE(LABEL)};
static const amed_db_immoff immoff9 = {.datatype=MK_DATATYPE(U16), .encodedin=5, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_lm lm2 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff9, .read=1, .size=(void*)&size0, .type=MK_TYPE(LM)};
static const amed_db_base base5 = {.encodedin=3, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(BASE)};
static const amed_db_amount amount2 = {.datatype=MK_DATATYPE(I32), .encodedin=13, .has_encodedin=1, .symbol=MK_SYMBOL(amount), .type=MK_TYPE(AMOUNT)};
static const amed_db_shift shift3 = {.encodedin=15, .has_encodedin=1, .symbol=MK_SYMBOL(shift), .type=MK_TYPE(SHIFT)};
static const amed_db_shifter shifter6 = {.amount=(void*)&amount2, .optional=1, .shift=(void*)&shift3, .type=MK_TYPE(SHIFTER)};
static const amed_db_regoffsh regoffsh0 = {.reg=(void*)&reg9, .shifter=(void*)&shifter6, .type=MK_TYPE(REGOFFSH)};
static const amed_db_mem mem21 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .read=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem22 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem23 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_regoff regoff0 = {.encodedin=25, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REGOFF)};
static const amed_db_mem mem24 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I32), .read=1, .regoff=(void*)&regoff0, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_amount amount3 = {.datatype=MK_DATATYPE(I32), .encodedin=23, .has_encodedin=1, .symbol=MK_SYMBOL(amount), .type=MK_TYPE(AMOUNT)};
static const amed_db_shift shift4 = {.type=MK_TYPE(SHIFT), .value=MK_SHIFT(LSL)};
static const amed_db_shifter shifter7 = {.amount=(void*)&amount3, .optional=1, .shift=(void*)&shift4, .type=MK_TYPE(SHIFTER)};
static const amed_db_regoffsh regoffsh1 = {.reg=(void*)&reg9, .shifter=(void*)&shifter7, .type=MK_TYPE(REGOFFSH)};
static const amed_db_mem mem25 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .read=1, .regoffsh=(void*)&regoffsh1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem26 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff3, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem27 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff4, .post_indexed=1, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem28 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff4, .pre_indexed=1, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_immoff immoff10 = {.datatype=MK_DATATYPE(U8), .default_to=0, .encodedin=78, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem29 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff10, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_reg reg44 = {.encodedin=1, .has_encodedin=1, .nopc=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_mem mem30 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff3, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem31 = {.add=(void*)&add2, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff7, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_reg reg45 = {.encodedin=1, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_mem mem32 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff8, .post_indexed=1, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem33 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff8, .pre_indexed=1, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_lm lm3 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff4, .read=1, .size=(void*)&size1, .type=MK_TYPE(LM)};
static const amed_db_lm lm4 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff9, .read=1, .size=(void*)&size1, .type=MK_TYPE(LM)};
static const amed_db_mem mem34 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I8), .read=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem35 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I8), .post_indexed=1, .read=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem36 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .read=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem37 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I8), .read=1, .regoff=(void*)&regoff0, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem38 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .read=1, .regoffsh=(void*)&regoffsh1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_reg reg46 = {.dpc=1, .encodedin=1, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1, .write=1};
static const amed_db_mem mem39 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff3, .ldacc=MK_LDACC(UNPRIVILEGED), .post_indexed=1, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem40 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .ldacc=MK_LDACC(UNPRIVILEGED), .post_indexed=1, .read=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem41 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff7, .ldacc=MK_LDACC(UNPRIVILEGED), .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_immoff immoff11 = {.datatype=MK_DATATYPE(U8), .default_to=0, .encodedin=82, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem42 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff11, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_immoff immoff12 = {.datatype=MK_DATATYPE(U8), .default_to=0, .encodedin=82, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem43 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff12, .post_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem44 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff12, .pre_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem45 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff6, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_immoff immoff13 = {.datatype=MK_DATATYPE(U16), .default_to=0, .encodedin=29, .has_encodedin=1, .scale=4, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem46 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff13, .post_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem47 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff13, .pre_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_lm lm5 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff12, .read=1, .size=(void*)&size2, .type=MK_TYPE(LM)};
static const amed_db_lm lm6 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff8, .read=1, .size=(void*)&size2, .type=MK_TYPE(LM)};
static const amed_db_regoff regoff1 = {.encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REGOFF), .upc=1};
static const amed_db_mem mem48 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .read=1, .regoff=(void*)&regoff1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem49 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem50 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .regoff=(void*)&regoff1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_immoff immoff14 = {.datatype=MK_DATATYPE(I32), .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem51 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff14, .ldacc=MK_LDACC(ATOMIC), .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_immoff immoff15 = {.datatype=MK_DATATYPE(I32), .has_encodedin=1, .optional=1, .scale=4, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem52 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff15, .ldacc=MK_LDACC(ATOMIC), .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem53 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .ldacc=MK_LDACC(ATOMIC), .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem54 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I64), .ldacc=MK_LDACC(ATOMIC), .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem55 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .ldacc=MK_LDACC(ATOMIC), .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem56 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff11, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem57 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff12, .post_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem58 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff12, .pre_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_immoff immoff16 = {.datatype=MK_DATATYPE(U8), .default_to=0, .encodedin=78, .has_encodedin=1, .optional=1, .scale=2, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMMOFF)};
static const amed_db_mem mem59 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff16, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem60 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff3, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem61 = {.add=(void*)&add2, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff7, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem62 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff8, .post_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem63 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff8, .pre_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_lm lm7 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff12, .read=1, .size=(void*)&size3, .type=MK_TYPE(LM)};
static const amed_db_lm lm8 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff9, .read=1, .size=(void*)&size3, .type=MK_TYPE(LM)};
static const amed_db_mem mem64 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I16), .read=1, .regoff=(void*)&regoff1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem65 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I16), .post_indexed=1, .read=1, .regoff=(void*)&regoff1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem66 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .read=1, .regoff=(void*)&regoff1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem67 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I16), .read=1, .regoff=(void*)&regoff0, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem68 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .read=1, .regoffsh=(void*)&regoffsh1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem69 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff11, .ldacc=MK_LDACC(UNPRIVILEGED), .post_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem70 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .ldacc=MK_LDACC(UNPRIVILEGED), .post_indexed=1, .read=1, .regoff=(void*)&regoff1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem71 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff7, .ldacc=MK_LDACC(UNPRIVILEGED), .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem72 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(S8), .immoff=(void*)&immoff11, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem73 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(S8), .immoff=(void*)&immoff12, .post_indexed=1, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem74 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(S8), .immoff=(void*)&immoff12, .pre_indexed=1, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem75 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(S8), .immoff=(void*)&immoff3, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem76 = {.add=(void*)&add2, .base=(void*)&base1, .datatype=MK_DATATYPE(S8), .immoff=(void*)&immoff7, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem77 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(S8), .immoff=(void*)&immoff8, .post_indexed=1, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem78 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(S8), .immoff=(void*)&immoff8, .pre_indexed=1, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_lm lm9 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(S8), .immoff=(void*)&immoff12, .read=1, .size=(void*)&size1, .type=MK_TYPE(LM)};
static const amed_db_lm lm10 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(S8), .immoff=(void*)&immoff9, .read=1, .size=(void*)&size1, .type=MK_TYPE(LM)};
static const amed_db_mem mem79 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(S8), .read=1, .regoff=(void*)&regoff1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem80 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(S8), .post_indexed=1, .read=1, .regoff=(void*)&regoff1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem81 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(S8), .pre_indexed=1, .read=1, .regoff=(void*)&regoff1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem82 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(S8), .read=1, .regoff=(void*)&regoff0, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem83 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(S8), .read=1, .regoffsh=(void*)&regoffsh1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem84 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(S8), .immoff=(void*)&immoff11, .ldacc=MK_LDACC(UNPRIVILEGED), .post_indexed=1, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem85 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(S8), .ldacc=MK_LDACC(UNPRIVILEGED), .post_indexed=1, .read=1, .regoff=(void*)&regoff1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem86 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(S8), .immoff=(void*)&immoff7, .ldacc=MK_LDACC(UNPRIVILEGED), .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem87 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(S16), .immoff=(void*)&immoff11, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem88 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(S16), .immoff=(void*)&immoff12, .post_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem89 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(S16), .immoff=(void*)&immoff12, .pre_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem90 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(S16), .immoff=(void*)&immoff3, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem91 = {.add=(void*)&add2, .base=(void*)&base1, .datatype=MK_DATATYPE(S16), .immoff=(void*)&immoff7, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem92 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(S16), .immoff=(void*)&immoff8, .post_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem93 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(S16), .immoff=(void*)&immoff8, .pre_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_lm lm11 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(S16), .immoff=(void*)&immoff12, .read=1, .size=(void*)&size3, .type=MK_TYPE(LM)};
static const amed_db_lm lm12 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(S16), .immoff=(void*)&immoff9, .read=1, .size=(void*)&size3, .type=MK_TYPE(LM)};
static const amed_db_mem mem94 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(S16), .read=1, .regoff=(void*)&regoff1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem95 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(S16), .post_indexed=1, .read=1, .regoff=(void*)&regoff1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem96 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(S16), .pre_indexed=1, .read=1, .regoff=(void*)&regoff1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem97 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(S16), .read=1, .regoff=(void*)&regoff0, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem98 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(S16), .read=1, .regoffsh=(void*)&regoffsh1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem99 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(S16), .immoff=(void*)&immoff11, .ldacc=MK_LDACC(UNPRIVILEGED), .post_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem100 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(S16), .ldacc=MK_LDACC(UNPRIVILEGED), .post_indexed=1, .read=1, .regoff=(void*)&regoff1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem101 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(S16), .immoff=(void*)&immoff7, .ldacc=MK_LDACC(UNPRIVILEGED), .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem102 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff3, .ldacc=MK_LDACC(UNPRIVILEGED), .post_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem103 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .ldacc=MK_LDACC(UNPRIVILEGED), .post_indexed=1, .read=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem104 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff7, .ldacc=MK_LDACC(UNPRIVILEGED), .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_pspace pspace1 = {.encodedin=84, .has_encodedin=1, .symbol=MK_SYMBOL(coproc), .table=(void*)&tbl_pspace, .type=MK_TYPE(PSPACE)};
static const amed_db_imm imm18 = {.datatype=MK_DATATYPE(U8), .encodedin=86, .has_encodedin=1, .symbol=MK_SYMBOL(opc1), .type=MK_TYPE(IMM)};
static const amed_db_reg reg47 = {.encodedin=1, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_cspace cspace1 = {.encodedin=3, .has_encodedin=1, .symbol=MK_SYMBOL(CRn), .type=MK_TYPE(CSPACE)};
static const amed_db_cspace cspace2 = {.encodedin=11, .has_encodedin=1, .symbol=MK_SYMBOL(CRm), .type=MK_TYPE(CSPACE)};
static const amed_db_imm imm19 = {.datatype=MK_DATATYPE(U8), .encodedin=62, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(opc2), .type=MK_TYPE(IMM)};
static const amed_db_imm imm20 = {.datatype=MK_DATATYPE(U8), .encodedin=68, .has_encodedin=1, .symbol=MK_SYMBOL(opc1), .type=MK_TYPE(IMM)};
static const amed_db_reg reg48 = {.encodedin=3, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1, .write=1};
static const amed_db_reg reg49 = {.encodedin=7, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_reg reg50 = {.encodedin=1, .has_encodedin=1, .nopc=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg51 = {.dpc=1, .encodedin=1, .has_encodedin=1, .iwb=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg52 = {.dpc=1, .encodedin=1, .erb=1, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_imm imm21 = {.datatype=MK_DATATYPE(U16), .encodedin=88, .has_encodedin=1, .symbol=MK_SYMBOL(imm16), .type=MK_TYPE(IMM)};
static const amed_db_regsh regsh7 = {.reg=(void*)&reg37, .shifter=(void*)&shifter0, .type=MK_TYPE(REGSH)};
static const amed_db_regsh regsh8 = {.reg=(void*)&reg37, .shifter=(void*)&shifter1, .type=MK_TYPE(REGSH)};
static const amed_db_reg reg53 = {.encodedin=31, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_amount amount4 = {.datatype=MK_DATATYPE(U8), .encodedin=78, .has_encodedin=1, .symbol=MK_SYMBOL(amount), .type=MK_TYPE(AMOUNT)};
static const amed_db_shift shift5 = {.encodedin=91, .has_encodedin=1, .symbol=MK_SYMBOL(shift), .table=(void*)&tbl_shift0, .type=MK_TYPE(SHIFT)};
static const amed_db_shifter shifter8 = {.amount=(void*)&amount4, .optional=1, .shift=(void*)&shift5, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh9 = {.reg=(void*)&reg8, .shifter=(void*)&shifter8, .type=MK_TYPE(REGSH)};
static const amed_db_rs rs1 = {.encodedin=19, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(RS)};
static const amed_db_shift shift6 = {.type=MK_TYPE(SHIFT), .value=MK_SHIFT(ASR)};
static const amed_db_shifter shifter9 = {.rs=(void*)&rs1, .shift=(void*)&shift6, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh10 = {.reg=(void*)&reg7, .shifter=(void*)&shifter9, .type=MK_TYPE(REGSH)};
static const amed_db_shifter shifter10 = {.rs=(void*)&rs1, .shift=(void*)&shift4, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh11 = {.reg=(void*)&reg7, .shifter=(void*)&shifter10, .type=MK_TYPE(REGSH)};
static const amed_db_shift shift7 = {.type=MK_TYPE(SHIFT), .value=MK_SHIFT(LSR)};
static const amed_db_shifter shifter11 = {.rs=(void*)&rs1, .shift=(void*)&shift7, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh12 = {.reg=(void*)&reg7, .shifter=(void*)&shifter11, .type=MK_TYPE(REGSH)};
static const amed_db_shift shift8 = {.type=MK_TYPE(SHIFT), .value=MK_SHIFT(ROR)};
static const amed_db_shifter shifter12 = {.rs=(void*)&rs1, .shift=(void*)&shift8, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh13 = {.reg=(void*)&reg7, .shifter=(void*)&shifter12, .type=MK_TYPE(REGSH)};
static const amed_db_rs rs2 = {.encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(RS), .upc=1};
static const amed_db_shift shift9 = {.encodedin=93, .has_encodedin=1, .symbol=MK_SYMBOL(shift), .table=(void*)&tbl_shift1, .type=MK_TYPE(SHIFT)};
static const amed_db_shifter shifter13 = {.rs=(void*)&rs2, .shift=(void*)&shift9, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh14 = {.reg=(void*)&reg4, .shifter=(void*)&shifter13, .type=MK_TYPE(REGSH)};
static const amed_db_specreg specreg0 = {.encodedin=95, .has_encodedin=1, .symbol=MK_SYMBOL(spec_reg), .table=(void*)&tbl_specreg, .type=MK_TYPE(SPECREG)};
static const amed_db_specreg specreg1 = {.encodedin=97, .has_encodedin=1, .symbol=MK_SYMBOL(spec_reg), .table=(void*)&tbl_specreg, .type=MK_TYPE(SPECREG)};
static const amed_db_bnkdreg bnkdreg0 = {.encodedin=99, .has_encodedin=1, .symbol=MK_SYMBOL(banked_reg), .table=(void*)&tbl_bnkdreg, .type=MK_TYPE(BNKDREG)};
static const amed_db_bnkdreg bnkdreg1 = {.encodedin=102, .has_encodedin=1, .symbol=MK_SYMBOL(banked_reg), .table=(void*)&tbl_bnkdreg, .type=MK_TYPE(BNKDREG)};
static const amed_db_bnkdreg bnkdreg2 = {.encodedin=105, .has_encodedin=1, .symbol=MK_SYMBOL(banked_reg), .table=(void*)&tbl_bnkdreg, .type=MK_TYPE(BNKDREG)};
static const amed_db_specreg specreg2 = {.encodedin=3, .has_encodedin=1, .symbol=MK_SYMBOL(spec_reg), .type=MK_TYPE(SPECREG)};
static const amed_db_imm imm22 = {.datatype=MK_DATATYPE(I32), .has_encodedin=1, .symbol=MK_SYMBOL(aimm), .type=MK_TYPE(IMM)};
static const amed_db_specreg specreg3 = {.encodedin=7, .has_encodedin=1, .symbol=MK_SYMBOL(spec_reg), .type=MK_TYPE(SPECREG)};
static const amed_db_reg reg54 = {.encodedin=7, .has_encodedin=1, .optional=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_reg reg55 = {.encodedin=11, .has_encodedin=1, .optional=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_shifter shifter14 = {.amount=(void*)&amount2, .optional=1, .shift=(void*)&shift4, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh15 = {.reg=(void*)&reg9, .shifter=(void*)&shifter14, .type=MK_TYPE(REGSH)};
static const amed_db_shifter shifter15 = {.amount=(void*)&amount2, .optional=1, .shift=(void*)&shift6, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh16 = {.reg=(void*)&reg9, .shifter=(void*)&shifter15, .type=MK_TYPE(REGSH)};
static const amed_db_amount amount5 = {.datatype=MK_DATATYPE(I32), .encodedin=21, .has_encodedin=1, .symbol=MK_SYMBOL(amount), .type=MK_TYPE(AMOUNT)};
static const amed_db_shifter shifter16 = {.amount=(void*)&amount5, .optional=1, .shift=(void*)&shift4, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh17 = {.reg=(void*)&reg9, .shifter=(void*)&shifter16, .type=MK_TYPE(REGSH)};
static const amed_db_shifter shifter17 = {.amount=(void*)&amount5, .optional=1, .shift=(void*)&shift6, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh18 = {.reg=(void*)&reg9, .shifter=(void*)&shifter17, .type=MK_TYPE(REGSH)};
static const amed_db_regoffsh regoffsh2 = {.reg=(void*)&reg9, .shifter=(void*)&shifter1, .type=MK_TYPE(REGOFFSH)};
static const amed_db_mem mem105 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .read=1, .regoffsh=(void*)&regoffsh2, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_regoffsh regoffsh3 = {.reg=(void*)&reg9, .shifter=(void*)&shifter0, .type=MK_TYPE(REGOFFSH)};
static const amed_db_mem mem106 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .read=1, .regoffsh=(void*)&regoffsh3, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_amount amount6 = {.datatype=MK_DATATYPE(U8), .default_to=0, .encodedin=23, .has_encodedin=1, .symbol=MK_SYMBOL(amount), .type=MK_TYPE(AMOUNT)};
static const amed_db_shifter shifter18 = {.amount=(void*)&amount6, .optional=1, .shift=(void*)&shift4, .type=MK_TYPE(SHIFTER)};
static const amed_db_regoffsh regoffsh4 = {.reg=(void*)&reg9, .shifter=(void*)&shifter18, .type=MK_TYPE(REGOFFSH)};
static const amed_db_mem mem107 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .read=1, .regoffsh=(void*)&regoffsh4, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_lm lm13 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff3, .read=1, .size=(void*)&size0, .type=MK_TYPE(LM)};
static const amed_db_glist glist5 = {.default_to=0, .encodedin=29, .has_encodedin=1, .symbol=MK_SYMBOL(registers), .type=MK_TYPE(GLIST)};
static const amed_db_wback wback2 = {.type=MK_TYPE(WBACK), .value=1};
static const amed_db_wreg wreg2 = {.reg=(void*)&reg25, .type=MK_TYPE(WREG), .wback=(void*)&wback2};
static const amed_db_imm imm23 = {.datatype=MK_DATATYPE(U8), .type=MK_TYPE(IMM), .value=0};
static const amed_db_reg reg56 = {.encodedin=3, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1, .write=1};
static const amed_db_endian endian0 = {.encodedin=80, .has_encodedin=1, .symbol=MK_SYMBOL(endian_specifier), .table=(void*)&tbl_endian, .type=MK_TYPE(ENDIAN)};
static const amed_db_endian endian1 = {.encodedin=108, .has_encodedin=1, .symbol=MK_SYMBOL(endian_specifier), .table=(void*)&tbl_endian, .type=MK_TYPE(ENDIAN)};
static const amed_db_imm imm24 = {.datatype=MK_DATATYPE(I32), .encodedin=80, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm25 = {.datatype=MK_DATATYPE(I32), .encodedin=108, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm26 = {.datatype=MK_DATATYPE(U8), .encodedin=11, .has_encodedin=1, .symbol=MK_SYMBOL(imm4), .type=MK_TYPE(IMM)};
static const amed_db_imm imm27 = {.datatype=MK_DATATYPE(U8), .encodedin=3, .has_encodedin=1, .symbol=MK_SYMBOL(imm4), .type=MK_TYPE(IMM)};
static const amed_db_wreg wreg3 = {.reg=(void*)&reg25, .type=MK_TYPE(WREG), .wback=(void*)&wback0};
static const amed_db_imm imm28 = {.datatype=MK_DATATYPE(I32), .encodedin=50, .has_encodedin=1, .symbol=MK_SYMBOL(mode), .type=MK_TYPE(IMM)};
static const amed_db_imm imm29 = {.datatype=MK_DATATYPE(U8), .encodedin=48, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_shifter shifter19 = {.amount=(void*)&amount0, .shift=(void*)&shift6, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh19 = {.reg=(void*)&reg9, .shifter=(void*)&shifter19, .type=MK_TYPE(REGSH)};
static const amed_db_amount amount7 = {.datatype=MK_DATATYPE(U8), .default_to=0, .encodedin=13, .has_encodedin=1, .symbol=MK_SYMBOL(amount), .type=MK_TYPE(AMOUNT)};
static const amed_db_shifter shifter20 = {.amount=(void*)&amount7, .optional=1, .shift=(void*)&shift4, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh20 = {.reg=(void*)&reg9, .shifter=(void*)&shifter20, .type=MK_TYPE(REGSH)};
static const amed_db_imm imm30 = {.datatype=MK_DATATYPE(U8), .encodedin=50, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_shifter shifter21 = {.amount=(void*)&amount1, .shift=(void*)&shift6, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh21 = {.reg=(void*)&reg4, .shifter=(void*)&shifter21, .type=MK_TYPE(REGSH)};
static const amed_db_amount amount8 = {.datatype=MK_DATATYPE(U8), .default_to=0, .encodedin=21, .has_encodedin=1, .symbol=MK_SYMBOL(amount), .type=MK_TYPE(AMOUNT)};
static const amed_db_shifter shifter22 = {.amount=(void*)&amount8, .optional=1, .shift=(void*)&shift4, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh22 = {.reg=(void*)&reg4, .shifter=(void*)&shifter22, .type=MK_TYPE(REGSH)};
static const amed_db_imm imm31 = {.datatype=MK_DATATYPE(U8), .encodedin=3, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm32 = {.datatype=MK_DATATYPE(U8), .encodedin=11, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_base base6 = {.dpc=1, .encodedin=3, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(BASE)};
static const amed_db_mem mem108 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff0, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem109 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff1, .post_indexed=1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem110 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff1, .pre_indexed=1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem111 = {.base=(void*)&base6, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff2, .post_indexed=1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem112 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff0, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem113 = {.base=(void*)&base5, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff2, .post_indexed=1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem114 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .size=(void*)&size0, .stacc=MK_STACC(RELEASE), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem115 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size1, .stacc=MK_STACC(RELEASE), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem116 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .size=(void*)&size0, .stacc=MK_STACC(ATOMIC_RELEASE), .type=MK_TYPE(MEM), .write=1};
static const amed_db_reg reg57 = {.encodedin=11, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1, .write=1};
static const amed_db_mem mem117 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size1, .stacc=MK_STACC(ATOMIC_RELEASE), .type=MK_TYPE(MEM), .write=1};
static const amed_db_reg reg58 = {.encodedin=11, .even=1, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg59 = {.encodedin=11, .has_encodedin=1, .pair=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_mem mem118 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I64), .size=(void*)&size2, .stacc=MK_STACC(ATOMIC_RELEASE), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem119 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size3, .stacc=MK_STACC(ATOMIC_RELEASE), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem120 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size3, .stacc=MK_STACC(RELEASE), .type=MK_TYPE(MEM), .write=1};
static const amed_db_wreg wreg4 = {.reg=(void*)&reg40, .type=MK_TYPE(WREG), .wback=(void*)&wback2};
static const amed_db_reg reg60 = {.dpc=1, .encodedin=1, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_mem mem121 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff3, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem122 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff4, .post_indexed=1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem123 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff4, .pre_indexed=1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem124 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff5, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem125 = {.add=(void*)&add1, .base=(void*)&base4, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff6, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem126 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff3, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem127 = {.add=(void*)&add2, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff7, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem128 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff8, .post_indexed=1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem129 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff8, .pre_indexed=1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem130 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .regoffsh=(void*)&regoffsh0, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem131 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .post_indexed=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem132 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem133 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I32), .regoff=(void*)&regoff0, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem134 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .regoffsh=(void*)&regoffsh1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem135 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff3, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem136 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff4, .post_indexed=1, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem137 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff4, .pre_indexed=1, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem138 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff10, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem139 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff3, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem140 = {.add=(void*)&add2, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff7, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem141 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff8, .post_indexed=1, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem142 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff8, .pre_indexed=1, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem143 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I8), .regoffsh=(void*)&regoffsh0, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem144 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I8), .post_indexed=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem145 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem146 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I8), .regoff=(void*)&regoff0, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem147 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .regoffsh=(void*)&regoffsh1, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_reg reg61 = {.dpc=1, .encodedin=1, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_mem mem148 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff3, .post_indexed=1, .size=(void*)&size1, .stacc=MK_STACC(UNPRIVILEGED), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem149 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size1, .stacc=MK_STACC(UNPRIVILEGED), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem150 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I8), .immoff=(void*)&immoff7, .size=(void*)&size1, .stacc=MK_STACC(UNPRIVILEGED), .type=MK_TYPE(MEM), .write=1};
static const amed_db_reg reg62 = {.encodedin=1, .even=1, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_reg reg63 = {.encodedin=1, .has_encodedin=1, .pair=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_mem mem151 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff11, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem152 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff12, .post_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem153 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff12, .pre_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_base base7 = {.encodedin=3, .has_encodedin=1, .nopc=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(BASE), .upc=1};
static const amed_db_mem mem154 = {.add=(void*)&add0, .base=(void*)&base7, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff6, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem155 = {.add=(void*)&add0, .base=(void*)&base7, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff13, .post_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem156 = {.add=(void*)&add0, .base=(void*)&base7, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff13, .pre_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem157 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .regoff=(void*)&regoff1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem158 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .post_indexed=1, .regoff=(void*)&regoff1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem159 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .regoff=(void*)&regoff1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem160 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff14, .size=(void*)&size0, .stacc=MK_STACC(ATOMIC), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem161 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff15, .size=(void*)&size0, .stacc=MK_STACC(ATOMIC), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem162 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size1, .stacc=MK_STACC(ATOMIC), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem163 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I64), .size=(void*)&size2, .stacc=MK_STACC(ATOMIC), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem164 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size3, .stacc=MK_STACC(ATOMIC), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem165 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff11, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem166 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff12, .post_indexed=1, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem167 = {.add=(void*)&add0, .base=(void*)&base5, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff12, .pre_indexed=1, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem168 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff16, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem169 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff3, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem170 = {.add=(void*)&add2, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff7, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem171 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff8, .post_indexed=1, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem172 = {.add=(void*)&add3, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff8, .pre_indexed=1, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem173 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I16), .regoff=(void*)&regoff1, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem174 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I16), .post_indexed=1, .regoff=(void*)&regoff1, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem175 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .regoff=(void*)&regoff1, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem176 = {.add=(void*)&add1, .base=(void*)&base3, .datatype=MK_DATATYPE(I16), .regoff=(void*)&regoff0, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem177 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .regoffsh=(void*)&regoffsh1, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem178 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff11, .post_indexed=1, .size=(void*)&size3, .stacc=MK_STACC(UNPRIVILEGED), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem179 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .regoff=(void*)&regoff1, .size=(void*)&size3, .stacc=MK_STACC(UNPRIVILEGED), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem180 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I16), .immoff=(void*)&immoff7, .size=(void*)&size3, .stacc=MK_STACC(UNPRIVILEGED), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem181 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff3, .post_indexed=1, .size=(void*)&size0, .stacc=MK_STACC(UNPRIVILEGED), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem182 = {.add=(void*)&add0, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .regoffsh=(void*)&regoffsh0, .size=(void*)&size0, .stacc=MK_STACC(UNPRIVILEGED), .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem183 = {.add=(void*)&add1, .base=(void*)&base1, .datatype=MK_DATATYPE(I32), .immoff=(void*)&immoff7, .size=(void*)&size0, .stacc=MK_STACC(UNPRIVILEGED), .type=MK_TYPE(MEM), .write=1};
static const amed_db_reg reg64 = {.type=MK_TYPE(REG), .value=MK_REG(PC)};
static const amed_db_reg reg65 = {.type=MK_TYPE(REG), .value=MK_REG(LR)};
static const amed_db_reg reg66 = {.dpc=1, .encodedin=3, .has_encodedin=1, .nosp=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_imm imm33 = {.datatype=MK_DATATYPE(U32), .encodedin=37, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_amount amount9 = {.datatype=MK_DATATYPE(I32), .encodedin=110, .has_encodedin=1, .symbol=MK_SYMBOL(amount), .table=(void*)&tbl_imm0, .type=MK_TYPE(AMOUNT)};
static const amed_db_shifter shifter23 = {.amount=(void*)&amount9, .optional=1, .shift=(void*)&shift8, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh23 = {.reg=(void*)&reg9, .shifter=(void*)&shifter23, .type=MK_TYPE(REGSH)};
static const amed_db_amount amount10 = {.datatype=MK_DATATYPE(I32), .encodedin=23, .has_encodedin=1, .symbol=MK_SYMBOL(amount), .table=(void*)&tbl_imm0, .type=MK_TYPE(AMOUNT)};
static const amed_db_shifter shifter24 = {.amount=(void*)&amount10, .optional=1, .shift=(void*)&shift8, .type=MK_TYPE(SHIFTER)};
static const amed_db_regsh regsh24 = {.reg=(void*)&reg9, .shifter=(void*)&shifter24, .type=MK_TYPE(REGSH)};
static const amed_db_mem mem184 = {.base=(void*)&base5, .datatype=MK_DATATYPE(I8), .read=1, .regoff=(void*)&regoff1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_amount amount11 = {.datatype=MK_DATATYPE(U8), .type=MK_TYPE(AMOUNT), .value=1};
static const amed_db_shifter shifter25 = {.amount=(void*)&amount11, .shift=(void*)&shift4, .type=MK_TYPE(SHIFTER)};
static const amed_db_regoffsh regoffsh5 = {.reg=(void*)&reg9, .shifter=(void*)&shifter25, .type=MK_TYPE(REGOFFSH)};
static const amed_db_mem mem185 = {.base=(void*)&base5, .datatype=MK_DATATYPE(I16), .read=1, .regoffsh=(void*)&regoffsh5, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_sync_op sync_op0 = {.type=MK_TYPE(SYNC_OP), .value=MK_SYNC_OP(CSYNC)};
static const amed_db_imm imm34 = {.datatype=MK_DATATYPE(U16), .encodedin=66, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm35 = {.datatype=MK_DATATYPE(U8), .encodedin=13, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm36 = {.datatype=MK_DATATYPE(U8), .encodedin=78, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm37 = {.datatype=MK_DATATYPE(U8), .encodedin=21, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_reg reg67 = {.dpc=1, .encodedin=1, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .write=1};
static const amed_db_slist slist0 = {.encodedin=1, .has_encodedin=1, .symbol=MK_SYMBOL(single_register_list), .type=MK_TYPE(SLIST)};
static const amed_db_sz sz0 = {.type=MK_TYPE(SZ), .value=8};
static const amed_db_reg reg68 = {.datatype=MK_DATATYPE(I8), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg69 = {.datatype=MK_DATATYPE(I8), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG)};
static const amed_db_reg reg70 = {.encodedin=3, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG)};
static const amed_db_wreg wreg5 = {.reg=(void*)&reg70, .type=MK_TYPE(WREG), .wback=(void*)&wback2};
static const amed_db_base base8 = {.encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(BASE)};
static const amed_db_count count0 = {.encodedin=29, .has_encodedin=1, .symbol=MK_SYMBOL(count), .type=MK_TYPE(COUNT)};
static const amed_db_fdlist fdlist0 = {.base=(void*)&base8, .count=(void*)&count0, .type=MK_TYPE(FDLIST)};
static const amed_db_wback wback3 = {.encodedin=72, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(wback), .type=MK_TYPE(WBACK)};
static const amed_db_wreg wreg6 = {.reg=(void*)&reg70, .type=MK_TYPE(WREG), .wback=(void*)&wback3};
static const amed_db_sz sz1 = {.type=MK_TYPE(SZ), .value=32};
static const amed_db_vreg vreg0 = {.datatype=MK_DATATYPE(I32), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg1 = {.datatype=MK_DATATYPE(I32), .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg2 = {.datatype=MK_DATATYPE(I32), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_reg reg71 = {.datatype=MK_DATATYPE(I32), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg72 = {.datatype=MK_DATATYPE(I32), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG)};
static const amed_db_reg reg73 = {.datatype=MK_DATATYPE(I32), .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG)};
static const amed_db_count count1 = {.type=MK_TYPE(COUNT), .value=4};
static const amed_db_idx idx0 = {.encodedin=119, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg74 = {.datatype=MK_DATATYPE(I32), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_ebase ebase0 = {.idx=(void*)&idx0, .reg=(void*)&reg74, .type=MK_TYPE(EBASE)};
static const amed_db_inc inc0 = {.encodedin=121, .has_encodedin=1, .symbol=MK_SYMBOL(INC), .table=(void*)&tbl_inc, .type=MK_TYPE(INC)};
static const amed_db_elist elist0 = {.count=(void*)&count1, .ebase=(void*)&ebase0, .inc=(void*)&inc0, .type=MK_TYPE(ELIST)};
static const amed_db_align align0 = {.encodedin=23, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(align), .table=(void*)&tbl_align1, .type=MK_TYPE(ALIGN)};
static const amed_db_size size4 = {.size=128};
static const amed_db_mem mem186 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_vreg vreg3 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg4 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg5 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg6 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg7 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg8 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg9 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg10 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg11 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg12 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg13 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg14 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg15 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg16 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg17 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg18 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg19 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg20 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg21 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg22 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg23 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg24 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg25 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg26 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg27 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg28 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg29 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg30 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg31 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg32 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg33 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg34 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg35 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg36 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg37 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg38 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg39 = {.datatype=MK_DATATYPE(I16), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg40 = {.datatype=MK_DATATYPE(I64), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg41 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg42 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg43 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg44 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg45 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg46 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg47 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg48 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg49 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg50 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg51 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg52 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg53 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg54 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg55 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg56 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg57 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg58 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg59 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg60 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg61 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg62 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg63 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg64 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg65 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg66 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg67 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg68 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_reg reg75 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=123, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg76 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=126, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG)};
static const amed_db_reg reg77 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=123, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg78 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=126, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG)};
static const amed_db_reg reg79 = {.datatype=MK_DATATYPE(F64), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg80 = {.datatype=MK_DATATYPE(F64), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_reg reg81 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=123, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg82 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=129, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG)};
static const amed_db_reg reg83 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=123, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg84 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=129, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG)};
static const amed_db_reg reg85 = {.datatype=MK_DATATYPE(F64), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg86 = {.datatype=MK_DATATYPE(F64), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_vreg vreg69 = {.datatype=MK_DATATYPE(I8), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg70 = {.datatype=MK_DATATYPE(I8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg71 = {.datatype=MK_DATATYPE(I8), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg72 = {.datatype=MK_DATATYPE(I16), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg73 = {.datatype=MK_DATATYPE(I16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg74 = {.datatype=MK_DATATYPE(I16), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg75 = {.datatype=MK_DATATYPE(I32), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg76 = {.datatype=MK_DATATYPE(I32), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg77 = {.datatype=MK_DATATYPE(I32), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg78 = {.datatype=MK_DATATYPE(I64), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg79 = {.datatype=MK_DATATYPE(I64), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg80 = {.datatype=MK_DATATYPE(I64), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg81 = {.datatype=MK_DATATYPE(I8), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg82 = {.datatype=MK_DATATYPE(I8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg83 = {.datatype=MK_DATATYPE(I8), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg84 = {.datatype=MK_DATATYPE(I16), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg85 = {.datatype=MK_DATATYPE(I16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg86 = {.datatype=MK_DATATYPE(I16), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg87 = {.datatype=MK_DATATYPE(I32), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg88 = {.datatype=MK_DATATYPE(I32), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg89 = {.datatype=MK_DATATYPE(I32), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg90 = {.datatype=MK_DATATYPE(I64), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg91 = {.datatype=MK_DATATYPE(I64), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg92 = {.datatype=MK_DATATYPE(I64), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg93 = {.datatype=MK_DATATYPE(I8), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg94 = {.datatype=MK_DATATYPE(I16), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg95 = {.datatype=MK_DATATYPE(I32), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg96 = {.datatype=MK_DATATYPE(I16), .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg97 = {.datatype=MK_DATATYPE(I16), .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg98 = {.datatype=MK_DATATYPE(I32), .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg99 = {.datatype=MK_DATATYPE(I64), .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg100 = {.datatype=MK_DATATYPE(I64), .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg101 = {.datatype=MK_DATATYPE(I64), .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg102 = {.datatype=MK_DATATYPE(I64), .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg103 = {.datatype=MK_DATATYPE(I64), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg104 = {.datatype=MK_DATATYPE(I64), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg105 = {.datatype=MK_DATATYPE(I32), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_imm imm38 = {.datatype=MK_DATATYPE(I32), .dt_required=1, .encodedin=131, .has_encodedin=1, .symbol=MK_SYMBOL(advimm), .type=MK_TYPE(IMM)};
static const amed_db_vreg vreg106 = {.datatype=MK_DATATYPE(I32), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg107 = {.datatype=MK_DATATYPE(I16), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_imm imm39 = {.datatype=MK_DATATYPE(I16), .dt_required=1, .encodedin=131, .has_encodedin=1, .symbol=MK_SYMBOL(advimm), .type=MK_TYPE(IMM)};
static const amed_db_vreg vreg108 = {.datatype=MK_DATATYPE(I16), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_imm imm40 = {.datatype=MK_DATATYPE(I32), .dt_required=1, .encodedin=135, .has_encodedin=1, .symbol=MK_SYMBOL(advimm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm41 = {.datatype=MK_DATATYPE(I16), .dt_required=1, .encodedin=135, .has_encodedin=1, .symbol=MK_SYMBOL(advimm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm42 = {.datatype=MK_DATATYPE(I64), .encodedin=139, .has_encodedin=1, .symbol=MK_SYMBOL(rotate), .table=(void*)&tbl_imm2, .type=MK_TYPE(IMM)};
static const amed_db_imm imm43 = {.datatype=MK_DATATYPE(I128), .encodedin=139, .has_encodedin=1, .symbol=MK_SYMBOL(rotate), .table=(void*)&tbl_imm2, .type=MK_TYPE(IMM)};
static const amed_db_vreg vreg109 = {.datatype=MK_DATATYPE(I8), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg110 = {.datatype=MK_DATATYPE(I8), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_imm imm44 = {.datatype=MK_DATATYPE(I64), .encodedin=141, .has_encodedin=1, .symbol=MK_SYMBOL(rotate), .table=(void*)&tbl_imm1, .type=MK_TYPE(IMM)};
static const amed_db_imm imm45 = {.datatype=MK_DATATYPE(I128), .encodedin=141, .has_encodedin=1, .symbol=MK_SYMBOL(rotate), .table=(void*)&tbl_imm1, .type=MK_TYPE(IMM)};
static const amed_db_idx idx1 = {.encodedin=143, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg87 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg0 = {.idx=(void*)&idx1, .reg=(void*)&reg87, .type=MK_TYPE(EREG)};
static const amed_db_imm imm46 = {.datatype=MK_DATATYPE(I64), .encodedin=145, .has_encodedin=1, .symbol=MK_SYMBOL(rotate), .table=(void*)&tbl_imm1, .type=MK_TYPE(IMM)};
static const amed_db_idx idx2 = {.type=MK_TYPE(IDX), .value=0};
static const amed_db_reg reg88 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg1 = {.idx=(void*)&idx2, .reg=(void*)&reg88, .type=MK_TYPE(EREG)};
static const amed_db_fpimm fpimm0 = {.datatype=MK_DATATYPE(F32), .fpvalue=0.0, .type=MK_TYPE(FPIMM)};
static const amed_db_vreg vreg111 = {.datatype=MK_DATATYPE(I8), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg112 = {.datatype=MK_DATATYPE(I8), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg113 = {.datatype=MK_DATATYPE(I8), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg114 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_reg reg89 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=123, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg90 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=123, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg91 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=126, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG)};
static const amed_db_reg reg92 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=126, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG)};
static const amed_db_imm imm47 = {.arg0=64, .datatype=MK_DATATYPE(U8), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(fbits_right), .type=MK_TYPE(IMM)};
static const amed_db_reg reg93 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=123, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg94 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=123, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_imm imm48 = {.arg0=16, .datatype=MK_DATATYPE(U8), .encodedin=126, .has_encodedin=1, .symbol=MK_SYMBOL(fbits_right), .type=MK_TYPE(IMM)};
static const amed_db_reg reg95 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=123, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_imm imm49 = {.arg0=32, .datatype=MK_DATATYPE(U8), .encodedin=126, .has_encodedin=1, .symbol=MK_SYMBOL(fbits_right), .type=MK_TYPE(IMM)};
static const amed_db_reg reg96 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=123, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg97 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=123, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg98 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=123, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg99 = {.datatype=MK_DATATYPE(F64), .dt_required=1, .encodedin=112, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg100 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=112, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg101 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=112, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg102 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=112, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg103 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=112, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg104 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=123, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_vreg vreg115 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg116 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg117 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg118 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg119 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_reg reg105 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg2 = {.idx=(void*)&idx1, .reg=(void*)&reg105, .type=MK_TYPE(EREG)};
static const amed_db_vreg vreg120 = {.datatype=MK_DATATYPE(I8), .encodedin=116, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_sz sz2 = {.type=MK_TYPE(SZ), .value=16};
static const amed_db_vreg vreg121 = {.datatype=MK_DATATYPE(I16), .encodedin=116, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg122 = {.datatype=MK_DATATYPE(I32), .encodedin=116, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg123 = {.datatype=MK_DATATYPE(I8), .encodedin=116, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg124 = {.datatype=MK_DATATYPE(I16), .encodedin=116, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg125 = {.datatype=MK_DATATYPE(I32), .encodedin=116, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_idx idx3 = {.encodedin=149, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg106 = {.datatype=MK_DATATYPE(I8), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg3 = {.idx=(void*)&idx3, .reg=(void*)&reg106, .type=MK_TYPE(EREG)};
static const amed_db_idx idx4 = {.encodedin=151, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg107 = {.datatype=MK_DATATYPE(I16), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg4 = {.idx=(void*)&idx4, .reg=(void*)&reg107, .type=MK_TYPE(EREG)};
static const amed_db_idx idx5 = {.encodedin=153, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg108 = {.datatype=MK_DATATYPE(I32), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg5 = {.idx=(void*)&idx5, .reg=(void*)&reg108, .type=MK_TYPE(EREG)};
static const amed_db_vreg vreg126 = {.datatype=MK_DATATYPE(I8), .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg127 = {.datatype=MK_DATATYPE(I8), .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_imm imm50 = {.datatype=MK_DATATYPE(U8), .encodedin=7, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_vreg vreg128 = {.datatype=MK_DATATYPE(I8), .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg129 = {.datatype=MK_DATATYPE(I8), .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg130 = {.datatype=MK_DATATYPE(F32), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_idx idx6 = {.encodedin=155, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg109 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=17, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg6 = {.idx=(void*)&idx6, .reg=(void*)&reg109, .type=MK_TYPE(EREG)};
static const amed_db_vreg vreg131 = {.datatype=MK_DATATYPE(F32), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg132 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=129, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg133 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=126, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(VREG)};
static const amed_db_idx idx7 = {.encodedin=108, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg110 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=157, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg7 = {.idx=(void*)&idx7, .reg=(void*)&reg110, .type=MK_TYPE(EREG)};
static const amed_db_reg reg111 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=17, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg8 = {.idx=(void*)&idx6, .reg=(void*)&reg111, .type=MK_TYPE(EREG)};
static const amed_db_count count2 = {.type=MK_TYPE(COUNT), .value=1};
static const amed_db_idx idx8 = {.encodedin=62, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg112 = {.datatype=MK_DATATYPE(I8), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_ebase ebase1 = {.idx=(void*)&idx8, .reg=(void*)&reg112, .type=MK_TYPE(EBASE)};
static const amed_db_inc inc1 = {.type=MK_TYPE(INC), .value=1};
static const amed_db_elist elist1 = {.count=(void*)&count2, .ebase=(void*)&ebase1, .inc=(void*)&inc1, .type=MK_TYPE(ELIST)};
static const amed_db_align align1 = {.encodedin=160, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(align), .table=(void*)&tbl_align3, .type=MK_TYPE(ALIGN)};
static const amed_db_mem mem187 = {.align=(void*)&align1, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_mem mem188 = {.align=(void*)&align1, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .read=1, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_regoff regoff2 = {.encodedin=11, .has_encodedin=1, .nopc=1, .nosp=1, .read=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REGOFF)};
static const amed_db_mem mem189 = {.align=(void*)&align1, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size1, .type=MK_TYPE(MEM)};
static const amed_db_idx idx9 = {.encodedin=162, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg113 = {.datatype=MK_DATATYPE(I16), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_ebase ebase2 = {.idx=(void*)&idx9, .reg=(void*)&reg113, .type=MK_TYPE(EBASE)};
static const amed_db_elist elist2 = {.count=(void*)&count2, .ebase=(void*)&ebase2, .inc=(void*)&inc1, .type=MK_TYPE(ELIST)};
static const amed_db_align align2 = {.encodedin=23, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(align), .table=(void*)&tbl_align4, .type=MK_TYPE(ALIGN)};
static const amed_db_mem mem190 = {.align=(void*)&align2, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem191 = {.align=(void*)&align2, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem192 = {.align=(void*)&align2, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_elist elist3 = {.count=(void*)&count2, .ebase=(void*)&ebase0, .inc=(void*)&inc1, .type=MK_TYPE(ELIST)};
static const amed_db_align align3 = {.encodedin=164, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(align), .table=(void*)&tbl_align5, .type=MK_TYPE(ALIGN)};
static const amed_db_mem mem193 = {.align=(void*)&align3, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem194 = {.align=(void*)&align3, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem195 = {.align=(void*)&align3, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_base base9 = {.datatype=MK_DATATYPE(I8), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(BASE), .write=1};
static const amed_db_vlist vlist0 = {.base=(void*)&base9, .count=(void*)&count2, .empty_index=1, .inc=(void*)&inc1, .type=MK_TYPE(VLIST)};
static const amed_db_count count3 = {.type=MK_TYPE(COUNT), .value=2};
static const amed_db_vlist vlist1 = {.base=(void*)&base9, .count=(void*)&count3, .empty_index=1, .inc=(void*)&inc1, .type=MK_TYPE(VLIST)};
static const amed_db_base base10 = {.datatype=MK_DATATYPE(I16), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(BASE), .write=1};
static const amed_db_vlist vlist2 = {.base=(void*)&base10, .count=(void*)&count2, .empty_index=1, .inc=(void*)&inc1, .type=MK_TYPE(VLIST)};
static const amed_db_align align4 = {.encodedin=160, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(align), .table=(void*)&tbl_align6, .type=MK_TYPE(ALIGN)};
static const amed_db_mem mem196 = {.align=(void*)&align4, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist3 = {.base=(void*)&base10, .count=(void*)&count3, .empty_index=1, .inc=(void*)&inc1, .type=MK_TYPE(VLIST)};
static const amed_db_base base11 = {.datatype=MK_DATATYPE(I32), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(BASE), .write=1};
static const amed_db_vlist vlist4 = {.base=(void*)&base11, .count=(void*)&count2, .empty_index=1, .inc=(void*)&inc1, .type=MK_TYPE(VLIST)};
static const amed_db_align align5 = {.encodedin=160, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(align), .table=(void*)&tbl_align7, .type=MK_TYPE(ALIGN)};
static const amed_db_mem mem197 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist5 = {.base=(void*)&base11, .count=(void*)&count3, .empty_index=1, .inc=(void*)&inc1, .type=MK_TYPE(VLIST)};
static const amed_db_mem mem198 = {.align=(void*)&align4, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem199 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem200 = {.align=(void*)&align4, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem201 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_vbase vbase0 = {.datatype=MK_DATATYPE(I8), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VBASE), .write=1};
static const amed_db_vlist vlist6 = {.count=(void*)&count2, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase0};
static const amed_db_align align6 = {.encodedin=23, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(align), .table=(void*)&tbl_align, .type=MK_TYPE(ALIGN)};
static const amed_db_mem mem202 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_vbase vbase1 = {.datatype=MK_DATATYPE(I16), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VBASE), .write=1};
static const amed_db_vlist vlist7 = {.count=(void*)&count2, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase1};
static const amed_db_mem mem203 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_vbase vbase2 = {.datatype=MK_DATATYPE(I32), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VBASE), .write=1};
static const amed_db_vlist vlist8 = {.count=(void*)&count2, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase2};
static const amed_db_mem mem204 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_sz sz3 = {.type=MK_TYPE(SZ), .value=64};
static const amed_db_vbase vbase3 = {.datatype=MK_DATATYPE(I64), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VBASE), .write=1};
static const amed_db_vlist vlist9 = {.count=(void*)&count2, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase3};
static const amed_db_mem mem205 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem206 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem207 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem208 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem209 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .pre_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem210 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem211 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem212 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem213 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist10 = {.count=(void*)&count3, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase0};
static const amed_db_mem mem214 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist11 = {.count=(void*)&count3, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase1};
static const amed_db_mem mem215 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist12 = {.count=(void*)&count3, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase2};
static const amed_db_mem mem216 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist13 = {.count=(void*)&count3, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase3};
static const amed_db_mem mem217 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem218 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem219 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem220 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem221 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .pre_indexed=1, .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem222 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem223 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem224 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem225 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_count count4 = {.type=MK_TYPE(COUNT), .value=3};
static const amed_db_vlist vlist14 = {.count=(void*)&count4, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase0};
static const amed_db_size size5 = {.size=192};
static const amed_db_mem mem226 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .read=1, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist15 = {.count=(void*)&count4, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase1};
static const amed_db_mem mem227 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .read=1, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist16 = {.count=(void*)&count4, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase2};
static const amed_db_mem mem228 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .read=1, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist17 = {.count=(void*)&count4, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase3};
static const amed_db_mem mem229 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .read=1, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_mem mem230 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .read=1, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_mem mem231 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .read=1, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_mem mem232 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_mem mem233 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .pre_indexed=1, .read=1, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_mem mem234 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_mem mem235 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_mem mem236 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_mem mem237 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size5, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist18 = {.count=(void*)&count1, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase0};
static const amed_db_align align7 = {.encodedin=23, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(align), .table=(void*)&tbl_align2, .type=MK_TYPE(ALIGN)};
static const amed_db_size size6 = {.size=256};
static const amed_db_mem mem238 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .read=1, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist19 = {.count=(void*)&count1, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase1};
static const amed_db_mem mem239 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .read=1, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist20 = {.count=(void*)&count1, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase2};
static const amed_db_mem mem240 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .read=1, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist21 = {.count=(void*)&count1, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase3};
static const amed_db_mem mem241 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .read=1, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_mem mem242 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .read=1, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_mem mem243 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .read=1, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_mem mem244 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_mem mem245 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .pre_indexed=1, .read=1, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_mem mem246 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_mem mem247 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_mem mem248 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_mem mem249 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size6, .type=MK_TYPE(MEM)};
static const amed_db_elist elist4 = {.count=(void*)&count3, .ebase=(void*)&ebase1, .inc=(void*)&inc1, .type=MK_TYPE(ELIST)};
static const amed_db_mem mem250 = {.align=(void*)&align4, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem251 = {.align=(void*)&align4, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_mem mem252 = {.align=(void*)&align4, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_inc inc2 = {.encodedin=143, .has_encodedin=1, .symbol=MK_SYMBOL(INC), .table=(void*)&tbl_inc, .type=MK_TYPE(INC)};
static const amed_db_elist elist5 = {.count=(void*)&count3, .ebase=(void*)&ebase2, .inc=(void*)&inc2, .type=MK_TYPE(ELIST)};
static const amed_db_mem mem253 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem254 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem255 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_elist elist6 = {.count=(void*)&count3, .ebase=(void*)&ebase0, .inc=(void*)&inc0, .type=MK_TYPE(ELIST)};
static const amed_db_vlist vlist22 = {.base=(void*)&base9, .count=(void*)&count3, .empty_index=1, .inc=(void*)&inc2, .type=MK_TYPE(VLIST)};
static const amed_db_vlist vlist23 = {.base=(void*)&base10, .count=(void*)&count3, .empty_index=1, .inc=(void*)&inc2, .type=MK_TYPE(VLIST)};
static const amed_db_vlist vlist24 = {.base=(void*)&base11, .count=(void*)&count3, .empty_index=1, .inc=(void*)&inc2, .type=MK_TYPE(VLIST)};
static const amed_db_align align8 = {.encodedin=160, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(align), .table=(void*)&tbl_align8, .type=MK_TYPE(ALIGN)};
static const amed_db_mem mem256 = {.align=(void*)&align8, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem257 = {.align=(void*)&align8, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem258 = {.align=(void*)&align8, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_inc inc3 = {.encodedin=84, .has_encodedin=1, .symbol=MK_SYMBOL(INC), .table=(void*)&tbl_inc, .type=MK_TYPE(INC)};
static const amed_db_vlist vlist25 = {.count=(void*)&count3, .inc=(void*)&inc3, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase0};
static const amed_db_vlist vlist26 = {.count=(void*)&count3, .inc=(void*)&inc3, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase1};
static const amed_db_vlist vlist27 = {.count=(void*)&count3, .inc=(void*)&inc3, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase2};
static const amed_db_inc inc4 = {.encodedin=160, .has_encodedin=1, .symbol=MK_SYMBOL(INC), .table=(void*)&tbl_inc1, .type=MK_TYPE(INC)};
static const amed_db_elist elist7 = {.count=(void*)&count4, .ebase=(void*)&ebase1, .inc=(void*)&inc4, .type=MK_TYPE(ELIST)};
static const amed_db_size size7 = {.size=24};
static const amed_db_mem mem259 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .read=1, .size=(void*)&size7, .type=MK_TYPE(MEM)};
static const amed_db_mem mem260 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .read=1, .size=(void*)&size7, .type=MK_TYPE(MEM)};
static const amed_db_mem mem261 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size7, .type=MK_TYPE(MEM)};
static const amed_db_inc inc5 = {.encodedin=23, .has_encodedin=1, .symbol=MK_SYMBOL(INC), .table=(void*)&tbl_inc2, .type=MK_TYPE(INC)};
static const amed_db_elist elist8 = {.count=(void*)&count4, .ebase=(void*)&ebase2, .inc=(void*)&inc5, .type=MK_TYPE(ELIST)};
static const amed_db_size size8 = {.size=48};
static const amed_db_mem mem262 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .read=1, .size=(void*)&size8, .type=MK_TYPE(MEM)};
static const amed_db_mem mem263 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .read=1, .size=(void*)&size8, .type=MK_TYPE(MEM)};
static const amed_db_mem mem264 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size8, .type=MK_TYPE(MEM)};
static const amed_db_inc inc6 = {.encodedin=164, .has_encodedin=1, .symbol=MK_SYMBOL(INC), .table=(void*)&tbl_inc3, .type=MK_TYPE(INC)};
static const amed_db_elist elist9 = {.count=(void*)&count4, .ebase=(void*)&ebase0, .inc=(void*)&inc6, .type=MK_TYPE(ELIST)};
static const amed_db_size size9 = {.size=96};
static const amed_db_mem mem265 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .read=1, .size=(void*)&size9, .type=MK_TYPE(MEM)};
static const amed_db_mem mem266 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .size=(void*)&size9, .type=MK_TYPE(MEM)};
static const amed_db_mem mem267 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size9, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist28 = {.base=(void*)&base9, .count=(void*)&count4, .empty_index=1, .inc=(void*)&inc2, .type=MK_TYPE(VLIST)};
static const amed_db_vlist vlist29 = {.base=(void*)&base10, .count=(void*)&count4, .empty_index=1, .inc=(void*)&inc2, .type=MK_TYPE(VLIST)};
static const amed_db_vlist vlist30 = {.base=(void*)&base11, .count=(void*)&count4, .empty_index=1, .inc=(void*)&inc2, .type=MK_TYPE(VLIST)};
static const amed_db_vlist vlist31 = {.count=(void*)&count4, .inc=(void*)&inc3, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase0};
static const amed_db_vlist vlist32 = {.count=(void*)&count4, .inc=(void*)&inc3, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase1};
static const amed_db_vlist vlist33 = {.count=(void*)&count4, .inc=(void*)&inc3, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase2};
static const amed_db_elist elist10 = {.count=(void*)&count1, .ebase=(void*)&ebase1, .inc=(void*)&inc1, .type=MK_TYPE(ELIST)};
static const amed_db_mem mem268 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem269 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_mem mem270 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_elist elist11 = {.count=(void*)&count1, .ebase=(void*)&ebase2, .inc=(void*)&inc2, .type=MK_TYPE(ELIST)};
static const amed_db_mem mem271 = {.align=(void*)&align8, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem272 = {.align=(void*)&align8, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem273 = {.align=(void*)&align8, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist34 = {.base=(void*)&base9, .count=(void*)&count1, .empty_index=1, .inc=(void*)&inc2, .type=MK_TYPE(VLIST)};
static const amed_db_vlist vlist35 = {.base=(void*)&base10, .count=(void*)&count1, .empty_index=1, .inc=(void*)&inc2, .type=MK_TYPE(VLIST)};
static const amed_db_vlist vlist36 = {.base=(void*)&base11, .count=(void*)&count1, .empty_index=1, .inc=(void*)&inc2, .type=MK_TYPE(VLIST)};
static const amed_db_align align9 = {.optional=1, .type=MK_TYPE(ALIGN), .value=64};
static const amed_db_mem mem274 = {.align=(void*)&align9, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_align align10 = {.optional=1, .type=MK_TYPE(ALIGN), .value=128};
static const amed_db_mem mem275 = {.align=(void*)&align10, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem276 = {.align=(void*)&align9, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem277 = {.align=(void*)&align10, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem278 = {.align=(void*)&align9, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_mem mem279 = {.align=(void*)&align10, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size4, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist37 = {.count=(void*)&count1, .inc=(void*)&inc3, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase0};
static const amed_db_mem mem280 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist38 = {.count=(void*)&count1, .inc=(void*)&inc3, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase1};
static const amed_db_mem mem281 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_vlist vlist39 = {.count=(void*)&count1, .inc=(void*)&inc3, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase2};
static const amed_db_mem mem282 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem283 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem284 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem285 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem286 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem287 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_mem mem288 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .read=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_base base12 = {.datatype=MK_DATATYPE(I64), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(BASE)};
static const amed_db_fdlist fdlist1 = {.base=(void*)&base12, .count=(void*)&count0, .type=MK_TYPE(FDLIST)};
static const amed_db_base base13 = {.datatype=MK_DATATYPE(I32), .encodedin=123, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(BASE)};
static const amed_db_fslist fslist0 = {.base=(void*)&base13, .count=(void*)&count0, .type=MK_TYPE(FSLIST)};
static const amed_db_reg reg114 = {.datatype=MK_DATATYPE(I16), .encodedin=123, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_mem mem289 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(F16), .immoff=(void*)&immoff6, .read=1, .size=(void*)&size3, .type=MK_TYPE(MEM)};
static const amed_db_reg reg115 = {.datatype=MK_DATATYPE(I32), .encodedin=123, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG), .write=1};
static const amed_db_mem mem290 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(F32), .immoff=(void*)&immoff6, .read=1, .size=(void*)&size0, .type=MK_TYPE(MEM)};
static const amed_db_reg reg116 = {.datatype=MK_DATATYPE(I64), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_mem mem291 = {.add=(void*)&add0, .base=(void*)&base1, .datatype=MK_DATATYPE(F64), .immoff=(void*)&immoff6, .read=1, .size=(void*)&size2, .type=MK_TYPE(MEM)};
static const amed_db_lm lm14 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(F16), .immoff=(void*)&immoff13, .read=1, .size=(void*)&size3, .type=MK_TYPE(LM)};
static const amed_db_lm lm15 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(F32), .immoff=(void*)&immoff13, .read=1, .size=(void*)&size0, .type=MK_TYPE(LM)};
static const amed_db_lm lm16 = {.add=(void*)&add0, .base=(void*)&base2, .datatype=MK_DATATYPE(F64), .immoff=(void*)&immoff13, .read=1, .size=(void*)&size2, .type=MK_TYPE(LM)};
static const amed_db_reg reg117 = {.datatype=MK_DATATYPE(I16), .dt_required=1, .encodedin=17, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg9 = {.idx=(void*)&idx6, .reg=(void*)&reg117, .type=MK_TYPE(EREG)};
static const amed_db_reg reg118 = {.datatype=MK_DATATYPE(I32), .dt_required=1, .encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg10 = {.idx=(void*)&idx1, .reg=(void*)&reg118, .type=MK_TYPE(EREG)};
static const amed_db_reg reg119 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg11 = {.idx=(void*)&idx1, .reg=(void*)&reg119, .type=MK_TYPE(EREG)};
static const amed_db_reg reg120 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=17, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg12 = {.idx=(void*)&idx6, .reg=(void*)&reg120, .type=MK_TYPE(EREG)};
static const amed_db_reg reg121 = {.datatype=MK_DATATYPE(S32), .dt_required=1, .encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg13 = {.idx=(void*)&idx1, .reg=(void*)&reg121, .type=MK_TYPE(EREG)};
static const amed_db_reg reg122 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=17, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg14 = {.idx=(void*)&idx6, .reg=(void*)&reg122, .type=MK_TYPE(EREG)};
static const amed_db_reg reg123 = {.datatype=MK_DATATYPE(U32), .dt_required=1, .encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg15 = {.idx=(void*)&idx1, .reg=(void*)&reg123, .type=MK_TYPE(EREG)};
static const amed_db_reg reg124 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg125 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG)};
static const amed_db_reg reg126 = {.datatype=MK_DATATYPE(BF16), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG)};
static const amed_db_reg reg127 = {.encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_reg reg128 = {.encodedin=1, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_reg reg129 = {.encodedin=3, .has_encodedin=1, .symbol=MK_SYMBOL(GPR32), .type=MK_TYPE(REG), .upc=1};
static const amed_db_fpimm fpimm1 = {.datatype=MK_DATATYPE(F16), .dt_required=1, .encodedin=166, .has_encodedin=1, .symbol=MK_SYMBOL(vfpimm), .type=MK_TYPE(FPIMM)};
static const amed_db_fpimm fpimm2 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=166, .has_encodedin=1, .symbol=MK_SYMBOL(vfpimm), .type=MK_TYPE(FPIMM)};
static const amed_db_fpimm fpimm3 = {.datatype=MK_DATATYPE(F64), .dt_required=1, .encodedin=166, .has_encodedin=1, .symbol=MK_SYMBOL(vfpimm), .type=MK_TYPE(FPIMM)};
static const amed_db_imm imm51 = {.datatype=MK_DATATYPE(I8), .dt_required=1, .encodedin=131, .has_encodedin=1, .symbol=MK_SYMBOL(advimm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm52 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=131, .has_encodedin=1, .symbol=MK_SYMBOL(advimm), .type=MK_TYPE(IMM)};
static const amed_db_vreg vreg134 = {.datatype=MK_DATATYPE(I64), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_imm imm53 = {.datatype=MK_DATATYPE(I64), .dt_required=1, .encodedin=131, .has_encodedin=1, .symbol=MK_SYMBOL(advimm), .type=MK_TYPE(IMM)};
static const amed_db_vreg vreg135 = {.datatype=MK_DATATYPE(I64), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_imm imm54 = {.datatype=MK_DATATYPE(I8), .dt_required=1, .encodedin=135, .has_encodedin=1, .symbol=MK_SYMBOL(advimm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm55 = {.datatype=MK_DATATYPE(F32), .dt_required=1, .encodedin=135, .has_encodedin=1, .symbol=MK_SYMBOL(advimm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm56 = {.datatype=MK_DATATYPE(I64), .dt_required=1, .encodedin=135, .has_encodedin=1, .symbol=MK_SYMBOL(advimm), .type=MK_TYPE(IMM)};
static const amed_db_idx idx10 = {.encodedin=168, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg130 = {.datatype=MK_DATATYPE(I8), .encodedin=116, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_ereg ereg16 = {.idx=(void*)&idx10, .reg=(void*)&reg130, .type=MK_TYPE(EREG)};
static const amed_db_idx idx11 = {.encodedin=170, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg131 = {.datatype=MK_DATATYPE(I16), .encodedin=116, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_ereg ereg17 = {.idx=(void*)&idx11, .reg=(void*)&reg131, .type=MK_TYPE(EREG)};
static const amed_db_idx idx12 = {.encodedin=72, .has_encodedin=1, .type=MK_TYPE(IDX)};
static const amed_db_reg reg132 = {.datatype=MK_DATATYPE(I32), .encodedin=116, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG), .write=1};
static const amed_db_ereg ereg18 = {.idx=(void*)&idx12, .reg=(void*)&reg132, .type=MK_TYPE(EREG)};
static const amed_db_reg reg133 = {.encodedin=129, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG)};
static const amed_db_reg reg134 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg19 = {.idx=(void*)&idx10, .reg=(void*)&reg134, .type=MK_TYPE(EREG)};
static const amed_db_reg reg135 = {.datatype=MK_DATATYPE(S16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg20 = {.idx=(void*)&idx11, .reg=(void*)&reg135, .type=MK_TYPE(EREG)};
static const amed_db_reg reg136 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg21 = {.idx=(void*)&idx10, .reg=(void*)&reg136, .type=MK_TYPE(EREG)};
static const amed_db_reg reg137 = {.datatype=MK_DATATYPE(U16), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg22 = {.idx=(void*)&idx11, .reg=(void*)&reg137, .type=MK_TYPE(EREG)};
static const amed_db_reg reg138 = {.datatype=MK_DATATYPE(I32), .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg23 = {.idx=(void*)&idx12, .reg=(void*)&reg138, .type=MK_TYPE(EREG)};
static const amed_db_reg reg139 = {.encodedin=126, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG)};
static const amed_db_reg reg140 = {.encodedin=126, .has_encodedin=1, .pair=1, .read=1, .symbol=MK_SYMBOL(SIMD32), .type=MK_TYPE(REG)};
static const amed_db_specreg specreg4 = {.encodedin=3, .has_encodedin=1, .symbol=MK_SYMBOL(spec_reg), .table=(void*)&tbl_specreg1, .type=MK_TYPE(SPECREG)};
static const amed_db_specreg specreg5 = {.encodedin=3, .has_encodedin=1, .symbol=MK_SYMBOL(spec_reg), .table=(void*)&tbl_specreg2, .type=MK_TYPE(SPECREG)};
static const amed_db_vreg vreg136 = {.datatype=MK_DATATYPE(P8), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg137 = {.datatype=MK_DATATYPE(P8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg138 = {.datatype=MK_DATATYPE(P8), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg139 = {.datatype=MK_DATATYPE(P8), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg140 = {.datatype=MK_DATATYPE(P8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg141 = {.datatype=MK_DATATYPE(P8), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg142 = {.datatype=MK_DATATYPE(I128), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg143 = {.datatype=MK_DATATYPE(P64), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg144 = {.datatype=MK_DATATYPE(P64), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg145 = {.datatype=MK_DATATYPE(I64), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg146 = {.datatype=MK_DATATYPE(S64), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg147 = {.datatype=MK_DATATYPE(S64), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg148 = {.datatype=MK_DATATYPE(S64), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg149 = {.datatype=MK_DATATYPE(U64), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg150 = {.datatype=MK_DATATYPE(U64), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg151 = {.datatype=MK_DATATYPE(U64), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg152 = {.datatype=MK_DATATYPE(S64), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg153 = {.datatype=MK_DATATYPE(S64), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg154 = {.datatype=MK_DATATYPE(S64), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg155 = {.datatype=MK_DATATYPE(U64), .dt_required=1, .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg156 = {.datatype=MK_DATATYPE(U64), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg157 = {.datatype=MK_DATATYPE(U64), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg158 = {.datatype=MK_DATATYPE(S8), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg159 = {.datatype=MK_DATATYPE(S16), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg160 = {.datatype=MK_DATATYPE(S32), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg161 = {.datatype=MK_DATATYPE(U8), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg162 = {.datatype=MK_DATATYPE(U16), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg163 = {.datatype=MK_DATATYPE(U32), .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_imm imm57 = {.arg0=16, .datatype=MK_DATATYPE(U8), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(shift_right), .type=MK_TYPE(IMM)};
static const amed_db_imm imm58 = {.arg0=32, .datatype=MK_DATATYPE(U8), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(shift_right), .type=MK_TYPE(IMM)};
static const amed_db_imm imm59 = {.arg0=64, .datatype=MK_DATATYPE(U8), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(shift_right), .type=MK_TYPE(IMM)};
static const amed_db_imm imm60 = {.arg0=8, .datatype=MK_DATATYPE(U8), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(shift_left), .type=MK_TYPE(IMM)};
static const amed_db_imm imm61 = {.arg0=16, .datatype=MK_DATATYPE(U8), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(shift_left), .type=MK_TYPE(IMM)};
static const amed_db_imm imm62 = {.arg0=32, .datatype=MK_DATATYPE(U8), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(shift_left), .type=MK_TYPE(IMM)};
static const amed_db_imm imm63 = {.arg0=64, .datatype=MK_DATATYPE(U8), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(shift_left), .type=MK_TYPE(IMM)};
static const amed_db_vreg vreg164 = {.datatype=MK_DATATYPE(I16), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg165 = {.datatype=MK_DATATYPE(I16), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg166 = {.datatype=MK_DATATYPE(I32), .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_imm imm64 = {.arg0=8, .datatype=MK_DATATYPE(U8), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(shift_right), .type=MK_TYPE(IMM)};
static const amed_db_imm imm65 = {.datatype=MK_DATATYPE(I64), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm66 = {.datatype=MK_DATATYPE(I128), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_reg reg141 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg24 = {.idx=(void*)&idx1, .reg=(void*)&reg141, .type=MK_TYPE(EREG)};
static const amed_db_imm imm67 = {.datatype=MK_DATATYPE(I64), .encodedin=172, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm68 = {.datatype=MK_DATATYPE(I64), .encodedin=3, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm69 = {.datatype=MK_DATATYPE(I64), .encodedin=48, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm70 = {.datatype=MK_DATATYPE(U8), .type=MK_TYPE(IMM), .value=8};
static const amed_db_imm imm71 = {.datatype=MK_DATATYPE(U8), .type=MK_TYPE(IMM), .value=16};
static const amed_db_imm imm72 = {.datatype=MK_DATATYPE(U8), .type=MK_TYPE(IMM), .value=32};
static const amed_db_imm imm73 = {.datatype=MK_DATATYPE(U8), .encodedin=147, .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_vreg vreg167 = {.datatype=MK_DATATYPE(I16), .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_vreg vreg168 = {.datatype=MK_DATATYPE(I32), .encodedin=112, .has_encodedin=1, .optional=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG), .write=1};
static const amed_db_reg reg142 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg143 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG)};
static const amed_db_reg reg144 = {.datatype=MK_DATATYPE(S8), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG)};
static const amed_db_mem mem292 = {.align=(void*)&align1, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem293 = {.align=(void*)&align1, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem294 = {.align=(void*)&align1, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size1, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem295 = {.align=(void*)&align2, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem296 = {.align=(void*)&align2, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem297 = {.align=(void*)&align2, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem298 = {.align=(void*)&align3, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem299 = {.align=(void*)&align3, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem300 = {.align=(void*)&align3, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem301 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem302 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem303 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem304 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem305 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem306 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem307 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem308 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .pre_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem309 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem310 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem311 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem312 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem313 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem314 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem315 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem316 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem317 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem318 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem319 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .pre_indexed=1, .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem320 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem321 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem322 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem323 = {.align=(void*)&align0, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size4, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem324 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem325 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem326 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem327 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem328 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem329 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem330 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem331 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .pre_indexed=1, .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem332 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem333 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem334 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem335 = {.align=(void*)&align6, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size5, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem336 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem337 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem338 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem339 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem340 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem341 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem342 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem343 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .pre_indexed=1, .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem344 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem345 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem346 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem347 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I64), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size6, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem348 = {.align=(void*)&align4, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem349 = {.align=(void*)&align4, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem350 = {.align=(void*)&align4, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem351 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem352 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem353 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem354 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size7, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem355 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .size=(void*)&size7, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem356 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size7, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem357 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size8, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem358 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .size=(void*)&size8, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem359 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size8, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem360 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .size=(void*)&size9, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem361 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .size=(void*)&size9, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem362 = {.base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size9, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem363 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem364 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem365 = {.align=(void*)&align5, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem366 = {.align=(void*)&align8, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem367 = {.align=(void*)&align8, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem368 = {.align=(void*)&align8, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem369 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem370 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem371 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem372 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .pre_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem373 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .pre_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem374 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .pre_indexed=1, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem375 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I8), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem376 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I16), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem377 = {.align=(void*)&align7, .base=(void*)&base0, .datatype=MK_DATATYPE(I32), .post_indexed=1, .regoff=(void*)&regoff2, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem378 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(F16), .immoff=(void*)&immoff6, .size=(void*)&size3, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem379 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(F32), .immoff=(void*)&immoff6, .size=(void*)&size0, .type=MK_TYPE(MEM), .write=1};
static const amed_db_mem mem380 = {.add=(void*)&add0, .base=(void*)&base6, .datatype=MK_DATATYPE(F64), .immoff=(void*)&immoff6, .size=(void*)&size2, .type=MK_TYPE(MEM), .write=1};
static const amed_db_reg reg145 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=11, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(REG)};
static const amed_db_ereg ereg25 = {.idx=(void*)&idx1, .reg=(void*)&reg145, .type=MK_TYPE(EREG)};
static const amed_db_vbase vbase4 = {.datatype=MK_DATATYPE(I8), .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VBASE)};
static const amed_db_vlist vlist40 = {.count=(void*)&count2, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase4};
static const amed_db_vlist vlist41 = {.count=(void*)&count3, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase4};
static const amed_db_vlist vlist42 = {.count=(void*)&count4, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase4};
static const amed_db_vlist vlist43 = {.count=(void*)&count1, .inc=(void*)&inc1, .type=MK_TYPE(VLIST), .vbase=(void*)&vbase4};
static const amed_db_vreg vreg169 = {.datatype=MK_DATATYPE(I16), .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_vreg vreg170 = {.datatype=MK_DATATYPE(I32), .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD64), .type=MK_TYPE(VREG)};
static const amed_db_reg reg146 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=112, .has_encodedin=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG), .write=1};
static const amed_db_reg reg147 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=116, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG)};
static const amed_db_reg reg148 = {.datatype=MK_DATATYPE(U8), .dt_required=1, .encodedin=114, .has_encodedin=1, .read=1, .symbol=MK_SYMBOL(SIMD128), .type=MK_TYPE(REG)};
static const amed_db_imm imm74 = {.datatype=MK_DATATYPE(I64), .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
static const amed_db_imm imm75 = {.datatype=MK_DATATYPE(I128), .has_encodedin=1, .symbol=MK_SYMBOL(imm), .type=MK_TYPE(IMM)};
